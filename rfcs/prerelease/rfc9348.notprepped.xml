<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" category="std" number="9348" docName="draft-ietf-ipsecme-yang-iptfs-11" submissionType="IETF" consensus="true" obsoletes="" updates="" xml:lang="en" tocInclude="true" symRefs="true" sortRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.14.0 -->
  <front>
    <title abbrev="A YANG Data Model for IP-TFS">A YANG Data Model for IP Traffic Flow Security</title>
    <seriesInfo name="RFC" value="9348"/>
    <author initials="D." surname="Fedyk" fullname="Don Fedyk">
      <organization>LabN Consulting, L.L.C.</organization>
      <address>
        <email>dfedyk@labn.net</email>
      </address>
    </author>
    <author initials="C." surname="Hopps" fullname="Christian Hopps">
      <organization>LabN Consulting, L.L.C.</organization>
      <address>
        <email>chopps@chopps.org</email>
      </address>
    </author>
    <date year="2023" month="January"/>
    <abstract>
      <t>This document describes a YANG module for the management of IP
Traffic Flow Security (IP-TFS) additions to Internet Key Exchange Protocol version 2 (IKEv2) and IPsec.</t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>This document defines a YANG module <xref target="RFC7950" format="default"/> for the management of the IP
Traffic Flow Security (IP-TFS) extensions defined in
<xref target="RFC9347" format="default"/>.  IP-TFS provides enhancements to an IPsec tunnel
Security Association (SA) to provide improved traffic confidentiality. Traffic
confidentiality reduces the ability of traffic analysis to determine identity
and correlate observable traffic patterns.  IP-TFS offers efficiency when
aggregating traffic in fixed-size IPsec tunnel packets.</t>
      <t>The YANG data model in this document conforms to the Network
Management Datastore Architecture (NMDA) defined in <xref target="RFC8342" format="default"/>.</t>
      <t>The published YANG modules for IPsec are defined in
<xref target="RFC9061" format="default"/>. This document 
uses these models as a general IPsec model that is augmented for IP-TFS.
The models in <xref target="RFC9061" format="default"/> provide for both 
an IKE and an IKE-less model.</t>
  </section> 
    <section numbered="true" toc="default">
      <name>Overview</name>
      <t>This document defines configuration and operational parameters of IP Traffic
Flow Security (IP-TFS).  IP-TFS, defined in <xref target="RFC9347" format="default"/>,
defines a security association for tunnel mode IPsec with characteristics
that improve traffic confidentiality and reduce bandwidth efficiency loss.
These documents assume familiarity with the IPsec concepts described
in <xref target="RFC4301" format="default"/>.</t>
      <t>IP-TFS uses tunnel mode to improve confidentiality by hiding inner packet
identifiable information, packet size, and packet timing.  IP-TFS provides a
general capability allowing aggregation of multiple packets in uniform-size outer tunnel IPsec packets. It maintains the outer packet size 
by utilizing combinations of aggregating, padding, and fragmenting inner
packets to fill out the IPsec outer tunnel packet.
Padding is used to fill the packet when no data is available to send.</t>
      <t>This document specifies an extensible configuration model for IP-TFS.  This
version utilizes the capabilities of IP-TFS to configure fixed-size IP-TFS
packets that are transmitted at a constant rate.  This model is structured to
      allow for different types of operation through future augmentation.</t>
      <t>The IP-TFS YANG module augments the IPsec YANG module from
<xref target="RFC9061" format="default"/>.  IP-TFS makes use of IPsec tunnel
mode and adds a small number of configuration items to IPsec tunnel mode.  As
defined in <xref target="RFC9347" format="default"/>, any SA configured to use IP-TFS supports
only IP-TFS packets, i.e., no mixed IPsec modes.</t>
      <t>The behavior for IP-TFS is controlled by the source.
The self-describing format of an IP-TFS packet allows a sending side to adjust
the packet size and timing independently from any receiver.  Both directions
are also independent, e.g., IP-TFS may be run only in one direction.
This means that counters, which are created here for both directions, may 
be 0 or not updated in the case of an SA that uses IP-TFS only in on direction.</t>
      <t>Cases where IP-TFS statistics are active for one direction:</t>
      <ul spacing="normal">
        <li>SA one direction - IP-TFS enabled</li>
        <li>SA both directions - IP-TFS only enabled in one direction</li>
      </ul>
      <t>Case where IP-TFS statistics are active for both directions:</t>
      <ul spacing="normal">
        <li>SA both directions - IP-TFS enable for both directions</li>
      </ul>
      <t>The IP-TFS model supports IP-TFS configuration and operational data.</t>
      <t>This YANG module supports configuration of fixed-size and fixed-rate packets,
as well as elements that may be augmented to support future configuration.   The
protocol specification <xref target="RFC9347" format="default"/> goes beyond this simple,
fixed mode of operation by defining a general format for any type of scheme.
In this document, the outer IPsec packets can be sent with fixed or variable
size (without padding). The configuration allows the fixed packet size to be
determined by the path MTU. The fixed packet size can also be configured if a
value lower than the path MTU is desired.</t>
      <t>Other configuration items include:</t>
      <dl newline="true" spacing="normal">
        <dt>Congestion Control:</dt>
	<dd>A congestion control setting to allow IP-TFS 
to reduce the packet rate when congestion is detected.</dd>
	<dt>Fixed-Rate Configuration:</dt>
	<dd>The IP-TFS tunnel rate can be configured by taking
into account either layer 2 overhead or layer 3 overhead. Layer 3 overhead
is the IP data rate, and layer 2 overhead is the rate of bits on the link. 
The combination of packet size and rate determines the
nominal maximum bandwidth and the transmission interval when fixed-size packets
are used.</dd>
        <dt>User Packet Fragmentation Control:</dt>
	<dd>While fragmentation is recommended
for improved efficiency, a 
configuration is provided if users wish to observe
the effect of no fragmentation on their data flows.</dd>
      </dl>
      <t>The YANG operational data allows the readout of the configured parameters, as
well as the per-SA statistics and error counters for IP-TFS.  Per-SA IPsec packet
statistics are provided as a feature, and per-SA IP-TFS-specific statistics are provided
as another feature.
Both sets of statistics augment the IPsec YANG modules with
counters that allow observation of IP-TFS packet efficiency.</t>
      <t> IPsec YANG
management objects are set in <xref target="RFC9061" format="default"/>. IP-TFS YANG augments the IKE and
the IKE-less models. In these models, the Security Policy
database entry and Security Association entry for an IPsec
tunnel can be augmented with IP-TFS. In addition, 
this model uses YANG types defined in <xref target="RFC6991" format="default"/>.
</t>
    </section>
    <section numbered="true" toc="default">
      <name>YANG Management</name>
      <section numbered="true" toc="default">
        <name>YANG Tree</name>
        <t>The following is the YANG tree diagram <xref target="RFC8340" format="default"/> for the IP-TFS
extensions.</t>
        <sourcecode type="yangtree"><![CDATA[
module: ietf-ipsec-iptfs
  augment /nsfike:ipsec-ike/nsfike:conn-entry/nsfike:spd
            /nsfike:spd-entry/nsfike:ipsec-policy-config
            /nsfike:processing-info/nsfike:ipsec-sa-cfg:
    +--rw traffic-flow-security
       +--rw congestion-control?           boolean
       +--rw packet-size
       |  +--rw use-path-mtu-discovery?   boolean
       |  +--rw outer-packet-size?        uint16
       +--rw (tunnel-rate)?
       |  +--:(l2-fixed-rate)
       |  |  +--rw l2-fixed-rate?          yang:gauge64
       |  +--:(l3-fixed-rate)
       |     +--rw l3-fixed-rate?          yang:gauge64
       +--rw dont-fragment?                boolean
       +--rw max-aggregation-time?         decimal64
       +--rw window-size?                  uint16
       +--rw send-immediately?             boolean
       +--rw lost-packet-timer-interval?   decimal64
  augment /nsfike:ipsec-ike/nsfike:conn-entry/nsfike:child-sa-info:
    +--ro traffic-flow-security
       +--ro congestion-control?           boolean
       +--ro packet-size
       |  +--ro use-path-mtu-discovery?   boolean
       |  +--ro outer-packet-size?        uint16
       +--ro (tunnel-rate)?
       |  +--:(l2-fixed-rate)
       |  |  +--ro l2-fixed-rate?          yang:gauge64
       |  +--:(l3-fixed-rate)
       |     +--ro l3-fixed-rate?          yang:gauge64
       +--ro dont-fragment?                boolean
       +--ro max-aggregation-time?         decimal64
       +--ro window-size?                  uint16
       +--ro send-immediately?             boolean
       +--ro lost-packet-timer-interval?   decimal64
  augment /nsfikels:ipsec-ikeless/nsfikels:spd/nsfikels:spd-entry
            /nsfikels:ipsec-policy-config/nsfikels:processing-info
            /nsfikels:ipsec-sa-cfg:
    +--rw traffic-flow-security
       +--rw congestion-control?           boolean
       +--rw packet-size
       |  +--rw use-path-mtu-discovery?   boolean
       |  +--rw outer-packet-size?        uint16
       +--rw (tunnel-rate)?
       |  +--:(l2-fixed-rate)
       |  |  +--rw l2-fixed-rate?          yang:gauge64
       |  +--:(l3-fixed-rate)
       |     +--rw l3-fixed-rate?          yang:gauge64
       +--rw dont-fragment?                boolean
       +--rw max-aggregation-time?         decimal64
       +--rw window-size?                  uint16
       +--rw send-immediately?             boolean
       +--rw lost-packet-timer-interval?   decimal64
  augment /nsfikels:ipsec-ikeless/nsfikels:sad/nsfikels:sad-entry:
    +--ro traffic-flow-security
       +--ro congestion-control?           boolean
       +--ro packet-size
       |  +--ro use-path-mtu-discovery?   boolean
       |  +--ro outer-packet-size?        uint16
       +--ro (tunnel-rate)?
       |  +--:(l2-fixed-rate)
       |  |  +--ro l2-fixed-rate?          yang:gauge64
       |  +--:(l3-fixed-rate)
       |     +--ro l3-fixed-rate?          yang:gauge64
       +--ro dont-fragment?                boolean
       +--ro max-aggregation-time?         decimal64
       +--ro window-size?                  uint16
       +--ro send-immediately?             boolean
       +--ro lost-packet-timer-interval?   decimal64
  augment /nsfike:ipsec-ike/nsfike:conn-entry/nsfike:child-sa-info:
    +--ro ipsec-stats {ipsec-stats}?
    |  +--ro tx-pkts?        yang:counter64
    |  +--ro tx-octets?      yang:counter64
    |  +--ro tx-drop-pkts?   yang:counter64
    |  +--ro rx-pkts?        yang:counter64
    |  +--ro rx-octets?      yang:counter64
    |  +--ro rx-drop-pkts?   yang:counter64
    +--ro iptfs-inner-pkt-stats {iptfs-stats}?
    |  +--ro tx-pkts?              yang:counter64
    |  +--ro tx-octets?            yang:counter64
    |  +--ro rx-pkts?              yang:counter64
    |  +--ro rx-octets?            yang:counter64
    |  +--ro rx-incomplete-pkts?   yang:counter64
    +--ro iptfs-outer-pkt-stats {iptfs-stats}?
       +--ro tx-all-pad-pkts?       yang:counter64
       +--ro tx-all-pad-octets?     yang:counter64
       +--ro tx-extra-pad-pkts?     yang:counter64
       +--ro tx-extra-pad-octets?   yang:counter64
       +--ro rx-all-pad-pkts?       yang:counter64
       +--ro rx-all-pad-octets?     yang:counter64
       +--ro rx-extra-pad-pkts?     yang:counter64
       +--ro rx-extra-pad-octets?   yang:counter64
       +--ro rx-errored-pkts?       yang:counter64
       +--ro rx-missed-pkts?        yang:counter64
  augment /nsfikels:ipsec-ikeless/nsfikels:sad/nsfikels:sad-entry:
    +--ro ipsec-stats {ipsec-stats}?
    |  +--ro tx-pkts?        yang:counter64
    |  +--ro tx-octets?      yang:counter64
    |  +--ro tx-drop-pkts?   yang:counter64
    |  +--ro rx-pkts?        yang:counter64
    |  +--ro rx-octets?      yang:counter64
    |  +--ro rx-drop-pkts?   yang:counter64
    +--ro iptfs-inner-pkt-stats {iptfs-stats}?
    |  +--ro tx-pkts?              yang:counter64
    |  +--ro tx-octets?            yang:counter64
    |  +--ro rx-pkts?              yang:counter64
    |  +--ro rx-octets?            yang:counter64
    |  +--ro rx-incomplete-pkts?   yang:counter64
    +--ro iptfs-outer-pkt-stats {iptfs-stats}?
       +--ro tx-all-pad-pkts?       yang:counter64
       +--ro tx-all-pad-octets?     yang:counter64
       +--ro tx-extra-pad-pkts?     yang:counter64
       +--ro tx-extra-pad-octets?   yang:counter64
       +--ro rx-all-pad-pkts?       yang:counter64
       +--ro rx-all-pad-octets?     yang:counter64
       +--ro rx-extra-pad-pkts?     yang:counter64
       +--ro rx-extra-pad-octets?   yang:counter64
       +--ro rx-errored-pkts?       yang:counter64
       +--ro rx-missed-pkts?        yang:counter64
]]></sourcecode>
      </section>
      <section numbered="true" toc="default">
        <name>YANG Module</name>
        <t>The following is the YANG module for managing the IP-TFS extensions.
The model contains references to <xref target="RFC9347" format="default"/> and 
	<xref target="RFC5348" format="default"/>.</t>
        <sourcecode name="ietf-ipsec-iptfs@2023-01-31.yang" type="yang" markers="true"><![CDATA[
module ietf-ipsec-iptfs {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ipsec-iptfs";
  prefix iptfs;

  import ietf-i2nsf-ike {
    prefix nsfike;
    reference 
      "RFC 9061: A YANG Data Model for IPsec Flow Protection Based on 
       Software-Defined Networking (SDN), Section 5.2";
  }
  import ietf-i2nsf-ikeless {
    prefix nsfikels;
    reference 
      "RFC 9061: A YANG Data Model for IPsec Flow Protection Based on 
       Software-Defined Networking (SDN), Section 5.3";
  }
  import ietf-yang-types {
    prefix yang;
    reference 
      "RFC 6991: Common YANG Data Types";
  }

  organization
    "IETF IPSECME Working Group (IPSECME)";
  contact
    "WG Web:  <https://datatracker.ietf.org/wg/ipsecme/>
     WG List: <mailto:ipsecme@ietf.org>

     Author: Don Fedyk
             <mailto:dfedyk@labn.net>

     Author: Christian Hopps
             <mailto:chopps@chopps.org>";

  description
    "This module defines the configuration and operational state for
     managing the IP Traffic Flow Security functionality (RFC 9348).

     Copyright (c) 2023 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9348; see
     the RFC itself for full legal notices.";
     
  revision 2023-01-31 {
    description
      "Initial revision";
    reference
      "RFC 9348: A YANG Data Model for IP Traffic Flow Security";
  }

  feature ipsec-stats {
    description
      "This feature indicates the device supports
       per-SA IPsec statistics.";
  }

  feature iptfs-stats {
    description
      "This feature indicates the device supports
       per-SA IP Traffic Flow Security statistics.";
  }

  /*--------------------*/
  /*   groupings        */
  /*--------------------*/

  grouping ipsec-tx-stat-grouping {
    description
      "IPsec outbound statistics";
    leaf tx-pkts {
      type yang:counter64;
      config false;
      description
        "Outbound Packet count";
    }
    leaf tx-octets {
      type yang:counter64;
      config false;
      description
        "Outbound Packet bytes";
    }
    leaf tx-drop-pkts {
      type yang:counter64;
      config false;
      description
        "Outbound dropped packets count";
    }
  }

  grouping ipsec-rx-stat-grouping {
    description
      "IPsec inbound statistics";
    leaf rx-pkts {
      type yang:counter64;
      config false;
      description
        "Inbound Packet count";
    }
    leaf rx-octets {
      type yang:counter64;
      config false;
      description
        "Inbound Packet bytes";
    }
    leaf rx-drop-pkts {
      type yang:counter64;
      config false;
      description
        "Inbound dropped packets count";
    }
  }

  grouping iptfs-inner-tx-stat-grouping {
    description
      "IP-TFS outbound inner packet statistics";
    leaf tx-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS inner packets sent.  This
         count is whole packets only.  A fragmented packet
         counts as one packet.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS)";
    }
    leaf tx-octets {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS inner octets sent.  This is
         inner packet octets only. It does not count padding.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS)";
    }
  }

  grouping iptfs-outer-tx-stat-grouping {
    description
      "IP-TFS outbound inner packet statistics";
    leaf tx-all-pad-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of transmitted IP-TFS packets that
         were all padding with no inner packet data.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3";
    }
    leaf tx-all-pad-octets {
      type yang:counter64;
      config false;
      description
        "Total number transmitted octets of padding added to
         IP-TFS packets with no inner packet data.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3";
    }
    leaf tx-extra-pad-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of transmitted outer IP-TFS packets
         that included some padding.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3.1";
    }
    leaf tx-extra-pad-octets {
      type yang:counter64;
      config false;
      description
        "Total number of transmitted octets of padding added
         to outer IP-TFS packets with data.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3.1";
    }
  }

  grouping iptfs-inner-rx-stat-grouping {
    description
      "IP-TFS inner packet inbound statistics";
    leaf rx-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS inner packets received.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2";
    }
    leaf rx-octets {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS inner octets received.  It does
         not include padding or overhead.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2";
    }
    leaf rx-incomplete-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS inner packets that were
         incomplete.  Usually this is due to fragments that are
         not received.  Also, this may be due to misordering or
         errors in received outer packets.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS)";
    }
  }

  grouping iptfs-outer-rx-stat-grouping {
    description
      "IP-TFS outer packet inbound statistics";
    leaf rx-all-pad-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of received IP-TFS packets that were
         all padding with no inner packet data.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3";
    }
    leaf rx-all-pad-octets {
      type yang:counter64;
      config false;
      description
        "Total number of received octets of padding added to
         IP-TFS packets with no inner packet data.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3";
    }
    leaf rx-extra-pad-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of received outer IP-TFS packets that
         included some padding.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3.1";
    }
    leaf rx-extra-pad-octets {
      type yang:counter64;
      config false;
      description
        "Total number of received octets of padding added to
         outer IP-TFS packets with data.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS), Section 2.2.3.1";
    }
    leaf rx-errored-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS outer packets dropped due to
         errors.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS)";
    }
    leaf rx-missed-pkts {
      type yang:counter64;
      config false;
      description
        "Total number of IP-TFS outer packets missing,
         indicated by a missing sequence number.";
      reference
        "RFC 9347: Aggregation and Fragmentation Mode for
         Encapsulating Security Payload (ESP) and Its Use for
         IP Traffic Flow Security (IP-TFS)";
    }
  }

  grouping iptfs-config {
    description
      "This is the grouping for IP-TFS configuration.";
    container traffic-flow-security {
      description
        "Configure the IPsec TFS in the Security
         Association Database (SAD).";
      leaf congestion-control {
        type boolean;
        default "true";
        description
          "When set to true, the default, this enables the
           congestion control on-the-wire exchange of data that is
           required by congestion control algorithms, as defined by
           RFC 5348.  When set to false, IP-TFS sends fixed-size
           packets over an IP-TFS tunnel at a constant rate.";
        reference
          "RFC 9347: Aggregation and Fragmentation Mode for
           Encapsulating Security Payload (ESP) and Its Use for
           IP Traffic Flow Security (IP-TFS), Section 2.4.2;
           RFC 5348: TCP Friendly Rate Control (TFRC): Protocol
           Specification";
      }
      container packet-size {
        description
          "Packet size is either auto-discovered or manually
           configured.";
        leaf use-path-mtu-discovery {
          type boolean;
          default "true";
          description
            "Utilize path MTU discovery to determine maximum
             IP-TFS packet size.  If the packet size is explicitly
             configured, then it will only be adjusted downward if
             use-path-mtu-discovery is set.";
          reference
            "RFC 9347: Aggregation and Fragmentation Mode for
             Encapsulating Security Payload (ESP) and Its Use for
             IP Traffic Flow Security (IP-TFS), Section 4.2";
        }
        leaf outer-packet-size {
          type uint16;
          units "bytes";
          description
            "On transmission, the size of the outer encapsulating
             tunnel packet (i.e., the IP packet containing
             Encapsulating Security Payload (ESP)).";
          reference
            "RFC 9347: Aggregation and Fragmentation Mode for
             Encapsulating Security Payload (ESP) and Its Use for
             IP Traffic Flow Security (IP-TFS), Section 4.2";
        }
      }
      choice tunnel-rate {
        description
          "The TFS bit rate may be specified at layer 2 wire
           rate or layer 3 packet rate.";
        leaf l2-fixed-rate {
          type yang:gauge64;
          units "bits/second";
          description
            "On transmission, target bandwidth/bit rate in
             bits/second for IP-TFS tunnel.  This fixed rate is the
             nominal timing for the fixed-size packet.  If
             congestion control is enabled, the rate may be
             adjusted down (or up if unset).";
          reference
            "RFC 9347: Aggregation and Fragmentation Mode for
             Encapsulating Security Payload (ESP) and Its Use for
             IP Traffic Flow Security (IP-TFS), Section 4.1";
        }
        leaf l3-fixed-rate {
          type yang:gauge64;
          units "bits/second";
          description
            "On transmission, target bandwidth/bit rate in
             bits/second for IP-TFS tunnel.  This fixed rate is the
             nominal timing for the fixed-size packet.  If
             congestion control is enabled, the rate may be
             adjusted down (or up if unset).";
          reference
            "RFC 9347: Aggregation and Fragmentation Mode for
             Encapsulating Security Payload (ESP) and Its Use for
             IP Traffic Flow Security (IP-TFS), Section 4.1";
        }
      }
      leaf dont-fragment {
        type boolean;
        default "false";
        description
          "On transmission, disable packet fragmentation across
           consecutive IP-TFS tunnel packets; inner packets larger
           than what can be transmitted in outer packets will be
           dropped.";
        reference
          "RFC 9347: Aggregation and Fragmentation Mode for
           Encapsulating Security Payload (ESP) and Its Use for
           IP Traffic Flow Security (IP-TFS), Section 2.2.4 and
           6.1.4";
      }
      leaf max-aggregation-time {
        type decimal64 {
          fraction-digits 6;
        }
        units "milliseconds";
        description
          "On transmission, maximum aggregation time is the
           maximum length of time a received inner packet can be
           held prior to transmission in the IP-TFS tunnel.  Inner
           packets that would be held longer than this time, based
           on the current tunnel configuration, will be dropped
           rather than be queued for transmission.  Maximum
           aggregation time is configurable in milliseconds or
           fractional milliseconds down to 1 nanosecond.";
      }
      leaf window-size {
        type uint16 {
          range "0..65535";
        }
        description
          "On reception, the maximum number of out-of-order
           packets that will be reordered by an IP-TFS receiver
           while performing the reordering operation.  The value 0
           disables any reordering.";
        reference
          "RFC 9347: Aggregation and Fragmentation Mode for
           Encapsulating Security Payload (ESP) and Its Use for
           IP Traffic Flow Security (IP-TFS), Section 2.2.3";
      }
      leaf send-immediately {
        type boolean;
        default "false";
        description
          "On reception, send inner packets as soon as possible; do
           not wait for lost or misordered outer packets. 
           Selecting this option reduces the inner (user) packet
           delay but can amplify out-of-order delivery of the
           inner packet stream in the presence of packet
           aggregation and any reordering.";
        reference
          "RFC 9347: Aggregation and Fragmentation Mode for
           Encapsulating Security Payload (ESP) and Its Use for
           IP Traffic Flow Security (IP-TFS), Section 2.5";
      }
      leaf lost-packet-timer-interval {
        type decimal64 {
          fraction-digits 6;
        }
        units "milliseconds";
        description
          "On reception, this interval defines the length of time
           an IP-TFS receiver will wait for a missing packet before
           considering it lost.  If not using send-immediately,
           then each lost packet will delay inner (user) packets
           until this timer expires.  Setting this value too low
           can impact reordering and reassembly.  The value is
           configurable in milliseconds or fractional milliseconds
           down to 1 nanosecond.";
        reference
          "RFC 9347: Aggregation and Fragmentation Mode for
           Encapsulating Security Payload (ESP) and Its Use for
           IP Traffic Flow Security (IP-TFS), Section 2.2.3";
      }
    }
  }

  /*
   * IP-TFS ike configuration
   */

  augment "/nsfike:ipsec-ike/nsfike:conn-entry/nsfike:spd/"
        + "nsfike:spd-entry/"
        + "nsfike:ipsec-policy-config/"
        + "nsfike:processing-info/"
        + "nsfike:ipsec-sa-cfg" {
    description
      "IP-TFS configuration for this policy.";
    uses iptfs-config;
  }

  augment "/nsfike:ipsec-ike/nsfike:conn-entry/"
        + "nsfike:child-sa-info" {
    description
      "IP-TFS configured on this SA.";
    uses iptfs-config {
      refine "traffic-flow-security" {
        config false;
      }
    }
  }

  /*
   * IP-TFS ikeless configuration
   */

  augment "/nsfikels:ipsec-ikeless/nsfikels:spd/"
        + "nsfikels:spd-entry/"
        + "nsfikels:ipsec-policy-config/"
        + "nsfikels:processing-info/"
        + "nsfikels:ipsec-sa-cfg" {
    description
      "IP-TFS configuration for this policy.";
    uses iptfs-config;
  }

  augment "/nsfikels:ipsec-ikeless/nsfikels:sad/"
        + "nsfikels:sad-entry" {
    description
      "IP-TFS configured on this SA.";
    uses iptfs-config {
      refine "traffic-flow-security" {
        config false;
      }
    }
  }

  /*
   * packet counters
   */

  augment "/nsfike:ipsec-ike/nsfike:conn-entry/"
        + "nsfike:child-sa-info" {
    description
      "Per-SA counters";
    container ipsec-stats {
      if-feature "ipsec-stats";
      config false;
      description
        "IPsec per-SA packet counters. 
         tx = outbound, rx = inbound";
      uses ipsec-tx-stat-grouping;
      uses ipsec-rx-stat-grouping;
    }
    container iptfs-inner-pkt-stats {
      if-feature "iptfs-stats";
      config false;
      description
        "IP-TFS per-SA inner packet counters. 
         tx = outbound, rx = inbound";
      uses iptfs-inner-tx-stat-grouping;
      uses iptfs-inner-rx-stat-grouping;
    }
    container iptfs-outer-pkt-stats {
      if-feature "iptfs-stats";
      config false;
      description
        "IP-TFS per-SA outer packets counters. 
         tx = outbound, rx = inbound";
      uses iptfs-outer-tx-stat-grouping;
      uses iptfs-outer-rx-stat-grouping;
    }
  }

  /*
   * packet counters
   */

  augment "/nsfikels:ipsec-ikeless/nsfikels:sad/"
        + "nsfikels:sad-entry" {
    description
      "Per-SA counters";
    container ipsec-stats {
      if-feature "ipsec-stats";
      config false;
      description
        "IPsec per-SA packet counters. 
         tx = outbound, rx = inbound";
      uses ipsec-tx-stat-grouping;
      uses ipsec-rx-stat-grouping;
    }
    container iptfs-inner-pkt-stats {
      if-feature "iptfs-stats";
      config false;
      description
        "IP-TFS per-SA inner packet counters. 
         tx = outbound, rx = inbound";
      uses iptfs-inner-tx-stat-grouping;
      uses iptfs-inner-rx-stat-grouping;
    }
    container iptfs-outer-pkt-stats {
      if-feature "iptfs-stats";
      config false;
      description
        "IP-TFS per-SA outer packets counters. 
         tx = outbound, rx = inbound";
      uses iptfs-outer-tx-stat-grouping;
      uses iptfs-outer-rx-stat-grouping;
    }
  }
}
]]></sourcecode>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>Updates to the IETF XML Registry</name>
        <t>Per this document, IANA has registered a URI in the "IETF XML Registry" <xref target="RFC3688" format="default"/> as follows.</t>
        <dl newline="false" spacing="compact">
          <dt>URI:</dt>
          <dd>urn:ietf:params:xml:ns:yang:ietf-ipsec-iptfs</dd>
          <dt>Registrant Contact:</dt>
          <dd>The IESG.</dd>
          <dt>XML:</dt>
          <dd>N/A; the requested URI is an XML namespace.</dd>
        </dl>
      </section>
      <section numbered="true" toc="default">
        <name>Updates to the YANG Module Names Registry</name>
        <t>Per this document, IANA has registered one YANG module in the "YANG Module Names"
registry <xref target="RFC6020" format="default"/> as follows.</t>
        <dl newline="false" spacing="compact">
          <dt>Name:</dt>
          <dd>ietf-ipsec-iptfs</dd>
          <dt>Namespace:</dt>
          <dd>urn:ietf:params:xml:ns:yang:ietf-ipsec-iptfs</dd>
          <dt>Prefix:</dt>
          <dd>iptfs</dd>
          <dt>Reference:</dt>
          <dd>RFC 9348</dd>
        </dl>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The YANG module specified in this document defines a schema for data
that is designed to be accessed via network management protocols such
as NETCONF <xref target="RFC6241" format="default"/> or RESTCONF <xref target="RFC8040" format="default"/>. The lowest NETCONF layer is
the secure transport layer, and the mandatory-to-implement secure
transport is Secure Shell (SSH) <xref target="RFC6242" format="default"/>. The lowest RESTCONF layer is
HTTPS, and the mandatory-to-implement secure transport is TLS
<xref target="RFC8446" format="default"/>.</t>
      <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341" format="default"/>
provides the means to restrict access for particular NETCONF or
RESTCONF users to a preconfigured subset of all available NETCONF or
      RESTCONF protocol operations and content.</t>
      <t> There are a number of data nodes defined in this YANG module that are writable/creatable/deletable (i.e., config true, which is the default). These data nodes may be considered sensitive or vulnerable in some network environments. Write operations (e.g., edit-config) to these data nodes without proper protection can have a negative effect on network operations. These are the subtrees and data nodes and their sensitivity/vulnerability:</t>
      <dl spacing="normal" indent="3" newline="false">
        <dt>../traffic-flow-security:</dt>
        <dd>Enabling IP-TFS is controlled by setting the entries
under traffic-flow-security in IKE or IKE-less models.  IP-TFS
is set either to be congestion sensitive or a fixed rate by setting
parameters in this subtree.
</dd>
      </dl>
      <t> Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control read access (e.g., via get, get-config, or notification) to these data nodes. These are the subtrees and data nodes and their sensitivity/vulnerability:
</t>
      <dl spacing="normal" indent="3" newline="false">
        <dt>../iptfs-inner-pkt-stats and ../iptfs-outer-pkt-stats:</dt>
        <dd>
Access to IP-TFS statistics can provide information
that IP-TFS obscures, such as the true activity of the flows
using IP-TFS.
</dd>
      </dl>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      
      <references>
        <name>Normative References</name>
	<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4301.xml"/>
	<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
	<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
	<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>

<reference anchor="RFC9347" target="https://www.rfc-editor.org/info/rfc9347">
<front>
<title>Aggregation and Fragmentation Mode for Encapsulating Security Payload (ESP) and Its Use for IP Traffic Flow Security (IP-TFS)</title>
<author initials="C" surname="Hopps" fullname="Christian Hopps">
  <organization>LabN Consulting, L.L.C.</organization>
</author>
<date month="January" year="2023"/>  
</front>
<seriesInfo name="RFC" value="9347"/>
<seriesInfo name="DOI" value="10.17487/RFC9347"/>
</reference>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9061.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>

      </references>
      <references>
	<name>Informative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5348.xml"/>
      </references>
    </references>
    <section numbered="true" toc="default">
      <name>Examples</name>
      <t>The following examples show configuration and operational data for the IKE-less and IKE cases 
using XML and JSON.  Also, the operational statistics for the IKE-less case
 is illustrated.</t>
      <section numbered="true" toc="default">
        <name>Example XML Configuration</name>
        <t>This example illustrates configuration for IP-TFS in the IKE-less case.   
Note that, since this augments the IPsec IKE-less schema, only a minimal IKE-less configuration 
to satisfy the schema has been populated.</t>
        <figure anchor="sec-example-ip-tfs-xml-configuration">
          <name>Example IP-TFS XML Configuration</name>
          <sourcecode type="xml"><![CDATA[
<i:ipsec-ikeless
  xmlns:i="urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless"
  xmlns:tfs="urn:ietf:params:xml:ns:yang:ietf-ipsec-iptfs">
  <i:spd>
    <i:spd-entry>
      <i:name>protect-policy-1</i:name>
      <i:direction>outbound</i:direction>
      <i:ipsec-policy-config>
        <i:traffic-selector>
          <i:local-prefix>192.0.2.0/16</i:local-prefix>
          <i:remote-prefix>198.51.100.0/16</i:remote-prefix>
        </i:traffic-selector>
        <i:processing-info>
          <i:action>protect</i:action>
          <i:ipsec-sa-cfg>
            <tfs:traffic-flow-security>
             <tfs:congestion-control>true</tfs:congestion-control>
              <tfs:packet-size>
                <tfs:use-path-mtu-discovery
                   >true</tfs:use-path-mtu-discovery>
              </tfs:packet-size>
              <tfs:l2-fixed-rate>1000000000</tfs:l2-fixed-rate>
              <tfs:max-aggregation-time
                 >0.1</tfs:max-aggregation-time>
              <tfs:window-size>5</tfs:window-size>
              <tfs:send-immediately>false</tfs:send-immediately>
              <tfs:lost-packet-timer-interval
                 >0.2</tfs:lost-packet-timer-interval>
            </tfs:traffic-flow-security>
          </i:ipsec-sa-cfg>
        </i:processing-info>
      </i:ipsec-policy-config>
    </i:spd-entry>
  </i:spd>
</i:ipsec-ikeless>
]]></sourcecode>
        </figure>
      </section>
      <section numbered="true" toc="default">
        <name>Example XML Operational Data</name>
        <t>This example illustrates operational data for IP-TFS in the IKE-less case.   
Note that, since this augments the IPsec IKE-less schema only, a minimal IKE-less configuration 
to satisfy the schema has been populated.</t>
        <figure anchor="sec-example-ip-tfs-xml-operational-data">
          <name>Example IP-TFS XML Operational Data</name>
          <sourcecode type="xml"><![CDATA[
<i:ipsec-ikeless
  xmlns:i="urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless"
  xmlns:tfs="urn:ietf:params:xml:ns:yang:ietf-ipsec-iptfs">
  <i:sad>
    <i:sad-entry>
      <i:name>sad-1</i:name>
      <i:ipsec-sa-config>
        <i:spi>1</i:spi>
        <i:traffic-selector>
          <i:local-prefix>2001:db8:1::/48</i:local-prefix>
          <i:remote-prefix>2001:db8:2::/48</i:remote-prefix>
        </i:traffic-selector>
      </i:ipsec-sa-config>
      <tfs:traffic-flow-security>
        <tfs:congestion-control>true</tfs:congestion-control>
        <tfs:packet-size>
          <tfs:use-path-mtu-discovery
            >true</tfs:use-path-mtu-discovery>
        </tfs:packet-size>
        <tfs:l2-fixed-rate>1000000000</tfs:l2-fixed-rate>
        <tfs:max-aggregation-time>0.100</tfs:max-aggregation-time>
        <tfs:window-size>0</tfs:window-size>
        <tfs:send-immediately>true</tfs:send-immediately>
        <tfs:lost-packet-timer-interval
          >0.200</tfs:lost-packet-timer-interval>
      </tfs:traffic-flow-security>
    </i:sad-entry>
  </i:sad>
</i:ipsec-ikeless>
]]></sourcecode>
        </figure>
      </section>
      <section numbered="true" toc="default">
        <name>Example JSON Configuration</name>
        <t>This example illustrates configuration data for IP-TFS in the IKE case.   
Note that, since this augments the IPsec IKE schema, only a minimal IKE configuration 
to satisfy the schema has been populated.</t>
        <figure anchor="sec-example-ip-tfs-json-configuration">
          <name>Example IP-TFS JSON Configuration</name>
          <sourcecode name="" type="json"><![CDATA[
{
  "ietf-i2nsf-ike:ipsec-ike": {
    "ietf-i2nsf-ike:conn-entry": [
      {
        "name": "my-peer-connection",
        "ike-sa-encr-alg": [
          {
            "id": 1,
            "algorithm-type": 12,
            "key-length": 128
          }
          ],
          "local": {
            "local-pad-entry-name": "local-1"
          },
          "remote": {
            "remote-pad-entry-name": "remote-1"
          },
          "ietf-i2nsf-ike:spd": {
          "spd-entry": [
            {
              "name": "protect-policy-1",
              "ipsec-policy-config": {
                "traffic-selector": {
                  "local-prefix": "192.0.2.0/16",
                  "remote-prefix": "198.51.100.0/16"
                },
                "processing-info": {
                  "action": "protect",
                  "ipsec-sa-cfg": {
                    "ietf-ipsec-iptfs:traffic-flow-security": {
                      "congestion-control": true,
                      "l2-fixed-rate": "1000000000",
                      "packet-size": {
                        "use-path-mtu-discovery": true
                      },
                      "max-aggregation-time": "0.1",
                      "window-size": 1,
                      "send-immediately": false,
                      "lost-packet-timer-interval": "0.2"
                    }
                  }
                }
              }
            }
          ]
        }
      }
    ]
  }
}
]]></sourcecode>
        </figure>
      </section>
      <section numbered="true" toc="default">
        <name>Example JSON Operational Data</name>
        <t>This example illustrates operational data for IP-TFS in the IKE case.   
Note that, since this augments the IPsec IKE tree, only a minimal IKE configuration 
to satisfy the schema has been populated.</t>
        <figure anchor="sec-example-ip-tfs-json-operational-data">
          <name>Example IP-TFS JSON Operational Data</name>
          <sourcecode type="json"><![CDATA[
{
  "ietf-i2nsf-ike:ipsec-ike": {
    "ietf-i2nsf-ike:conn-entry": [
      {
        "name": "my-peer-connection",
        "ike-sa-encr-alg": [
        {
          "id": 1,
          "algorithm-type": 12,
          "key-length": 128
        }
        ],
        "local": {
          "local-pad-entry-name": "local-1"
        },
        "remote": {
          "remote-pad-entry-name": "remote-1"
        },
        "ietf-i2nsf-ike:child-sa-info": {
          "ietf-ipsec-iptfs:traffic-flow-security": {
            "congestion-control": true,
            "l2-fixed-rate": "1000000000",
            "packet-size": {
              "use-path-mtu-discovery": true
            },
            "max-aggregation-time": "0.1",
            "window-size": 5,
            "send-immediately": false,
            "lost-packet-timer-interval": "0.2"
          }
        }
      }
    ]
  }
}
]]></sourcecode>
        </figure>
      </section>
      <section numbered="true" toc="default">
        <name>Example JSON Operational Statistics</name>
        <t>This example shows the JSON formatted statistics for IP-TFS.
Note a unidirectional IP-TFS transmit side is illustrated, with arbitrary numbers for transmit.</t>
        <figure anchor="sec-example-ip-tfs-json-statistics">
          <name>Example IP-TFS JSON Statistics</name>
          <sourcecode type="json"><![CDATA[
{
  "ietf-i2nsf-ikeless:ipsec-ikeless": {
    "sad": {
      "sad-entry": [
        {
          "name": "sad-1",
          "ipsec-sa-config": {
            "spi": 1,
            "traffic-selector": {
              "local-prefix": "192.0.2.1/16",
              "remote-prefix": "198.51.100.0/16"
            }
          },
          "ietf-ipsec-iptfs:traffic-flow-security": {
            "window-size": 5,
            "send-immediately": false,
            "lost-packet-timer-interval": "0.2"
          },
          "ietf-ipsec-iptfs:ipsec-stats": {
            "tx-pkts": "300",
            "tx-octets": "80000",
            "tx-drop-pkts": "2",
            "rx-pkts": "0",
            "rx-octets": "0",
            "rx-drop-pkts": "0"
          },
          "ietf-ipsec-iptfs:iptfs-inner-pkt-stats": {
            "tx-pkts": "250",
            "tx-octets": "75000",
            "rx-pkts": "0",
            "rx-octets": "0",
            "rx-incomplete-pkts": "0"
          },
          "ietf-ipsec-iptfs:iptfs-outer-pkt-stats": {
            "tx-all-pad-pkts": "40",
            "tx-all-pad-octets": "40000",
            "tx-extra-pad-pkts": "200",
            "tx-extra-pad-octets": "30000",
            "rx-all-pad-pkts": "0",
            "rx-all-pad-octets": "0",
            "rx-extra-pad-pkts": "0",
            "rx-extra-pad-octets": "0",
            "rx-errored-pkts": "0",
            "rx-missed-pkts": "0"
          },
          "ipsec-sa-state": {
            "sa-lifetime-current": {
              "time": 80000,
              "bytes": "400606",
              "packets": 1000,
              "idle": 5
            }
          }
        }
      ]
    }
  }
}
]]></sourcecode>
        </figure>
      </section>
    </section>
    <section numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>The authors would like to thank <contact fullname="Eric Kinzie"/>, <contact fullname="Jürgen Schönwälder"/>, <contact fullname="Lou Berger"/>, and <contact fullname="Tero Kivinen"/>
for their feedback and review on the YANG module.</t>
    </section>
  </back>
</rfc>
