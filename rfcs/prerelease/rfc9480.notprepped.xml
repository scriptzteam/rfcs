<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
 <!ENTITY nbsp    "&#160;">
 <!ENTITY zwsp   "&#8203;">
 <!ENTITY nbhy   "&#8209;">
 <!ENTITY wj     "&#8288;">
]> 

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" 
	submissionType="IETF" 
	category="std" 
	consensus="true" 
	updates="4210, 5912, 6712" 
	docName="draft-ietf-lamps-cmp-updates-23" 
	number="9480"
	ipr="trust200902" 
	obsoletes="" 
	xml:lang="en" 
	tocInclude="true" 
	tocDepth="4" 
	symRefs="true" 
	sortRefs="true" 
	version="3">

  <front>
    <title abbrev="CMP Updates">Certificate Management Protocol (CMP) Updates</title>
    <seriesInfo name="RFC" value="9480"/>
   <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
      <organization abbrev="Siemens">Siemens</organization>
      <address>
        <postal>
          <street>Werner-von-Siemens-Strasse 1</street>
          <code>80333</code>
          <city>Munich</city>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com</uri>
      </address>
    </author>
   <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
      <organization abbrev="Siemens">Siemens</organization>
      <address>
        <postal>
          <street>Werner-von-Siemens-Strasse 1</street>
          <code>80333</code>
          <city>Munich</city>
          <country>Germany</country>
        </postal>
        <email>david.von.oheimb@siemens.com</email>
        <uri>https://www.siemens.com</uri>
      </address>
    </author>
	<author fullname="John Gray" initials="J." surname="Gray">
	  <organization abbrev="Entrust">Entrust</organization>
	  <address>
	    <postal>
	      <street>1187 Park Place</street>
	      <region>MN</region>
	      <code>55379</code>
	      <city>Minneapolis</city>
	      <country>United States of America</country>
	    </postal>
	    <email>john.gray@entrust.com</email>
	    <uri>https://www.entrust.com</uri>
	  </address>
	</author>
	<date year="2023" month="November"/>
    <area>sec</area>
    <workgroup>lamps</workgroup>
    <keyword>CMP</keyword>
    <abstract>
      <t>This document contains a set of updates to the syntax of Certificate Management Protocol (CMP) version 2 and its HTTP transfer mechanism. This document updates RFCs 4210, 5912, and 6712.</t>
      <t>The aspects of CMP updated in this document are using EnvelopedData instead of EncryptedValue, clarifying the handling of p10cr messages, improving the crypto agility, as well as adding new general message types, extended key usages to identify certificates for use with CMP, and well-known URI path segments.</t>
	  <t>CMP version 3 is introduced to enable signaling support of EnvelopedData instead of EncryptedValue and signal the use of an explicit hash AlgorithmIdentifier in certConf messages, as far as needed.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="Introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>While using <xref target="RFC4210" format="default">CMP</xref> in industrial and Internet of Things environments and developing the <xref target="RFC9483" format="default">Lightweight CMP Profile</xref>, some limitations were identified in the original CMP specification. This document updates <xref target="RFC4210" format="default"/> and <xref target="RFC6712" format="default"/> to overcome these limitations.</t>
      <t>Among other updates, this document improves the crypto agility of CMP, which allows more flexibility for future advances in cryptography.</t>
      <t>This document also introduces new extended key usages to identify CMP endpoints on registration and certification authorities.</t>
	  <t>The main content of <xref target="RFC4210" format="default"/> and <xref target="RFC6712" format="default"/> remains unchanged. This document lists all sections that are updated, replaced, or added to the current text of the respective RFCs.</t>
	  <t>The authors acknowledge that the style of the document is hard to read because the original RFCs must be read along with this document to get the complete content.  The working group decided to use this approach in order to keep the changes to <xref target="RFC4210" format="default"/> and <xref target="RFC6712" format="default"/> to the required minimum.  This was meant to speed up the editorial process and to minimize the effort spent on reviewing the full text of the original documents.</t>
          <t>However, <xref
target="I-D.ietf-lamps-rfc4210bis" format="default"/> and
<xref target="I-D.ietf-lamps-rfc6712bis" format="default"/> are intended to obsolete RFCs 4210 and 6712, respectively; these documents also include the changes listed in this document.</t>
      <section anchor="Convention_Terminology" numbered="true" toc="default">
        <name>Convention and Terminology</name>
	        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
        <t keepWithNext="true">Technical terminology is used in conformance with <xref target="RFC4210" format="default"/>, <xref target="RFC4211" format="default"/>, and <xref target="RFC5280" format="default"/>. The following key words are used:</t>
        <dl newline="false" spacing="normal" indent="7">
          <dt>CA:</dt>
          <dd>Certification authority, which issues certificates.</dd>
          <dt>RA:</dt>
          <dd>Registration authority, an optional system component to which a CA delegates certificate management functions, such as authorization checks.</dd>
          <dt>KGA:</dt>
          <dd>Key generation authority, which generates key pairs on behalf of an EE. The KGA could be colocated with an RA or a CA.</dd>
          <dt>EE:</dt>
          <dd>End entity, a user, device, or service that holds a PKI certificate. An identifier for the EE is given as its subject of the certificate.</dd>
        </dl>
      </section>
    </section>
    <section anchor="CMP-Updates" numbered="true" toc="default">
      <name>Updates to RFC 4210 - Certificate Management Protocol (CMP)</name>
      <section anchor="CMP-1.1" numbered="true" toc="default">
        <name>New Section 1.1 - Changes Since RFC 4210</name>
        <t>The following subsection describes feature updates to <xref target="RFC4210" format="default"/>. They are always related to the base specification. Hence, references to the original sections in <xref target="RFC4210" format="default"/> are used whenever possible.</t>
        <t keepWithNext="true">Insert this section after the current <xref target="RFC4210" sectionFormat="of" section="1"/>:</t>
        <t keepWithNext="true">1.1.	Changes Since RFC 4210</t>
        <t>The following updates are made in this document:</t>
        <ul spacing="normal">
          <li>Adding new extended key usages for various CMP server types, e.g., registration authority and certification authority, to express the authorization of the entity identified in the certificate containing the respective extended key usage extension that acts as the indicated PKI management entity.</li>
          <li>Extending the description of multiple protection to cover additional use cases, e.g., batch processing of messages.</li>
          <li>Offering EnvelopedData as the preferred choice next to EncryptedValue to better support crypto agility in CMP. Note that, according to <xref target="RFC4211" format="default" sectionFormat="comma" section="2.1"/>, point 9, the use of the EncryptedValue structure has been deprecated in favor of the EnvelopedData structure. <xref target="RFC4211" format="default"/> offers the EncryptedKey structure a choice of EncryptedValue and EnvelopedData for migration to EnvelopedData. For reasons of completeness and consistency, the type EncryptedValue has been exchanged in all occurrences in <xref target="RFC4210" format="default"/>.  This includes the protection of centrally generated private keys, encryption of certificates, and protection of revocation passphrases. To properly differentiate the support of EnvelopedData instead of EncryptedValue, CMP version 3 is introduced in case a transaction is supposed to use EnvelopedData.</li>
		  <li>Offering an optional hashAlg field in CertStatus that supports confirmation of certificates signed with signature algorithms, e.g., preparing for upcoming post quantum algorithms, not directly indicating a specific hash algorithm to use to compute the certHash.</li>
          <li>Adding new general message types to request CA certificates, a root CA update, a certificate request template, or a Certificate Revocation List (CRL) update.</li>
          <li>Extending the usage of polling to p10cr, certConf, rr, genm, and error messages.</li>
	  <li>Deleting the mandatory algorithm profile in <xref target="RFC4210" format="default" sectionFormat="of" section="D.2"/> and referring to <xref target="RFC9481" sectionFormat="of" section="7" format="default">CMP Algorithms</xref>.</li>
        </ul>
      </section>
      <section anchor="CMP-4.5" numbered="true" toc="default">
        <name>New Section 4.5 - Extended Key Usage</name>
        <t>The following subsection introduces a new extended key usage for CMP servers authorized to centrally generate key pairs on behalf of end entities.</t>
        <t keepWithNext="true">Insert this section after <xref target="RFC4210" sectionFormat="of" section="4.4.3"/>:</t>
        <t keepWithNext="true">4.5.	Extended Key Usage</t>
        <t>The extended key usage (EKU) extension indicates the purposes for which the certified key pair may be used. Therefore, it restricts the use of a certificate to specific applications.</t>
        <t>A CA may want to delegate parts of its duties to other PKI management entities. This section provides a mechanism to both prove this delegation and enable an automated means for checking the authorization of this delegation. Such delegation may also be expressed by other means, e.g., explicit configuration.</t>
        <t>To offer automatic validation for the delegation of a role by a CA to another entity, the certificates used for CMP message protection or signed data for central key generation <bcp14>MUST</bcp14> be issued by the delegating CA and <bcp14>MUST</bcp14> contain the respective EKUs. This proves the authorization of this entity by delegating CA to act in the given role, as described below.</t>
        <t keepWithNext="true">The OIDs to be used for these EKUs are:</t>
		<sourcecode type="asn.1" ><![CDATA[  
   id-kp-cmcCA OBJECT IDENTIFIER ::= { 
      iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) kp(3) 27 }

   id-kp-cmcRA OBJECT IDENTIFIER ::= { 
      iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) kp(3) 28 }

   id-kp-cmKGA OBJECT IDENTIFIER ::= { 
      iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) kp(3) 32 }
      ]]></sourcecode>
		<t>Note: <xref target="RFC6402" section="2.10" sectionFormat="of" format="default"/> specifies OIDs for a Certificate Management over CMS (CMC) CA and a CMC RA. As the functionality of a CA and RA is not specific to any certificate management protocol (such as CMC or CMP), these EKUs are reused by CMP.</t>
        <t keepWithNext="true">The meaning of the id-kp-cmKGA EKU is as follows:</t>
        <dl newline="false" spacing="normal" indent="10">
          <dt>CMP KGA:</dt>
          <dd>CMP key generation authorities are CAs or are identified by the id-kp-cmKGA extended key usage.  The CMP KGA knows the private key it generated on behalf of the end entity.  This is a very sensitive service and needs specific authorization, which by default is with the CA certificate itself.  The CA may delegate its authorization by placing the id-kp-cmKGA extended key usage in the certificate used to authenticate the origin of the generated private key. The authorization may also be determined through local configuration of the end entity.</dd>
        </dl>
      </section>
      <section anchor="CMP-5.1.1" numbered="true" toc="default">
        <name>Update Section 5.1.1 - PKI Message Header</name>
		<t><xref target="RFC4210" section="5.1.1" sectionFormat="of" format="default"/> describes the PKI message header. This document introduces the new version 3, indicating support of EnvelopedData as specified in <xref target="CMP-5.2.2"/> and hashAlg as specified in <xref       
target="CMP-5.3.18"/>.</t>
		<t keepWithNext="true">Replace the ASN.1 syntax of PKIHeader and the subsequent description of pvno with the following text:</t>
		<sourcecode type="asn.1" ><![CDATA[  
   PKIHeader ::= SEQUENCE {
      pvno                INTEGER     { cmp1999(1), cmp2000(2),
                                        cmp2021(3) },
      sender              GeneralName,
      recipient           GeneralName,
      messageTime     [0] GeneralizedTime         OPTIONAL,
      protectionAlg   [1] AlgorithmIdentifier{ALGORITHM, {...}}
                          OPTIONAL,
      senderKID       [2] KeyIdentifier           OPTIONAL,
      recipKID        [3] KeyIdentifier           OPTIONAL,
      transactionID   [4] OCTET STRING            OPTIONAL,
      senderNonce     [5] OCTET STRING            OPTIONAL,
      recipNonce      [6] OCTET STRING            OPTIONAL,
      freeText        [7] PKIFreeText             OPTIONAL,
      generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                          InfoTypeAndValue     OPTIONAL
   }

   PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
   ]]></sourcecode>
		<t>The usage of the protocol version number (pvno) is described in Section <xref target="RFC4210" sectionFormat="bare" section="7"/>.</t>
      </section>
      <section anchor="CMP-5.1.1.3" numbered="true" toc="default">
        <name>New Section 5.1.1.3 - CertProfile</name>
		<t><xref target="RFC4210" section="5.1.1" sectionFormat="of" format="default"/> defines the PKIHeader and id-it OIDs to be used in the generalInfo field. This section introduces id-it-certProfile.</t>
		<t>Insert this section after <xref target="RFC4210" sectionFormat="of" section="5.1.1.2"/>:</t>
		<t>5.1.1.3. CertProfile</t>
		<t>This is used by the EE to indicate specific certificate profiles, e.g., when requesting a new certificate or a certificate request template; see Section 5.3.19.16.</t>
		<sourcecode type="asn.1" ><![CDATA[  
   id-it-certProfile  OBJECT IDENTIFIER ::= {id-it 21}
   CertProfileValue ::= SEQUENCE SIZE (1..MAX) OF UTF8String
           ]]></sourcecode>
		<t>When used in an ir/cr/kur/genm, the value <bcp14>MUST NOT</bcp14> contain more elements than the number of CertReqMsg or InfoTypeAndValue elements and the certificate profile names refer to the elements in the given order.</t>
		<t>When used in a p10cr, the value <bcp14>MUST NOT</bcp14> contain multiple certificate profile names.</t>
      </section>
      <section anchor="CMP-5.1.3.1" numbered="true" toc="default">
        <name>Update Section 5.1.3.1 - Shared Secret Information</name>
		<t><xref target="RFC4210" section="5.1.3.1" sectionFormat="of" format="default"/> describes the protection of a PKIMessage based on message authentication code (MAC) using the algorithm id-PasswordBasedMac.</t>
		<t>Replace the first paragraph with the following text:</t>
		<t>In this case, the sender and recipient share secret information with sufficient entropy (established via out-of-band means or from a previous PKI management operation). PKIProtection will contain a MAC value and the protectionAlg <bcp14>MAY</bcp14> be one of the options described in <xref target="RFC9481" format="default">CMP Algorithms</xref>. The PasswordBasedMac is specified as follows (see also <xref target="RFC4211" format="default"></xref> and <xref target="RFC9045" format="default"></xref>):</t>
		<t>Replace the last paragraph with the following text (Note: This fixes Errata ID 2616):</t>
		<t>Note: It is <bcp14>RECOMMENDED</bcp14> that the fields of PBMParameter remain constant throughout the messages of a single transaction (e.g., ir/ip/certConf/pkiConf) to reduce the overhead associated with PasswordBasedMac computation.</t>
      </section>
      <section anchor="CMP-5.1.3.4" numbered="true" toc="default">
        <name>Replace Section 5.1.3.4 - Multiple Protection</name>
        <t><xref target="RFC4210" section="5.1.3.4" sectionFormat="of" format="default"/> describes the nested message. This document also enables using nested messages for batch-delivery  transport of PKI messages between PKI management entities and with mixed body types.</t>
        <t keepWithNext="true">Replace the text of the section with the following text:</t>
		<t keepWithNext="true">5.1.3.4.  Multiple Protection</t>
        <t>When receiving a protected PKI message, a PKI management entity, such as an RA, <bcp14>MAY</bcp14> forward that message along with adding its own protection (which is a MAC or a signature, depending on the information and certificates shared between the RA and the CA).  Additionally, multiple PKI messages <bcp14>MAY</bcp14> be aggregated.  There are several use cases for such messages.</t>
        <ul spacing="normal">
          <li>The RA confirms having validated and authorized a message and forwards the original message unchanged.</li>
          <li>The RA modifies the message(s) in some way (e.g., adds or modifies particular field values or adds new extensions) before forwarding them; then, it <bcp14>MAY</bcp14> create its own desired PKIBody.  If the changes made by the RA to PKIMessage break the POP of a certificate request, the RA <bcp14>MUST</bcp14> set the popo field to RAVerified. It <bcp14>MAY</bcp14> include the original PKIMessage from the EE in the generalInfo field of PKIHeader of a nested message (to accommodate, for example, cases in which the CA wishes to check POP or other information on the original EE message). The infoType to be used in this situation is {id-it 15} (see Section <xref target="RFC4210" sectionFormat="bare" section= "5.3.19"/> for the value of id-it), and the infoValue is PKIMessages (contents <bcp14>MUST</bcp14> be in the same order as the message in PKIBody).</li>
          <li>A PKI management entity collects several messages that are to be forwarded in the same direction and forwards them in a batch. Request messages can be transferred as batch upstream (towards the CA); response or announce messages can be transferred as batch downstream (towards an RA but not to the EE). For instance, this can be used when bridging an off-line connection between two PKI management entities.</li>
        </ul>
        <t keepWithNext="true">These use cases are accomplished by nesting the messages within a new PKI message.  The structure used is as follows:</t>
		<sourcecode type="asn.1" ><![CDATA[  
   NestedMessageContent ::= PKIMessages
                ]]></sourcecode>
      </section>
      <section anchor="CMP-5.2.2" numbered="true" toc="default">
        <name>Replace Section 5.2.2 - Encrypted Values</name>
        <t><xref target="RFC4210" section="5.2.2" sectionFormat="of" format="default"/> describes the use of EncryptedValue to transport encrypted data. This document extends the encryption of data to preferably use EnvelopedData.</t>
        <t keepWithNext="true">Replace the text of the section with the following text:</t>
		<t keepWithNext="true">5.2.2.  Encrypted Values</t>
        <t>Where encrypted data (in this specification, private keys, certificates, or revocation passphrase) is sent in PKI messages, the EncryptedKey data structure is used.</t>
		<sourcecode type="asn.1" ><![CDATA[  
   EncryptedKey ::= CHOICE {
      encryptedValue        EncryptedValue, -- deprecated
      envelopedData     [0] EnvelopedData }
                ]]></sourcecode>
        <t>See <xref target="RFC4211" format="default">Certificate Request Message Format (CRMF)</xref> for EncryptedKey and EncryptedValue syntax and <xref target="RFC5652" format="default">Cryptographic Message Syntax (CMS)</xref> for EnvelopedData syntax. Using the EncryptedKey data structure offers the choice to either use EncryptedValue (for backward compatibility only) or EnvelopedData.  The use of the EncryptedValue structure has been deprecated in favor of the EnvelopedData structure.  Therefore, it is <bcp14>RECOMMENDED</bcp14> to use EnvelopedData.</t>
		<t>Note: The EncryptedKey structure defined in <xref target="RFC4211" format="default">CRMF</xref> is reused here, which makes the update backward compatible. Using the new syntax with the untagged default choice EncryptedValue is bits-on-the-wire compatible with the old syntax.</t>
		<t>To indicate support for EnvelopedData, the pvno cmp2021 has been introduced.  Details on the usage of the protocol version number (pvno) are described in Section <xref target="RFC4210" sectionFormat="bare" section="7"/>.</t>
        <t>The EncryptedKey data structure is used in CMP to transport a private key, certificate, or revocation passphrase in encrypted form.</t>
        <t keepWithNext="true">EnvelopedData is used as follows:</t>
        <ul spacing="normal">
          <li>It contains only one RecipientInfo structure because the content is encrypted only for one recipient.</li>
          <li>It may contain a private key in the AsymmetricKeyPackage structure, as defined in <xref target="RFC5958" format="default"/>, that is wrapped in a SignedData structure, as specified in <xref target="RFC5652" sectionFormat="of" section="5">CMS</xref> and <xref target="RFC8933" format="default"/>, and signed by the Key Generation Authority.</li>
          <li>It may contain a certificate or revocation passphrase directly in the encryptedContent field.</li>
        </ul>
        <t>The content of the EnvelopedData structure, as specified in <xref target="RFC5652" sectionFormat="of" section="6">CMS</xref>, <bcp14>MUST</bcp14> be encrypted using a newly generated symmetric content-encryption key. This content-encryption key <bcp14>MUST</bcp14> be securely provided to the recipient using one of three key management techniques. </t>
        <t keepWithNext="true">The choice of the key management technique to be used by the sender depends on the credential available at the recipient:</t>
        <ul spacing="normal">
	  <li>recipient's certificate with an algorithm identifier and a        
public key that supports key transport and where any given key usage extension 
allows keyEncipherment: The content-encryption key will be protected using the 
key transport key management technique, as specified in <xref target="RFC5652"
sectionFormat="of" section="6.2.1">CMS</xref>.</li>
          <li>recipient's certificate with an algorithm identifier and a        
public key that supports key agreement and where any given key usage extension 
allows keyAgreement: The content-encryption key will be protected using the     
key agreement key management technique, as specified in <xref target="RFC5652"
sectionFormat="of" section="6.2.2">CMS</xref>.</li>
          <li>a password or shared secret: The content-encryption key will be   
protected using the password-based key management technique, as specified in    
<xref target="RFC5652" sectionFormat="of" section="6.2.4">CMS</xref>.</li>
        </ul>
      </section>
      <section anchor="CMP-5.2.9" numbered="true" toc="default">
        <name>New Section 5.2.9 - GeneralizedTime</name>
        <t>The following subsection points implementers to <xref target="RFC5280"/> regarding usage of GeneralizedTime.</t>
        <t keepWithNext="true">Insert this section after <xref target="RFC4210" sectionFormat="of" section="5.2.8.4"/>:</t>
        <t>5.2.9 GeneralizedTime</t>
		<t>GeneralizedTime is a standard ASN.1 type and <bcp14>SHALL</bcp14> be used as specified in <xref target="RFC5280" section="4.1.2.5.2" sectionFormat="of" format="default"/>.</t>
      </section>
      <section anchor="CMP-5.3.4" numbered="true" toc="default">
        <name>Update Section 5.3.4 - Certification Response</name>
        <t><xref target="RFC4210" section="5.3.4" sectionFormat="of" format="default"/> describes the Certification Response. This document updates the syntax by using the parent structure EncryptedKey instead of EncryptedValue, as described in <xref target="CMP-5.2.2" format="default"/> above. Additionally, it clarifies the certReqId to be used in response to a p10cr message.</t>
        <t keepWithNext="true">Replace the ASN.1 syntax with the following text (Note: This also fixes Errata ID 3949 and 4078):</t>
		<sourcecode type="asn.1" ><![CDATA[  
   CertRepMessage ::= SEQUENCE {
       caPubs          [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                           OPTIONAL,
       response            SEQUENCE OF CertResponse
   }

   CertResponse ::= SEQUENCE {
       certReqId           INTEGER,
       status              PKIStatusInfo,
       certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
       rspInfo             OCTET STRING        OPTIONAL
       -- analogous to the id-regInfo-utf8Pairs string defined
       -- for regInfo in CertReqMsg [RFC4211]
   }
   
   CertifiedKeyPair ::= SEQUENCE {
      certOrEncCert       CertOrEncCert,
      privateKey      [0] EncryptedKey        OPTIONAL,
      -- See [RFC4211] for comments on encoding.
      publicationInfo [1] PKIPublicationInfo  OPTIONAL
   }

   CertOrEncCert ::= CHOICE {
      certificate     [0] CMPCertificate,
      encryptedCert   [1] EncryptedKey
   }
                ]]></sourcecode>
		<t keepWithNext="true">Add the following as a new paragraph right after the ASN.1 syntax:</t>
		<t>A p10cr message contains exactly one CertificationRequestInfo data structure, as specified in <xref target="RFC2986" format="default">PKCS #10</xref>, but no certReqId.  Therefore, the certReqId in the corresponding Certification Response (cp) message <bcp14>MUST</bcp14> be set to -1.</t>
        <t keepWithNext="true">Add the following as new paragraphs to the end of the section:</t>
        <t>The use of EncryptedKey is described in Section <xref target="RFC4210" sectionFormat="bare" section="5.2.2"/>.</t>
		<t>Note: To indicate support for EnvelopedData, the pvno cmp2021 has been introduced. Details on the usage of different protocol version numbers (pvno) are described in Section <xref target="RFC4210" sectionFormat="bare" section="7"/>.</t>
      </section>
      <section anchor="CMP-5.3.18" numbered="true" toc="default">
        <name>Update Section 5.3.18 - Certificate Confirmation Content</name>
        <t>This section introduces an optional hashAlg field to the CertStatus type used in certConf messages to explicitly specify the hash algorithm for those certificates where no hash algorithm is specified in the signatureAlgorithm field.</t>
        <t keepWithNext="true">Replace the ASN.1 Syntax of CertStatus with the following text:</t>
		<sourcecode type="asn.1" ><![CDATA[  
   CertStatus ::= SEQUENCE {
      certHash    OCTET STRING,
      certReqId   INTEGER,
      statusInfo  PKIStatusInfo OPTIONAL,
      hashAlg [0] AlgorithmIdentifier{DIGEST-ALGORITHM, {...}}
                  OPTIONAL
   }
                ]]></sourcecode>
        <t>The hashAlg field <bcp14>SHOULD</bcp14> be used only in exceptional cases where the signatureAlgorithm of the certificate to be confirmed does not specify a hash algorithm in the OID or in the parameters. In such cases, e.g., for EdDSA, the hashAlg <bcp14>MUST</bcp14> be used to specify the hash algorithm to be used for calculating the certHash value. Otherwise, the certHash value <bcp14>SHALL</bcp14> be computed using the same hash algorithm as used to create and verify the certificate signature. If hashAlg is used, the CMP version indicated by the certConf message header must be cmp2021(3).</t>
      </section>
      <section anchor="CMP-5.3.19.2" numbered="true" toc="default">
        <name>Update Section 5.3.19.2 - Signing Key Pair Types</name>
        <t>The following section clarifies the usage of the Signing Key Pair Types on referencing elliptic curves.</t>
        <t keepWithNext="true">Insert this note at the end of <xref target="RFC4210" sectionFormat="of" section="5.3.19.2"/>:</t>
        <t>Note: In case several elliptic curves are supported, several id-ecPublicKey elements as defined in <xref target="RFC5480" format="default"/> need to be given, one per named curve.</t>
      </section>
      <section anchor="CMP-5.3.19.3" numbered="true" toc="default">
        <name>Update Section 5.3.19.3 - Encryption/Key Agreement Key Pair Types</name>
        <t>The following section clarifies the use of the Encryption/Key Agreement Key Pair Types on referencing elliptic curves.</t>
        <t>Insert this note at the end of <xref target="RFC4210" sectionFormat="of" section="5.3.19.3"/>:</t>
        <t keepWithNext="true">Note: In case several elliptic curves are supported, several id-ecPublicKey elements as defined in <xref target="RFC5480" format="default"/> need to be given, one per named curve.</t>
      </section>
      <section anchor="CMP-5.3.19.9" numbered="true" toc="default">
        <name>Replace Section 5.3.19.9 - Revocation Passphrase</name>
        <t><xref target="RFC4210" section="5.3.19.9" sectionFormat="of" format="default"/> describes the provisioning of a revocation passphrase for authenticating a later revocation request. This document updates the handling by using the parent structure EncryptedKey instead of EncryptedValue to transport this information, as described in <xref target="CMP-5.2.2" format="default"/> above.</t>
        <t keepWithNext="true">Replace the text of the section with the following text:</t>
		<t keepWithNext="true">5.3.19.9.  Revocation Passphrase</t>
        <t>This <bcp14>MAY</bcp14> be used by the EE to send a passphrase to a CA/RA for the purpose of authenticating a later revocation request (in the case that the appropriate signing private key is no longer available to authenticate the request).  See Appendix <xref target="RFC4210" sectionFormat="bare" section="B"/> for further details on the use of this mechanism.</t>
		<sourcecode type="asn.1" ><![CDATA[  
   GenMsg:    {id-it 12}, EncryptedKey
   GenRep:    {id-it 12}, < absent >
                ]]></sourcecode>
        <t>The use of EncryptedKey is described in Section <xref target="RFC4210" sectionFormat="bare" section="5.2.2"/>.</t>
      </section>
      <section anchor="CMP-5.3.19.14" numbered="true" toc="default">
        <name>New Section 5.3.19.14 - CA Certificates</name>
        <t>The following subsection describes PKI general messages using id-it-caCerts. The intended use is specified in <xref target="RFC9483" sectionFormat="of" section="4.3">the Lightweight CMP Profile</xref>.</t>
        <t keepWithNext="true">Insert this section after <xref target="RFC4210" sectionFormat="of" section="5.3.19.13"/>:</t>
        <t keepWithNext="true">5.3.19.14. CA Certificates</t>
        <t>This <bcp14>MAY</bcp14> be used by the client to get CA certificates.</t>
		<sourcecode type="asn.1" ><![CDATA[  
   GenMsg:    {id-it 17}, < absent >
   GenRep:    {id-it 17}, SEQUENCE SIZE (1..MAX) OF
                          CMPCertificate | < absent >
                ]]></sourcecode>
      </section>
      <section anchor="CMP-5.3.19.15" numbered="true" toc="default">
        <name>New Section 5.3.19.15 - Root CA Certificate Update</name>
        <t>The following subsection describes PKI general messages using id-it-rootCaCert and id-it-rootCaKeyUpdate. The use is specified in <xref target="RFC9483" sectionFormat="of" section="4.3">the Lightweight CMP Profile </xref>.</t>
        <t keepWithNext="true">Insert this section after the new Section 5.3.19.14:</t>
        <t keepWithNext="true">5.3.19.15. Root CA Certificate Update</t>
        <t>This <bcp14>MAY</bcp14> be used by the client to get an update of a root CA certificate, which is provided in the body of the request message.  In contrast to the ckuann message, this approach follows the request/response model.</t>
		<t>The EE <bcp14>SHOULD</bcp14> reference its current trust anchor in a TrustAnchor structure in the request body, giving the root CA certificate if available; otherwise, the public key value of the trust anchor is given.</t>
		<sourcecode type="asn.1" ><![CDATA[  
   GenMsg:    {id-it 20}, RootCaCertValue | < absent >
   GenRep:    {id-it 18}, RootCaKeyUpdateContent | < absent >

   RootCaCertValue ::= CMPCertificate

   RootCaKeyUpdateValue ::= RootCaKeyUpdateContent

   RootCaKeyUpdateContent ::= SEQUENCE {
      newWithNew       CMPCertificate,
      newWithOld   [0] CMPCertificate OPTIONAL,
      oldWithNew   [1] CMPCertificate OPTIONAL
      }
                ]]></sourcecode>
		<t>Note: In contrast to CAKeyUpdAnnContent, this type offers omitting newWithOld and oldWithNew in the GenRep message, depending on the needs of the EE.</t>
      </section>
      <section anchor="CMP-5.3.19.16" numbered="true" toc="default">
        <name>New Section 5.3.19.16 - Certificate Request Template</name>
        <t>The following subsection introduces the PKI general message using id-it-certReqTemplate. Details are specified in <xref target="RFC9483" sectionFormat="of" section="4.3">the Lightweight CMP Profile </xref>.</t>
        <t keepWithNext="true">Insert this section after the new Section 5.3.19.15:</t>
        <t keepWithNext="true">5.3.19.16. Certificate Request Template</t>
        <t>This <bcp14>MAY</bcp14> be used by the client to get a template containing requirements for certificate request attributes and extensions. The controls id-regCtrl-algId and id-regCtrl-rsaKeyLen <bcp14>MAY</bcp14> contain details on the types of subject public keys the CA is willing to certify.</t>
        <t>The id-regCtrl-algId control <bcp14>MAY</bcp14> be used to identify a cryptographic algorithm (see <xref target="RFC5280" section="4.1.2.7" sectionFormat="of" format="default"/>) other than rsaEncryption. The algorithm field <bcp14>SHALL</bcp14> identify a cryptographic algorithm. The contents of the optional parameters field will vary according to the algorithm identified. For example, when the algorithm is set to id-ecPublicKey, the parameters identify the elliptic curve to be used; see <xref target="RFC5480" format="default"/>.</t>
        <t>The id-regCtrl-rsaKeyLen control <bcp14>SHALL</bcp14> be used for algorithm rsaEncryption and <bcp14>SHALL</bcp14> contain the intended modulus bit length of the RSA key.</t>
        <t keepWithNext="true"/>
		<sourcecode type="asn.1" ><![CDATA[  
   GenMsg:    {id-it 19}, < absent >
   GenRep:    {id-it 19}, CertReqTemplateContent | < absent >

   CertReqTemplateValue  ::= CertReqTemplateContent

   CertReqTemplateContent ::= SEQUENCE {
     certTemplate           CertTemplate,
     keySpec                Controls OPTIONAL }

   Controls  ::= SEQUENCE SIZE (1..MAX) OF AttributeTypeAndValue
   
   id-regCtrl-algId OBJECT IDENTIFIER ::= { iso(1)
      identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) pkip(5) regCtrl(1) 11 }

   AlgIdCtrl ::= AlgorithmIdentifier{ALGORITHM, {...}}

   id-regCtrl-rsaKeyLen OBJECT IDENTIFIER ::= { iso(1)
      identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) pkip(5) regCtrl(1) 12 }

   RsaKeyLenCtrl ::= INTEGER (1..MAX)
                ]]></sourcecode>
        <t>The CertReqTemplateValue contains the prefilled certTemplate to be used for a future certificate request.  The publicKey field in the certTemplate <bcp14>MUST NOT</bcp14> be used.  In case the PKI management entity wishes to specify supported public-key algorithms, the keySpec field <bcp14>MUST</bcp14> be used.  One AttributeTypeAndValue per supported algorithm or RSA key length <bcp14>MUST</bcp14> be used.</t>
        <t>Note: The controls ASN.1 type is defined in <xref target="RFC4211" sectionFormat="of" section="6">CRMF</xref>.</t>
      </section>
      <section anchor="CMP-5.3.19.17" numbered="true" toc="default">
        <name>New Section 5.3.19.17 - CRL Update Retrieval</name>
        <t>The following subsection introduces the PKI general message using id-it-crlStatusList and id-it-crls. Details are specified in <xref target="RFC9483" sectionFormat="of" section="4.3">the Lightweight CMP Profile</xref>. Insert this section after the new Section 5.3.19.16:</t>
		<t>5.3.19.17. CRL Update Retrieval</t>
		<t>This <bcp14>MAY</bcp14> be used by the client to get new CRLs, specifying the source of the CRLs and the thisUpdate value of the latest CRL it already has, if available.  A CRL source is given either by a DistributionPointName or the GeneralNames of the issuing CA.  The DistributionPointName should be treated as an internal pointer to identify a CRL that the server already has and not as a way to ask the server to fetch CRLs from external locations. The server shall only provide those CRLs that are more recent than the ones indicated by the client.</t>
		<sourcecode type="asn.1" ><![CDATA[  
   GenMsg:    {id-it 22}, SEQUENCE SIZE (1..MAX) OF CRLStatus
   GenRep:    {id-it 23}, SEQUENCE SIZE (1..MAX) OF
                            CertificateList  |  < absent >

   CRLSource ::= CHOICE {
      dpn          [0] DistributionPointName,
      issuer       [1] GeneralNames }

   CRLStatus ::= SEQUENCE {
      source       CRLSource,
      thisUpdate   Time OPTIONAL }
                ]]></sourcecode>
      </section>
      <section anchor="CMP-5.3.21" numbered="true" toc="default">
        <name>Update Section 5.3.21 - Error Message Content</name>
        <t><xref target="RFC4210" section="5.3.21" sectionFormat="of"/> describes the regular use of error messages.  This document adds a use by a PKI management entity to initiate delayed delivery in response to certConf, rr, and genm requests and to error messages.</t>
        <t>Replace the first sentence of the first paragraph with the following one:</t>
        <t>This data structure <bcp14>MAY</bcp14> be used by an EE, CA, or RA to convey error information and by a PKI management entity to initiate delayed delivery of responses.</t>
        <t>Replace the second paragraph with the following text:</t>
        <t>This message <bcp14>MAY</bcp14> be generated at any time during a PKI transaction. If the client sends this request, the server <bcp14>MUST</bcp14> respond with a PKIConfirm response or another ErrorMsg if any part of the header is not valid. In case a PKI management entity sends an error message to the EE with the pKIStatusInfo field containing the status "waiting", the EE will initiate polling
 as described in Section <xref target="RFC4210" sectionFormat="bare" section="5.3.22"/>.  Otherwise, both sides <bcp14>MUST</bcp14> treat this message as the end of the transaction (if a transaction is in progress).</t>
      </section>
      <section anchor="CMP-5.3.22" numbered="true" toc="default">
        <name>Replace Section 5.3.22 - Polling Request and Response</name>
        <t><xref target="RFC4210" section="5.3.22" sectionFormat="of" format="default"/> describes when and how polling messages are used for ir, cr, and kur messages.  This document extends the polling mechanism for outstanding responses to any kind of request message. This update also fixes the inconsistent use of the terms 'pReq' vs. 'pollReq' and 'pRep' vs. 'pollRep'.</t>
        <t keepWithNext="true">Replace <xref target="RFC4210" sectionFormat="of" section="5.3.22"/> with following text:</t>
		<t>This pair of messages is intended to handle scenarios in which the client needs to poll the server to determine the status of an outstanding response (i.e., when the "waiting" PKIStatus has been received).</t>
		<sourcecode type="asn.1" ><![CDATA[  
   PollReqContent ::= SEQUENCE OF SEQUENCE {
      certReqId    INTEGER }

   PollRepContent ::= SEQUENCE OF SEQUENCE {
      certReqId    INTEGER,
      checkAfter   INTEGER,  -- time in seconds
      reason       PKIFreeText OPTIONAL }
                ]]></sourcecode>
		<t>In response to an ir, cr, p10cr, or kur request message, polling is initiated with an ip, cp, or kup response message containing status "waiting". For any type of request message, polling can be initiated with an error response messages with status "waiting". The following clauses describe how polling messages are used.  It is assumed that multiple certConf messages can be sent during transactions.  There will be one sent in response to each ip, cp, or kup that contains a CertStatus for an issued certificate.</t>
          <ol spacing="normal" type="%d">
		    <li>In response to an ip, cp, or kup message, an EE will send a certConf for all issued certificates and expect a PKIconf for each certConf.  An EE will send a pollReq message in response to each CertResponse element of an ip, cp, or kup message with status "waiting" and in response to an error message with status "waiting".  Its certReqId <bcp14>MUST</bcp14> be either the index of a CertResponse data structure with status "waiting" or -1, referring to the complete response.</li>
            <li>In response to a pollReq, a CA/RA will return an ip, cp, or kup if one or more of the still pending requested certificates are ready or the final response to some other type of request is available; otherwise, it will return a pollRep.</li>
            <li>If the EE receives a pollRep, it will wait for at least the number of seconds given in the checkAfter field before sending another pollReq.</li>
			<li>If the EE receives an ip, cp, or kup, then it will be treated in the same way as the initial response; if it receives any other response, then this will be treated as the final response to the original request.</li>
          </ol>
		<t keepWithNext="true">The following client-side state machine describes polling for individual CertResponse elements.</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
                            START
                              |
                              v
                           Send ir
                              | ip
                              v
                         Check status
                         of returned <------------------------+
                            certs                             |
                              |                               |
    +------------------------>|<------------------+           |
    |                         |                   |           |
    |        (issued)         v       (waiting)   |           |
  Add to <----------- Check CertResponse ------> Add to       |
 conf list           for each certificate      pending list   |
                              /                               |
                             /                                |
                (conf list) /     (empty conf list)           |
                           /                     ip           |
                          /                 +-----------------+
   (empty pending list)  /                  |    pollRep
     END <---- Send certConf        Send pollReq---------->Wait
                      |                 ^   ^               |
                      |                 |   |               |
                      +-----------------+   +---------------+
                         (pending list)
                ]]></artwork>
		<t keepWithNext="true">In the following exchange, the end entity is enrolling for two certificates in one request.</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
 Step  End Entity                       PKI
 --------------------------------------------------------------------
 1   Format ir
 2                    -> ir      ->
 3                                    Handle ir
 4                                    Manual intervention is
                                      required for both certs
 5                    <- ip      <-
 6   Process ip
 7   Format pollReq
 8                    -> pollReq  ->
 9                                    Check status of cert requests
 10                                   Certificates not ready
 11                                   Format pollRep
 12                   <- pollRep  <-
 13  Wait
 14  Format pollReq
 15                   -> pollReq  ->
 16                                   Check status of cert requests
 17                                   One certificate is ready
 18                                   Format ip
 19                   <- ip       <-
 20  Handle ip
 21  Format certConf
 22                   -> certConf ->
 23                                   Handle certConf
 24                                   Format ack
 25                   <- pkiConf   <-
 26  Format pollReq
 27                   -> pollReq  ->
 28                                   Check status of certificate
 29                                   Certificate is ready
 30                                   Format ip
 31                   <- ip       <-
 31  Handle ip
 32  Format certConf
 33                   -> certConf ->
 34                                   Handle certConf
 35                                   Format ack
 36                   <- pkiConf  <-
                ]]></artwork>
		<t keepWithNext="true">The following client-side state machine describes polling for a complete response message.</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
                                Start
                                  |
                                  | Send request
                                  |
             +----------- Receive response ------------+
             |                                         |
             | ip/cp/kup/error with                    | other
             | status "waiting"                        | response
             |                                         |
             v                                         |
 +------> Polling                                      |
 |           |                                         |
 |           | Send pollReq                            |
 |           | Receive response                        |
 |           |                                         |
 |   pollRep | other response                          |
 +-----------+------------------->+<-------------------+
                                  |
                                  v
                            Handle response
                                  |
                                  v
                                 End
                ]]></artwork>
		<t keepWithNext="true">In the following exchange, the end entity is sending a general message request, and the response is delayed by the server.</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
 Step  End Entity                       PKI
 --------------------------------------------------------------------
 1   Format genm
 2                  -> genm     ->
 3                                 Handle genm
 4                                 delay in response is necessary
 5                                 Format error message "waiting"
                                   with certReqId set to -1 
 6                   <- error   <-
 7   Process error                    
 8   Format pollReq 
 9                   -> pollReq ->
 10                                Check status of original request
                                   general message response not ready
 11                                Format pollRep
 12                  <- pollRep <-
 13  Wait
 14  Format pollReq
 15                  -> pollReq ->
 16                                Check status of original request
                                   general message response is ready
 17                                Format genp
 18                  <- genp    <-
 19  Handle genp
                ]]></artwork>
      </section>
      <section anchor="CMP-7" numbered="true" toc="default">
        <name>Update Section 7 - Version Negotiation</name>
		<t><xref target="RFC4210" section="7" sectionFormat="of" format="default"/> describes the use of CMP versions. This document describes the handling of the additional CMP version cmp2021, which is introduced to indicate support of EnvelopedData and hashAlg.</t>
		<t keepWithNext="true">Replace the text of the second paragraph with the following text:</t>
		<t>If a client knows the protocol version(s) supported by the server (e.g., from a previous PKIMessage exchange or via some out-of-band means), then it <bcp14>MUST</bcp14> send a PKIMessage with the highest version supported by both it and the server.  If a client does not know what version(s) the server supports, then it <bcp14>MUST</bcp14> send a PKIMessage using the highest version it supports with the following exception. Version cmp2021 <bcp14>SHOULD</bcp14> only be used if cmp2021 syntax is needed for the request being sent or for the expected response.</t>
		<t>Note: Using cmp2000 as the default pvno is done to avoid extra message exchanges for version negotiation and to foster compatibility with cmp2000 implementations. Version cmp2021 syntax is only needed if a message exchange uses hashAlg (in CertStatus) or EnvelopedData.</t>
      </section>
      <section anchor="CMP-7.1.1" numbered="true" toc="default">
        <name>Update Section 7.1.1 - Clients Talking to RFC 2510 Servers</name>
		<t><xref target="RFC4210" section="7.1.1" sectionFormat="of" format="default"/> describes the behavior of a client sending a cmp2000 message talking to a cmp1999 server, as specified in <xref target="RFC2510" format="default"/>. This document extends the section to clients with any higher version than cmp1999.</t>
		<t keepWithNext="true">Replace the first sentence of <xref target="RFC4210" sectionFormat="of" section="7.1.1"/> with the following text:</t>
		<t>If, after sending a message with a protocol version number higher than cmp1999, a client receives an ErrorMsgContent with a version of cmp1999, then it <bcp14>MUST</bcp14> abort the current transaction.</t>
      </section>
      <section anchor="CMP-8.4" numbered="true" toc="default">
        <name>Add Section 8.4 - Private Keys for Certificate Signing and CMP Message Protection</name>
		<t>The following subsection addresses the risk arising from reusing the CA private key for CMP message protection.</t>
		<t>Insert this section after <xref target="RFC4210" sectionFormat="of" section="8.3"/>  (Note: This fixes Errata ID 5731):</t>
		<t>8.4. Private Keys for Certificate Signing and CMP Message Protection</t>
		<t>A CA should not reuse its certificate signing key for other purposes, such as protecting CMP responses and TLS connections. This way, exposure to other parts of the system and the number of uses of this particularly critical key are reduced to a minimum.</t>
      </section>
      <section anchor="CMP-8.5" numbered="true" toc="default">
        <name>Add Section 8.5 - Entropy of Random Numbers, Key Pairs, and Shared Secret Information</name>
		<t>The following subsection addresses the risk arising from low entropy of random numbers, asymmetric keys, and shared secret information.</t>
		<t>Insert this section after the new Section 8.4:</t>
		<t>8.5. Entropy of Random Numbers, Key Pairs, and Shared Secret Information</t>
		<t>Implementations must generate nonces and private keys from random input. The use of inadequate pseudorandom number generators (PRNGs) to generate cryptographic keys can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys and to search the resulting small set of possibilities than brute-force searching the whole key space. As an example of predictable random numbers, see <xref target="CVE-2008-0166" format="default"/>; consequences of low-entropy random numbers are discussed in <xref target="MiningPsQs" format="default">Mining Your Ps and Qs</xref>. The generation of quality random numbers is difficult. <xref target="ISO.20543-2019" format="default">ISO/IEC 20543:2019</xref>, <xref target="NIST_SP_800_90Ar1" format="default">NIST SP 800-90A Rev.1</xref>, <xref target="AIS31" format="default">BSI AIS 31 V2.0</xref>, and other specifications offer valuable guidance in this area.</t>
		<t>If shared secret information is generated by a cryptographically secure random number generator (CSRNG), it is safe to assume that the entropy of the shared secret information equals its bit length. If no CSRNG is used, the entropy of shared secret information depends on the details of the generation process and cannot be measured securely after it has been generated. If user-generated passwords are used as shared secret information, their entropy cannot be measured and are typically insufficient for protected delivery of centrally generated keys or trust anchors.</t>
		<t>If the entropy of shared secret information protecting the delivery of a centrally generated key pair is known, it should not be less than the security strength of that key pair; if the shared secret information is reused for different key pairs, the security of the shared secret information should exceed the security strength of each individual key pair.</t>
		<t>For the case of a PKI management operation that delivers a new trust anchor (e.g., a root CA certificate) using caPubs or genm that is (a) not concluded in a timely manner or (b) where the shared secret information is reused for several key management operations, the entropy of the shared secret information, if known, should not be less than the security strength of the trust anchor being managed by the operation. The shared secret information should have an entropy that at least matches the security strength of the key material being managed by the operation. Certain use cases may require shared secret information that may be of a low security strength, e.g., a human-generated password. It is <bcp14>RECOMMENDED</bcp14> that such secret information be limited to a single PKI management operation. </t>
      </section>
      <section anchor="CMP-8.6" numbered="true" toc="default">
        <name>Add Section 8.6 - Trust Anchor Provisioning Using CMP Messages</name>
		<t>The following subsection addresses the risk arising from in-band provisioning of new trust anchors in a PKI management operation.</t>
		<t>Insert this section after the new Section 8.5:</t>
		<t>8.6. Trust Anchor Provisioning Using CMP Messages</t>
		<t>A provider of trust anchors, which may be an RA involved in configuration management of its clients, <bcp14>MUST NOT</bcp14> include to-be-trusted CA certificates in a CMP message unless the specific deployment scenario can ensure that it is adequate that the receiving EE trusts these certificates, e.g., by loading them into its trust store.</t>
		<t>Whenever an EE receives in a CMP message a CA certificate to be used as a trust anchor (for example in the caPubs field of a certificate response or in a general response), it <bcp14>MUST</bcp14> properly authenticate the message sender with existing trust anchor information without requiring the new trust anchors included in the message.</t>
		<t>Additionally, the EE <bcp14>MUST</bcp14> verify that the sender is an authorized source of trust anchors.  This authorization is governed by local policy and typically indicated using shared secret information or with a signature-based message protection using a certificate issued by a PKI that is explicitly authorized for this purpose.</t>
      </section>
      <section anchor="CMP-8.7" numbered="true" toc="default">
        <name>Add Section 8.7 - Authorizing Requests for Certificates with Specific EKUs</name>
		<t>The following subsection addresses the security considerations to follow when authorizing requests for certificates containing specific EKUs.</t>
		<t>Insert this section after new Section 8.6:</t>
		<t>8.7.  Authorizing Requests for Certificates with Specific EKUs</t>
		<t>When a CA issues a certificate containing extended key usage extensions as defined in Section 4.5, this expresses delegation of an authorization that originally is only with the CA certificate itself. Such delegation is a very sensitive action in a PKI and therefore special care must be taken when approving such certificate requests to ensure that only legitimate entities receive a certificate containing such an EKU.</t>
      </section>
      <section anchor="CMP-B" numbered="true" toc="default">
        <name>Update Appendix B - The Use of Revocation Passphrase</name>
        <t><xref target="RFC4210" sectionFormat="of" section="B"/> describes the use of the revocation passphrase. As this document updates <xref target="RFC4210" format="default"/> to utilize the parent structure EncryptedKey instead of EncryptedValue as described in <xref target="CMP-5.2.2" format="default"/> above, the description is updated accordingly.</t>
        <t keepWithNext="true">Replace the first bullet point of this section with the following text:</t>
        <ul spacing="normal">
          <li>The OID and value specified in Section <xref target="RFC4210" sectionFormat="bare" section="5.3.19.9"/> <bcp14>MAY</bcp14> be sent in a GenMsg message at any time or <bcp14>MAY</bcp14> be sent in the generalInfo field of the PKIHeader of any PKIMessage at any time.  (In particular, the EncryptedKey structure as described in Section <xref target="RFC4210" sectionFormat="bare" section="5.2.2"/> may be sent in the header of the certConf message that confirms acceptance of certificates requested in an initialization request or certificate request message.)  This conveys a revocation passphrase chosen by the entity to the relevant CA/RA. When EnvelopedData is used, this is in the decrypted bytes of the encryptedContent field. When EncryptedValue is used, this is in the decrypted bytes of the encValue field. Furthermore, the transfer is accomplished with appropriate confidentiality characteristics.</li>
        </ul>
        <t keepWithNext="true">Replace the third bullet point of this section with the following text:</t>
        <ul spacing="normal">
          <li>Either the localKeyId attribute of EnvelopedData as specified in <xref target="RFC2985" format="default"/> or the valueHint field of EncryptedValue <bcp14>MAY</bcp14> contain a key identifier (chosen by the entity, along with the passphrase itself) to assist in later retrieval of the correct passphrase (e.g., when the revocation request is constructed by the entity and received by the CA/RA).</li>
        </ul>
      </section>
      <section anchor="CMP-C" numbered="true" toc="default">
        <name>Update Appendix C - Request Message Behavioral Clarifications</name>
        <t><xref target="RFC4210" sectionFormat="of" section="C"/> provides clarifications to the request message behavior. As this document updates <xref target="RFC4210" format="default"/> to utilize the parent structure EncryptedKey instead of EncryptedValue as described in <xref target="CMP-5.2.2" format="default"/> above, the description is updated accordingly.</t>
        <t keepWithNext="true">Replace the comment within the ASN.1 syntax coming after the definition of POPOSigningKey with the following text (Note: This fixes Errata ID 2615):</t>
	<sourcecode type="asn.1" ><![CDATA[  
-- **********
-- * For the purposes of this specification, the ASN.1 comment
-- * given in [RFC4211] pertains not only to certTemplate but
-- * also to the altCertTemplate control.
-- **********
-- * The signature (using "algorithmIdentifier") is on the
-- * DER-encoded value of poposkInput (i.e., the "value" OCTETs
-- * of the POPOSigningKeyInput DER).  NOTE: If CertReqMsg
-- * certReq certTemplate (or the altCertTemplate control)
-- * contains the subject and publicKey values, then poposkInput
-- * MUST be omitted and the signature MUST be computed on the
-- * DER-encoded value of CertReqMsg certReq (or the DER-
-- * encoded value of AltCertTemplate).  If
-- * certTemplate/altCertTemplate does not contain both the
-- * subject and public key values (i.e., if it contains only
-- * one of these or neither), then poposkInput MUST be present
-- * and MUST be signed.
-- **********
                ]]></sourcecode>
        <t keepWithNext="true">Replace the ASN.1 syntax of POPOPrivKey with     
the following text:</t>
                <sourcecode type="asn.1" ><![CDATA[                             
POPOPrivKey ::= CHOICE {                                                        
    thisMessage       [0] BIT STRING,   -- deprecated                           
    subsequentMessage [1] SubsequentMessage,                                    
    dhMAC             [2] BIT STRING,   -- deprecated                           
    agreeMAC          [3] PKMACValue,                                           
    encryptedKey      [4] EnvelopedData }                                       
-- **********
-- * When using CMP V2, the encrypted value MUST be transferred in               
-- * the thisMessage field that is given as BIT STRING in [RFC4211],
-- * but it requires EncryptedValue. Therefore, this document makes             
-- * the behavioral clarification for CMP V2 of specifying that the             
-- * contents of "thisMessage" MUST be encoded as an                            
-- * EncryptedValue and then wrapped in a BIT STRING.                           
-- * When using CMP V3, the encrypted value MUST be transferred                  
-- * in the encryptedKey field, as specified in Section 5.2.2.                   
-- **********
                ]]></sourcecode>		
      </section>
      <section anchor="CMP-D.1" numbered="true" toc="default">
        <name>Update Appendix D.1. - General Rules for Interpretation of These Profiles</name>
		<t><xref target="RFC4210" sectionFormat="of" section="D.1"/> provides general rules for interpretation of the PKI management messages profiles specified in Appendices <xref target="RFC4210" sectionFormat="bare" section="D"/> and <xref target="RFC4210" sectionFormat="bare" section="E"/> of <xref target="RFC4210"/>. This document updates a sentence regarding the new protocol version cmp2021.</t>
		<t keepWithNext="true">Replace the last sentence of the first paragraph of the section with the following text:</t>
		<t>Mandatory fields are not mentioned if they have an obvious value (e.g., in this version of these profiles, pvno is always cmp2000).</t>
      </section>
      <section anchor="CMP-D.2" numbered="true" toc="default">
        <name>Update Appendix D.2. - Algorithm Use Profile</name>
        <t><xref target="RFC4210" sectionFormat="of" section="D.2" format="default"/> provides a list of algorithms that implementations must support when claiming conformance with PKI management message profiles, as specified in <xref target="RFC4210" sectionFormat="of" section="D.2">CMP</xref>. This document redirects to the new algorithm profile, as specified in <xref target="RFC9481" section="7.1" sectionFormat="of" format="default">CMP Algorithms</xref>.</t>
        <t keepWithNext="true">Replace the text of the section with the following text:</t>
		<t keepWithNext="true">D.2. Algorithm Use Profile</t>
        <t>For specifications of algorithm identifiers and respective conventions for conforming implementations, please refer to <xref target="RFC9481" sectionFormat="of" section="7.1">CMP Algorithms</xref>.</t>
      </section>
      <section anchor="CMP-D.4" numbered="true" toc="default">
        <name>Update Appendix D.4. - Initial Registration/Certification (Basic Authenticated Scheme)</name>
        <t><xref target="RFC4210" sectionFormat="of" section="D.4" format="default"/> provides the initial registration/certification scheme.  This scheme shall continue using EncryptedValue for backward compatibility reasons.</t>
        <t keepWithNext="true">Replace the line specifying protectionAlg of the Initialization Response message with the following text (Note: This fixes Errata ID 5201):</t>
		<sourcecode type="asn.1" ><![CDATA[  
protectionAlg        MSG_MAC_ALG
                ]]></sourcecode>
        <t keepWithNext="true">Replace the comment after the privateKey field of crc[1].certifiedKeyPair in the syntax of the Initialization Response message with the following text:</t>
		<sourcecode type="asn.1" ><![CDATA[  
   -- see Appendix C (Request Message Behavioral Clarifications)
   -- for backward compatibility reasons, use EncryptedValue
                ]]></sourcecode>
      </section>
    </section>
    <section anchor="Trans-Updates" numbered="true" toc="default">
      <name>Updates to RFC 6712 - HTTP Transfer for the Certificate Management Protocol (CMP)</name>
      <section anchor="Trans-1" numbered="true" toc="default">
        <name>Update Section 1 - Introduction</name>
		<t>To indicate and explain why delayed delivery of all kinds of PKIMessages may be handled at transfer level and/or at CMP level, the introduction of <xref target="RFC6712" format="default"/> is updated.</t>
		<t>Replace the third paragraph of this section with the following text:</t>
		<t>In addition to reliable transport, CMP requires connection and error handling from the transfer protocol, which is all covered by HTTP.  Additionally, delayed delivery of CMP response messages may be handled at transfer level, regardless of the message contents.  Since this document extends the polling mechanism specified in the second version of CMP <xref target="RFC4210"/> to cover all types of PKI management transactions, delays detected at application level may also be handled within CMP, using pollReq and pollRep messages.</t>
      </section>
      <section anchor="Trans-1.1" numbered="true" toc="default">
        <name>New Section 1.1 - Changes Since RFC 6712</name>
        <t>The following subsection describes feature updates to <xref target="RFC6712" format="default"/>. They are related to the base specification. Hence, references to the original sections in <xref target="RFC6712" format="default"/> are used whenever possible.</t>
        <t keepWithNext="true">Insert this section after the current <xref target="RFC6712" sectionFormat="of" section="1"/>:</t>
        <t keepWithNext="true">1.1  Changes Since RFC 6712</t>
        <t keepWithNext="true">The following updates are made in this document:</t>
        <ul spacing="normal">
	  <li>Introduce the HTTP path '/.well-known/cmp'.</li>
          <li>Extend the URI structure.</li>
        </ul>
      </section>
      <section anchor="Trans-3.6" numbered="true" toc="default">
        <name>Replace Section 3.6 - HTTP Request-URI</name>
        <t><xref target="RFC6712" section="3.6" sectionFormat="of" format="default"/> specifies the used HTTP URIs. This document introduces the HTTP path '/.well-known/cmp' and extends the URIs.</t>
        <t keepWithNext="true">Replace the text of the section with the following text:</t>
		<t keepWithNext="true">3.6.  HTTP Request-URI</t>
        <t>Each CMP server on a PKI management entity supporting HTTP or HTTPS transfer <bcp14>MUST</bcp14> support the use of the path prefix '/.well-known/' as defined in <xref target="RFC8615" format="default"/> and the registered name 'cmp' to ease interworking in a multi-vendor environment.</t>
        <t keepWithNext="true">The CMP client needs to be configured with sufficient information to form the CMP server URI.  This is at least the authority portion of the URI, e.g., 'www.example.com:80', or the full operation path segment of the PKI management entity. Additionally, <bcp14>OPTIONAL</bcp14> path segments <bcp14>MAY</bcp14> be added after the registered application name as part of the full operation path to provide further distinction.  The path segment 'p' followed by an arbitraryLabel &lt;name&gt; could, for example, support the differentiation of specific CAs or certificate profiles. Further path segments, e.g., as specified in the <xref target="RFC9483" format="default">Lightweight CMP Profile</xref>, could indicate PKI management operations using an operationLabel &lt;operation&gt;.  A valid, full CMP URI can look like this:</t>
        <ul empty="true" spacing="compact">
		  <li>http://www.example.com/.well-known/cmp</li>
          <li>http://www.example.com/.well-known/cmp/&lt;operation&gt;</li>
          <li>http://www.example.com/.well-known/cmp/p/&lt;name&gt;</li>
          <li>http://www.example.com/.well-known/cmp/p/&lt;name&gt;/&lt;operation&gt;</li>
        </ul>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
    <section anchor="IANA-ASN1" numbered="true" toc="default">
      <name>Updates to the ASN.1 Modules in RFCs 4210 and 5912</name>
	  <t>This document updates the ASN.1 modules of <xref target="RFC4210" sectionFormat="of" section="F" format="default"/> and <xref target="RFC5912" section="9" sectionFormat="of" format="default"/> as shown in Appendixes <xref target="ASN.1_1988_Modules" format="counter"/> and <xref target="ASN.1_2002_Modules" format="counter"/> of this document, respectively. The OIDs 99 (id-mod-cmp2021-88) and 100 (id-mod-cmp2021-02) have been registered in the "SMI Security for PKIX Module Identifier" registry to identify the updated ASN.1 modules.</t>
	</section>
    <section anchor="IANA-4210" numbered="true" toc="default">
      <name>Updates to the IANA Considerations of RFC 4210</name>
      <t>This document updates the IANA Consideration sections of <xref target="RFC4210" format="default"/> by adding this content.</t>
     <section anchor="IANA-EKU" numbered="true" toc="default">
      <name>SMI Security for PKIX Extended Key Purpose Registry</name>
        <t>IANA has registered the following new entry in the "SMI Security for PKIX Extended Key Purpose" registry (see <eref                
target="https://www.iana.org/assignments/smi-numbers" brackets="angle"/>, as defined in <xref target="RFC7299" format="default"/>:</t>
        <table anchor="IANA_new_EKU" align="left">
		  <name>Addition to the SMI Security for PKIX Extended Key Purpose</name>
          <thead>
            <tr>
              <th align="left">Decimal</th>
              <th align="left">Description</th>
              <th align="left">References</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">32</td>
              <td align="left">id-kp-cmKGA</td>
              <td align="left">RFC 9480</td>
            </tr>
          </tbody>
        </table>
     </section>

     <section anchor="IANA-CMP-IT" numbered="true" toc="default">
      <name>SMI Security for PKIX CMP Information Types</name>
        <t>IANA has registered the following new entries in the "SMI Security for PKIX CMP Information Types" registry (see <eref target="https://www.iana.org/assignments/smi-numbers" brackets="angle"/>), as defined in <xref target="RFC7299" format="default"/>:</t>
        <table anchor="IANA_new_id-it" align="left">
		  <name>Additions to the PKIX CMP Information Types Registry</name>
          <thead>
            <tr>
              <th align="left">Decimal</th>
              <th align="left">Description</th>
              <th align="left">References</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">17</td>
              <td align="left">id-it-caCerts</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">18</td>
              <td align="left">id-it-rootCaKeyUpdate</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">19</td>
              <td align="left">id-it-certReqTemplate</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">20</td>
              <td align="left">id-it-rootCaCert</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">21</td>
              <td align="left">id-it-certProfile</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">22</td>
              <td align="left">id-it-crlStatusList</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">23</td>
              <td align="left">id-it-crls</td>
              <td align="left">RFC 9480</td>
            </tr>
          </tbody>
        </table>
     </section>

     <section anchor="IANA-CRMF" numbered="true" toc="default">
      <name>SMI Security for PKIX CRMF Registration Controls</name>
        <t>IANA has registered the following new entries in the "SMI Security for PKIX CRMF Registration Controls" registry (see <eref target="https://www.iana.org/assignments/smi-numbers" brackets="angle"/>), as defined in <xref target="RFC7299" format="default"/>:</t>
        <table anchor="IANA_new_id-regCtrl" align="left">
		  <name>Addition to the PKIX CRMF Registration Controls Registry</name>
          <thead>
            <tr>
              <th align="left">Decimal</th>
              <th align="left">Description</th>
              <th align="left">References</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">11</td>
              <td align="left">id-regCtrl-algId</td>
              <td align="left">RFC 9480</td>
            </tr>
            <tr>
              <td align="left">12</td>
              <td align="left">id-regCtrl-rsaKeyLen</td>
              <td align="left">RFC 9480</td>
            </tr>
          </tbody>
        </table>
     </section>
    </section>
    <section anchor="IANA-6712" numbered="true" toc="default">
      <name>Updates to the IANA Considerations of RFC 6712</name>
      <t>This document contains an update to the IANA Considerations sections of <xref target="RFC6712" format="default"/> by adding this content.</t>
     <section anchor="IANA-URI" numbered="true" toc="default">
      <name>Well-Known URIs</name>
        <t>IANA has registered the following new entry in the "Well-Known URIs" registry (see <eref target="https://www.iana.org/assignments/well-known-uris" brackets="angle"/>), as defined in <xref target="RFC8615" format="default"/>:</t>
        <dl newline="false" spacing="compact">
		  <dt>URI Suffix:</dt> <dd>cmp</dd>
		  <dt>Change Controller:</dt> <dd>IETF</dd>
		  <dt>Reference:</dt> <dd>[RFC9480] <xref target="RFC9482" format="default"/></dd>
		  <dt>Status:</dt> <dd>permanent</dd>
		  <dt>Related Information:</dt> <dd>CMP has a registry at <eref target="https://www.iana.org/assignments/cmp" brackets="angle"/></dd>
        </dl>
     </section>
     <section anchor="IANA-URI-CMP" numbered="true" toc="default">
      <name>Certificate Management Protocol (CMP) Registry</name>
        <t>This document defines a new protocol registry group entitled "Certificate Management Protocol (CMP)" (at <eref target="https://www.iana.org/assignments/cmp" brackets="angle"/>) with a new "CMP Well-Known URI Path Segments" registry containing three columns: Path Segment, Description, and Reference. New items can be added using the Specification Required <xref target="RFC8615" format="default"/> process. The initial entry of this registry is:</t>
        <dl newline="false" spacing="compact">
		  <dt>Path Segment:</dt> <dd>p</dd>
		  <dt>Description:</dt> <dd>Indicates that the next path segment specifies, e.g., a CA or certificate profile name</dd>
		  <dt>Reference:</dt> <dd>[RFC9480] <xref target="RFC9482" format="default"/></dd>
        </dl>
      </section>
     </section>
    </section>
    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations of <xref target="RFC4210" format="default"/> are extended in <xref target="CMP-8.4" format="default"/> to <xref target="CMP-8.6" format="default"/>. No security considerations updates of <xref target="RFC6712" format="default"/> were required.</t>
    </section>

  </middle>
  <back>

   <displayreference target="I-D.ietf-lamps-rfc4210bis" to="PKIX-CMP"/>
   <displayreference target="I-D.ietf-lamps-rfc6712bis" to="HTTP-CMP"/>
   <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2510.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2985.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2986.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4210.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4211.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5480.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5958.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6402.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6712.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8615.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8933.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9045.xml"/>

<reference anchor="RFC9481" target="https://www.rfc-editor.org/info/rfc9481">
<front>
<title>Certificate Management Protocol (CMP) Algorithms</title>
<author initials='H' surname='Brockhaus' fullname='Hendrik Brockhaus'>
<organization />
</author>
<author initials='H' surname='Aschauer' fullname='Hans Aschauer'>
<organization />
</author>
<author initials='M' surname='Ounsworth' fullname='Mike Ounsworth'>
<organization />
</author>
<author initials='J' surname='Gray' fullname='John Gray'>
<organization />
</author>
<date year='2023' month='November'/>
</front>
<seriesInfo name="RFC" value="9481"/>
<seriesInfo name="DOI" value="10.17487/RFC9481"/>
</reference>

<reference anchor="RFC9482" target="https://www.rfc-editor.org/info/rfc9482">
<front>
<title>
Constrained Application Protocol (CoAP) Transfer for the Certificate Management Protocol
</title>
<author initials="M." surname="Sahni" fullname="Mohit Sahni" role="editor">
<organization>Palo Alto Networks</organization>
</author>
<author initials="S." surname="Tripathi" fullname="Saurabh Tripathi" role="editor">
<organization>Palo Alto Networks</organization>
</author>
<date month="November" year="2023"/>
</front>
<seriesInfo name="RFC" value="9482"/>
<seriesInfo name="DOI" value="10.17487/RFC9482"/>
</reference>

      </references>
      <references>
        <name>Informative References</name>
            <xi:include                                                          href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-lamps-rfc4210bis.xml"/>
            <xi:include	href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-lamps-rfc6712bis.xml"/>
	    
<reference anchor="RFC9483" target="https://www.rfc-editor.org/info/rfc9483">
<front>
<title>Lightweight Certificate Management Protocol (CMP) Profile</title>
<author initials='H' surname='Brockhaus' fullname='Hendrik Brockhaus'>
<organization />
</author>
<author initials='D' surname='von Oheimb' fullname='David von Oheimb'>
<organization />
</author>
<author initials='S' surname='Fries' fullname='Steffen Fries'>
<organization />
</author>
<date year='2023' month='November'/>
</front>
<seriesInfo name="RFC" value="9483"/>
<seriesInfo name="DOI" value="10.17487/RFC9483"/>
</reference>
    
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2202.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5912.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7299.xml"/>

	<xi:include href="https://bib.ietf.org/public/rfc/bibxml-nist/reference.NIST.SP.800-90Ar1.xml"/>


		<reference anchor="CVE-2008-0166" target="https://nvd.nist.gov/vuln/detail/CVE-2008-0166">
			<front>
				<title>National Vulnerability Database - CVE-2008-0166</title>
				<author>
					<organization>National Institute of Science and Technology (NIST)</organization>
				</author>
				<date month="May" year="2008"/>
			</front>
		</reference>

		<reference anchor="MiningPsQs" target="https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/heninger">
			<front>
				<title>Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices</title>
				<author fullname="Nadia Heninger">
					<organization>UC San Diego</organization>
				</author>
				<author fullname="Zakir Durumeric">
					<organization>University of Michigan</organization>
				</author>
				<author fullname="Eric Wustrow">
					<organization>University of Michigan</organization>
				</author>
				<author fullname="J. Alex Halderman">
					<organization>University of Michigan</organization>
				</author>
				<date month="August" year="2012"/>
			</front>
			<refcontent>Security'12: Proceedings of the 21st USENIX conference on Security symposium</refcontent>
		</reference>


		<reference anchor="ISO.20543-2019">
			<front>
				<title>Information technology -- Security techniques -- Test and analysis methods for random bit generators within ISO/IEC 19790 and ISO/IEC 15408</title>
				<author>
					<organization>International Organization for Standardization (ISO)</organization>
				</author>
				<date month="October" year="2019"/>
			</front>
			<seriesInfo name="ISO/IEC" value="20543:2019"/>
		</reference>

		<reference anchor="AIS31" target="https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Zertifizierung/Interpretationen/AIS_31_Functionality_classes_for_random_number_generators_e.pdf">
			<front>
			  <title>A proposal for: Functionality classes for random number generators - Version 2.0</title>
			  <author initials="W" surname="Killmann" fullname="Wolfgang Killmann">
			    <organization>T-Systems GEI GmbH</organization>
			  </author>
			  <author initials="W" surname="Schindler" fullname="Werner Schindler">
			    <organization>Bundesamt fuer Sicherheit in der Informationstechnik (BSI)</organization>
			  </author>
			  <date month="September" year="2011"/>
			</front>
		</reference>

   </references>
    </references>
    <section anchor="ASN.1_Modules" numbered="true" toc="default">
      <name>ASN.1 Modules</name>
      <section anchor="ASN.1_1988_Modules" numbered="true" toc="default">
        <name>Update to RFC 4210 - 1988 ASN.1 Module</name>
        <t>This section contains the updated ASN.1 module for <xref target="RFC4210" format="default"/>.  This module replaces the module in Appendix <xref target="RFC4210" sectionFormat="bare" section="F"/> of that document.  Although a 2002 ASN.1 module is provided, this 1988 ASN.1 module remains the normative module, as per the policy of the PKIX Working Group.</t>
<sourcecode type="asn.1"><![CDATA[  
PKIXCMP {iso(1) identified-organization(3)
      dod(6) internet(1) security(5) mechanisms(5) pkix(7)
      id-mod(0) id-mod-cmp2021-88(99)}

DEFINITIONS EXPLICIT TAGS ::=

BEGIN

-- EXPORTS ALL --

IMPORTS

    Certificate, CertificateList, Extensions, Name, Time,
    AlgorithmIdentifier, id-kp
    --, UTF8String -- -- if required; otherwise, comment out
           FROM PKIX1Explicit88 {iso(1) identified-organization(3)
           dod(6) internet(1) security(5) mechanisms(5) pkix(7)
           id-mod(0) id-pkix1-explicit-88(18)}
    -- The import of Name is added to define CertificationRequest
    -- instead of importing it from PKCS #10 [RFC2986].

    DistributionPointName, GeneralNames, GeneralName, KeyIdentifier
           FROM PKIX1Implicit88 {iso(1) identified-organization(3)
           dod(6) internet(1) security(5) mechanisms(5) pkix(7)
           id-mod(0) id-pkix1-implicit-88(19)}

    CertTemplate, PKIPublicationInfo, EncryptedKey, CertId,
    CertReqMessages, Controls, AttributeTypeAndValue, id-regCtrl
           FROM PKIXCRMF-2005 {iso(1) identified-organization(3)
           dod(6) internet(1) security(5) mechanisms(5) pkix(7)
           id-mod(0) id-mod-crmf2005(36)}
    -- The import of EncryptedKey is added due to the updates made 
    -- in CMP Updates [RFC9480]. EncryptedValue does not need to
    -- be imported anymore and is therefore removed here.

    -- Also, see the behavioral clarifications to CRMF codified in
    -- Appendix C of this specification.

    EnvelopedData, SignedData, Attribute
           FROM CryptographicMessageSyntax2004 { iso(1)
           member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
           smime(16) modules(0) cms-2004(24) }
    -- The import of EnvelopedData and SignedData is added due to 
    -- the updates made in CMP Updates [RFC9480].
    -- The import of Attribute is added to define
    -- CertificationRequest instead of importing it from
    -- PKCS #10 [RFC2986].

    ;

-- The rest of the module contains locally defined OIDs and
-- constructs:

CMPCertificate ::= CHOICE {
    x509v3PKCert        Certificate
}
-- This syntax, while bits-on-the-wire compatible with the
-- standard X.509 definition of "Certificate", allows the
-- possibility of future certificate types (such as X.509
-- attribute certificates, card-verifiable
-- certificates, or other kinds of certificates) within this
-- Certificate Management Protocol, should a need ever arise to
-- support such generality.  Those implementations that do not
-- foresee a need to ever support other certificate types MAY, if
-- they wish, comment out the above structure and "uncomment" the
-- following one prior to compiling this ASN.1 module.  (Note that
-- interoperability with implementations that don't do this will be
-- unaffected by this change.)

-- CMPCertificate ::= Certificate

PKIMessage ::= SEQUENCE {
    header           PKIHeader,
    body             PKIBody,
    protection   [0] PKIProtection OPTIONAL,
    extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                     OPTIONAL
}

PKIMessages ::= SEQUENCE SIZE (1..MAX) OF PKIMessage

PKIHeader ::= SEQUENCE {
    pvno                INTEGER     { cmp1999(1), cmp2000(2),
                                      cmp2021(3) },
    sender              GeneralName,
    -- identifies the sender
    recipient           GeneralName,
    -- identifies the intended recipient
    messageTime     [0] GeneralizedTime         OPTIONAL,
    -- time of production of this message (used when the sender
    -- believes that the transport will be "suitable", i.e.,
    -- that the time will still be meaningful upon receipt)
    protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
    -- algorithm used for the calculation of protection bits
    senderKID       [2] KeyIdentifier           OPTIONAL,
    recipKID        [3] KeyIdentifier           OPTIONAL,
    -- to identify specific keys used for protection
    transactionID   [4] OCTET STRING            OPTIONAL,
    -- identifies the transaction, i.e., this will be the same in
    -- corresponding request, response, certConf, and PKIConf
    -- messages
    senderNonce     [5] OCTET STRING            OPTIONAL,
    recipNonce      [6] OCTET STRING            OPTIONAL,
    -- nonces used to provide replay protection, senderNonce
    -- is inserted by the creator of this message; recipNonce
    -- is a nonce previously inserted in a related message by
    -- the intended recipient of this message.
    freeText        [7] PKIFreeText             OPTIONAL,
    -- this may be used to indicate context-specific instructions
    -- (this field is intended for human consumption)
    generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                           InfoTypeAndValue     OPTIONAL
    -- this may be used to convey context-specific information
    -- (this field not primarily intended for human consumption)
}

PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
    -- text encoded as a UTF-8 string [RFC3629]

PKIBody ::= CHOICE {       -- message-specific body elements
    ir       [0]  CertReqMessages,        --Initialization Request
    ip       [1]  CertRepMessage,         --Initialization Response
    cr       [2]  CertReqMessages,        --Certification Request
    cp       [3]  CertRepMessage,         --Certification Response
    p10cr    [4]  CertificationRequest,   --imported from [RFC2986]
    popdecc  [5]  POPODecKeyChallContent, --pop Challenge
    popdecr  [6]  POPODecKeyRespContent,  --pop Response
    kur      [7]  CertReqMessages,        --Key Update Request
    kup      [8]  CertRepMessage,         --Key Update Response
    krr      [9]  CertReqMessages,        --Key Recovery Request
    krp      [10] KeyRecRepContent,       --Key Recovery Response
    rr       [11] RevReqContent,          --Revocation Request
    rp       [12] RevRepContent,          --Revocation Response
    ccr      [13] CertReqMessages,        --Cross-Cert. Request
    ccp      [14] CertRepMessage,         --Cross-Cert. Response
    ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
    cann     [16] CertAnnContent,         --Certificate Ann.
    rann     [17] RevAnnContent,          --Revocation Ann.
    crlann   [18] CRLAnnContent,          --CRL Announcement
    pkiconf  [19] PKIConfirmContent,      --Confirmation
    nested   [20] NestedMessageContent,   --Nested Message
    genm     [21] GenMsgContent,          --General Message
    genp     [22] GenRepContent,          --General Response
    error    [23] ErrorMsgContent,        --Error Message
    certConf [24] CertConfirmContent,     --Certificate Confirm
    pollReq  [25] PollReqContent,         --Polling Request
    pollRep  [26] PollRepContent          --Polling Response
}

PKIProtection ::= BIT STRING

ProtectedPart ::= SEQUENCE {
    header    PKIHeader,
    body      PKIBody
}

id-PasswordBasedMac OBJECT IDENTIFIER ::= {1 2 840 113533 7 66 13}
PBMParameter ::= SEQUENCE {
    salt                OCTET STRING,
    -- Note: Implementations MAY wish to limit acceptable sizes
    -- of this string to values appropriate for their environment
    -- in order to reduce the risk of denial-of-service attacks.
    owf                 AlgorithmIdentifier,
    -- AlgId for a One-Way Function (OWF)
    iterationCount      INTEGER,
    -- number of times the OWF is applied
    -- Note: Implementations MAY wish to limit acceptable sizes
    -- of this integer to values appropriate for their environment
    -- in order to reduce the risk of denial-of-service attacks.
    mac                 AlgorithmIdentifier
    -- the MAC AlgId (e.g., HMAC-SHA256, AES-GMAC [RFC9481],
}   -- or HMAC [RFC2104, RFC2202])



id-DHBasedMac OBJECT IDENTIFIER ::= {1 2 840 113533 7 66 30}
DHBMParameter ::= SEQUENCE {
    owf                 AlgorithmIdentifier,
    -- AlgId for a One-Way Function
    mac                 AlgorithmIdentifier
    -- the MAC AlgId (e.g., HMAC-SHA256, AES-GMAC [RFC9481],
}   -- or HMAC [RFC2104, RFC2202])


NestedMessageContent ::= PKIMessages

PKIStatus ::= INTEGER {
    accepted               (0),
    -- you got exactly what you asked for
    grantedWithMods        (1),
    -- you got something like what you asked for; the
    -- requester is responsible for ascertaining the differences
    rejection              (2),
    -- you don't get it, more information elsewhere in the message
    waiting                (3),
    -- the request body part has not yet been processed; expect to
    -- hear more later (note: proper handling of this status
    -- response MAY use the polling req/rep PKIMessages specified
    -- in Section 5.3.22 of [RFC4210]; alternatively, polling in the 
    -- underlying transport layer MAY have some utility in this
    -- regard)
    revocationWarning      (4),
    -- this message contains a warning that a revocation is
    -- imminent
    revocationNotification (5),
    -- notification that a revocation has occurred
    keyUpdateWarning       (6)
    -- update already done for the oldCertId specified in
    -- CertReqMsg
}

PKIFailureInfo ::= BIT STRING {
-- since we can fail in more than one way!
-- More codes may be added in the future if/when required.
    badAlg              (0),
    -- unrecognized or unsupported algorithm identifier
    badMessageCheck     (1),
    -- integrity check failed (e.g., signature did not verify)
    badRequest          (2),
    -- transaction not permitted or supported
    badTime             (3),
    -- messageTime was not sufficiently close to the system time,
    -- as defined by local policy
    badCertId           (4),
    -- no certificate could be found matching the provided criteria
    badDataFormat       (5),
    -- the data submitted has the wrong format
    wrongAuthority      (6),
    -- the authority indicated in the request is different from the
    -- one creating the response token
    incorrectData       (7),
    -- the requester's data is incorrect (for notary services)
    missingTimeStamp    (8),
    -- when the timestamp is missing but should be there
    -- (by policy)
    badPOP              (9),
    -- the proof-of-possession failed
    certRevoked         (10),
    -- the certificate has already been revoked
    certConfirmed       (11),
    -- the certificate has already been confirmed
    wrongIntegrity      (12),
    -- not valid integrity, based on the password instead of the
    -- signature or vice versa
    badRecipientNonce   (13),
    -- not valid recipient nonce, either missing or wrong value
    timeNotAvailable    (14),
    -- the time source of the Time Stamping Authority (TSA) is
    -- not available
    unacceptedPolicy    (15),
    -- the requested TSA policy is not supported by the TSA
    unacceptedExtension (16),
    -- the requested extension is not supported by the TSA
    addInfoNotAvailable (17),
    -- the additional information requested could not be
    -- understood or is not available
    badSenderNonce      (18),
    -- not valid sender nonce, either missing or wrong size
    badCertTemplate     (19),
    -- not valid cert. template or missing mandatory information
    signerNotTrusted    (20),
    -- signer of the message unknown or not trusted
    transactionIdInUse  (21),
    -- the transaction identifier is already in use
    unsupportedVersion  (22),
    -- the version of the message is not supported
    notAuthorized       (23),
    -- the sender was not authorized to make the preceding
    -- request or perform the preceding action
    systemUnavail       (24),
    -- the request cannot be handled due to system unavailability
    systemFailure       (25),
    -- the request cannot be handled due to system failure
    duplicateCertReq    (26)
    -- the certificate cannot be issued because a duplicate
    -- certificate already exists
}

PKIStatusInfo ::= SEQUENCE {
    status        PKIStatus,
    statusString  PKIFreeText     OPTIONAL,
    failInfo      PKIFailureInfo  OPTIONAL
}

OOBCert ::= CMPCertificate

OOBCertHash ::= SEQUENCE {
    hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
    certId      [1] CertId                  OPTIONAL,
    hashVal         BIT STRING
    -- hashVal is calculated over the DER encoding of the
    -- self-signed certificate with the identifier certID.
}

POPODecKeyChallContent ::= SEQUENCE OF Challenge
-- one Challenge per encryption key certification request (in the
-- same order as these requests appear in CertReqMessages)

Challenge ::= SEQUENCE {
    owf                 AlgorithmIdentifier  OPTIONAL,
    -- MUST be present in the first Challenge; MAY be omitted in
    -- any subsequent Challenge in POPODecKeyChallContent (if
    -- omitted, then the owf used in the immediately preceding
    -- Challenge is to be used)
    witness             OCTET STRING,
    -- the result of applying the One-Way Function (owf) to a
    -- randomly generated INTEGER, A (Note that a different
    -- INTEGER MUST be used for each Challenge.)
    challenge           OCTET STRING
    -- the encryption (under the public key for which the cert.
    -- request is being made) of Rand
}

-- Rand was added in CMP Updates [RFC9480]

Rand ::= SEQUENCE {
-- Rand is encrypted under the public key to form the challenge
-- in POPODecKeyChallContent
   int                  INTEGER,
   -- the randomly generated INTEGER A (above)
   sender               GeneralName
   -- the sender's name (as included in PKIHeader)
}

POPODecKeyRespContent ::= SEQUENCE OF INTEGER
-- One INTEGER per encryption key certification request (in the
-- same order as these requests appear in CertReqMessages).  The
-- retrieved INTEGER A (above) is returned to the sender of the
-- corresponding Challenge.

CertRepMessage ::= SEQUENCE {
    caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                     OPTIONAL,
    response         SEQUENCE OF CertResponse
}

CertificationRequest ::= SEQUENCE {
    certificationRequestInfo  SEQUENCE {
      version                   INTEGER,
      subject                   Name,
      subjectPublicKeyInfo      SEQUENCE {
        algorithm                 AlgorithmIdentifier,
        subjectPublicKey          BIT STRING },
      attributes                [0] IMPLICIT SET OF Attribute },
    signatureAlgorithm        AlgorithmIdentifier,
    signature                 BIT STRING
}

CertResponse ::= SEQUENCE {
    certReqId           INTEGER,
    -- to match this response with the corresponding request (a value
    -- of -1 is to be used if certReqId is not specified in the
    -- corresponding request, which can only be a p10cr)
    status              PKIStatusInfo,
    certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
    rspInfo             OCTET STRING        OPTIONAL
    -- analogous to the id-regInfo-utf8Pairs string defined
    -- for regInfo in CertReqMsg [RFC4211]
}

CertifiedKeyPair ::= SEQUENCE {
    certOrEncCert       CertOrEncCert,
    privateKey      [0] EncryptedKey        OPTIONAL,
    -- See [RFC4211] for comments on encoding.
    -- Changed from Encrypted Value to EncryptedKey as a CHOICE of
    -- EncryptedValue and EnvelopedData due to the changes made in
    -- CMP Updates [RFC9480].
    -- Using the choice EncryptedValue is bit-compatible to the
    -- syntax without this change.
    publicationInfo [1] PKIPublicationInfo  OPTIONAL
}

CertOrEncCert ::= CHOICE {
    certificate     [0] CMPCertificate,
    encryptedCert   [1] EncryptedKey
    -- Changed from Encrypted Value to EncryptedKey as a CHOICE of
    -- EncryptedValue and EnvelopedData due to the changes made in
    -- CMP Updates [RFC9480].
    -- Using the choice EncryptedValue is bit-compatible to the
    -- syntax without this change.
}

KeyRecRepContent ::= SEQUENCE {
    status                  PKIStatusInfo,
    newSigCert          [0] CMPCertificate OPTIONAL,
    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                        CMPCertificate OPTIONAL,
    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                        CertifiedKeyPair OPTIONAL
}

RevReqContent ::= SEQUENCE OF RevDetails

RevDetails ::= SEQUENCE {
    certDetails         CertTemplate,
    -- allows the requester to specify as much as they can about
    -- the cert. for which revocation is requested
    -- (e.g., for cases in which serialNumber is not available)
    crlEntryDetails     Extensions       OPTIONAL
    -- requested crlEntryExtensions
}

RevRepContent ::= SEQUENCE {
    status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
    -- in the same order as was sent in RevReqContent
    revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId
                                        OPTIONAL,
    -- IDs for which revocation was requested
    -- (same order as status)
    crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList
                                        OPTIONAL
    -- the resulting CRLs (there may be more than one)
}

CAKeyUpdAnnContent ::= SEQUENCE {
    oldWithNew   CMPCertificate, -- old pub signed with new priv
    newWithOld   CMPCertificate, -- new pub signed with old priv
    newWithNew   CMPCertificate  -- new pub signed with new priv
}

CertAnnContent ::= CMPCertificate

RevAnnContent ::= SEQUENCE {
    status              PKIStatus,
    certId              CertId,
    willBeRevokedAt     GeneralizedTime,
    badSinceDate        GeneralizedTime,
    crlDetails          Extensions  OPTIONAL
    -- extra CRL details (e.g., crl number, reason, location, etc.)
}

CRLAnnContent ::= SEQUENCE OF CertificateList

CertConfirmContent ::= SEQUENCE OF CertStatus

CertStatus ::= SEQUENCE {
   certHash    OCTET STRING,
   -- the hash of the certificate, using the same hash algorithm
   -- as is used to create and verify the certificate signature
   certReqId   INTEGER,
   -- to match this confirmation with the corresponding req/rep
   statusInfo  PKIStatusInfo OPTIONAL,
   hashAlg [0] AlgorithmIdentifier OPTIONAL
   -- the hash algorithm to use for calculating certHash
   -- SHOULD NOT be used in all cases where the AlgorithmIdentifier
   -- of the certificate signature specifies a hash algorithm
}

PKIConfirmContent ::= NULL

-- CertReqTemplateContent, id-regCtrl-algId, id-regCtrl-algId, and
-- id-regCtrl-rsaKeyLen were added in CMP Updates [RFC9480]

CertReqTemplateContent ::= SEQUENCE {
   certTemplate           CertTemplate,
   -- prefilled certTemplate structure elements
   -- The SubjectPublicKeyInfo field in the certTemplate MUST NOT
   -- be used.
   keySpec                Controls OPTIONAL
   -- MAY be used to specify supported algorithms
   -- Controls  ::= SEQUENCE SIZE (1..MAX) OF AttributeTypeAndValue
   -- as specified in CRMF [RFC4211]
   }

id-regCtrl-altCertTemplate OBJECT IDENTIFIER ::= { id-regCtrl 7 }
   AltCertTemplate ::= AttributeTypeAndValue
   -- specifies a template for a certificate other than an X.509v3
   -- public key certificate

id-regCtrl-algId OBJECT IDENTIFIER ::= { id-regCtrl 11 }
   AlgIdCtrl ::= AlgorithmIdentifier
   -- SHALL be used to specify supported algorithms other than RSA

id-regCtrl-rsaKeyLen OBJECT IDENTIFIER ::= { id-regCtrl 12 }
   RsaKeyLenCtrl ::= INTEGER (1..MAX)
   -- SHALL be used to specify supported RSA key lengths

-- RootCaKeyUpdateContent, CRLSource, and CRLStatus were added in
-- CMP Updates [RFC9480]

RootCaKeyUpdateContent ::= SEQUENCE {
   newWithNew       CMPCertificate,
   -- new root CA certificate
   newWithOld   [0] CMPCertificate OPTIONAL,
   -- X.509 certificate containing the new public root CA key
   -- signed with the old private root CA key
   oldWithNew   [1] CMPCertificate OPTIONAL
   -- X.509 certificate containing the old public root CA key
   -- signed with the new private root CA key
   }

CRLSource ::= CHOICE {
   dpn          [0] DistributionPointName,
   issuer       [1] GeneralNames }

CRLStatus ::= SEQUENCE {
   source       CRLSource,
   thisUpdate   Time OPTIONAL }

InfoTypeAndValue ::= SEQUENCE {
    infoType               OBJECT IDENTIFIER,
    infoValue              ANY DEFINED BY infoType  OPTIONAL
}
-- Example InfoTypeAndValue contents include, but are not limited
-- to, the following (uncomment in this ASN.1 module and use as
-- appropriate for a given environment):
--
--   id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
--      CAProtEncCertValue      ::= CMPCertificate
--   id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
--      SignKeyPairTypesValue   ::= SEQUENCE SIZE (1..MAX) OF
--                                        AlgorithmIdentifier
--   id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
--      EncKeyPairTypesValue    ::= SEQUENCE SIZE (1..MAX) OF
--                                        AlgorithmIdentifier
--   id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
--      PreferredSymmAlgValue   ::= AlgorithmIdentifier
--   id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
--      CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
--   id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
--      CurrentCRLValue         ::= CertificateList
--   id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
--      UnsupportedOIDsValue    ::= SEQUENCE SIZE (1..MAX) OF
--                                          OBJECT IDENTIFIER
--   id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
--      KeyPairParamReqValue    ::= OBJECT IDENTIFIER
--   id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
--      KeyPairParamRepValue    ::= AlgorithmIdentifier
--   id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
--      RevPassphraseValue      ::= EncryptedKey
--      - Changed from Encrypted Value to EncryptedKey as a CHOICE
--      - of EncryptedValue and EnvelopedData due to the changes
--      - made in CMP Updates [RFC9480].
--      - Using the choice EncryptedValue is bit-compatible to the
--      - syntax without this change.
--   id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
--      ImplicitConfirmValue    ::= NULL
--   id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
--      ConfirmWaitTimeValue    ::= GeneralizedTime
--   id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
--      OrigPKIMessageValue     ::= PKIMessages
--   id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
--      SuppLangTagsValue       ::= SEQUENCE OF UTF8String
--   id-it-caCerts          OBJECT IDENTIFIER ::= {id-it 17}
--      CaCertsValue            ::= SEQUENCE SIZE (1..MAX) OF
--                                             CMPCertificate
--      - id-it-caCerts added in CMP Updates [RFC9480]
--   id-it-rootCaKeyUpdate  OBJECT IDENTIFIER ::= {id-it 18}
--      RootCaKeyUpdateValue    ::= RootCaKeyUpdateContent
--      - id-it-rootCaKeyUpdate added in CMP Updates [RFC9480]
--   id-it-certReqTemplate  OBJECT IDENTIFIER ::= {id-it 19}
--      CertReqTemplateValue    ::= CertReqTemplateContent
--      - id-it-certReqTemplate added in CMP Updates [RFC9480]
--   id-it-rootCaCert       OBJECT IDENTIFIER ::= {id-it 20}
--      RootCaCertValue         ::= CMPCertificate
--      - id-it-rootCaCert added in CMP Updates [RFC9480]
--   id-it-certProfile      OBJECT IDENTIFIER ::= {id-it 21}
--      CertProfileValue        ::= SEQUENCE SIZE (1..MAX) OF
--                                                 UTF8String
--      - id-it-certProfile added in CMP Updates [RFC9480]
--   id-it-crlStatusList    OBJECT IDENTIFIER ::= {id-it 22}
--   CRLStatusListValue         ::= SEQUENCE SIZE (1..MAX) OF
--                                                  CRLStatus
--      - id-it-crlStatusList added in CMP Updates [RFC9480]
--   id-it-crls             OBJECT IDENTIFIER ::= {id-it 23}
--   CRLsValue                  ::= SEQUENCE SIZE (1..MAX) OF
--                                            CertificateList
--      - id-it-crls added in CMP Updates [RFC9480]
--
-- where
--
--   id-pkix OBJECT IDENTIFIER ::= {
--      iso(1) identified-organization(3)
--      dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
-- and
--   id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
--
--
-- This construct MAY also be used to define new PKIX Certificate
-- Management Protocol request and response messages or general-
-- purpose (e.g., announcement) messages for future needs or for
-- specific environments.

GenMsgContent ::= SEQUENCE OF InfoTypeAndValue

-- May be sent by EE, RA, or CA (depending on message content).
-- The OPTIONAL infoValue parameter of InfoTypeAndValue will
-- typically be omitted for some of the examples given above.
-- The receiver is free to ignore any contained OIDs that it
-- does not recognize.  If sent from EE to CA, the empty set
-- indicates that the CA may send
-- any/all information that it wishes.

GenRepContent ::= SEQUENCE OF InfoTypeAndValue
-- The receiver MAY ignore any contained OIDs that it does not
-- recognize.

ErrorMsgContent ::= SEQUENCE {
    pKIStatusInfo          PKIStatusInfo,
    errorCode              INTEGER           OPTIONAL,
    -- implementation-specific error codes
    errorDetails           PKIFreeText       OPTIONAL
    -- implementation-specific error details
}

PollReqContent ::= SEQUENCE OF SEQUENCE {
    certReqId              INTEGER
}

PollRepContent ::= SEQUENCE OF SEQUENCE {
    certReqId              INTEGER,
    checkAfter             INTEGER,  -- time in seconds
    reason                 PKIFreeText OPTIONAL
}

--
-- Extended key usage extension for PKI entities used in CMP
-- operations, added due to the changes made in
-- CMP Updates [RFC9480]
-- The EKUs for the CA and RA are reused from CMC, as defined in
-- [RFC6402]
--

-- id-kp-cmcCA OBJECT IDENTIFIER ::= { id-kp 27 }
-- id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }
id-kp-cmKGA OBJECT IDENTIFIER ::= { id-kp 32 }

-- There is no 1988 ASN.1 module of PKCS #9 available to import the
-- syntax of the localKeyId attribute type and value from. Therefore,
-- the syntax is added here as needed for the updates made in
-- CMP Updates [RFC9480].

pkcs-9 OBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840)
                              rsadsi(113549) pkcs(1) 9}

pkcs-9-at-localKeyId OBJECT IDENTIFIER ::= {pkcs-9 21}

LocalKeyIdValue ::= OCTET STRING

END -- of CMP module
                ]]></sourcecode>
      </section>
      <section anchor="ASN.1_2002_Modules" numbered="true" toc="default">
        <name>Update to RFC 5912 - 2002 ASN.1 Module</name>
        <t>This section contains the updated 2002 ASN.1 module for <xref target="RFC5912" format="default"/>.  This module replaces the module in <xref target="RFC5912" section="9" sectionFormat="of" format="default"/>.  The module contains those changes to the normative ASN.1 module from <xref target="RFC4210" sectionFormat="of" section="F"/> that were to update to the 2002 ASN.1 standard done in <xref target="RFC5912" format="default"/>, as well as changes made in this document.</t>
		<sourcecode type="asn.1"><![CDATA[  
PKIXCMP-2021
    { iso(1) identified-organization(3) dod(6) internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)
    id-mod-cmp2021-02(100) }
DEFINITIONS EXPLICIT TAGS ::=
BEGIN
IMPORTS

AttributeSet{}, SingleAttribute{}, Extensions{}, EXTENSION, ATTRIBUTE
FROM PKIX-CommonTypes-2009
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-pkixCommon-02(57)}

AlgorithmIdentifier{}, SIGNATURE-ALGORITHM, ALGORITHM,
    DIGEST-ALGORITHM, MAC-ALGORITHM
FROM AlgorithmInformation-2009
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0)
    id-mod-algorithmInformation-02(58)}

Certificate, CertificateList, Time, id-kp
FROM PKIX1Explicit-2009
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51)}

DistributionPointName, GeneralNames, GeneralName, KeyIdentifier
FROM PKIX1Implicit-2009
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}

CertTemplate, PKIPublicationInfo, EncryptedKey, CertId,
    CertReqMessages, Controls, RegControlSet, id-regCtrl
FROM PKIXCRMF-2009
    { iso(1) identified-organization(3) dod(6) internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)
    id-mod-crmf2005-02(55) }
    -- The import of EncryptedKey is added due to the updates made
    -- in CMP Updates [RFC9480]. EncryptedValue does not need to
    -- be imported anymore and is therefore removed here.

-- See also the behavioral clarifications to CRMF codified in
-- Appendix C of this specification.

CertificationRequest
FROM PKCS-10
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-pkcs10-2009(69)}
-- (specified in [RFC2986] with 1993 ASN.1 syntax and IMPLICIT
-- tags).  Alternatively, implementers may directly include
-- the syntax of [RFC2986] in this module.

localKeyId
FROM PKCS-9 
    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
    modules(0) pkcs-9(1)}
    -- The import of localKeyId is added due to the updates made in
    -- CMP Updates [RFC9480].

EnvelopedData, SignedData
FROM CryptographicMessageSyntax-2009
    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
    smime(16) modules(0) id-mod-cms-2004-02(41)}
    -- The import of EnvelopedData and SignedData is added due to
    -- the updates made in CMP Updates [RFC9480].
;

-- The rest of the module contains locally defined OIDs and
-- constructs:

CMPCertificate ::= CHOICE { x509v3PKCert Certificate, ... }
-- This syntax, while bits-on-the-wire compatible with the
-- standard X.509 definition of "Certificate", allows the
-- possibility of future certificate types (such as X.509
-- attribute certificates, card-verifiable
-- certificates, or other kinds of certificates) within this
-- Certificate Management Protocol, should a need ever arise to
-- support such generality.  Those implementations that do not
-- foresee a need to ever support other certificate types MAY, if
-- they wish, comment out the above structure and "uncomment" the
-- following one prior to compiling this ASN.1 module.  (Note that
-- interoperability with implementations that don't do this will be
-- unaffected by this change.)

-- CMPCertificate ::= Certificate

PKIMessage ::= SEQUENCE {
    header           PKIHeader,
    body             PKIBody,
    protection   [0] PKIProtection OPTIONAL,
    extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                  OPTIONAL }

PKIMessages ::= SEQUENCE SIZE (1..MAX) OF PKIMessage

PKIHeader ::= SEQUENCE {
    pvno                INTEGER     { cmp1999(1), cmp2000(2),
                                      cmp2012(3) },
    sender              GeneralName,
    -- identifies the sender
    recipient           GeneralName,
    -- identifies the intended recipient
    messageTime     [0] GeneralizedTime         OPTIONAL,
    -- time of production of this message (used when the sender
    -- believes that the transport will be "suitable", i.e.,
    -- that the time will still be meaningful upon receipt)
    protectionAlg   [1] AlgorithmIdentifier{ALGORITHM, {...}}
                            OPTIONAL,
    -- algorithm used for the calculation of protection bits
    senderKID       [2] KeyIdentifier           OPTIONAL,
    recipKID        [3] KeyIdentifier           OPTIONAL,
    -- to identify specific keys used for protection
    transactionID   [4] OCTET STRING            OPTIONAL,
    -- identifies the transaction, i.e., this will be the same in
    -- corresponding request, response, certConf, and PKIConf
    -- messages
    senderNonce     [5] OCTET STRING            OPTIONAL,
    recipNonce      [6] OCTET STRING            OPTIONAL,
    -- nonces used to provide replay protection, senderNonce
    -- is inserted by the creator of this message; recipNonce
    -- is a nonce previously inserted in a related message by
    -- the intended recipient of this message.
    freeText        [7] PKIFreeText             OPTIONAL,
    -- this may be used to indicate context-specific instructions
    -- (this field is intended for human consumption)
    generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                        InfoTypeAndValue     OPTIONAL
    -- this may be used to convey context-specific information
    -- (this field not primarily intended for human consumption)
}

PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
    -- text encoded as a UTF-8 string [RFC3629]

PKIBody ::= CHOICE {       -- message-specific body elements
    ir       [0]  CertReqMessages,        --Initialization Request
    ip       [1]  CertRepMessage,         --Initialization Response
    cr       [2]  CertReqMessages,        --Certification Request
    cp       [3]  CertRepMessage,         --Certification Response
    p10cr    [4]  CertificationRequest,   --imported from [RFC2986]
    popdecc  [5]  POPODecKeyChallContent, --pop Challenge
    popdecr  [6]  POPODecKeyRespContent,  --pop Response
    kur      [7]  CertReqMessages,        --Key Update Request
    kup      [8]  CertRepMessage,         --Key Update Response
    krr      [9]  CertReqMessages,        --Key Recovery Request
    krp      [10] KeyRecRepContent,       --Key Recovery Response
    rr       [11] RevReqContent,          --Revocation Request
    rp       [12] RevRepContent,          --Revocation Response
    ccr      [13] CertReqMessages,        --Cross-Cert. Request
    ccp      [14] CertRepMessage,         --Cross-Cert. Response
    ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
    cann     [16] CertAnnContent,         --Certificate Ann.
    rann     [17] RevAnnContent,          --Revocation Ann.
    crlann   [18] CRLAnnContent,          --CRL Announcement
    pkiconf  [19] PKIConfirmContent,      --Confirmation
    nested   [20] NestedMessageContent,   --Nested Message
    genm     [21] GenMsgContent,          --General Message
    genp     [22] GenRepContent,          --General Response
    error    [23] ErrorMsgContent,        --Error Message
    certConf [24] CertConfirmContent,     --Certificate Confirm
    pollReq  [25] PollReqContent,         --Polling Request
    pollRep  [26] PollRepContent          --Polling Response
}

PKIProtection ::= BIT STRING

ProtectedPart ::= SEQUENCE {
    header    PKIHeader,
    body      PKIBody }

id-PasswordBasedMac OBJECT IDENTIFIER ::= { iso(1) member-body(2)
    usa(840) nt(113533) nsn(7) algorithms(66) 13 }
PBMParameter ::= SEQUENCE {
    salt                OCTET STRING,
    -- Note: Implementations MAY wish to limit acceptable sizes
    -- of this string to values appropriate for their environment
    -- in order to reduce the risk of denial-of-service attacks.
    owf                 AlgorithmIdentifier{DIGEST-ALGORITHM, {...}},
    -- AlgId for a One-Way Function
    iterationCount      INTEGER,
    -- number of times the OWF is applied
    -- Note: Implementations MAY wish to limit acceptable sizes
    -- of this integer to values appropriate for their environment
    -- in order to reduce the risk of denial-of-service attacks.
    mac                 AlgorithmIdentifier{MAC-ALGORITHM, {...}}
    -- the MAC AlgId (e.g., HMAC-SHA256, AES-GMAC [RFC9481],
    -- or HMAC [RFC2104, RFC2202])
}

id-DHBasedMac OBJECT IDENTIFIER ::= { iso(1) member-body(2)
    usa(840) nt(113533) nsn(7) algorithms(66) 30 }
DHBMParameter ::= SEQUENCE {
    owf                 AlgorithmIdentifier{DIGEST-ALGORITHM, {...}},
    -- AlgId for a One-Way Function
    mac                 AlgorithmIdentifier{MAC-ALGORITHM, {...}}
    -- the MAC AlgId (e.g., HMAC-SHA256, AES-GMAC [RFC9481],
    -- or HMAC [RFC2104, RFC2202])
}

PKIStatus ::= INTEGER {
    accepted               (0),
    -- you got exactly what you asked for
    grantedWithMods        (1),
    -- you got something like what you asked for; the
    -- requester is responsible for ascertaining the differences
    rejection              (2),
    -- you don't get it, more information elsewhere in the message
    waiting                (3),
    -- the request body part has not yet been processed; expect to
    -- hear more later (note: proper handling of this status
    -- response MAY use the polling req/rep PKIMessages specified
    -- in Section 5.3.22 of [RFC4210]; alternatively, polling in the 
    -- underlying transport layer MAY have some utility in this
    -- regard)
    revocationWarning      (4),
    -- this message contains a warning that a revocation is
    -- imminent
    revocationNotification (5),
    -- notification that a revocation has occurred
    keyUpdateWarning       (6)
    -- update already done for the oldCertId specified in
    -- CertReqMsg
}

PKIFailureInfo ::= BIT STRING {
-- since we can fail in more than one way!
-- More codes may be added in the future if/when required.
    badAlg              (0),
    -- unrecognized or unsupported algorithm identifier
    badMessageCheck     (1),
    -- integrity check failed (e.g., signature did not verify)
    badRequest          (2),
    -- transaction not permitted or supported
    badTime             (3),
    -- messageTime was not sufficiently close to the system time,
    -- as defined by local policy
    badCertId           (4),
    -- no certificate could be found matching the provided criteria
    badDataFormat       (5),
    -- the data submitted has the wrong format
    wrongAuthority      (6),
    -- the authority indicated in the request is different from the
    -- one creating the response token
    incorrectData       (7),
    -- the requester's data is incorrect (for notary services)
    missingTimeStamp    (8),
    -- when the timestamp is missing but should be there
    -- (by policy)
    badPOP              (9),
    -- the proof-of-possession failed
    certRevoked         (10),
    -- the certificate has already been revoked
    certConfirmed       (11),
    -- the certificate has already been confirmed
    wrongIntegrity      (12),
    -- not valid integrity, based on the password instead of the
    -- signature or vice versa
    badRecipientNonce   (13),
    -- not valid recipient nonce, either missing or wrong value
    timeNotAvailable    (14),
    -- the TSA's time source is not available
    unacceptedPolicy    (15),
    -- the requested TSA policy is not supported by the TSA
    unacceptedExtension (16),
    -- the requested extension is not supported by the TSA
    addInfoNotAvailable (17),
    -- the additional information requested could not be
    -- understood or is not available
    badSenderNonce      (18),
    -- not valid sender nonce, either missing or wrong size
    badCertTemplate     (19),
    -- not valid cert. template or missing mandatory information
    signerNotTrusted    (20),
    -- signer of the message unknown or not trusted
    transactionIdInUse  (21),
    -- the transaction identifier is already in use
    unsupportedVersion  (22),
    -- the version of the message is not supported
    notAuthorized       (23),
    -- the sender was not authorized to make the preceding
    -- request or perform the preceding action
    systemUnavail       (24),
    -- the request cannot be handled due to system unavailability
    systemFailure       (25),
    -- the request cannot be handled due to system failure
    duplicateCertReq    (26)
    -- the certificate cannot be issued because a duplicate
    -- certificate already exists
}

PKIStatusInfo ::= SEQUENCE {
    status        PKIStatus,
    statusString  PKIFreeText     OPTIONAL,
    failInfo      PKIFailureInfo  OPTIONAL }

OOBCert ::= CMPCertificate

OOBCertHash ::= SEQUENCE {
    hashAlg     [0] AlgorithmIdentifier{DIGEST-ALGORITHM, {...}}
                        OPTIONAL,
    certId      [1] CertId                  OPTIONAL,
    hashVal         BIT STRING
    -- hashVal is calculated over the DER encoding of the
    -- self-signed certificate with the identifier certID.
}

POPODecKeyChallContent ::= SEQUENCE OF Challenge
-- One Challenge per encryption key certification request (in the
-- same order as these requests appear in CertReqMessages)

Challenge ::= SEQUENCE {
    owf                 AlgorithmIdentifier{DIGEST-ALGORITHM, {...}}
                            OPTIONAL,
    -- MUST be present in the first Challenge; MAY be omitted in
    -- any subsequent Challenge in POPODecKeyChallContent (if
    -- omitted, then the owf used in the immediately preceding
    -- Challenge is to be used)
    witness             OCTET STRING,
    -- the result of applying the One-Way Function (owf) to a
    -- randomly generated INTEGER, A (Note that a different
    -- INTEGER MUST be used for each Challenge.)
    challenge           OCTET STRING
    -- the encryption (under the public key for which the cert.
    -- request is being made) of Rand
}

-- Rand was added in CMP Updates [RFC9480]

Rand ::= SEQUENCE {
-- Rand is encrypted under the public key to form the challenge
-- in POPODecKeyChallContent
   int                  INTEGER,
   -- the randomly generated INTEGER A (above)
   sender               GeneralName
   -- the sender's name (as included in PKIHeader)
}

POPODecKeyRespContent ::= SEQUENCE OF INTEGER
-- One INTEGER per encryption key certification request (in the
-- same order as these requests appear in CertReqMessages).  The
-- retrieved INTEGER A (above) is returned to the sender of the
-- corresponding Challenge.

CertRepMessage ::= SEQUENCE {
    caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                  OPTIONAL,
    response         SEQUENCE OF CertResponse }

CertResponse ::= SEQUENCE {
    certReqId           INTEGER,
    -- to match this response with the corresponding request (a value
    -- of -1 is to be used if certReqId is not specified in the
    -- corresponding request, which can only be a p10cr)
    status              PKIStatusInfo,
    certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
    rspInfo             OCTET STRING        OPTIONAL
    -- analogous to the id-regInfo-utf8Pairs string defined
    -- for regInfo in CertReqMsg [RFC4211]
}

CertifiedKeyPair ::= SEQUENCE {
    certOrEncCert       CertOrEncCert,
    privateKey      [0] EncryptedKey      OPTIONAL,
    -- See [RFC4211] for comments on encoding.
    -- Changed from Encrypted Value to EncryptedKey as a CHOICE of
    -- EncryptedValue and EnvelopedData due to the changes made in
    -- CMP Updates [RFC9480].
    -- Using the choice EncryptedValue is bit-compatible to the
    -- syntax without this change.
    publicationInfo [1] PKIPublicationInfo  OPTIONAL }

CertOrEncCert ::= CHOICE {
    certificate     [0] CMPCertificate,
    encryptedCert   [1] EncryptedKey
    -- Changed from Encrypted Value to EncryptedKey as a CHOICE of
    -- EncryptedValue and EnvelopedData due to the changes made in
    -- CMP Updates [RFC9480].
    -- Using the choice EncryptedValue is bit-compatible to the
    -- syntax without this change.
}

KeyRecRepContent ::= SEQUENCE {
    status                  PKIStatusInfo,
    newSigCert          [0] CMPCertificate OPTIONAL,
    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                     CMPCertificate OPTIONAL,
    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                     CertifiedKeyPair OPTIONAL }

RevReqContent ::= SEQUENCE OF RevDetails

RevDetails ::= SEQUENCE {
    certDetails         CertTemplate,
    -- allows the requester to specify as much as they can about
    -- the cert. for which revocation is requested
    -- (e.g., for cases in which serialNumber is not available)
    crlEntryDetails     Extensions{{...}}    OPTIONAL
    -- requested crlEntryExtensions
}

RevRepContent ::= SEQUENCE {
    status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
    -- in the same order as was sent in RevReqContent
    revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
    -- IDs for which revocation was requested
    -- (same order as status)
    crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
    -- the resulting CRLs (there may be more than one)
}

CAKeyUpdAnnContent ::= SEQUENCE {
    oldWithNew   CMPCertificate, -- old pub signed with new priv
    newWithOld   CMPCertificate, -- new pub signed with old priv
    newWithNew   CMPCertificate  -- new pub signed with new priv
}

CertAnnContent ::= CMPCertificate

RevAnnContent ::= SEQUENCE {
    status              PKIStatus,
    certId              CertId,
    willBeRevokedAt     GeneralizedTime,
    badSinceDate        GeneralizedTime,
    crlDetails          Extensions{{...}}  OPTIONAL
    -- extra CRL details (e.g., crl number, reason, location, etc.)
}

CRLAnnContent ::= SEQUENCE OF CertificateList
PKIConfirmContent ::= NULL

NestedMessageContent ::= PKIMessages

-- CertReqTemplateContent, AttributeTypeAndValue, 
-- ExpandedRegControlSet, id-regCtrl-altCertTemplate,
-- AltCertTemplate, regCtrl-algId, id-regCtrl-algId, AlgIdCtrl,
-- regCtrl-rsaKeyLen, id-regCtrl-rsaKeyLen, and RsaKeyLenCtrl
-- were added in CMP Updates [RFC9480]

CertReqTemplateContent ::= SEQUENCE {
   certTemplate           CertTemplate,
   -- prefilled certTemplate structure elements
   -- The SubjectPublicKeyInfo field in the certTemplate MUST NOT
   -- be used.
   keySpec                Controls OPTIONAL
   -- MAY be used to specify supported algorithms
   -- Controls  ::= SEQUENCE SIZE (1..MAX) OF AttributeTypeAndValue
   -- as specified in CRMF [RFC4211]
   }

AttributeTypeAndValue ::= SingleAttribute{{ ... }}

ExpandedRegControlSet ATTRIBUTE ::= { RegControlSet |
   regCtrl-altCertTemplate | regCtrl-algId | regCtrl-rsaKeyLen, ... }

regCtrl-altCertTemplate ATTRIBUTE ::=
   { TYPE AltCertTemplate IDENTIFIED BY id-regCtrl-altCertTemplate }

id-regCtrl-altCertTemplate OBJECT IDENTIFIER ::= { id-regCtrl 7 }

AltCertTemplate ::= AttributeTypeAndValue
   -- specifies a template for a certificate other than an X.509v3
   -- public key certificate

regCtrl-algId ATTRIBUTE ::=
   { TYPE AlgIdCtrl IDENTIFIED BY id-regCtrl-algId }

id-regCtrl-algId OBJECT IDENTIFIER ::= { id-regCtrl 11 }

AlgIdCtrl ::= AlgorithmIdentifier{ALGORITHM, {...}}
   -- SHALL be used to specify supported algorithms other than RSA

regCtrl-rsaKeyLen ATTRIBUTE ::=
   { TYPE RsaKeyLenCtrl IDENTIFIED BY id-regCtrl-rsaKeyLen }

id-regCtrl-rsaKeyLen OBJECT IDENTIFIER ::= { id-regCtrl 12 }

RsaKeyLenCtrl ::= INTEGER (1..MAX)
   -- SHALL be used to specify supported RSA key lengths

-- RootCaKeyUpdateContent, CRLSource, and CRLStatus were added in
-- CMP Updates [RFC9480]

RootCaKeyUpdateContent ::= SEQUENCE {
   newWithNew       CMPCertificate,
   -- new root CA certificate
   newWithOld   [0] CMPCertificate OPTIONAL,
   -- X.509 certificate containing the new public root CA key
   -- signed with the old private root CA key
   oldWithNew   [1] CMPCertificate OPTIONAL
   -- X.509 certificate containing the old public root CA key
   -- signed with the new private root CA key
   }

CRLSource ::= CHOICE {
   dpn          [0] DistributionPointName,
   issuer       [1] GeneralNames }

CRLStatus ::= SEQUENCE {
   source       CRLSource,
   thisUpdate   Time OPTIONAL }

INFO-TYPE-AND-VALUE ::= TYPE-IDENTIFIER

InfoTypeAndValue ::= SEQUENCE {
    infoType    INFO-TYPE-AND-VALUE.
                    &id({SupportedInfoSet}),
    infoValue   INFO-TYPE-AND-VALUE.
                    &Type({SupportedInfoSet}{@infoType}) }

SupportedInfoSet INFO-TYPE-AND-VALUE ::= { ... }

-- Example InfoTypeAndValue contents include, but are not limited
-- to, the following (uncomment in this ASN.1 module and use as
-- appropriate for a given environment):
--
--   id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
--      CAProtEncCertValue      ::= CMPCertificate
--   id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
--      SignKeyPairTypesValue   ::= SEQUENCE SIZE (1..MAX) OF
--                                      AlgorithmIdentifier{{...}}
--   id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
--      EncKeyPairTypesValue    ::= SEQUENCE SIZE (1..MAX) OF
--                                      AlgorithmIdentifier{{...}}
--   id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
--      PreferredSymmAlgValue   ::= AlgorithmIdentifier{{...}}
--   id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
--      CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
--   id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
--      CurrentCRLValue         ::= CertificateList
--   id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
--      UnsupportedOIDsValue    ::= SEQUENCE SIZE (1..MAX) OF
--                                          OBJECT IDENTIFIER
--   id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
--      KeyPairParamReqValue    ::= OBJECT IDENTIFIER
--   id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
--      KeyPairParamRepValue    ::= AlgorithmIdentifier{{...}}
--   id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
--      RevPassphraseValue      ::= EncryptedKey
--      - Changed from Encrypted Value to EncryptedKey as a CHOICE
--      - of EncryptedValue and EnvelopedData due to the changes
--      - made in CMP Updates [RFC9480]
--      - Using the choice EncryptedValue is bit-compatible to 
--      - the syntax without this change
--   id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
--      ImplicitConfirmValue    ::= NULL
--   id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
--      ConfirmWaitTimeValue    ::= GeneralizedTime
--   id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
--      OrigPKIMessageValue     ::= PKIMessages
--   id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
--      SuppLangTagsValue       ::= SEQUENCE OF UTF8String
--   id-it-caCerts          OBJECT IDENTIFIER ::= {id-it 17}
--      CaCertsValue            ::= SEQUENCE SIZE (1..MAX) OF
--                                             CMPCertificate
--      - id-it-caCerts added in CMP Updates [RFC9480]
--   id-it-rootCaKeyUpdate  OBJECT IDENTIFIER ::= {id-it 18}
--      RootCaKeyUpdateValue    ::= RootCaKeyUpdateContent
--      - id-it-rootCaKeyUpdate added in CMP Updates [RFC9480]
--   id-it-certReqTemplate  OBJECT IDENTIFIER ::= {id-it 19}
--      CertReqTemplateValue    ::= CertReqTemplateContent
--      - id-it-certReqTemplate added in CMP Updates [RFC9480]
--   id-it-rootCaCert       OBJECT IDENTIFIER ::= {id-it 20}
--      RootCaCertValue         ::= CMPCertificate
--      - id-it-rootCaCert added in CMP Updates [RFC9480]
--   id-it-certProfile      OBJECT IDENTIFIER ::= {id-it 21}
--      CertProfileValue        ::= SEQUENCE SIZE (1..MAX) OF
--                                                 UTF8String
--      - id-it-certProfile added in CMP Updates [RFC9480]
--   id-it-crlStatusList    OBJECT IDENTIFIER ::= {id-it 22}
--   CRLStatusListValue         ::= SEQUENCE SIZE (1..MAX) OF
--                                                  CRLStatus
--      - id-it-crlStatusList added in CMP Updates [RFC9480]
--   id-it-crls             OBJECT IDENTIFIER ::= {id-it 23}
--   CRLsValue                  ::= SEQUENCE SIZE (1..MAX) OF
--                                            CertificateList
--      - id-it-crls added in CMP Updates [RFC9480]
--
-- where
--
--   id-pkix OBJECT IDENTIFIER ::= {
--      iso(1) identified-organization(3)
--      dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
-- and
--   id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
--
--
-- This construct MAY also be used to define new PKIX Certificate
-- Management Protocol request and response messages or general-
-- purpose (e.g., announcement) messages for future needs or for
-- specific environments.

GenMsgContent ::= SEQUENCE OF InfoTypeAndValue

-- May be sent by EE, RA, or CA (depending on message content).
-- The OPTIONAL infoValue parameter of InfoTypeAndValue will
-- typically be omitted for some of the examples given above.
-- The receiver is free to ignore any contained OIDs that it
-- does not recognize.  If sent from EE to CA, the empty set
-- indicates that the CA may send
-- any/all information that it wishes.

GenRepContent ::= SEQUENCE OF InfoTypeAndValue
-- The receiver MAY ignore any contained OIDs that it does not
-- recognize.

ErrorMsgContent ::= SEQUENCE {
    pKIStatusInfo          PKIStatusInfo,
    errorCode              INTEGER           OPTIONAL,
    -- implementation-specific error codes
    errorDetails           PKIFreeText       OPTIONAL
    -- implementation-specific error details
}

CertConfirmContent ::= SEQUENCE OF CertStatus

CertStatus ::= SEQUENCE {
    certHash    OCTET STRING,
    -- the hash of the certificate, using the same hash algorithm
    -- as is used to create and verify the certificate signature
    certReqId   INTEGER,
    -- to match this confirmation with the corresponding req/rep
    statusInfo  PKIStatusInfo OPTIONAL,
    hashAlg [0] AlgorithmIdentifier{DIGEST-ALGORITHM, {...}} OPTIONAL
    -- the hash algorithm to use for calculating certHash
    -- SHOULD NOT be used in all cases where the AlgorithmIdentifier
    -- of the certificate signature specifies a hash algorithm
   }

PollReqContent ::= SEQUENCE OF SEQUENCE {
    certReqId              INTEGER }

PollRepContent ::= SEQUENCE OF SEQUENCE {
    certReqId              INTEGER,
    checkAfter             INTEGER,  -- time in seconds
    reason                 PKIFreeText OPTIONAL }

--
-- Extended key usage extension for PKI entities used in CMP
-- operations, added due to the changes made in
-- CMP Updates [RFC9480]
-- The EKUs for the CA and RA are reused from CMC, as defined in
-- [RFC6402]
--

-- id-kp-cmcCA OBJECT IDENTIFIER ::= { id-kp 27 }
-- id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }
id-kp-cmKGA OBJECT IDENTIFIER ::= { id-kp 32 }

END
                ]]></sourcecode>
      </section>
    </section>
    <section anchor="Acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>Special thanks goes to <contact fullname="Jim Schaad"/> for his guidance and the inspiration to structure and write this document like <xref target="RFC6402" format="default"/>, which updates CMC. Special thanks also goes to <contact fullname="Russ Housley"/>, <contact fullname="Lijun Liao"/>, <contact fullname="Martin Peylo"/>, and <contact fullname="Tomas Gustavsson"/> for reviewing and providing valuable suggestions on improving this document.</t>
      <t>We also thank all reviewers of this document for their valuable feedback.</t>
    </section>
  </back>
</rfc>
