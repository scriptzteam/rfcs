<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" 
ipr="pre5378Trust200902" 
docName="draft-ietf-openpgp-crypto-refresh-13" 
number="9580"
category="std" 
consensus="true" 
submissionType="IETF" 
obsoletes="4880, 5581, 6637" 
updates=""
tocInclude="true" 
tocDepth="4"
sortRefs="true" 
symRefs="true" 
xml:lang="en"
version="3">

  <front>
    <title abbrev="OpenPGP">OpenPGP</title>
    <seriesInfo name="RFC" value="9580"/>
    <author initials="P." surname="Wouters" fullname="Paul Wouters" role="editor">
      <organization>Aiven</organization>
      <address>
        <email>paul.wouters@aiven.io</email>
      </address>
    </author>
    <author initials="D." surname="Huigens" fullname="Daniel Huigens">
      <organization>Proton AG</organization>
      <address>
        <email>d.huigens@protonmail.com</email>
      </address>
    </author>
    <author initials="J." surname="Winter" fullname="Justus Winter">
      <organization>Sequoia PGP</organization>
      <address>
        <email>justus@sequoia-pgp.org</email>
      </address>
    </author>
    <author initials="Y." surname="Niibe" fullname="Yutaka Niibe">
      <organization>FSIJ</organization>
      <address>
        <email>gniibe@fsij.org</email>
      </address>
    </author>

    <date year="2024" month="July"/>

    <area>sec</area>
    <workgroup>openpgp</workgroup>

    <keyword>encryption</keyword>
    <keyword>digital signatures</keyword>
    <keyword>key management</keyword>
    <keyword>pgp</keyword>

    <abstract>
      <t>This document specifies the message formats used in OpenPGP.
OpenPGP provides encryption with public key or symmetric cryptographic algorithms, digital signatures, compression, and key management.</t>
<t>This document is maintained in order to publish all necessary information needed to develop interoperable applications based on the OpenPGP format. It is not a step-by-step cookbook for writing an application. It describes only the format and methods needed to read, check, generate, and write conforming packets crossing any network. It does not deal with storage and implementation questions. It does, however, discuss implementation issues necessary to avoid security flaws.</t>

      <t>This document obsoletes RFCs 4880 ("OpenPGP Message Format"), 5581 ("The Camellia Cipher in OpenPGP"), and 6637 ("Elliptic Curve Cryptography (ECC) in OpenPGP").</t>
    </abstract>
  </front>
  <middle>   
    <section anchor="introduction">
      <name>Introduction</name>
      <t>This document provides information on the message-exchange packet formats used by OpenPGP to provide encryption, decryption, signing, and key management functions.
      It is a revision of <xref target="RFC4880"/> ("OpenPGP Message Format"), which is a revision of <xref target="RFC2440"/>, which itself replaces <xref target="RFC1991"/> ("PGP Message Exchange Formats").</t>
      <t>This document obsoletes <xref target="RFC4880"/> (OpenPGP), <xref target="RFC5581"/> (Camellia in OpenPGP), and <xref target="RFC6637"/> (Elliptic Curves in OpenPGP). At the time of writing, this document incorporates all outstanding verified errata, which are listed in <xref target="errata-listing"/>.</t>
      <t>Software that has already implemented those previous specifications may want to review <xref target="upgrade-guidance"/> for pointers to what has changed.</t>
      <section anchor="terms">
        <name>Terms</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
        <t>The key words "Private Use", "Specification Required", and "RFC Required" that appear in this document when used to describe namespace allocation are to be interpreted as described in <xref target="RFC8126"/>.</t>
        <t>Some terminology used in this document has been improved from previous versions of the OpenPGP specification.
See <xref target="terminology-changes"/> for more details.</t>
      </section>
    </section>
    <section anchor="general-functions">
      <name>General Functions</name>
      <t>OpenPGP provides data confidentiality and integrity for messages and data files by using public key and/or symmetric encryption and digital signatures.
It provides formats for encoding and transferring encrypted and/or signed messages.
In addition, OpenPGP provides functionality for encoding and transferring keys and certificates, though key storage and management are beyond the scope of this document.</t>
      <section anchor="confidentiality-via-encryption">
        <name>Confidentiality via Encryption</name>
        <t>OpenPGP combines symmetric key encryption and (optionally) public key encryption to provide confidentiality.
When using public keys, first the object is encrypted using a symmetric key encryption algorithm.
Each symmetric key is used only once, for a single object.
A new "session key" is generated as a random number for each object (sometimes referred to as a "session").
Since it is used only once, the session key is bound to the message and transmitted with it.
To protect the key, it is encrypted with the receiver's public key.
The sequence is as follows:</t>
        <ol spacing="normal" type="1"><li>
            The sender creates a message.
          </li>
          <li>The sending OpenPGP implementation generates a random session key for this message.
          </li>
          <li>The session key is encrypted using each recipient's public key.
These "encrypted session keys" start the message.
          </li>
          <li>The sending OpenPGP implementation optionally compresses the message and then encrypts it using a message key derived from the session key.
The encrypted message forms the remainder of the OpenPGP Message.
          </li>
          <li>The receiving OpenPGP implementation decrypts the session key using the recipient's private key.
          </li>
          <li>The receiving OpenPGP implementation decrypts the message using the message key derived from the session key.
If the message was compressed, it will be decompressed.
          </li>
        </ol>
        <t>When using symmetric key encryption, a similar process as described above is used, but the session key is encrypted with a symmetric algorithm derived from a shared secret.</t>
        <t>Both digital signature and confidentiality services may be applied to the same message.
First, a signature is generated for the message and attached to the message.
Then, the message plus signature is encrypted using a symmetric message key derived from the session key.
Finally, the session key is encrypted using public key encryption and prefixed to the encrypted block.</t>
      </section>
      <section anchor="authentication-via-digital-signature">
        <name>Authentication via Digital Signature</name>
        <t>The digital signature uses a cryptographic hash function and a public key algorithm capable of signing.
The sequence is as follows:</t>
        <ol spacing="normal" type="1"><li>
         The sender creates a message.
          </li>
          <li>The sending implementation generates a hash digest of the message.
          </li>
          <li>The sending implementation generates a signature from the hash digest using the sender's private key.
          </li>
          <li>The signature is attached to or transmitted alongside the message.
          </li>
          <li>The receiving implementation obtains a copy of the message and the message signature.
          </li>
          <li>The receiving implementation generates a new hash digest for the received message and verifies it using the message's signature.
If the verification is successful, the message is accepted as authentic.
          </li>
        </ol>
      </section>
      <section anchor="compression">
        <name>Compression</name>
        <t>An OpenPGP implementation <bcp14>MAY</bcp14> support the compression of data.
Many existing OpenPGP Messages are compressed.
Implementers, such as those working on constrained implementations that do not want to support compression, might want to consider at least implementing decompression.</t>
      </section>
      <section anchor="conversion-to-base64">
        <name>Conversion to Base64</name>
        <t>OpenPGP's underlying representation for encrypted messages, signatures, keys, and certificates is a stream of arbitrary octets.
Some systems only permit the use of blocks consisting of 7-bit, printable text.
For transporting OpenPGP's raw binary octets through channels that are not safe to transport raw binary data, a printable encoding of these binary octets is defined. The raw 8-bit binary octet stream can be converted to a stream of printable ASCII characters using base64 encoding in a format called "ASCII Armor" (see <xref target="base64"/>).</t>
        <t>Implementations <bcp14>SHOULD</bcp14> support base64 conversions.</t>
      </section>
      <section anchor="signature-only-applications">
        <name>Signature-Only Applications</name>
        <t>OpenPGP is designed for applications that use both encryption and signatures, but there are a number of use cases that only require a signature-only implementation.
Although this specification requires both encryption and signatures, it is reasonable for there to be subset implementations that are non-conformant only in that they omit encryption support.</t>
      </section>
    </section>
    <section anchor="data-element-formats">
      <name>Data Element Formats</name>
      <t>This section describes the data elements used by OpenPGP.</t>
      <section anchor="scalar-numbers">	
        <name>Scalar Numbers</name>
        <t>Scalar numbers are unsigned and always stored in big-endian format.
Using n[k] to refer to the kth octet being interpreted, the value of a 2-octet scalar is ((n[0] &lt;&lt; 8) + n[1]).
The value of a 4-octet scalar is ((n[0] &lt;&lt; 24) + (n[1] &lt;&lt; 16) + (n[2] &lt;&lt; 8) + n[3]).</t>
      </section>
      <section anchor="mpi">
        <name>Multiprecision Integers</name>
        <t>Multiprecision Integers (MPIs) are unsigned integers used to hold large integers such as the ones used in cryptographic calculations.</t>
        <t>An MPI consists of two pieces: a 2-octet scalar that is the length of the MPI in bits, followed by a string of octets that contain the actual integer.</t>
        <t>These octets form a big-endian number; a big-endian number can be made into an MPI by prefixing it with the appropriate length.</t>
        <t>Examples:</t>
        <t>(Note that all numbers in the octet strings identified by square brackets are in hexadecimal.)</t>

	<ul empty="true">
<li>The string of octets [00 00] forms an MPI with the value 0.</li>
<li>The string of octets [00 01 01] forms an MPI with the value 1.</li>
<li>The string [00 09 01 FF] forms an MPI with the value 511.</li>
	</ul>
        <t>Additional rules:</t>
        <ul>
        <li>The size of an MPI is ((MPI.length + 7) / 8) + 2 octets.</li>
        <li>The length field of an MPI describes the length starting from its most significant non-zero bit. Thus, the MPI [00 02 01] is not formed correctly.
It should be [00 01 01]. When parsing an MPI in a version 6 Key, Signature, or Public Key Encrypted Session Key (PKESK) packet, the implementation <bcp14>MUST</bcp14> check that the encoded length matches the length starting from the most significant non-zero bit; if it doesn't match, reject the packet as malformed.</li>
        <li>Unused bits of an MPI <bcp14>MUST</bcp14> be zero.</li>
      </ul>
        <section anchor="using-mpis-to-encode-other-data">
          <name>Using MPIs to Encode Other Data</name>
          <t>Note that in some places, MPIs are used to encode non-integer data, such as an elliptic curve (EC) point (see <xref target="ec-point-wire-formats"/>) or an octet string of known, fixed length (see <xref target="ec-scalar-wire-formats"/>). The wire representation is the same: 2 octets of length in bits counted from the first non-zero bit, followed by the smallest series of octets that can represent the value while stripping off any leading zero octets.</t>
        </section>
      </section>
      <section anchor="key-ids-and-fingerprints">
        <name>Key IDs and Fingerprints</name>
        <t>A Key ID is an 8-octet scalar that identifies a key.
Implementations <bcp14>SHOULD NOT</bcp14> assume that Key IDs are unique.
A fingerprint is more likely to be unique than a Key ID.
The fingerprint and Key ID of a key are calculated differently according to the version of the key.</t>
        <t><xref target="key-ids-fingerprints"/> describes how Key IDs and Fingerprints are formed.</t>
      </section>
      <section anchor="text">
        <name>Text</name>
        <t>Unless otherwise specified, the character set for text is the UTF-8 <xref target="RFC3629"/> encoding of Unicode <xref target="ISO10646"/>.</t>
      </section>
      <section anchor="time-fields">
        <name>Time Fields</name>
        <t>A time field is an unsigned 4-octet number containing the number of seconds elapsed since midnight, 1 January 1970 UTC.</t>
      </section>
      <section anchor="keyrings">
        <name>Keyrings</name>
        <t>A keyring is a collection of one or more keys in a file or database.
Typically, a keyring is simply a sequential list of keys, but it may be any suitable database.
It is beyond the scope of this specification to discuss the details of keyrings or other databases.</t>
      </section>
      <section anchor="string-to-key-s2k-specifier">
        <name>String-to-Key (S2K) Specifier</name>
        <t>A string-to-key (S2K) Specifier is used to convert a passphrase string into a symmetric key encryption/decryption key. Passphrases requiring use of S2K conversion are currently used in two places: to encrypt the secret part of private keys and for symmetrically encrypted messages.</t>
        <section anchor="s2k-types">
          <name>S2K Specifier Types</name>
          <t>There are four types of S2K Specifiers currently specified and some reserved values:</t>
          <table anchor="s2k-types-registry">
            <name>OpenPGP String-to-Key (S2K) Types Registry</name>
            <thead>
              <tr>
                <th align="right">ID</th>
                <th align="left">S2K Type</th>
                <th align="left">S2K Field Size (Octets)</th>               
                <th align="left">Generate?</th>
		<th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="right">0</td>
                <td align="left">Simple S2K</td>
                <td align="left">2</td>               
                <td align="left">No</td>
		<td align="left"><xref target="s2k-simple"/></td>
              </tr>
              <tr>
                <td align="right">1</td>
                <td align="left">Salted S2K</td>
                <td align="left">10</td>              
                <td align="left">Only when string is high entropy</td>
		<td align="left"><xref target="s2k-salted"/></td>
              </tr>
              <tr>
                <td align="right">2</td>
                <td align="left">Reserved value</td>
                <td align="left">-</td>              
                <td align="left">No</td>
		<td align="left"></td>
              </tr>
              <tr>
                <td align="right">3</td>
                <td align="left">Iterated and Salted S2K</td>
                <td align="left">11</td>            
                <td align="left">Yes</td>
		<td align="left"><xref target="s2k-iter-salted"/></td>
              </tr>
              <tr>
                <td align="right">4</td>
                <td align="left">Argon2</td>
                <td align="left">20</td>              
                <td align="left">Yes</td>
		<td align="left"><xref target="s2k-argon2"/></td>
              </tr>
              <tr>
                <td align="right">100-110</td>
                <td align="left">Private or Experimental Use</td>
                <td align="left">-</td>
                <td align="left">As appropriate</td>
		<td align="left"></td>
              </tr>
            </tbody>
          </table>
          <t>The S2K Specifier Types are described in the subsections below.
If "Yes" is not present in the "Generate?" column, the S2K entry is used only for reading in backward-compatibility mode and <bcp14>SHOULD NOT</bcp14> be used to generate new output.</t>
          <section anchor="s2k-simple">
            <name>Simple S2K</name>
            <t>Simple S2K directly hashes the string to produce the key data. This hashing is done as shown below.</t> 
            <artwork><![CDATA[
  Octet 0:        0x00
  Octet 1:        hash algorithm
]]></artwork>
            <t>Simple S2K hashes the passphrase to produce the session key.
The manner in which this is done depends on the size of the session key (which depends on the cipher the session key will be used with) and the size of the hash algorithm's output.
If the hash size is greater than the session key size, the high-order (leftmost) octets of the hash are used as the key.</t>
            <t>If the hash size is less than the key size, multiple instances of the hash context are created -- enough to produce the required key data. These instances are preloaded with 0, 1, 2, ...
octets of zeros (that is, the first instance has no preloading, the second gets preloaded with 1 octet of zero, the third is preloaded with 2 octets of zeros, and so forth).</t>
            <t>As the data is hashed, it is given independently to each hash context. Since the contexts have been initialized differently, they will each produce a different hash output. Once the passphrase is hashed, the output data from the multiple hashes is concatenated, first hash leftmost, to produce the key data, and any excess octets on the right are discarded.</t>
          </section>
          <section anchor="s2k-salted">
            <name>Salted S2K</name>
            <t>Salted S2K includes a "salt" value in the S2K Specifier -- some arbitrary data -- that gets hashed along with the passphrase string to help prevent dictionary attacks.</t>
            <artwork><![CDATA[
  Octet 0:        0x01
  Octet 1:        hash algorithm
  Octets 2-9:     8-octet salt value
]]></artwork>
            <t>Salted S2K is exactly like Simple S2K, except that the input to the hash function(s) consists of the 8 octets of salt from the S2K Specifier, followed by the passphrase.</t>
          </section>
          <section anchor="s2k-iter-salted">
            <name>Iterated and Salted S2K</name>
            <t>Iterated and Salted S2K includes both a salt and an octet count.
The salt is combined with the passphrase, and the resulting value is repeated and then hashed.
This further increases the amount of work an attacker must do to try dictionary attacks.</t>
            <artwork><![CDATA[
  Octet  0:        0x03
  Octet  1:        hash algorithm
  Octets 2-9:      8-octet salt value
  Octet  10:       count; a 1-octet coded value
]]></artwork>
            <t>The count is coded into a 1-octet number using the following formula:</t>
            <artwork><![CDATA[
  #define EXPBIAS 6
      count = ((Int32)16 + (c & 15)) << ((c >> 4) + EXPBIAS);
]]></artwork>
            <t>The above formula is described in <xref target="C99"/>, where "Int32" is a type for a 32-bit integer, and the variable "c" is the coded count, octet 10.</t>
            <t>Iterated and Salted S2K hashes the passphrase and salt data multiple times.
The total number of octets to be hashed is specified in the encoded count in the S2K Specifier.
	    Note that the resulting count value is an octet count of how many octets will be hashed, not an iteration count.</t>
	    
            <t>Initially, one or more hash contexts are set up the same as the other S2K algorithms, depending on how many octets of key data are needed. Then the salt, followed by the passphrase data, is repeatedly processed as input to each hash context until the number of octets specified by the octet count has been hashed. The input is truncated to the octet count, except if the octet count is less than the initial size of the salt plus passphrase. That is, at least one copy of the full salt plus passphrase will be provided as input to each hash context regardless of the octet count. After the hashing is done, the key data is produced from the hash digest(s), which is the same way it is produced for the other S2K algorithms.</t>
          </section>
          <section anchor="s2k-argon2">
            <name>Argon2</name>
            <t>This S2K method hashes the passphrase using Argon2, as specified in <xref target="RFC9106"/>.
	    This provides memory hardness, further protecting the passphrase against brute-force attacks.</t>
	    
            <artwork><![CDATA[
  Octet  0:        0x04
  Octets 1-16:     16-octet salt value
  Octet  17:       1-octet number of passes t
  Octet  18:       1-octet degree of parallelism p
  Octet  19:       1-octet encoded_m, specifying the exponent of
                      the memory size
]]></artwork>
            <t>The salt <bcp14>SHOULD</bcp14> be unique for each passphrase.</t>
            <t>The number of passes t and the degree of parallelism p <bcp14>MUST</bcp14> be non-zero.</t>
            <t>The memory size m is 2<sup><tt>encoded_m</tt></sup> kibibytes (KiB) of RAM.
The encoded memory size <bcp14>MUST</bcp14> be a value from 3+ceil(log<sub>2</sub>(p)) to 31, such that the decoded memory size m is a value from 8*p to 2<sup>31</sup>. Note that memory-hardness size is indicated in KiB, not octets.</t>	    
            <t>Argon2 is invoked with the passphrase as P, the salt as S, the values of t, p, and m as described above, the required key size as the tag length T, 0x13 as the version v, and Argon2id as the type.</t>
            <t>For the recommended values of t, p, and m, see <xref section="4" sectionFormat="of" target="RFC9106"/>.
If the recommended value of m for a given application is not a power of 2, it is <bcp14>RECOMMENDED</bcp14> to round up to the next power of 2 if the resulting performance would be acceptable; otherwise, round down (keeping in mind that m must be at least 8*p).</t>
            <t>As an example, with the first recommended option (t=1, p=4, m=2<sup>21</sup>), the full S2K Specifier would be:</t>
            <artwork><![CDATA[
  04 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX
  XX 01 04 15
]]></artwork>
            <t>where XX represents a random octet of salt.</t>
          </section>
        </section>
        <section anchor="s2k-usage-octet">
          <name>S2K Usage</name>
          <t>Simple S2K and Salted S2K Specifiers can be brute-forced when used with a low-entropy string, such as those typically provided by users.
In addition, the usage of Simple S2K can lead to key and initialization vector (IV) reuse (see <xref target="skesk"/>).
Therefore, when generating an S2K Specifier, an implementation <bcp14>MUST NOT</bcp14> use Simple S2K.
Furthermore, an implementation <bcp14>SHOULD NOT</bcp14> generate a Salted S2K unless the implementation knows that the input string is high entropy (for example, it generated the string itself using a known good source of randomness).</t>
          <t>It is <bcp14>RECOMMENDED</bcp14> that implementations use Argon2.
If Argon2 is not available, Iterated and Salted S2K <bcp14>MAY</bcp14> be used if care is taken to use a high octet count and a strong passphrase.
However, this method does not provide memory hardness, unlike Argon2.</t>
          <section anchor="secret-key-encryption">
            <name>Secret Key Encryption</name>
            <t>The first octet following the public key material in a Secret Key packet (<xref target="secret-key-packet-formats"/>) indicates whether and how the secret key material is passphrase protected.
This first octet is known as the "S2K usage octet".</t>
            <t>If the S2K usage octet is zero, the secret key data is unprotected.
If it is non-zero, it describes how to use a passphrase to unlock the secret key.</t>
            <t>Implementations predating <xref target="RFC2440"/> indicated a protected key by storing a Symmetric Cipher Algorithm ID (see <xref target="symmetric-algos"/>) in the S2K usage octet.
In this case, the MD5 hash function was always used to convert the passphrase to a key for the specified cipher algorithm.</t>
            <t>Later implementations indicate a protected secret key by storing one of the special values 253 (AEAD), 254 (CFB), or 255 (MalleableCFB) in the S2K usage octet. The S2K usage octet is then followed immediately by a set of fields that describe how to convert a passphrase to a symmetric key that can unlock the secret material, plus other parameters relevant to the type of encryption used.</t>
            <t>The wire format fields also differ based on the version of the enclosing OpenPGP packet.
	    The table below, indexed by the S2K usage octet, summarizes the specifics described in <xref target="secret-key-packet-formats"/>.</t>
	    
            <t>In the table below, <tt>check(x)</tt> means the "2-octet checksum", which is the sum of all octets in x mod 65536. The <tt>info</tt> and <tt>packetprefix</tt> parameters are described in detail in <xref target="secret-key-packet-formats"/>.  Note that the "Generate?" column header has been shortened to "Gen?" here.</t>
            <table anchor="secret-key-protection-registry">
              <name>OpenPGP Secret Key Encryption (S2K Usage Octet) Registry</name>
              <thead>
                <tr>
                  <th align="left">S2K Usage Octet</th>
                  <th align="left">Shorthand</th>
                  <th align="left">Encryption Parameter Fields</th>
                  <th align="left">Encryption</th>
                  <th align="left">Gen?</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0</td>
                  <td align="left">Unprotected</td>
                  <td align="left">-</td>
                  <td align="left"> <strong>v3 or v4 keys:</strong> [cleartext secrets || check(secrets)] <br/>
                    <strong>v6 keys:</strong> [cleartext secrets]
                   </td>
                  <td align="left">Yes</td>
                </tr>
                <tr>
                  <td align="left">Known symmetric cipher algo ID (see <xref target="symmetric-algos"/>)</td>
                  <td align="left">LegacyCFB</td>
                  <td align="left">IV</td>
                  <td align="left">CFB(MD5(passphrase), secrets || check(secrets))</td>
                  <td align="left">No</td>
                </tr>
                <tr>
                  <td align="left">253</td>
                  <td align="left">AEAD</td>
                  <td align="left">params-length (<strong>v6-only</strong>), cipher-algo, AEAD-mode, S2K-specifier-length (<strong>v6-only</strong>), S2K-specifier, nonce
</td>
                  <td align="left">AEAD(HKDF(S2K(passphrase), info), secrets, packetprefix)</td>
                  <td align="left">Yes</td>
                </tr>
                <tr>
                  <td align="left">254</td>
                  <td align="left">CFB</td>
                  <td align="left">params-length (<strong>v6-only</strong>), cipher-algo, S2K-specifier-length (<strong>v6-only</strong>), S2K-specifier, IV</td>
                  <td align="left">CFB(S2K(passphrase), secrets || SHA1(secrets))</td>
                  <td align="left">Yes</td>
                </tr>
                <tr>
                  <td align="left">255</td>
                  <td align="left">MalleableCFB</td>
                  <td align="left">cipher-algo, S2K-specifier, IV</td>
                  <td align="left">CFB(S2K(passphrase), secrets || check(secrets))</td>
                  <td align="left">No</td>
                </tr>
              </tbody>
            </table>
            <t>When emitting a secret key (with or without passphrase protection), an implementation <bcp14>MUST</bcp14> only produce data from a row with "Generate?" marked as "Yes".
Each row with "Generate?" marked as "No" is described for backward compatibility (for reading version 4 and earlier keys only) and <bcp14>MUST NOT</bcp14> be used to generate new output.
Version 6 secret keys using these formats <bcp14>MUST</bcp14> be rejected.</t>
            <t>Note that compared to a version 4 secret key, the parameters of a passphrase-protected version 6 secret key are stored with an additional pair of length counts, each of which is 1 octet wide.</t>
            <t>Argon2 is only used with Authenticated Encryption with Associated Data (AEAD) (S2K usage octet 253).
An implementation <bcp14>MUST NOT</bcp14> create and <bcp14>MUST</bcp14> reject as malformed any Secret Key packet where the S2K usage octet is not AEAD (253) and the S2K Specifier Type is Argon2.</t>
          </section>
          <section anchor="symmetric-key-message-encryption">
            <name>Symmetric Key Message Encryption</name>
            <t>OpenPGP can create a Symmetric Key Encrypted Session Key (SKESK) packet at the front of a message.
	    This is used to allow S2K Specifiers to be used for the passphrase conversion or to create messages with a mix of SKESK packets and PKESK packets. This allows a message to be decrypted with either a passphrase or a public key pair.</t> 
            <t>Implementations predating <xref target="RFC2440"/> always used the International Data Encryption Algorithm (IDEA) with Simple S2K conversion when encrypting a message with a symmetric algorithm;
see <xref target="sed"/>. IDEA <bcp14>MUST NOT</bcp14> be generated but <bcp14>MAY</bcp14> be consumed for backward compatibility.</t>
          </section>
        </section>
      </section>
    </section>
    <section anchor="packet-syntax">
      <name>Packet Syntax</name>
      <t>This section describes the packets used by OpenPGP.</t>
      <section anchor="overview">
        <name>Overview</name>
        <t>An OpenPGP Message is constructed from a number of records that are typically called packets.
A packet is a chunk of data that has a Type ID specifying its meaning.
An OpenPGP Message, keyring, certificate, detached signature, and so forth consists of a number of packets.
Some of those packets may contain other OpenPGP packets (for example, a compressed data packet, when uncompressed, contains OpenPGP packets).</t>
        <t>Each packet consists of a packet header, followed by the packet body.
The packet header is of variable length.</t>
        <t>When handling a stream of packets, the length information in each packet header is the canonical source of packet boundaries.
An implementation handling a packet stream that wants to find the next packet <bcp14>MUST</bcp14> look for it at the precise offset indicated in the previous packet header.</t>
        <t>Additionally, some packets contain internal length indicators (for example, a subfield within the packet).
In the event that a subfield length indicator within a packet implies inclusion of octets outside the range indicated in the packet header, a parser <bcp14>MUST</bcp14> abort without writing outside the indicated range and <bcp14>MUST</bcp14> treat the packet as malformed and unusable.</t>
        <t>An implementation <bcp14>MUST NOT</bcp14> interpret octets outside the range indicated in the packet header as part of the contents of the packet.</t>
      </section>
      <section anchor="packet-headers">
        <name>Packet Headers</name>
        <t>The first octet of the packet denotes the format of the rest of the header, and it encodes the Packet Type ID, indicating the type of the packet (see <xref target="packet-types"/>). The remainder of the packet header is the length of the packet.</t>
        <t>There are two packet formats: 1) the (current) OpenPGP packet format specified by this document and its predecessors <xref target="RFC4880"/> and <xref target="RFC2440"/> and 2) the Legacy packet format as used by implementations predating any IETF specification of OpenPGP.</t>
        <t>Note that the most significant bit is the leftmost bit, called "bit 7".
A mask for this bit is 0x80 in hexadecimal.</t>
        <artwork><![CDATA[
                          +---------------+
  Encoded Packet Type ID: |7 6 5 4 3 2 1 0|
                          +---------------+
  OpenPGP format:
    Bit 7 -- always one
    Bit 6 -- always one
    Bits 5 to 0 -- Packet Type ID

  Legacy format:
    Bit 7 -- always one
    Bit 6 -- always zero
    Bits 5 to 2 -- Packet Type ID
    Bits 1 to 0 -- length-type
]]></artwork>
        <t>Bit 6 of the first octet of the packet header indicates whether the packet is encoded in the OpenPGP or Legacy packet format.
The Legacy packet format <bcp14>MAY</bcp14> be used when consuming packets to facilitate interoperability and accessing archived data.
The Legacy packet format <bcp14>SHOULD NOT</bcp14> be used to generate new data, unless the recipient is known to only support the Legacy packet format. This latter case is extremely unlikely, as the Legacy packet format was obsoleted by <xref target="RFC2440"/> in 1998.</t>
        <t>An implementation that consumes and redistributes pre-existing OpenPGP data (such as Transferable Public Keys) may encounter packets framed with the Legacy packet format. Such an implementation <bcp14>MAY</bcp14> either redistribute these packets in their Legacy format or transform them to the current OpenPGP packet format before redistribution.</t>
        <t>Note that Legacy format headers only have 4 bits for the Packet Type ID and hence can only encode Packet Type IDs less than 16, whereas the OpenPGP format headers can encode IDs as great as 63.</t>
        <section anchor="openpgp-packet-format">
          <name>OpenPGP Format Packet Lengths</name>
          <t>OpenPGP format packets have four possible ways of encoding length:</t>
          <ol spacing="normal" type="1"><li>
              <t>A 1-octet Body Length header encodes packet lengths of up to 191 octets.</t>
            </li>
            <li>
              <t>A 2-octet Body Length header encodes packet lengths of 192 to 8383 octets.</t>
            </li>
            <li>
              <t>A 5-octet Body Length header encodes packet lengths of up to 4,294,967,295 (0xFFFFFFFF) octets in length.
(This actually encodes a 4-octet scalar number.)</t>
            </li>
            <li>
              <t>When the length of the packet body is not known in advance by the issuer, Partial Body Length headers encode a packet of indeterminate length, effectively making it a stream.</t>
            </li>
          </ol>
          <section anchor="one-octet-lengths">
            <name>1-Octet Lengths</name>
            <t>A 1-octet Body Length header encodes a length of 0 to 191 octets.
This type of length header is recognized because the 1-octet value is less than 192.
The body length is equal to:</t>
            <artwork><![CDATA[
  bodyLen = 1st_octet;
]]></artwork>
          </section>
          <section anchor="two-octet-lengths">
            <name>2-Octet Lengths</name>
            <t>A 2-octet Body Length header encodes a length of 192 to 8383 octets.
It is recognized because its first octet is in the range 192 to 223.
The body length is equal to:</t>
            <artwork><![CDATA[
  bodyLen = ((1st_octet - 192) << 8) + (2nd_octet) + 192
]]></artwork>
          </section>
          <section anchor="five-octet-lengths">
            <name>5-Octet Lengths</name>
            <t>A 5-octet Body Length header consists of a single octet holding the value 255, followed by a 4-octet scalar. The body length is equal to:</t>
            <artwork><![CDATA[
  bodyLen = (2nd_octet << 24) | (3rd_octet << 16) |
            (4th_octet << 8)  | 5th_octet
]]></artwork>
            <t>This basic set of 1-octet, 2-octet, and 5-octet lengths is also used internally to some packets.</t>
          </section>
          <section anchor="partial-body-lengths">
            <name>Partial Body Lengths</name>
            <t>A Partial Body Length header is 1 octet long and encodes the length of only part of the data packet.
This length is a power of 2, from 1 to 1,073,741,824 (2 to the 30th power).
It is recognized by its 1-octet value that is greater than or equal to 224, and less than 255.
The Partial Body Length is equal to:</t>
            <artwork><![CDATA[
  partialBodyLen = 1 << (1st_octet & 0x1F);
]]></artwork>
            <t>Each Partial Body Length header is followed by a portion of the packet body data;
the Partial Body Length header specifies this portion's length.
Another length header (1-octet, 2-octet, 5-octet, or partial) follows that portion.
The last length header in the packet <bcp14>MUST NOT</bcp14> be a Partial Body Length header.
Partial Body Length headers may only be used for the non-final parts of the packet.</t>
            <t>Note also that the last Body Length header can be a zero-length header.</t>
            <t>An implementation <bcp14>MAY</bcp14> use Partial Body Lengths for data packets, whether they are literal, compressed, or encrypted. The first partial length <bcp14>MUST</bcp14> be at least 512 octets long.
Partial Body Lengths <bcp14>MUST NOT</bcp14> be used for any other packet types.</t>
          </section>
        </section>
        <section anchor="legacy-packet-format">
          <name>Legacy Format Packet Lengths</name>
          <t>A zero in bit 6 of the first octet of the packet indicates a Legacy packet format.
Bits 1 and 0 of the first octet of a Legacy packet are the "length-type" field.
The meaning of length-type in Legacy format packets is as follows:</t>
          <dl>
            <dt>0</dt>
            <dd>The packet has a 1-octet length. The header is 2 octets long.
            </dd>
            <dt>1</dt>
            <dd>The packet has a 2-octet length. The header is 3 octets long.
            </dd>
            <dt>2</dt>
            <dd>The packet has a 4-octet length. The header is 5 octets long.
            </dd>
            <dt>3</dt>
            <dd>The packet is of indeterminate length.
The header is 1 octet long, and the implementation must determine how long the packet is.
If the packet is in a file, it means that the packet extends until the end of the file.
The OpenPGP format headers have a mechanism for precisely encoding data of indeterminate length.
An implementation <bcp14>MUST NOT</bcp14> generate a Legacy format packet with indeterminate length.
An implementation <bcp14>MAY</bcp14> interpret an indeterminate length Legacy format packet in order to deal with historic data or data generated by a legacy system that predates support for <xref target="RFC2440"/>.
            </dd>
          </dl>
        </section>
        <section anchor="packet-length-examples">
          <name>Packet Length Examples</name>
          <t>These examples show ways that OpenPGP format packets might encode the packet body lengths.</t>
	  <ul>
          <li>A packet body with length 100 may have its length encoded in one octet: 0x64.
This is followed by 100 octets of data.</li>
          <li>A packet body with length 1723 may have its length encoded in two octets: 0xC5, 0xFB.
This header is followed by the 1723 octets of data.</li>
<li>A packet body with length 100000 may have its length encoded in five octets: 0xFF, 0x00, 0x01, 0x86, 0xA0.</li>
	  </ul>
          <t>It might also be encoded in the following octet stream:</t>
	  <ul>
	    <li>0xEF, first 32768 octets of data;</li>
	    <li>0xE1, next 2 octets of data;</li>
	    <li>0xE0, next 1 octet of data;</li>
	    <li>0xF0, next 65536 octets of data; and </li>
	    <li>0xC5, 0xDD, last 1693 octets of data.</li>
	  </ul>
<t>This is just one possible encoding, and many variations are possible on the size of the Partial Body Length headers, as long as a regular Body Length header encodes the last portion of the data.</t>
          <t>Please note that in all of these explanations, the total length of the packet is the length of the header(s) plus the length of the body.</t>
        </section>
      </section>
      <section anchor="packet-criticality">
        <name>Packet Criticality</name>
        <t>The Packet Type ID space is partitioned into critical packets and non-critical packets.
If an implementation encounters a critical packet where the packet type is unknown in a packet sequence, it <bcp14>MUST</bcp14> reject the whole packet sequence (see <xref target="packet-sequence-composition"/>).
On the other hand, an unknown non-critical packet <bcp14>MUST</bcp14> be ignored.</t>
        <t>Packets with Type IDs from 0 to 39 are critical.
Packets with Type IDs from 40 to 63 are non-critical.</t>
      </section>
    </section>
    <section anchor="packet-types">
      <name>Packet Types</name>
      <t>The defined packet types are as follows:</t>
      <table anchor="packet-types-registry">
        <name>OpenPGP Packet Types Registry</name>
        <thead>
          <tr>
            <th align="right">ID</th>
            <th align="left">Critical</th>
            <th align="left">Packet Type Description</th>
            <th align="left">Shorthand</th>
	    <th align="left">Reference</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="right">0</td>
            <td align="left">Yes</td>
            <td align="left">Reserved - this Packet Type ID <bcp14>MUST NOT</bcp14> be used</td>
            <td align="left"> </td>
            <td align="left"></td>
          </tr>
          <tr>
            <td align="right">1</td>
            <td align="left">Yes</td>
            <td align="left">Public Key Encrypted Session Key Packet</td>          
            <td align="left">PKESK</td>
	     <td align="left"><xref target="pkesk"/></td>
          </tr>
          <tr>
            <td align="right">2</td>
            <td align="left">Yes</td>
            <td align="left">Signature Packet</td>          
            <td align="left">SIG</td>
	     <td align="left"><xref target="signature-packet"/></td>
          </tr>
          <tr>
            <td align="right">3</td>
            <td align="left">Yes</td>
            <td align="left">Symmetric Key Encrypted Session Key Packet</td>
            <td align="left">SKESK</td>
	     <td align="left"><xref target="skesk"/></td>
          </tr>
          <tr>
            <td align="right">4</td>
            <td align="left">Yes</td>
            <td align="left">One-Pass Signature Packet</td>            
            <td align="left">OPS</td>
	    <td align="left"><xref target="one-pass-sig"/></td>
          </tr>
          <tr>
            <td align="right">5</td>
            <td align="left">Yes</td>
            <td align="left">Secret Key Packet</td>          
            <td align="left">SECKEY</td>
	     <td align="left"><xref target="seckey"/></td>
          </tr>
          <tr>
            <td align="right">6</td>
            <td align="left">Yes</td>
            <td align="left">Public Key Packet</td>          
            <td align="left">PUBKEY</td>
	      <td align="left"><xref target="pubkey"/></td>
          </tr>
          <tr>
            <td align="right">7</td>
            <td align="left">Yes</td>
            <td align="left">Secret Subkey Packet</td>            
            <td align="left">SECSUBKEY</td>
	    <td align="left"><xref target="secsubkey"/></td>
          </tr>
          <tr>
            <td align="right">8</td>
            <td align="left">Yes</td>
            <td align="left">Compressed Data Packet</td>          
            <td align="left">COMP</td>
	      <td align="left"><xref target="compressed-data"/></td>
          </tr>
          <tr>
            <td align="right">9</td>
            <td align="left">Yes</td>
            <td align="left">Symmetrically Encrypted Data Packet</td>          
            <td align="left">SED</td>
	      <td align="left"><xref target="sed"/></td>
          </tr>
          <tr>
            <td align="right">10</td>
            <td align="left">Yes</td>
            <td align="left">Marker Packet</td>           
            <td align="left">MARKER</td>
	     <td align="left"><xref target="marker-packet"/></td>
          </tr>
          <tr>
            <td align="right">11</td>
            <td align="left">Yes</td>
            <td align="left">Literal Data Packet</td>           
            <td align="left">LIT</td>
	     <td align="left"><xref target="lit"/></td>
          </tr>
          <tr>
            <td align="right">12</td>
            <td align="left">Yes</td>
            <td align="left">Trust Packet</td>           
            <td align="left">TRUST</td>
	     <td align="left"><xref target="trust"/></td>
          </tr>
          <tr>
            <td align="right">13</td>
            <td align="left">Yes</td>
            <td align="left">User ID Packet</td>            
            <td align="left">UID</td>
	    <td align="left"><xref target="uid"/></td>
          </tr>
          <tr>
            <td align="right">14</td>
            <td align="left">Yes</td>
            <td align="left">Public Subkey Packet</td>          
            <td align="left">PUBSUBKEY</td>
	     <td align="left"><xref target="pubsubkey"/></td>
          </tr>
          <tr>
            <td align="right">17</td>
            <td align="left">Yes</td>
            <td align="left">User Attribute Packet</td>           
            <td align="left">UAT</td>
	     <td align="left"><xref target="user-attribute-packet"/></td>
          </tr>
          <tr>
            <td align="right">18</td>
            <td align="left">Yes</td>
            <td align="left">Symmetrically Encrypted and Integrity Protected Data Packet</td>           
            <td align="left">SEIPD</td>
	     <td align="left"><xref target="seipd"/></td>
          </tr>
          <tr>
            <td align="right">19</td>
            <td align="left">Yes</td>
            <td align="left">Reserved (formerly Modification Detection Code Packet)</td>      
            <td align="left"> </td>
	    <td align="left"><xref target="version-one-seipd"/></td>
          </tr>
          <tr>
            <td align="right">20</td>
            <td align="left">Yes</td>
            <td align="left">Reserved</td>
            <td align="left"> </td>
            <td align="left"></td>
          </tr>
          <tr>
            <td align="right">21</td>
            <td align="left">Yes</td>
            <td align="left">Padding Packet</td>    
            <td align="left">PADDING</td>
	    <td align="left"><xref target="padding-packet"/></td>
          </tr>
          <tr>
            <td align="right">22-39</td>
            <td align="left">Yes</td>
            <td align="left">Unassigned Critical Packets</td>
            <td align="left"> </td>
            <td align="left"> </td>
          </tr>
          <tr>
            <td align="right">40-59</td>
            <td align="left">No</td>
            <td align="left">Unassigned Non-Critical Packets</td>
            <td align="left"> </td>
            <td align="left"> </td>
          </tr>
          <tr>
            <td align="right">60-63</td>
            <td align="left">No</td>
            <td align="left">Private or Experimental Use</td>
            <td align="left"> </td>
            <td align="left"></td>
          </tr>
        </tbody>
      </table>
      <t>The labels in the "Shorthand" column are used for compact reference elsewhere in this document, and they may also be used by implementations that provide debugging or inspection affordances for streams of OpenPGP packets.</t>
      <section anchor="pkesk">
        <name>Public Key Encrypted Session Key Packet (Type ID 1)</name>
        <t>Zero or more PKESK packets and/or SKESK packets (<xref target="skesk"/>) precede an encryption container (that is, a Symmetrically Encrypted and Integrity Protected Data (SEIPD) packet or -- for historic data -- a Symmetrically Encrypted Data (SED) packet), which holds an Encrypted Message.
The message is encrypted with the session key, and the session key is itself encrypted and stored in the Encrypted Session Key packet(s). The encryption container is preceded by one Public Key Encrypted Session Key packet for each OpenPGP Key to which the message is encrypted. The recipient of the message finds a session key that is encrypted to their public key, decrypts the session key, and then uses the session key to decrypt the message.</t>
        <t>The body of this packet starts with a 1-octet number giving the version number of the packet type. The currently defined versions are 3 and 6. The remainder of the packet depends on the version.</t>
        <t>The versions differ in how they identify the recipient key and in what they encode.
The version of the PKESK packet must align with the version of the SEIPD packet (see <xref target="encrypted-message-versions"/>).
Any new version of the PKESK packet should be registered in the registry established in <xref target="encrypted-message-versions"/>.</t>
        <section anchor="v3-pkesk">
          <name>Version 3 Public Key Encrypted Session Key Packet Format</name>
          <t>A version 3 PKESK packet precedes a v1 SEIPD packet (see <xref target="version-one-seipd"/>).
In historic data, it is sometimes found preceding a deprecated SED packet; see <xref target="sed"/>.
A v3 PKESK packet <bcp14>MUST NOT</bcp14> precede a v2 SEIPD packet (see <xref target="encrypted-message-versions"/>).</t>
          <t>The v3 PKESK packet consists of:</t>
          <ul spacing="normal">
            <li>A 1-octet version number with value 3.
            </li>
            <li>An 8-octet number that gives the Key ID of the public key to which the session key is encrypted.
If the session key is encrypted to a subkey, then the Key ID of this subkey is used here instead of the Key ID of the primary key.
The Key ID may also be all zeros, for an "anonymous recipient" (see <xref target="pkesk-notes"/>).
            </li>
            <li>A 1-octet number giving the public key algorithm used.
            </li>
            <li>A series of values comprising the encrypted session key.
This is algorithm specific and described below.
            </li>
          </ul>
          <t>The public key encryption algorithm (described in subsequent sections) is passed two values:</t>
          <ul spacing="normal">
            <li>The session key.
            </li>
            <li>
              <t>The 1-octet algorithm identifier that specifies the symmetric key encryption algorithm used to encrypt the v1 SEIPD packet described in the following section.</t>
            </li>
          </ul>
        </section>
        <section anchor="v6-pkesk">
          <name>Version 6 Public Key Encrypted Session Key Packet Format</name>
          <t>A v6 PKESK packet precedes a v2 SEIPD packet (see <xref target="version-two-seipd"/>).
A v6 PKESK packet <bcp14>MUST NOT</bcp14> precede a v1 SEIPD packet or a deprecated SED packet (see <xref target="encrypted-message-versions"/>).</t>
          <t>The v6 PKESK packet consists of the following fields:</t>
          <ul spacing="normal">
            <li>A 1-octet version number with value 6.
            </li>	    
            <li>A 1-octet size of the following two fields.
This size may be zero, if the key version number field and the fingerprint field are omitted for an "anonymous recipient" (see <xref target="pkesk-notes"/>).
            </li>
            <li>A 1-octet key version number.
            </li>
            <li>The fingerprint of the public key or subkey to which the session key is encrypted.
Note that the length N of the fingerprint for a version 4 key is 20 octets; for a version 6 key, N is 32.
            </li>
            <li>A 1-octet number giving the public key algorithm used.
            </li>
            <li>A series of values comprising the encrypted session key.
This is algorithm specific and described below.
            </li>
          </ul>
          <t>The session key is encrypted according to the public key algorithm used, as described below.
No symmetric key encryption algorithm identifier is passed to the public key algorithm for a v6 PKESK packet, as it is included in the v2 SEIPD packet.</t>
        </section>
        <section anchor="pkesk-rsa">
          <name>Algorithm-Specific Fields for RSA Encryption</name>
          <ul spacing="normal">
            <li>MPI of RSA-encrypted value m<sup>e</sup> mod n.
            </li>
          </ul>
          <t>To produce the value "m" in the above formula, first concatenate the following values:</t>
          <ul spacing="normal">
            <li>The 1-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).
            </li>
            <li>The session key.
            </li>
            <li>A 2-octet checksum of the session key, equal to the sum of the session key octets, modulo 65536.
            </li>
          </ul>
          <t>Then, the above values are encoded using the PKCS#1 block encoding EME-PKCS1-v1_5, as described in Step 2 in <xref section="7.2.1" sectionFormat="of" target="RFC8017"/> (see also <xref target="eme-pkcs1-v1-5-encode"/>).
	  When decoding "m" during decryption, an implementation should follow Step 3 in <xref section="7.2.2" sectionFormat="of" target="RFC8017"/> (see also <xref target="eme-pkcs1-v1-5-decode"/>).</t>
          <t>Note that when an implementation forms several PKESK packets with one session key, forming a message that can be decrypted by several keys, the implementation <bcp14>MUST</bcp14> make a new PKCS#1 encoding for each key. This defends against attacks such as those discussed in <xref target="HASTAD"/>.</t>
        </section>
        <section anchor="pkesk-elgamal">
          <name>Algorithm-Specific Fields for Elgamal Encryption</name>
          <ul spacing="normal">
            <li>
              <t>MPI of Elgamal (Diffie-Hellman) value g<sup>k</sup> mod p.</t>
            </li>
            <li>
              <t>MPI of Elgamal (Diffie-Hellman) value m * y<sup>k</sup> mod p.</t>
            </li>
          </ul>
          <t>To produce the value "m" in the above formula, first concatenate the following values:</t>
          <ul spacing="normal">
            <li>
              <t>The 1-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).</t>
            </li>
            <li>
              <t>The session key.</t>
            </li>
            <li>
              <t>A 2-octet checksum of the session key, equal to the sum of the session key octets, modulo 65536.</t>
            </li>
          </ul>
          <t>Then, the above values are encoded using the PKCS#1 block encoding EME-PKCS1-v1_5, as described in Step 2 in <xref section="7.2.1" sectionFormat="of" target="RFC8017"/> (see also <xref target="eme-pkcs1-v1-5-encode"/>).
When decoding "m" during decryption, an implementation should follow Step 3 in <xref section="7.2.2" sectionFormat="of" target="RFC8017"/> (see also <xref target="eme-pkcs1-v1-5-decode"/>).</t>
          <t>Note that when an implementation forms several PKESK packets with one session key, forming a message that can be decrypted by several keys, the implementation <bcp14>MUST</bcp14> make a new PKCS#1 encoding for each key.
This defends against attacks such as those discussed in <xref target="HASTAD"/>.</t>
          <t>An implementation <bcp14>MUST NOT</bcp14> generate ElGamal v6 PKESK packets.</t>
        </section>
        <section anchor="pkesk-ecdh">
          <name>Algorithm-Specific Fields for ECDH Encryption</name>
          <ul spacing="normal">
            <li>MPI of an EC point representing an ephemeral public key in the point format associated with the curve as specified in <xref target="ec-curves"/>.
            </li>
            <li>A 1-octet size, followed by a symmetric key encoded using the method described in <xref target="ecdh"/>.
            </li>
          </ul>
        </section>
        <section anchor="pkesk-x25519">
          <name>Algorithm-Specific Fields for X25519 Encryption</name>
	  
          <ul spacing="normal">
            <li>32 octets representing an ephemeral X25519 public key.
            </li>
            <li>A 1-octet size of the following fields.
            </li>
            <li>The 1-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).
            </li>
            <li>The encrypted session key.
            </li>
          </ul>
          <t>See <xref section="6.1" sectionFormat="of" target="RFC7748"/> for more details on the computation of the ephemeral public key and the shared secret. The HMAC-based Key Derivation Function (HKDF) <xref target="RFC5869"/> is then used with SHA256 <xref target="RFC6234"/> and an info parameter of "OpenPGP X25519" and no salt.
The input of HKDF is the concatenation of the following three values:</t>
          <ul spacing="normal">
            <li>
              <t>32 octets of the ephemeral X25519 public key from this packet.</t>
            </li>
            <li>
              <t>32 octets of the recipient public key material.</t>
            </li>
            <li>
              <t>32 octets of the shared secret.</t>
            </li>
          </ul>
          <t>The key produced from HKDF is used to encrypt the session key with AES-128 key wrap, as defined in <xref target="RFC3394"/>.</t>

          <t>Note that unlike Elliptic Curve Diffie-Hellman (ECDH), no checksum or padding are appended to the session key before key wrapping. Finally, note that unlike the other public key algorithms, in the case of a v3 PKESK packet, the symmetric algorithm ID is not encrypted. Instead, it is prepended to the encrypted session key in plaintext.
In this case, the symmetric algorithm used <bcp14>MUST</bcp14> be AES-128, AES-192, or AES-256 (algorithm IDs 7, 8, or 9, respectively).</t>
        </section>
        <section anchor="pkesk-x448">
          <name>Algorithm-Specific Fields for X448 Encryption</name>
          <ul spacing="normal">
            <li>
              <t>56 octets representing an ephemeral X448 public key.</t>
            </li>
            <li>
              <t>A 1-octet size of the following fields.</t>
            </li>
            <li>
              <t>The 1-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).</t>
            </li>
            <li>
              <t>The encrypted session key.</t>
            </li>
          </ul>
          <t>See <xref section="6.2" sectionFormat="of" target="RFC7748"/> for more details on the computation of the ephemeral public key and the shared secret.
HKDF <xref target="RFC5869"/> is then used with SHA512 <xref target="RFC6234"/> and an info parameter of "OpenPGP X448" and no salt. The input of HKDF is the concatenation of the following three values:</t>
          <ul spacing="normal">
            <li>
              <t>56 octets of the ephemeral X448 public key from this packet.</t>
            </li>
            <li>
              <t>56 octets of the recipient public key material.</t>
            </li>
            <li>
              <t>56 octets of the shared secret.</t>
            </li>
          </ul>
          <t>The key produced from HKDF is used to encrypt the session key with AES-256 key wrap, as defined in <xref target="RFC3394"/>.</t>
          <t>Note that unlike ECDH, no checksum or padding are appended to the session key before key wrapping.
Finally, note that unlike the other public key algorithms, in the case of a v3 PKESK packet, the symmetric algorithm ID is not encrypted.
Instead, it is prepended to the encrypted session key in plaintext.
In this case, the symmetric algorithm used <bcp14>MUST</bcp14> be AES-128, AES-192, or AES-256 (algorithm ID 7, 8, or 9).</t>
        </section>
        <section anchor="pkesk-notes">
          <name>Notes on PKESK</name>
          <t>An implementation <bcp14>MAY</bcp14> accept or use a Key ID of all zeros, or an omitted key fingerprint, to hide the intended decryption key.
In this case, the receiving implementation would try all available private keys, checking for a valid decrypted session key.
This format helps reduce traffic analysis of messages.</t>
        </section>
      </section>
      <section anchor="signature-packet">
        <name>Signature Packet (Type ID 2)</name>
        <t>A Signature packet describes a binding between some public key and some data.
The most common signatures are a signature of a file or a block of text and a signature that is a certification of a User ID.</t>
        <t>Three versions of Signature packets are defined.
Version 3 provides basic signature information, while versions 4 and 6 provide an expandable format with subpackets that can specify more information about the signature.</t>
        <t>For historical reasons, versions 1, 2, and 5 of the Signature packet are unspecified.
Any new Signature packet version should be registered in the registry established in <xref target="signed-message-versions"/>.</t>
        <t>An implementation <bcp14>MUST</bcp14> generate a version 6 signature when signing with a version 6 key.
An implementation <bcp14>MUST</bcp14> generate a version 4 signature when signing with a version 4 key.
Implementations <bcp14>MUST NOT</bcp14> create version 3 signatures; they <bcp14>MAY</bcp14> accept version 3 signatures.
See <xref target="signed-message-versions"/> for more details about packet version correspondence between keys and signatures.</t>
        <section anchor="signature-types">
          <name>Signature Types</name>
          <t>There are a number of possible meanings for a signature, which are indicated by the Signature Type ID in any given signature. Please note that the vagueness of these meanings is not a flaw but rather a feature of the system.
Because OpenPGP places final authority for validity upon the receiver of a signature, it may be that one signer's casual act might be more rigorous than some other authority's positive act.
See <xref target="computing-signatures"/> for detailed information on how to compute and verify signatures of each type.</t>
          <table anchor="signature-types-registry">
            <name>OpenPGP Signature Types Registry</name>
            <thead>
              <tr>
                <th align="left">ID</th>
                <th align="left">Name</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x00</td>
                <td align="left">Binary Signature</td>
                <td align="left">
                  <xref target="sigtype-binary"/></td>
              </tr>
              <tr>
                <td align="left">0x01</td>
                <td align="left">Text Signature</td>
                <td align="left">
                  <xref target="sigtype-text"/></td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">Standalone Signature</td>
                <td align="left">
                  <xref target="sigtype-standalone"/></td>
              </tr>
              <tr>
                <td align="left">0x10</td>
                <td align="left">Generic Certification Signature</td>
                <td align="left">
                  <xref target="sigtype-generic-cert"/></td>
              </tr>
              <tr>
                <td align="left">0x11</td>
                <td align="left">Persona Certification Signature</td>
                <td align="left">
                  <xref target="sigtype-persona-cert"/></td>
              </tr>
              <tr>
                <td align="left">0x12</td>
                <td align="left">Casual Certification Signature</td>
                <td align="left">
                  <xref target="sigtype-casual-cert"/></td>
              </tr>
              <tr>
                <td align="left">0x13</td>
                <td align="left">Positive Certification Signature</td>
                <td align="left">
                  <xref target="sigtype-positive-cert"/></td>
              </tr>
              <tr>
                <td align="left">0x18</td>
                <td align="left">Subkey Binding Signature</td>
                <td align="left">
                  <xref target="sigtype-subkey-binding"/></td>
              </tr>
              <tr>
                <td align="left">0x19</td>
                <td align="left">Primary Key Binding Signature</td>
                <td align="left">
                  <xref target="sigtype-primary-binding"/></td>
              </tr>
              <tr>
                <td align="left">0x1F</td>
                <td align="left">Direct Key Signature</td>
                <td align="left">
                  <xref target="sigtype-direct-key"/></td>
              </tr>
              <tr>
                <td align="left">0x20</td>
                <td align="left">Key Revocation Signature</td>
                <td align="left">
                  <xref target="sigtype-key-revocation"/></td>
              </tr>
              <tr>
                <td align="left">0x28</td>
                <td align="left">Subkey Revocation Signature</td>
                <td align="left">
                  <xref target="sigtype-subkey-revocation"/></td>
              </tr>
              <tr>
                <td align="left">0x30</td>
                <td align="left">Certification Revocation Signature</td>
                <td align="left">
                  <xref target="sigtype-certification-revocation"/></td>
              </tr>
              <tr>
                <td align="left">0x40</td>
                <td align="left">Timestamp Signature</td>
                <td align="left">
                  <xref target="sigtype-timestamp"/></td>
              </tr>
              <tr>
                <td align="left">0x50</td>
                <td align="left">Third-Party Confirmation Signature</td>
                <td align="left">
                  <xref target="sigtype-third-party-confirmation"/></td>
              </tr>
              <tr>
                <td align="left">0xFF</td>
                <td align="left">Reserved</td>
                <td align="left"><xref target="sigtype-reserved"/>
                           </td>
              </tr>
            </tbody>
          </table>
          <t>The meanings of each signature type are described in the subsections below.</t>


          <section anchor="sigtype-binary">
            <name>Binary Signature (Type ID 0x00) of a Document</name>
            <t>This means the signer owns it, created it, or certifies that it has not been modified.</t>
          </section>
          <section anchor="sigtype-text">
            <name>Text Signature (Type ID 0x01) of a Canonical Document</name>
            <t>This means the signer owns it, created it, or certifies that it has not been modified.
The signature is calculated over the text data with its line endings converted to &lt;CR&gt;&lt;LF&gt;.</t>
          </section>
          <section anchor="sigtype-standalone">
            <name>Standalone Signature (Type ID 0x02)</name>
            <t>This signature is a signature of only its own subpacket contents.
It is calculated identically to a signature over a zero-length binary document.
 Version 3 Standalone signatures <bcp14>MUST NOT</bcp14> be generated and <bcp14>MUST</bcp14> be ignored.</t>
          </section>
          <section anchor="sigtype-generic-cert">
            <name>Generic Certification Signature (Type ID 0x10) of a User ID and Public Key Packet</name>
            <t>The issuer of this certification does not make any particular assertion as to how well the certifier has checked that the owner of the key is in fact the person described by the User ID.</t>
          </section>
          <section anchor="sigtype-persona-cert">
            <name>Persona Certification Signature (Type ID 0x11) of a User ID and Public Key Packet</name>
            <t>The issuer of this certification has not done any verification of the claim that the owner of this key is the User ID specified.</t>
          </section>
          <section anchor="sigtype-casual-cert">
            <name>Casual Certification Signature (Type ID 0x12) of a User ID and Public Key Packet</name>
            <t>The issuer of this certification has done some casual verification of the claim of identity.</t>
          </section>
          <section anchor="sigtype-positive-cert">
            <name>Positive Certification Signature (Type ID 0x13) of a User ID and Public Key Packet</name>
            <t>The issuer of this certification has done substantial verification of the claim of identity.</t>
            <t>Most OpenPGP implementations make their "key signatures" as generic (Type ID 0x10) certifications. Some implementations can issue 0x11-0x13 certifications, but few differentiate between the types.</t>
          </section>
          <section anchor="sigtype-subkey-binding">
            <name>Subkey Binding Signature (Type ID 0x18)</name>
            <t>This signature is a statement by the top-level signing key, indicating that it owns the subkey. This signature is calculated directly on the primary key and subkey, and not on any User ID or other packets. A signature that binds a signing subkey <bcp14>MUST</bcp14> have an Embedded Signature subpacket in this binding signature that contains a 0x19 signature made by the signing subkey on the primary key and subkey.</t>
          </section>
          <section anchor="sigtype-primary-binding">
            <name>Primary Key Binding Signature (Type ID 0x19)</name>
            <t>This signature is a statement by a signing subkey, indicating that it is owned by the primary key.
This signature is calculated the same way as a Subkey Binding signature (Type ID 0x18): directly on the primary key and subkey, and not on any User ID or other packets.</t>
          </section>
          <section anchor="sigtype-direct-key">
            <name>Direct Key Signature (Type ID 0x1F)</name>
            <t>This signature is calculated directly on a key.
It binds the information in the Signature subpackets to the key and is appropriate to be used for subpackets that provide information about the key, such as the Key Flags subpacket or the (deprecated) Revocation Key subpacket.
It is also appropriate for statements that non-self certifiers want to make about the key itself rather than the binding between a key and a name.</t>
          </section>
          <section anchor="sigtype-key-revocation">
            <name>Key Revocation Signature (Type ID 0x20)</name>
            <t>This signature is calculated directly on the key being revoked.
A revoked key is not to be used. Only Revocation Signatures by the key being revoked, or by a (deprecated) Revocation Key, should be considered valid Revocation Signatures.</t>
          </section>
          <section anchor="sigtype-subkey-revocation">
            <name>Subkey Revocation Signature (Type ID 0x28)</name>
            <t>This signature is calculated directly on the primary key and the subkey being revoked.
A revoked subkey is not to be used.
Only Revocation Signatures by the top-level signature key that is bound to this subkey, or by a (deprecated) Revocation Key, should be considered valid Revocation Signatures.</t>
          </section>
          <section anchor="sigtype-certification-revocation">
            <name>Certification Revocation Signature (Type ID 0x30)</name>
            <t>This signature revokes an earlier User ID certification signature (Type IDs 0x10 through 0x13) or Direct Key signature (Type ID 0x1F).
It should be issued by the same key that issued the revoked signature or by a (deprecated) Revocation Key.
The signature is computed over the same data as the certification that it revokes, and it should have a later creation date than that certification.</t>
          </section>
          <section anchor="sigtype-timestamp">
            <name>Timestamp Signature (Type ID 0x40)</name>
            <t>This signature is only meaningful for the timestamp contained in it.</t>
          </section>
          <section anchor="sigtype-third-party-confirmation">
            <name>Third-Party Confirmation Signature (Type ID 0x50)</name>
            <t>This signature is a signature over another OpenPGP Signature packet.
  It is analogous to a notary seal on the signed data. A Third-Party Confirmation signature <bcp14>SHOULD</bcp14> include a Signature Target subpacket that identifies the confirmed signature.</t>
          </section>
          <section anchor="sigtype-reserved">
            <name>Reserved (Type ID 0xFF)</name>
            <t>An implementation <bcp14>MUST NOT</bcp14> create any signature with this type and <bcp14>MUST NOT</bcp14> validate any signature made with this type.
See <xref target="sig-computation-notes"/> for more details.</t>
          </section>
        </section>
        <section anchor="version-three-sig">
          <name>Version 3 Signature Packet Format</name>
          <t>The body of a version 3 Signature packet contains:</t>
          <ul spacing="normal">
            <li>
              <t>A 1-octet version number with value 3.</t>
            </li>
            <li>
              <t>A 1-octet length of the following hashed material; it
<bcp14>MUST</bcp14> be 5:  </t>
              <ul spacing="normal">
                <li>
                  <t>A 1-octet Signature Type ID.</t>
                </li>
                <li>
                  <t>A 4-octet creation time.</t>
                </li>
              </ul>
            </li>
            <li>
              <t>An 8-octet Key ID of the signer.</t>
            </li>
            <li>
              <t>A 1-octet public key algorithm.</t>
            </li>
            <li>
              <t>A 1-octet hash algorithm.</t>
            </li>
            <li>
              <t>A 2-octet field holding left 16 bits of the signed hash value.</t>
            </li>
            <li>
              <t>One or more MPIs comprising the signature. This portion is algorithm specific, as described below.</t>
            </li>
          </ul>
          <t>The concatenation of the data to be signed, the signature type, and the creation time from the Signature packet (5 additional octets) is hashed.
The resulting hash value is used in the signature algorithm.
The high 16 bits (first two octets) of the hash are included in the Signature packet to provide a way to reject some invalid signatures without performing a signature verification.</t>
          <t>Algorithm-specific fields for RSA signatures:</t>
          <ul spacing="normal">
            <li>
              <t>MPI of RSA signature value m<sup>d</sup> mod n.</t>
            </li>
          </ul>
          <t>Algorithm-specific fields for DSA signatures:</t>
          <ul spacing="normal">
            <li>
              <t>MPI of DSA value r.</t>
            </li>
            <li>
              <t>MPI of DSA value s.</t>
            </li>
          </ul>
          <t>The signature calculation is based on a hash of the signed data, as described above.
The details of the calculation are different for DSA signatures than for RSA signatures; see Sections <xref target="sig-rsa" format="counter"/> and <xref target="sig-dsa" format="counter"/>.</t>
        </section>
        <section anchor="version-four-and-six-sig">
          <name>Versions 4 and 6 Signature Packet Formats</name>
          <t>The body of a version 4 or version 6 Signature packet contains:</t>
          <ul spacing="normal">
            <li>
              <t>A 1-octet version number.
This is 4 for version 4 signatures and 6 for version 6 signatures.</t>
            </li>
            <li>
              <t>A 1-octet Signature Type ID.</t>
            </li>
            <li>
              <t>A 1-octet public key algorithm.</t>
            </li>
            <li>
              <t>A 1-octet hash algorithm.</t>
            </li>
            <li>
              <t>A scalar octet count for the hashed subpacket data that follows this field. For a version 4 signature, this is a 2-octet field.
For a version 6 signature, this is a 4-octet field.
Note that this is the length in octets of all of the hashed subpackets; an implementation's pointer incremented by this number will skip over the hashed subpackets.</t>
            </li>
            <li>
              <t>A hashed subpacket data set (zero or more subpackets).</t>
            </li>
            <li>
              <t>A scalar octet count for the unhashed subpacket data that follows this field.
For a version 4 signature, this is a 2-octet field.
For a version 6 signature, this is a 4-octet field.
Note that this is the length in octets of all of the unhashed subpackets; an implementation's pointer incremented by this number will skip over the unhashed subpackets.</t>
            </li>
            <li>
              <t>An unhashed subpacket data set (zero or more subpackets).</t>
            </li>
            <li>
              <t>A 2-octet field holding the left 16 bits of the signed hash value.</t>
            </li>
            <li>
              <t>Only for version 6 signatures, a variable-length field containing:  </t>
              <ul spacing="normal">
                <li>
                  <t>A 1-octet salt size. The value <bcp14>MUST</bcp14> match the value defined for the hash algorithm as specified in <xref target="hash-algorithms-registry"/>.</t>
                </li>
                <li>
                  <t>The salt, which is a random value of the specified size.</t>
                </li>
              </ul>
            </li>
            <li>
              <t>One or more MPIs comprising the signature.
This portion is algorithm specific.</t>
            </li>
          </ul>
          <section anchor="sig-rsa">
            <name>Algorithm-Specific Fields for RSA Signatures</name>
            <ul spacing="normal">
              <li>
                <t>MPI of RSA signature value m<sup>d</sup> mod n.</t>
              </li>
            </ul>
            <t>With RSA signatures, the hash value is encoded using PKCS#1 encoding type EMSA-PKCS1-v1_5, as described in <xref section="9.2" sectionFormat="of" target="RFC8017"/> (see also <xref target="emsa-pkcs1-v1-5"/>).
This requires inserting the hash value as an octet string into an ASN.1 structure.
The object identifier (OID) for the hash algorithm itself is also included in the structure; see the OIDs in <xref target="emsa-hash-oids-registry"/>.</t>
          </section>
          <section anchor="sig-dsa">
            <name>Algorithm-Specific Fields for DSA or ECDSA Signatures</name>
            <ul spacing="normal">
              <li>
                <t>MPI of DSA or ECDSA value r.</t>
              </li>
              <li>
                <t>MPI of DSA or ECDSA value s.</t>
              </li>
            </ul>
            <t>A version 3 signature <bcp14>MUST NOT</bcp14> be created and <bcp14>MUST NOT</bcp14> be used with the Elliptic Curve Digital Signature Algorithm (ECDSA).</t>
            <t>A DSA signature <bcp14>MUST</bcp14> use a hash algorithm with a digest size of at least the number of bits of q, the group generated by the DSA key's generator value.</t>
            <t>If the output size of the chosen hash is larger than the number of bits of q, the hash result is truncated to fit by taking the number of leftmost bits equal to the number of bits of q.
This (possibly truncated) hash function result is treated as a number and used directly in the DSA signature algorithm.</t>
            <t>An ECDSA signature <bcp14>MUST</bcp14> use a hash algorithm with a digest size of at least the curve's "fsize" value (see <xref target="ec-curves"/>), except in the case of NIST P-521, for which at least a 512-bit hash algorithm <bcp14>MUST</bcp14> be used.</t>
          </section>
          <section anchor="sig-eddsa-legacy">
            <name>Algorithm-Specific Fields for EdDSALegacy Signatures (Deprecated)</name>
            <ul spacing="normal">
              <li>
                <t>Two MPI-encoded values, whose contents and formatting depend on the choice of curve used (see <xref target="curve-specific-formats"/>).</t>
              </li>
            </ul>
            <t>A version 3 signature <bcp14>MUST NOT</bcp14> be created and <bcp14>MUST NOT</bcp14> be used with EdDSALegacy.</t>
            <t>An EdDSALegacy signature <bcp14>MUST</bcp14> use a hash algorithm with a digest size of at least the curve's "fsize" value (see <xref target="ec-curves"/>).
A verifying implementation <bcp14>MUST</bcp14> reject any EdDSALegacy signature that uses a hash algorithm with a smaller digest size.</t>
            <section anchor="algorithm-specific-fields-for-ed25519legacy-signatures-deprecated">
              <name>Algorithm-Specific Fields for Ed25519Legacy Signatures (Deprecated)</name>
              <t>The two MPIs for Ed25519Legacy represent the octet strings R and S of the Edwards-curve Digital Signature Algorithm (EdDSA) described in <xref target="RFC8032"/>.
</t>
              <ul spacing="normal">
                <li>
                  <t>MPI of an EC point R, represented as a (non-prefixed) native (little-endian) octet string up to 32 octets.</t>
                </li>
                <li>
                  <t>MPI of EdDSA value S, also in (non-prefixed) native (little-endian) format with a length up to 32 octets.</t>
                </li>
              </ul>
	      <t>
Ed25519Legacy <bcp14>MUST NOT</bcp14> be used in Signature packets version 6 or above.
	      </t>
            </section>
          </section>
          <section anchor="sig-ed25519">
            <name>Algorithm-Specific Fields for Ed25519 Signatures</name>
            <ul spacing="normal">
              <li>
                <t>64 octets of the native signature.</t>
              </li>
            </ul>
            <t>For more details, see <xref target="eddsa-notes"/>.</t>
            <t>A version 3 signature <bcp14>MUST NOT</bcp14> be created and <bcp14>MUST NOT</bcp14> be used with Ed25519.</t>
            <t>An Ed25519 signature <bcp14>MUST</bcp14> use a hash algorithm with a digest size of at least 256 bits.
A verifying implementation <bcp14>MUST</bcp14> reject any Ed25519 signature that uses a hash algorithm with a smaller digest size.</t>
          </section>
          <section anchor="sig-ed448">
            <name>Algorithm-Specific Fields for Ed448 Signatures</name>
            <ul spacing="normal">
              <li>
                <t>114 octets of the native signature.</t>
              </li>
            </ul>
            <t>For more details, see <xref target="eddsa-notes"/>.</t>
            <t>A version 3 signature <bcp14>MUST NOT</bcp14> be created and <bcp14>MUST NOT</bcp14> be used with Ed448.</t>
            <t>An Ed448 signature <bcp14>MUST</bcp14> use a hash algorithm with a digest size of at least 512 bits.
A verifying implementation <bcp14>MUST</bcp14> reject any Ed448 signature that uses a hash algorithm with a smaller digest size.</t>
          </section>
          <section anchor="notes-on-signatures">
            <name>Notes on Signatures</name>
            <t>The concatenation of the data being signed, the signature data from the version number through the hashed subpacket data (inclusive), and (for signature versions later than 3) a 6-octet trailer (see <xref target="computing-signatures"/>) is hashed. The resulting hash value is what is signed. The high 16 bits (first two octets) of the hash are included in the Signature packet to provide a way to reject some invalid signatures without performing a signature verification. When verifying a version 6 signature, an implementation <bcp14>MUST</bcp14> reject the signature if these octets do not match the first two octets of the computed hash.</t>
            <t>There are two fields consisting of Signature subpackets.
The first field is hashed with the rest of the signature data, while the second is not hashed into the signature. The second set of subpackets (the "unhashed section") is not cryptographically protected by the signature and should include only advisory information. See <xref target="subpacket-section-guidance"/> for more information.</t>
            <t>The differences between a version 4 and version 6 signature are two-fold: first, a version 6 signature increases the width of the fields that indicate the size of the hashed and unhashed subpackets, making it possible to include significantly more data in subpackets.
Second, the hash is salted with random data (see <xref target="signature-salt-rationale"/>).</t>
            <t>The algorithms for converting the hash function result to a signature are described in <xref target="computing-signatures"/>.</t>
          </section>
          <section anchor="signature-subpacket">
            <name>Signature Subpacket Specification</name>
            <t>A subpacket data set consists of zero or more Signature subpackets.
In Signature packets, the subpacket data set is preceded by a 2-octet (for version 4 signatures) or 4-octet (for version 6 signatures) scalar count of the length in octets of all the subpackets.
A pointer incremented by this number will skip over the subpacket data set.</t>
            <t>Each subpacket consists of a subpacket header and a body.
The header consists of:</t>
            <ul spacing="normal">
              <li>The encoded subpacket length (1, 2, or 5 octets).
              </li>
              <li>The encoded Subpacket Type ID (1 octet).
              </li>
	      <li>The subpacket-specific data.
	      </li>
            </ul>
            <t>The subpacket length field covers the encoded Subpacket Type ID and the subpacket-specific data, and it does not include the subpacket length field itself. It is encoded similarly to a 1-octet, 2-octet, or 5-octet OpenPGP format packet header. The encoded subpacket length can be decoded as follows:</t>
            <artwork><![CDATA[
if the 1st octet <  192, then
    lengthOfLength = 1
    subpacketLen = 1st_octet

if the 1st octet >= 192 and < 255, then
    lengthOfLength = 2
    subpacketLen = ((1st_octet - 192) << 8) + (2nd_octet) + 192

if the 1st octet = 255, then
    lengthOfLength = 5
    subpacket length = [4-octet scalar starting at 2nd_octet]
]]></artwork>
            <t>Bit 7 of the encoded Subpacket Type ID is the "critical" bit.
If set, it denotes that the subpacket is one that is critical for the evaluator of the signature to recognize. If a subpacket is encountered that is marked critical but is unknown to the evaluating implementation, the evaluator <bcp14>SHOULD</bcp14> consider the signature to be in error.</t>
            <t>An implementation <bcp14>SHOULD</bcp14> ignore any non-critical subpacket of a type that it does not recognize.</t>
            <t>An evaluator may "recognize" a subpacket but not implement it.
The purpose of the critical bit is to allow the signer to tell an evaluator that it would prefer a new, unknown feature to generate an error rather than being ignored.</t>
            <t>The other bits of the encoded Subpacket Type ID (i.e., bits 6-0) contain the Subpacket Type ID.</t>
            <t>The following signature subpackets are defined:</t>
            <table anchor="signature-subpacket-types-registry">
              <name>OpenPGP Signature Subpacket Types Registry</name>
              <thead>
                <tr>
                  <th align="right">ID</th>
                  <th align="left">Description</th>
                  <th align="left">Reference</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="right">0</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">1</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">2</td>
                  <td align="left">Signature Creation Time</td>
                  <td align="left"><xref target="signature-creation-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">3</td>
                  <td align="left">Signature Expiration Time</td>
                  <td align="left"><xref target="signature-expiration-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">4</td>
                  <td align="left">Exportable Certification</td>
                  <td align="left"> <xref target="exportable-certification-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">5</td>
                  <td align="left">Trust Signature</td>
                  <td align="left"><xref target="trust-signature-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">6</td>
                  <td align="left">Regular Expression</td>
                  <td align="left"><xref target="regex-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">7</td>
                  <td align="left">Revocable</td>
                  <td align="left"><xref target="revocable-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">8</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">9</td>
                  <td align="left">Key Expiration Time</td>
                  <td align="left"><xref target="key-expiration-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">10</td>
                  <td align="left">Placeholder for backward compatibility</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">11</td>
                  <td align="left">Preferred Symmetric Ciphers for v1 SEIPD</td>
                  <td align="left"><xref target="preferred-v1-seipd"/></td>
                </tr>
                <tr>
                  <td align="right">12</td>
                  <td align="left">Revocation Key (deprecated)</td>
                  <td align="left"><xref target="revocation-key"/></td>
                </tr>
                <tr>
                  <td align="right">13-15</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">16</td>
                  <td align="left">Issuer Key ID</td>
                  <td align="left"><xref target="issuer-keyid-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">17-19</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">20</td>
                  <td align="left">Notation Data</td>
                  <td align="left"><xref target="notation-data"/></td>
                </tr>
                <tr>
                  <td align="right">21</td>
                  <td align="left">Preferred Hash Algorithms</td>
                  <td align="left"><xref target="preferred-hashes-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">22</td>
                  <td align="left">Preferred Compression Algorithms</td>
                  <td align="left"><xref target="preferred-compression-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">23</td>
                  <td align="left">Key Server Preferences</td>
                  <td align="left"><xref target="key-server-preferences"/></td>
                </tr>
                <tr>
                  <td align="right">24</td>
                  <td align="left">Preferred Key Server</td>
                  <td align="left"><xref target="preferred-key-server-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">25</td>
                  <td align="left">Primary User ID</td>
                  <td align="left"><xref target="primary-user-id-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">26</td>
                  <td align="left">Policy URI</td>
                  <td align="left"><xref target="policy-uri-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">27</td>
                  <td align="left">Key Flags</td>
                  <td align="left"><xref target="key-flags"/></td>
                </tr>
                <tr>
                  <td align="right">28</td>
                  <td align="left">Signer's User ID</td>
                  <td align="left"><xref target="signers-user-id-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">29</td>
                  <td align="left">Reason for Revocation</td>
                  <td align="left"><xref target="reason-for-revocation"/></td>
                </tr>
                <tr>
                  <td align="right">30</td>
                  <td align="left">Features</td>
                  <td align="left"><xref target="features-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">31</td>
                  <td align="left">Signature Target</td>
                  <td align="left"><xref target="signature-target-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">32</td>
                  <td align="left">Embedded Signature</td>
                  <td align="left"><xref target="embedded-signature-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">33</td>
                  <td align="left">Issuer Fingerprint</td>
                  <td align="left"><xref target="issuer-fingerprint-subpacket"/></td>
                </tr>
                <tr>
                  <td align="right">34</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">35</td>
                  <td align="left">Intended Recipient Fingerprint</td>
                  <td align="left"><xref target="intended-recipient-fingerprint"/></td>
                </tr>
                <tr>
                  <td align="right">37</td>
                  <td align="left">Reserved (Attested Certifications)</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">38</td>
                  <td align="left">Reserved (Key Block)</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="right">39</td>
                  <td align="left">Preferred AEAD Ciphersuites</td>
                  <td align="left"><xref target="preferred-v2-seipd"/></td>
                </tr>
                <tr>
                  <td align="right">100-110</td>
                  <td align="left">Private or Experimental Use</td>
                  <td align="left"></td>
                </tr>
              </tbody>
            </table>

            <t>Implementations <bcp14>SHOULD</bcp14> implement the four preferred algorithm subpackets (11, 21, 22, and 39), as well as the "Features" (30) and "Reason for Revocation" (29) subpackets.
To avoid surreptitious forwarding (see <xref target="surreptitious-forwarding"/>), implementations <bcp14>SHOULD</bcp14> also implement the "Intended Recipients Fingerprint" (35) subpacket.
Note that if an implementation chooses not to implement some of the preferences subpackets, it <bcp14>MUST</bcp14> default to the mandatory-to-implement algorithms to ensure interoperability.
An encrypting implementation that does not implement the "Features" (30) subpacket <bcp14>SHOULD</bcp14> select the type of encrypted data format based on the versions of the recipient keys or external inference (see <xref target="ciphertext-malleability"/> for more details).</t>
          </section>
          <section anchor="signature-subpacket-types">
            <name>Signature Subpacket Types</name>
            <t>A number of subpackets are currently defined for OpenPGP signatures.
Some subpackets apply to the signature itself and some are attributes of the key.
Subpackets that are found on a self-signature are placed on a certification made by the key itself.
Note that a key may have more than one User ID and thus may have more than one self-signature and differing subpackets.</t>
<t>A subpacket may be found in either the hashed or the unhashed subpacket sections of a signature. If a subpacket is not hashed, then the information in it cannot be considered definitive because it is not covered by the cryptographic signature. See <xref target="subpacket-section-guidance"/> for more discussion about hashed and unhashed subpackets.</t>
          </section>
          <section anchor="notes-on-subpackets">
            <name>Notes on Subpackets</name>
            <t>It is certainly possible for a signature to contain conflicting information in subpackets.
For example, a signature may contain multiple copies of a preference or multiple expiration times. In most cases, an implementation <bcp14>SHOULD</bcp14> use the last subpacket in the hashed section of the signature, but it <bcp14>MAY</bcp14> use any conflict resolution scheme that makes more sense. Please note that conflict resolution is intentionally left to the implementer; most conflicts are simply syntax errors, and the ambiguous language here allows a receiver to be generous in what they accept, while putting pressure on a creator to be stingy in what they generate.</t>
            <t>Some apparent conflicts may actually make sense. For example, suppose a keyholder has a version 3 key and a version 4 key that share the same RSA key material. Either of these keys can verify a signature created by the other, and it may be reasonable for a signature to contain an Issuer Key ID subpacket (<xref target="issuer-keyid-subpacket"/>) for each key, as a way of explicitly tying those keys to the signature.</t>
          </section>
          <section anchor="self-sigs">
            <name>Notes on Self-Signatures</name>

            <t>A self-signature is a binding signature made by the key to which the signature refers. There are three types of self-signatures: the certification signatures (Type IDs 0x10-0x13), the Direct Key signature (Type ID 0x1F), and the Subkey Binding signature (Type ID 0x18). A cryptographically valid self-signature should be accepted from any primary key, regardless of what Key Flags (<xref target="key-flags"/>) apply to the primary key.
In particular, a primary key does not need to have 0x01 set in the first octet of the Key Flags order to make a valid self-signature.</t>
            <t>For certification self-signatures, each User ID <bcp14>MAY</bcp14> have a self-signature and thus different subpackets in those self-signatures.
For Subkey Binding signatures, each subkey <bcp14>MUST</bcp14> have a self-signature.
Subpackets that appear in a certification self-signature apply to the User ID, and subpackets that appear in the subkey self-signature apply to the subkey.
Lastly, subpackets on the Direct Key signature apply to the entire key.</t>
            <t>An implementation should interpret a self-signature's preference subpackets as narrowly as possible.
For example, suppose a key has two user names, Alice and Bob.
Suppose that Alice prefers the AEAD ciphersuite AES-256 with OCB, and Bob prefers Camellia-256 with GCM. If the implementation locates this key via Alice's name, then the preferred AEAD ciphersuite is AES-256 with OCB; if the implementation locates the key via Bob's name, then the preferred algorithm is Camellia-256 with GCM.
If the key is located by Key ID, the algorithm of the Primary User ID of the key provides the preferred AEAD ciphersuite.</t>
            <t>Revoking a self-signature or allowing it to expire has a semantic meaning that varies with the signature type.
Revoking the self-signature on a User ID effectively retires that user name.
The self-signature is a statement, "My name X is tied to my signing key K", and it is corroborated by other users' certifications.
If another user revokes their certification, they are effectively saying that they no longer believe that name and that key are tied together.
Similarly, if the users themselves revoke their self-signature, then the users no longer go by that name, no longer have that email address, etc.
Revoking a binding signature effectively retires that subkey. Revoking a Direct Key signature cancels that signature.
Please see <xref target="reason-for-revocation"/> for more relevant details.</t>
            <t>Since a self-signature contains important information about the key's use, an implementation <bcp14>SHOULD</bcp14> allow the user to rewrite the self-signature and important information in it, such as preferences and key expiration.</t>
            <t>When an implementation imports a secret key, it <bcp14>SHOULD</bcp14> verify that the key's internal self-signatures do not advertise features or algorithms that the implementation doesn't support.
If an implementation observes such a mismatch, it <bcp14>SHOULD</bcp14> warn the user and offer to create new self-signatures that advertise the actual set of features and algorithms supported by the implementation.</t>
            <t>An implementation that encounters multiple self-signatures on the same object <bcp14>MUST</bcp14> select the most recent valid self-signature and ignore all other self-signatures.</t>
            <t>By convention, a version 4 key stores information about the primary Public Key (key flags, key expiration, etc.) and the Transferable Public Key as a whole (features, algorithm preferences, etc.) in a User ID self-signature of type 0x10 or 0x13. To use a version 4 key, 
some implementations require at least one User ID with a valid self-signature to be present.
For this reason, it is <bcp14>RECOMMENDED</bcp14> to include at least one User ID with a self-signature in version 4 keys.</t>
            <t>For version 6 keys, it is <bcp14>RECOMMENDED</bcp14> to store information about the primary Public Key as well as the Transferable Public Key as a whole (key flags, key expiration, features, algorithm preferences, etc.) in a Direct Key signature (Type ID 0x1F) over the Public Key, instead of placing that information in a User ID self-signature.
An implementation <bcp14>MUST</bcp14> ensure that a valid Direct Key signature is present before using a version 6 key.
This prevents certain attacks where an adversary strips a self-signature specifying a Key Expiration Time or certain preferences.</t>
            <t>An implementation <bcp14>SHOULD NOT</bcp14> require a User ID self-signature to be present in order to consume or use a key, unless the particular use is contingent on the keyholder identifying themselves with the textual label in the User ID.
For example, when refreshing a key to learn about changes in expiration, advertised features, algorithm preferences, revocation, subkey rotation, and so forth, there is no need to require a User ID self-signature. On the other hand, when verifying a signature over an email message, an implementation <bcp14>MAY</bcp14> choose to only accept a signature from a key that has a valid self-signature over a User ID that matches the message's From: header, as a way to avoid a signature transplant attack.</t>
</section>
          <section anchor="signature-creation-subpacket">
            <name>Signature Creation Time</name>
            <t>(4-octet time field)</t>
            <t>The time the signature was made.</t>
            <t>This subpacket <bcp14>MUST</bcp14> be present in the hashed area.</t>
            <t>When generating this subpacket, it <bcp14>SHOULD</bcp14> be marked as critical.</t>
          </section>
          <section anchor="issuer-keyid-subpacket">
            <name>Issuer Key ID</name>
            <t>(8-octet Key ID)</t>
            <t>The OpenPGP Key ID of the key issuing the signature.
If the version of that key is greater than 4, this subpacket <bcp14>MUST NOT</bcp14> be included in the signature.
	    For these keys, consider the Issuer Fingerprint subpacket (<xref target="issuer-fingerprint-subpacket"/>) instead.</t>
	    
            <t>Note: in previous versions of this specification, this subpacket was simply known as the "Issuer" subpacket.</t>
          </section>
          <section anchor="key-expiration-subpacket">
            <name>Key Expiration Time</name>
            <t>(4-octet time field)</t>
            <t>The validity period of the key.
This is the number of seconds after the key creation time that the key expires.
For a direct or certification self-signature, the key creation time is that of the primary key.
For a Subkey Binding signature, the key creation time is that of the subkey.
If this is not present or has a value of zero, the key never expires.
This is found only on a self-signature.</t>
            <t>When an implementation generates this subpacket, it <bcp14>SHOULD</bcp14> be marked as critical.</t>
          </section>
          <section anchor="preferred-v1-seipd">
            <name>Preferred Symmetric Ciphers for v1 SEIPD</name>
            <t>(array of 1-octet values)</t>
            <t>A series of Symmetric Cipher Algorithm IDs indicating how the keyholder prefers to receive the version 1 Symmetrically Encrypted and Integrity Protected Data packet (<xref target="version-one-seipd"/>).
The subpacket body is an ordered list of octets with the most preferred listed first.
It is assumed that only the algorithms listed are supported by the recipient's implementation.
Algorithm IDs are defined in <xref target="symmetric-algos"/>.
This is only found on a self-signature.</t>
            <t>When generating a v2 SEIPD packet, this preference list is not relevant.
See <xref target="preferred-v2-seipd"/> instead.</t>
          </section>
          <section anchor="preferred-v2-seipd">
            <name>Preferred AEAD Ciphersuites</name>
            <t>(array of pairs of octets indicating Symmetric Cipher and AEAD algorithms)</t>
            <t>A series of paired algorithm IDs indicating how the keyholder prefers to receive the version 2 Symmetrically Encrypted and Integrity Protected Data packet (<xref target="version-two-seipd"/>).
Each pair of octets indicates a combination of a symmetric cipher and an AEAD mode that the keyholder prefers to use.
The Symmetric Cipher Algorithm ID precedes the AEAD algorithm ID in each pair.
The subpacket body is an ordered list of pairs of octets with the most preferred algorithm combination listed first.</t>
            <t>It is assumed that only the combinations of algorithms listed are supported by the recipient's implementation, with the exception of the mandatory-to-implement combination of AES-128 and OCB.
If AES-128 and OCB are not found in the subpacket, it is implicitly listed at the end.</t>
            <t>AEAD algorithm IDs are listed in <xref target="aead-algorithms"/>.
Symmetric Cipher Algorithm IDs are listed in <xref target="symmetric-algos"/>.</t>
            <t>For example, a subpacket containing the six octets</t>
            <artwork><![CDATA[
09 02 09 03 13 02
]]></artwork>
            <t>indicates that the keyholder prefers to receive v2 SEIPD using AES-256 with OCB, then AES-256 with GCM, then Camellia-256 with OCB, and finally the implicit AES-128 with OCB.</t>
            <t>Note that support for the version 2 Symmetrically Encrypted and Integrity Protected Data packet (<xref target="version-two-seipd"/>) in general is indicated by a Features Flag (<xref target="features-subpacket"/>).</t>
            <t>This subpacket is only found on a self-signature.</t>
            <t>When generating a v1 SEIPD packet, this preference list is not relevant.
See <xref target="preferred-v1-seipd"/> instead.</t>
          </section>
          <section anchor="preferred-hashes-subpacket">
            <name>Preferred Hash Algorithms</name>
            <t>(array of 1-octet values)</t>
            <t>Message digest algorithm IDs that indicate which algorithms the keyholder prefers to receive.
Like the Preferred AEAD Ciphersuites, the list is ordered.
Algorithm IDs are defined in <xref target="hash-algos"/>.
This is only found on a self-signature.</t>
          </section>
          <section anchor="preferred-compression-subpacket">
            <name>Preferred Compression Algorithms</name>
            <t>(array of 1-octet values)</t>
            <t>Compression algorithm IDs that indicate which algorithms the keyholder prefers to use.
Like the Preferred AEAD Ciphersuites, the list is ordered.
Algorithm IDs are defined in <xref target="compression-algos"/>.
A zero, or the absence of this subpacket, denotes that uncompressed data is preferred; the keyholder's implementation might have no compression support available.
This is only found on a self-signature.</t>
          </section>
          <section anchor="signature-expiration-subpacket">
            <name>Signature Expiration Time</name>
            <t>(4-octet time field)</t>
            <t>The validity period of the signature.
This is the number of seconds after the Signature Creation Time that the signature expires.
If this is not present or has a value of zero, it never expires.</t>
            <t>When an implementation generates this subpacket, it <bcp14>SHOULD</bcp14> be marked as critical.</t>
          </section>
          <section anchor="exportable-certification-subpacket">
            <name>Exportable Certification</name>
            <t>(1 octet of exportability, 0 for not, 1 for exportable)</t>
            <t>This subpacket denotes whether a certification signature is "exportable"; it is intended for use by users other than the signature's issuer.
The packet body contains a Boolean flag indicating whether the signature is exportable.
If this packet is not present, the certification is exportable; it is equivalent to a flag containing a 1.</t>
            <t>Non-exportable, or "local", certifications are signatures made by a user to mark a key as valid within that user's implementation only.</t>
            <t>Thus, when an implementation prepares a user's copy of a key for transport to another user (this is the process of "exporting" the key), any local certification signatures are deleted from the key.</t>
            <t>The receiver of a transported key "imports" it and likewise trims any local certifications. In normal operation, there won't be any local certifications, assuming the import is performed on an exported key. However, there are instances where this can reasonably happen.
For example, if an implementation allows keys to be imported from a key database in addition to an exported key, then this situation can arise.</t>
            <t>Some implementations do not represent the interest of a single user (for example, a key server).
Such implementations always trim local certifications from any key they handle.</t>
            <t>When an implementation generates this subpacket and denotes the signature as non-exportable, the subpacket <bcp14>MUST</bcp14> be marked as critical.</t>
          </section>
          <section anchor="revocable-subpacket">
            <name>Revocable</name>
            <t>(1 octet of revocability, 0 for not, 1 for revocable)</t>
            <t>A Signature's revocability status. The packet body contains a Boolean flag indicating whether the signature is revocable. Signatures that are not revocable ignore any later Revocation Signatures. They represent the signer's commitment that its signature cannot be revoked for the life of its key.
If this packet is not present, the signature is revocable.</t>
          </section>
          <section anchor="trust-signature-subpacket">
            <name>Trust Signature</name>
            <t>(1 octet "level" (depth), 1 octet of trust amount)</t>
            <t>The signer asserts that the key is not only valid but also trustworthy at the specified level. Level 0 has the same meaning as an ordinary validity signature.
Level 1 means that the signed key is asserted to be a valid trusted introducer, with the 2nd octet of the body specifying the degree of trust.
Level 2 means that the signed key is asserted to be trusted to issue level 1 Trust Signatures; that is, the signed key is a "meta introducer".
Generally, a level n Trust Signature asserts that a key is trusted to issue level n-1 Trust Signatures.
The trust amount is in a range from 0-255, interpreted such that values less than 120 indicate partial trust and values of 120 or greater indicate complete trust.
Implementations <bcp14>SHOULD</bcp14> emit values of 60 for partial trust and 120 for complete trust.</t>
          </section>
          <section anchor="regex-subpacket">
            <name>Regular Expression</name>
            <t>(null-terminated UTF-8 encoded Regular Expression)</t>
            <t>Used in conjunction with Trust Signature packets (of level &gt; 0) to limit the scope of trust that is extended.
Only signatures by the target key on User IDs that match the Regular Expression in the body of this packet have trust extended by the Trust Signature subpacket.
The Regular Expression uses the same syntax as Henry Spencer's "almost public domain" Regular Expression <xref target="REGEX"/> package.
A description of the syntax is found in <xref target="regular-expressions"/>.
The Regular Expression matches (or does not match) a sequence of UTF-8-encoded Unicode characters from User IDs.
The expression itself is also written with UTF-8 characters.</t>
            <t>For historical reasons, this subpacket includes a null character (an octet with value zero) after the Regular Expression.
When an implementation parses a Regular Expression subpacket, it <bcp14>MUST</bcp14> remove this octet; if it is not present, it <bcp14>MUST</bcp14> reject the subpacket (i.e., ignore the subpacket if it's non-critical and reject the signature if it's critical).
When an implementation generates a Regular Expression subpacket, it <bcp14>MUST</bcp14> include the null terminator.</t>
            <t>When generating this subpacket, it <bcp14>SHOULD</bcp14> be marked as critical.</t>
          </section>
          <section anchor="revocation-key">
            <name>Revocation Key (Deprecated)</name>
            <t>(1 octet of class, 1 octet of public key algorithm ID, 20 octets of version 4 fingerprint)</t>
            <t>This mechanism is deprecated.
Applications <bcp14>MUST NOT</bcp14> generate such a subpacket.</t>
            <t>An application that wants the functionality of delegating revocation can use an escrowed Revocation Signature.
See <xref target="escrowed-revocations"/> for more details.</t>
            <t>The remainder of this section describes how some implementations attempt to interpret this deprecated subpacket.</t>
            <t>This packet was intended to authorize the specified key to issue Revocation Signatures for this key. The class octet must have bit 0x80 set.
If bit 0x40 is set, it means the revocation information is sensitive.
Other bits are for future expansion to other kinds of authorizations.
This is only found on a Direct Key self-signature (Type ID 0x1F).
The use on other types of self-signatures is unspecified.</t>
            <t>If the "sensitive" flag is set, the keyholder feels this subpacket contains private trust information that describes a real-world sensitive relationship.
If this flag is set, implementations <bcp14>SHOULD NOT</bcp14> export this signature to other users except in cases where the data needs to be available, i.e., when the signature is being sent to the designated revoker or when it is accompanied by a Revocation Signature from that revoker.
Note that it may be appropriate to isolate this subpacket within a separate signature so that it is not combined with other subpackets that need to be exported.</t>
          </section>
          <section anchor="notation-data">
            <name>Notation Data</name>
            <t>(4 octets of flags, 2 octets of name length (M), 2 octets of value length (N), M octets of name data, N octets of value data)</t>
            <t>This subpacket describes a "notation" on the signature that the issuer wishes to make.
The notation has a name and a value, each of which are strings of octets.
There may be more than one notation in a signature.
Notations can be used for any extension the issuer of the signature cares to make.
The "flags" field holds 4 octets of flags.</t>
            <t>All undefined flags <bcp14>MUST</bcp14> be zero.
Defined flags are as follows:</t>
            <table anchor="sig-note-data-note-flags-registry">
              <name>OpenPGP Signature Notation Data Subpacket Notation Flags Registry</name>
              <thead>
                <tr>
                  <th align="left">Flag Position</th>
                  <th align="left">Shorthand</th>
                  <th align="left">Description</th>
               
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x80000000 (first bit of the first octet)</td>
                  <td align="left">human-readable</td>
                  <td align="left">Notation value is UTF-8 text</td>
                
                </tr>
              </tbody>
            </table>
            <t>Notation names are arbitrary strings encoded in UTF-8.
They reside in two namespaces: the IETF namespace and the user namespace.</t>
            <t>The IETF namespace is registered with IANA.
These names <bcp14>MUST NOT</bcp14> contain the "@" character (0x40).
This is a tag for the user namespace.</t>
            <table anchor="sig-note-data-subpacket-types">
              <name>OpenPGP Signature Notation Data Subpacket Types Registry</name>
              <thead>
                <tr>
                  <th align="left">Notation Name</th>
                  <th align="left">Data Type</th>
                  <th align="left">Allowed Values</th>
             
                </tr>
              </thead>
              <tbody>
                <tr>
		  <th colspan="3" align="left" rowspan="1">No registrations at this time.</th>
		</tr>
              </tbody>
            </table>
            <t>This registry is initially empty.</t>
            <t>Names in the user namespace consist of a UTF-8 string tag followed by "@", followed by a DNS domain name.
Note that the tag <bcp14>MUST NOT</bcp14> contain an "@" character.
For example, the "sample" tag used by Example Corporation could be "sample@example.com".</t>
            <t>Names in a user space are owned and controlled by the owners of that domain.
Obviously, it's bad form to create a new name in a DNS space that you don't own.</t>
            <t>Since the user namespace is in the form of an email address, implementers <bcp14>MAY</bcp14> wish to arrange for that address to reach a person who can be consulted about the use of the named tag.
Note that due to UTF-8 encoding, not all valid user space name tags are valid email addresses.</t>
            <t>If there is a critical notation, the criticality applies to that specific notation and not to notations in general.</t>
          </section>
          <section anchor="key-server-preferences">
            <name>Key Server Preferences</name>
            <t>(N octets of flags)</t>
            <t>This is a list of 1-bit flags that indicates preferences that the keyholder has about how the key is handled on a key server.
All undefined flags <bcp14>MUST</bcp14> be zero.</t>
            <table anchor="key-server-preference-flags-registry">
              <name>OpenPGP Key Server Preference Flags Registry</name>
              <thead>
                <tr>
                  <th align="left">Flag</th>
                  <th align="left">Shorthand</th>
                  <th align="left">Definition</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x80...</td>
                  <td align="left">No-modify</td>
                  <td align="left">The keyholder requests that this key only be modified or updated by the keyholder or an administrator of the key server.</td>
                </tr>
              </tbody>
            </table>
            <t>This is found only on a self-signature.</t>
          </section>
          <section anchor="preferred-key-server-subpacket">
            <name>Preferred Key Server</name>
            <t>(String)</t>
            <t>This is a URI of a key server that the keyholder prefers be used for updates.
Note that keys with multiple User IDs can have a Preferred Key Server for each User ID.
Note also that since this is a URI, the key server can actually be a copy of the key retrieved by https, ftp, http, etc.</t>
          </section>
          <section anchor="primary-user-id-subpacket">
            <name>Primary User ID</name>
            <t>(1 octet, Boolean)</t>
            <t>This is a flag in a User ID's self-signature that states whether this User ID is the main User ID for this key.
It is reasonable for an implementation to resolve ambiguities in preferences, for example, by referring to the Primary User ID.
If this flag is absent, its value is zero.
If more than one User ID in a key is marked as primary, the implementation may resolve the ambiguity in any way it sees fit, but it is <bcp14>RECOMMENDED</bcp14> that priority be given to the User ID with the most recent self-signature.</t>
            <t>When appearing on a self-signature on a User ID packet, this subpacket applies only to User ID packets.
When appearing on a self-signature on a User Attribute packet, this subpacket applies only to User Attribute packets. That is, there are two different and independent "primaries" -- one for User IDs and one for User Attributes.</t>
          </section>
          <section anchor="policy-uri-subpacket">
            <name>Policy URI</name>
            <t>(String)</t>
            <t>This subpacket contains a URI of a document that describes the policy under which the signature was issued.</t>
          </section>
          <section anchor="key-flags">
            <name>Key Flags</name>
            <t>(N octets of flags)</t>
            <t>This subpacket contains a list of binary flags that hold information about a key.
It is a string of octets, and an implementation <bcp14>MUST NOT</bcp14> assume a fixed size, so that it can grow over time. If a list is shorter than an implementation expects, the unstated flags are considered to be zero. The defined flags are as follows:</t>
            <table anchor="key-flags-registry">
              <name>OpenPGP Key Flags Registry</name>
              <thead>
                <tr>
                  <th align="left">Flag</th>
                  <th align="left">Definition</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01...</td>
                  <td align="left">This key may be used to make User ID certifications (Signature Type IDs 0x10-0x13) or Direct Key signatures (Signature Type ID 0x1F) over other keys.</td>
                </tr>
                <tr>
                  <td align="left">0x02...</td>
                  <td align="left">This key may be used to sign data.</td>
                </tr>
                <tr>
                  <td align="left">0x04...</td>
                  <td align="left">This key may be used to encrypt communications.</td>
                </tr>
                <tr>
                  <td align="left">0x08...</td>
                  <td align="left">This key may be used to encrypt storage.</td>
                </tr>
                <tr>
                  <td align="left">0x10...</td>
                  <td align="left">The private component of this key may have been split by a secret-sharing mechanism.</td>
                </tr>
                <tr>
                  <td align="left">0x20...</td>
                  <td align="left">This key may be used for authentication.</td>
                </tr>
                <tr>
                  <td align="left">0x80...</td>
                  <td align="left">The private component of this key may be in the possession of more than one person.</td>
                </tr>
                <tr>
                  <td align="left">0x0004...</td>
                  <td align="left">Reserved (ADSK)</td>
                </tr>
                <tr>
                  <td align="left">0x0008...</td>
                  <td align="left">Reserved (timestamping)</td>
                </tr>
              </tbody>
            </table>
            <t>Usage notes:</t>
            <t>The flags in this packet may appear in self-signatures or in certification signatures. They mean different things depending on who is making the statement. For example, a certification signature that has the "sign data" flag is stating that the certification is for that use. On the other hand, the "communications encryption" flag in a self-signature is stating a preference that a given key be used for communications. However, note that determining what is "communications" and what is "storage" is a thorny issue. This decision is left wholly up to the implementation; the authors of this document do not claim any special wisdom on the issue and realize that accepted opinion may change.</t>
            <t>The "split key" (0x10) and "group key" (0x80) flags are placed on a self-signature only; they are meaningless on a certification signature.
They <bcp14>SHOULD</bcp14> be placed only on a Direct Key signature (Type ID 0x1F) or a Subkey Binding signature (Type ID 0x18), one that refers to the key the flag applies to.</t>
            <t>When an implementation generates this subpacket, it <bcp14>SHOULD</bcp14> be marked as critical.</t>
          </section>
          <section anchor="signers-user-id-subpacket">
            <name>Signer's User ID</name>
            <t>(String)</t>
            <t>This subpacket allows a keyholder to state which User ID is responsible for the signing.
Many keyholders use a single key for different purposes, such as business communications as well as personal communications.
This subpacket allows such a keyholder to state which of their roles is making a signature.</t>
            <t>This subpacket is not appropriate to use to refer to a User Attribute packet.</t>
          </section>
          <section anchor="reason-for-revocation">
            <name>Reason for Revocation</name>
            <t>(1 octet of revocation code, N octets of reason string)</t>
            <t>This subpacket is used only in Key Revocation and Certification Revocation signatures.
It describes the reason why the key or certification was revoked.</t>
            <t>The first octet contains a machine-readable code that denotes the reason for the revocation:</t>

            <table anchor="reason-for-revocation-code-registry">
              <name>OpenPGP Reason for Revocation (Revocation Octet) Registry</name>
              <thead>
                <tr>
                  <th align="right">Code</th>
                  <th align="left">Reason</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="right">0</td>
                  <td align="left">No reason specified (Key Revocation or Certification Revocation signatures)</td>
                </tr>
                <tr>
                  <td align="right">1</td>
                  <td align="left">Key is superseded (Key Revocation signatures)</td>
                </tr>
                <tr>
                  <td align="right">2</td>
                  <td align="left">Key material has been compromised (Key Revocation signatures)</td>
                </tr>
                <tr>
                  <td align="right">3</td>
                  <td align="left">Key is retired and no longer used (Key Revocation signatures)</td>
                </tr>
                <tr>
                  <td align="right">32</td>
                  <td align="left">User ID information is no longer valid (Certification Revocation signatures)</td>
                </tr>
                <tr>
                  <td align="right">100-110</td>
                  <td align="left">Private Use</td>
                </tr>
              </tbody>
            </table>
            <t>Following the revocation code is a string of octets that gives information about the Reason for Revocation in human-readable form (UTF-8).
The string may be null (of zero length).
The length of the subpacket is the length of the reason string plus one.
An implementation <bcp14>SHOULD</bcp14> implement this subpacket, include it in all Revocation Signatures, and interpret revocations appropriately.
There are important semantic differences between the reasons, and there are thus important reasons for revoking signatures.</t>
            <t>If a key has been revoked because of a compromise, all signatures created by that key are suspect. However, if it was merely superseded or retired, old signatures are still valid. If the revoked signature is the self-signature for certifying a User ID, a revocation denotes that that user name is no longer in use.
Such a signature revocation <bcp14>SHOULD</bcp14> include a Reason for Revocation subpacket containing code 32.</t>
            <t>Note that any certification may be revoked, including a certification on some other person's key. There are many good reasons for revoking a certification signature, such as the case where the keyholder leaves the employ of a business with an email address. A revoked certification is no longer a part of validity calculations.</t>
          </section>
          <section anchor="features-subpacket">
            <name>Features</name>
            <t>(N octets of flags)</t>
            <t>The Features subpacket denotes which advanced OpenPGP features a user's implementation supports. This is so that as features are added to OpenPGP that cannot be backward compatible, a user can state that they can use that feature. The flags are single bits that indicate that a given feature is supported.</t>
            <t>This subpacket is similar to a preferences subpacket and only appears in a self-signature.</t>
            <t>An implementation <bcp14>SHOULD NOT</bcp14> use a feature listed when sending to a user who does not state that they can use it, unless the implementation can infer support for the feature from another implementation-dependent mechanism.</t>
            <t>Defined features are as follows:</t>
            <t>First octet:</t>
            <table anchor="features-flags-registry">
              <name>OpenPGP Features Flags Registry</name>
              <thead>
                <tr>
                  <th align="left">Feature</th>
                  <th align="left">Definition</th>
                  <th align="left">Reference</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01...</td>
                  <td align="left">Version 1 Symmetrically Encrypted and Integrity Protected Data packet</td>
                  <td align="left"><xref target="version-one-seipd"/></td>
                </tr>
                <tr>
                  <td align="left">0x02...</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="left">0x04...</td>
                  <td align="left">Reserved</td>
                  <td align="left"></td>
                </tr>
                <tr>
                  <td align="left">0x08...</td>
                  <td align="left">Version 2 Symmetrically Encrypted and Integrity Protected Data packet</td>
                  <td align="left"><xref target="version-two-seipd"/></td>
                </tr>
              </tbody>
            </table>
            <t>If an implementation implements any of the defined features, it <bcp14>SHOULD</bcp14> implement the Features subpacket, too.</t>
            <t>See <xref target="ciphertext-malleability"/> for details about how to use the Features subpacket when generating encryption data.</t>
          </section>
          <section anchor="signature-target-subpacket">
            <name>Signature Target</name>
            <t>(1 octet public key algorithm, 1 octet hash algorithm, N octets hash)</t>
            <t>This subpacket identifies a specific target signature to which a signature refers.
For Revocation Signatures, this subpacket provides explicit designation of which signature is being revoked. For a Third-Party Confirmation or Timestamp signature, this designates what signature is signed.
All arguments are an identifier of that target signature.</t>
            <t>The N octets of hash data <bcp14>MUST</bcp14> be the size of the signature's hash. For example, a target signature with a SHA-1 hash <bcp14>MUST</bcp14> have 20 octets of hash data.</t>
          </section>
          <section anchor="embedded-signature-subpacket">
            <name>Embedded Signature</name>
            <t>(1 Signature packet body)</t>
            <t>This subpacket contains a complete Signature packet body as specified in <xref target="signature-packet"/>.
It is useful when one signature needs to refer to, or be incorporated in, another signature.</t>
          </section>
          <section anchor="issuer-fingerprint-subpacket">
            <name>Issuer Fingerprint</name>
            <t>(1 octet key version number, N octets of fingerprint)</t>
            <t>The OpenPGP Key fingerprint of the key issuing the signature.
This subpacket <bcp14>SHOULD</bcp14> be included in all signatures.
If the version of the issuing key is 4 and an Issuer Key ID subpacket (<xref target="issuer-keyid-subpacket"/>) is also included in the signature, the Key ID of the Issuer Key ID subpacket <bcp14>MUST</bcp14> match the low 64 bits of the fingerprint.</t>
            <t>Note that the length N of the fingerprint for a version 4 key is 20 octets; for a version 6 key, N is 32.
Since the version of the signature is bound to the version of the key, the version octet here <bcp14>MUST</bcp14> match the version of the signature.
If the version octet does not match the signature version, the receiving implementation <bcp14>MUST</bcp14> treat it as a malformed signature (see <xref target="malformed-signatures"/>).</t>
          </section>
          <section anchor="intended-recipient-fingerprint">
            <name>Intended Recipient Fingerprint</name>
            <t>(1 octet key version number, N octets of fingerprint)</t>
            <t>The OpenPGP Key fingerprint of the intended recipient primary key.
If one or more subpackets of this type are included in a signature, it <bcp14>SHOULD</bcp14> be considered valid only in an encrypted context, where the key it was encrypted to is one of the indicated primary keys or one of their subkeys. This can be used to prevent forwarding a signature outside of its intended, encrypted context (see <xref target="surreptitious-forwarding"/>).</t>
            <t>Note that the length N of the fingerprint for a version 4 key is 20 octets; for a version 6 key, N is 32.</t>
            <t>An implementation <bcp14>SHOULD</bcp14> generate this subpacket when creating a signed and encrypted message.</t>
            <t>When generating this subpacket in a version 6 signature, it <bcp14>SHOULD</bcp14> be marked as critical.</t>
          </section>
        </section>
        <section anchor="computing-signatures">
          <name>Computing Signatures</name>

          <t>All signatures are formed by producing a hash over the signature data and then using the resulting hash in the signature algorithm.</t>
          <t>When creating or verifying a version 6 signature, the salt is fed into the hash context before any other data.</t>
          <t>For binary document signatures (Type ID 0x00), the document data is hashed directly.
For text document signatures (Type ID 0x01), the implementation <bcp14>MUST</bcp14> first canonicalize the document by converting line endings to &lt;CR&gt;&lt;LF&gt; and encoding it in UTF-8 (see <xref target="RFC3629"/>).
	  The resulting UTF-8 byte stream is hashed.</t>	  
          <t>When a version 4 signature is made over a key, the hash data starts with the octet 0x99, followed by a 2-octet length of the key, followed by the body of the key packet.
When a version 6 signature is made over a key, the hash data starts with the salt and then octet 0x9B, followed by a 4-octet length of the key, followed by the body of the key packet.</t>
          <t>A Subkey Binding signature (Type ID 0x18) or Primary Key Binding signature (Type ID 0x19) then hashes the subkey using the same format as the main key (also using 0x99 or 0x9B as the first octet). Primary Key Revocation signatures (Type ID 0x20) hash only the key being revoked.
A Subkey Revocation signature (Type ID 0x28) first hashes the primary key and then the subkey being revoked.</t>
<t>A Certification signature (Type IDs 0x10 through 0x13) hashes the User ID that is bound to the key into the hash context after the above data. A version 3 certification hashes the contents of the User ID or User Attribute packet without the packet header. A version 4 or version 6 certification hashes the constant 0xB4 for User ID certifications or the constant 0xD1 for User Attribute certifications, followed by a 4-octet number giving the length of the User ID or User Attribute data, followed by the User ID or User Attribute data.</t>

<t>A Third-Party Confirmation signature (Type ID 0x50) hashes the salt (version 6 signatures only), followed by the octet 0x88, followed by the 4-octet length of the signature, and then the body of the Signature packet. (Note that this is a Legacy packet header for a Signature packet with the length-of-length field set to zero.) The unhashed subpacket data of the Signature packet being hashed is not included in the hash, and the unhashed subpacket data length value is set to zero.</t>
          <t>Once the data body is hashed, then a trailer is hashed. This trailer depends on the version of the signature.</t>
          <ul spacing="normal">
            <li>
              <t>A version 3 signature hashes five octets of the packet body, starting from the signature type field. This data is the signature type, followed by the 4-octet Signature Creation Time.</t>
            </li>
            <li>
              <t>A version 4 or version 6 signature hashes the packet body starting from its first field, the version number, through the end of the hashed subpacket data and a final extra trailer. Thus, the hashed fields are:  </t>
              <ul spacing="normal">
                <li>
                  <t>an octet indicating the signature version (0x04 for version 4, and 0x06 for version 6),</t>
                </li>
                <li>
                  <t>the signature type,</t>
                </li>
                <li>
                  <t>the public key algorithm,</t>
                </li>
                <li>
                  <t>the hash algorithm,</t>
                </li>
                <li>
                  <t>the hashed subpacket length,</t>
                </li>
                <li>
                  <t>the hashed subpacket body,</t>
                </li>
                <li>
                  <t>a second version octet (0x04 for version 4, and 0x06 for version 6),</t>
                </li>
                <li>
                  <t>a single octet 0xFF, and</t>
                </li>
                <li>
                  <t>a number representing the length (in octets) of the hashed data from the Signature packet through the hashed subpacket body. This a 4-octet big-endian unsigned integer of the length modulo 2<sup>32</sup>.</t>
                </li>
              </ul>
            </li>
          </ul>
          <t>After all this has been hashed in a single hash context, the resulting hash field is used in the signature algorithm, and its first two octets are placed in the Signature packet, as described in <xref target="version-four-and-six-sig"/>.</t>
          <t>For worked examples of the data hashed during a signature, see <xref target="sig-hashed-data-example"/>.</t>
          <section anchor="sig-computation-notes">
            <name>Notes about Signature Computation</name>
            <t>The data actually hashed by OpenPGP varies depending on the signature version, in order to ensure that a signature made using one version cannot be repurposed as a signature with a different version over subtly different data. The hashed data streams differ based on their trailer, most critically in the fifth and sixth octets from the end of the stream.
In particular:</t>
            <ul spacing="normal">
              <li>
                <t>A version 3 signature uses the fifth octet from the end to store its Signature Type ID.
This <bcp14>MUST NOT</bcp14> be Signature Type ID <tt>0xFF</tt>.</t>
              </li>
              <li>
                <t>All signature versions later than version 3 always use a literal <tt>0xFF</tt> in the fifth octet from the end.
For these later signature versions, the sixth octet from the end (the octet before the <tt>0xFF</tt>) stores the signature version number.</t>
              </li>
            </ul>
          </section>
        </section>
        <section anchor="malformed-signatures">
          <name>Malformed and Unknown Signatures</name>
          <t>In some cases, a Signature packet (or its corresponding One-Pass Signature packet; see <xref target="one-pass-sig"/>) may be malformed or unknown.
For example, it might encounter any of the following problems (this is not an exhaustive list):</t>
          <ul spacing="normal">
            <li>
              <t>An unknown signature type</t>
            </li>
            <li>
              <t>An unknown signature version</t>
            </li>
            <li>
              <t>An unsupported signature version</t>
            </li>
            <li>
              <t>An unknown "critical" subpacket (see <xref target="signature-subpacket"/>) in the hashed area</t>
            </li>
            <li>
              <t>A subpacket with a length that diverges from the expected length</t>
            </li>
            <li>
              <t>A hashed subpacket area with length that exceeds the length of the Signature packet itself</t>
            </li>
            <li>
              <t>A hash algorithm known to be weak (e.g., MD5)</t>
            </li>
            <li>
              <t>A mismatch between the expected salt length of the hash algorithm and the actual salt length</t>
            </li>
            <li>
              <t>A mismatch between the One-Pass Signature version and the Signature version (see <xref target="signed-message-versions"/>)</t>
            </li>
            <li>
              <t>A signature with a version other than 6, made by a version 6 key</t>
            </li>
          </ul>
          <t>When an implementation encounters such a malformed or unknown signature, it <bcp14>MUST</bcp14> ignore the signature for validation purposes.
It <bcp14>MUST NOT</bcp14> indicate a successful signature validation for such a signature.
At the same time, it <bcp14>MUST NOT</bcp14> halt processing on the packet stream or reject other signatures in the same packet stream just because an unknown or invalid signature exists.</t>
          <t>This requirement is necessary for forward compatibility.
Producing an output that indicates that no successful signatures were found is preferable to aborting processing entirely.</t>
        </section>
      </section>
      <section anchor="skesk">
        <name>Symmetric Key Encrypted Session Key Packet (Type ID 3)</name>
        <t>The Symmetric Key Encrypted Session Key (SKESK) packet holds the symmetric key encryption of a session key used to encrypt a message.
Zero or more Public Key Encrypted Session Key packets (<xref target="pkesk"/>) and/or Symmetric Key Encrypted Session Key packets precede an encryption container (that is, a Symmetrically Encrypted and Integrity Protected Data packet or -- for historic data -- a Symmetrically Encrypted Data packet) that holds an Encrypted Message. The message is encrypted with a session key, and the session key is itself encrypted and stored in the Encrypted Session Key packet(s).</t>
        <t>If the encryption container is preceded by one or more Symmetric Key Encrypted Session Key packets, each specifies a passphrase that may be used to decrypt the message.
This allows a message to be encrypted to a number of public keys, and also to one or more passphrases.</t>
        <t>The body of this packet starts with a 1-octet number giving the version number of the packet type.
The currently defined versions are 4 and 6.
The remainder of the packet depends on the version.</t>
        <t>The versions differ in how they encrypt the session key with the passphrase and in what they encode.
The version of the SKESK packet must align with the version of the SEIPD packet (see <xref target="encrypted-message-versions"/>).
Any new version of the SKESK packet should be registered in the registry established in <xref target="encrypted-message-versions"/>.</t>
        <section anchor="v4-skesk">
          <name>Version 4 Symmetric Key Encrypted Session Key Packet Format</name>
          <t>A v4 SKESK packet precedes a v1 SEIPD (see <xref target="version-one-seipd"/>).
In historic data, it is sometimes found preceding a deprecated SED packet (see <xref target="sed"/>). A v4 SKESK packet <bcp14>MUST NOT</bcp14> precede a v2 SEIPD packet (see <xref target="encrypted-message-versions"/>).</t>
          <t>A version 4 Symmetric Key Encrypted Session Key packet consists of:</t>
          <ul spacing="normal">
            <li>
              <t>A 1-octet version number with value 4.</t>
            </li>
            <li>
              <t>A 1-octet number describing the symmetric algorithm used.</t>
            </li>
            <li>
              <t>An S2K Specifier. The length of the S2K Specifier depends on its type (see <xref target="s2k-types"/>).</t>
            </li>
            <li>
              <t>Optionally, the encrypted session key itself, which is decrypted with the S2K object.</t>
            </li>
          </ul>
          <t>If the encrypted session key is not present (which can be detected on the basis of packet length and S2K Specifier size), then the S2K algorithm applied to the passphrase produces the session key for decrypting the message, using the Symmetric Cipher Algorithm ID from the Symmetric Key Encrypted Session Key packet.</t>
          <t>If the encrypted session key is present, the result of applying the S2K algorithm to the passphrase is used to decrypt just that encrypted session key field, using CFB mode with an IV of all zeros.
The decryption result consists of a 1-octet algorithm identifier that specifies the symmetric key encryption algorithm used to encrypt the following encryption container, followed by the session key octets themselves.</t>
          <t>Note: because an all-zero IV is used for this decryption, the S2K Specifier <bcp14>MUST</bcp14> use a salt value, a Salted S2K, an Iterated and Salted S2K, or Argon2.
The salt value will ensure that the decryption key is not repeated even if the passphrase is reused.</t>
        </section>
        <section anchor="v6-skesk">
          <name>Version 6 Symmetric Key Encrypted Session Key Packet Format</name>
          <t>A v6 SKESK packet precedes a v2 SEIPD packet (see <xref target="version-two-seipd"/>).
A v6 SKESK packet <bcp14>MUST NOT</bcp14> precede a v1 SEIPD packet or a deprecated Symmetrically Encrypted Data packet (see <xref target="encrypted-message-versions"/>).</t>
          <t>A version 6 Symmetric Key Encrypted Session Key packet consists of:</t>
          <ul spacing="normal">
            <li>
              <t>A 1-octet version number with value 6.</t>
            </li>
            <li>
              <t>A 1-octet scalar octet count for the 5 fields following this octet.</t>
            </li>
            <li>	      
              <t>A 1-octet Symmetric Cipher Algorithm ID (from <xref target="symkey-algorithms-registry"/>).</t>
            </li>
            <li>
              <t>A 1-octet AEAD algorithm identifier (from <xref target="aead-algorithms-registry"/>).</t>
            </li>
            <li>
              <t>A 1-octet scalar octet count of the following field.</t>
            </li>
            <li>
              <t>An S2K Specifier. The length of the S2K Specifier depends on its type (see <xref target="s2k-types"/>).</t>
            </li>
            <li>
              <t>A starting IV of the size specified by the AEAD algorithm.</t>
            </li>
            <li>
              <t>The encrypted session key itself.</t>
            </li>
            <li>
              <t>An authentication tag for the AEAD mode.</t>
            </li>
          </ul>
          <t>A key-encryption key (KEK) is derived using HKDF <xref target="RFC5869"/> with SHA256 <xref target="RFC6234"/> as the hash algorithm.
The Initial Keying Material (IKM) for HKDF is the key derived from S2K.
No salt is used. The info parameter is comprised of the Packet Type ID in OpenPGP format encoding (bits 7 and 6 are set, and bits 5-0 carry the Packet Type ID), the packet version, and the cipher-algo and AEAD-mode used to encrypt the key material.</t>
          <t>Then, the session key is encrypted using the resulting key, with the AEAD algorithm specified for the version 2 Symmetrically Encrypted and Integrity Protected Data packet.
Note that no chunks are used and that there is only one authentication tag.
The Packet Type ID encoded in OpenPGP format (bits 7 and 6 are set, and bits 5-0 carry the Packet Type ID), the packet version number, the cipher algorithm ID, and the AEAD algorithm ID are given as additional data.
For example, the additional data used with AES-128 with OCB consists of the octets 0xC3, 0x06, 0x07, and 0x02.</t>
        </section>
      </section>
      <section anchor="one-pass-sig">
        <name>One-Pass Signature Packet (Type ID 4)</name>
        <t>The One-Pass Signature packet precedes the signed data and contains enough information to allow the receiver to begin calculating any hashes needed to verify the signature.
It allows the Signature packet to be placed at the end of the message so that the signer can compute the entire signed message in one pass.</t>
        <t>The body of this packet consists of:</t>
        <ul spacing="normal">
          <li>
            <t>A 1-octet version number.
The currently defined versions are 3 and 6.
Any new One-Pass Signature packet version should be registered in the registry established in <xref target="signed-message-versions"/>.</t>
          </li>
          <li>
            <t>A 1-octet Signature Type ID.
Signature types are described in <xref target="signature-types"/>.</t>
          </li>
          <li>
            <t>A 1-octet number describing the hash algorithm used.</t>
          </li>
          <li>
            <t>A 1-octet number describing the public key algorithm used.</t>
          </li>
          <li>
            <t>Only for version 6 packets, a variable-length field containing:  </t>
            <ul spacing="normal">
              <li>
                <t>A 1-octet salt size. The value <bcp14>MUST</bcp14> match the value defined for the hash algorithm as specified in <xref target="hash-algorithms-registry"/>.</t>
              </li>
              <li>
                <t>The salt; a random value of the specified size. The value <bcp14>MUST</bcp14> match the salt field of the corresponding Signature packet.</t>
              </li>
            </ul>
          </li>
          <li>
            <t>Only for v3 packets, an 8-octet number holding the Key ID of the signing key.</t>
          </li>
          <li>
            <t>Only for version 6 packets, 32 octets of the fingerprint of the signing key.
Since a version 6 signature can only be made by a version 6 key, the length of the fingerprint is fixed.</t>
          </li>
          <li>
            <t>A 1-octet number holding a flag showing whether the signature is nested.
A zero value indicates that the next packet is another One-Pass Signature packet that describes another signature to be applied to the same message data.</t>
          </li>
        </ul>
        <t>When generating a one-pass signature, the OPS packet version <bcp14>MUST</bcp14> correspond to the version of the associated Signature packet, except for the historical accident that version 4 keys use a version 3 One-Pass Signature packet (there is no version 4 OPS).
See <xref target="signed-message-versions"/> for the full correspondence of versions between Keys, Signatures, and One-Pass Signatures.</t>
        <t>Note that if a message contains more than one one-pass signature, then the Signature packets bracket the message; that is, the first Signature packet after the message corresponds to the last One-Pass Signature packet and the final Signature packet corresponds to the first One-Pass Signature packet.</t>
      </section>
      <section anchor="key-material-packets">
        <name>Key Material Packets</name>
        <t>A key material packet contains all the information about a public or private key.
There are four variants of this packet type: two major versions (versions 4 and 6) and two strongly deprecated versions (versions 2 and 3). Consequently, this section is complex.</t>
        <t>For historical reasons, versions 1 and 5 of the key packets are unspecified.</t>
        <section anchor="key-packet-variants">
          <name>Key Packet Variants</name>
          <section anchor="pubkey">
            <name>Public Key Packet (Type ID 6)</name>
            <t>A Public Key packet starts a series of packets that forms an OpenPGP Key (sometimes called an OpenPGP certificate).</t>
          </section>
          <section anchor="pubsubkey">
            <name>Public Subkey Packet (Type ID 14)</name>
            <t>A Public Subkey packet (Type ID 14) has exactly the same format as a Public Key packet, but it denotes a subkey. One or more subkeys may be associated with a top-level key.
By convention, the top-level key offers certification capability, but it does not provide encryption services, while a dedicated subkey provides encryption (see <xref target="common-requirements"/>).</t>
          </section>
          <section anchor="seckey">
            <name>Secret Key Packet (Type ID 5)</name>
            <t>A Secret Key packet contains all the information that is found in a Public Key packet, including the public key material, but it also includes the secret key material after all the public key fields.</t>
          </section>
          <section anchor="secsubkey">
            <name>Secret Subkey Packet (Type ID 7)</name>
            <t>A Secret Subkey packet (Type ID 7) is the subkey analog of the Secret Key packet and has exactly the same format.</t>
          </section>
        </section>
        <section anchor="public-key-packet-formats">
          <name>Public Key Packet Formats</name>
          <t>There are four versions of key material packets.
Versions 2 and 3 have been deprecated since 1998. Version 4 has been deprecated by this document.</t>
          <t>OpenPGP implementations <bcp14>SHOULD</bcp14> create keys with version 6 format.
Version 4 keys are deprecated; an implementation <bcp14>SHOULD NOT</bcp14> generate a version 4 key but <bcp14>SHOULD</bcp14> accept it. Version 3 keys are deprecated; an implementation <bcp14>MUST NOT</bcp14> generate a version 3 key but <bcp14>MAY</bcp14> accept it. Version 2 keys are deprecated; an implementation <bcp14>MUST NOT</bcp14> generate a version 2 key but <bcp14>MAY</bcp14> accept it.</t>
          <t>Any new Key Version must be registered in the registry established in <xref target="signed-message-versions"/>.</t>
          <section anchor="v3-pubkeys">
            <name>Version 3 Public Keys</name>
            <t>Version 2 keys are identical to version 3 keys except for the version number.
A version 3 Public Key or Public Subkey packet contains:</t>
            <ul spacing="normal">
              <li>
                <t>A 1-octet version number (3).</t>
              </li>
              <li>
                <t>A 4-octet number denoting the time that the key was created.</t>
              </li>
              <li>
                <t>A 2-octet number denoting the time in days that the key is valid.
If this number is zero, then it does not expire.</t>
              </li>
              <li>
                <t>A 1-octet number denoting the public key algorithm of the key.</t>
              </li>
              <li>
                <t>A series of multiprecision integers comprising the key material:  </t>
                <ul spacing="normal">
                  <li>
                    <t>MPI of RSA public modulus n.</t>
                  </li>
                  <li>
                    <t>MPI of RSA public encryption exponent e.</t>
                  </li>
                </ul>
              </li>
            </ul>
            <t>Version 3 keys are deprecated. They contain three weaknesses.
First, it is relatively easy to construct a version 3 key that has the same Key ID as any other key because the Key ID is simply the low 64 bits of the public modulus.
Second, because the fingerprint of a version 3 key hashes the key material, but not its length, there is an increased opportunity for fingerprint collisions.
Third, there are weaknesses in the MD5 hash algorithm that cause developers to prefer other algorithms.
See <xref target="key-ids-fingerprints"/> for a fuller discussion of Key IDs and fingerprints.</t>
          </section>
          <section anchor="v4-pubkeys">
            <name>Version 4 Public Keys</name>
            <t>The version 4 format is similar to the version 3 format except for the absence of a validity period.
This has been moved to the Signature packet.
In addition, fingerprints of version 4 keys are calculated differently from version 3 keys, as described in <xref target="key-ids-fingerprints"/>.</t>
            <t>A version 4 packet contains:</t>
            <ul spacing="normal">
              <li>
                <t>A 1-octet version number (4).</t>
              </li>
              <li>
                <t>A 4-octet number denoting the time that the key was created.</t>
              </li>
              <li>
                <t>A 1-octet number denoting the public key algorithm of the key.</t>
              </li>
              <li>
                <t>A series of values comprising the key material.
This is algorithm specific and described in <xref target="algorithm-specific-parts-of-keys"/>.</t>
              </li>
            </ul>
          </section>
          <section anchor="v6-pubkeys">
            <name>Version 6 Public Keys</name>
            <t>The version 6 format is similar to the version 4 format except for the addition of a count for the key material.
This count helps parsing Secret Key packets (which are an extension of the Public Key packet format) in the case of an unknown algorithm.
	    In addition, fingerprints of version 6 keys are calculated differently from version 4 keys, as described in <xref target="key-ids-fingerprints"/>.</t>
	    
            <t>A version 6 packet contains:</t>
            <ul spacing="normal">
              <li>
                <t>A 1-octet version number (6).</t>
              </li>
              <li>
                <t>A 4-octet number denoting the time that the key was created.</t>
              </li>
              <li>
                <t>A 1-octet number denoting the public key algorithm of the key.</t>
              </li>
              <li>
                <t>A 4-octet scalar octet count for the public key material specified in the next field.</t>
              </li>
              <li>
                <t>A series of values comprising the public key material.
This is algorithm specific and described in <xref target="algorithm-specific-parts-of-keys"/>.</t>
              </li>
            </ul>
          </section>
        </section>
        <section anchor="secret-key-packet-formats">
          <name>Secret Key Packet Formats</name>
          <t>The Secret Key and Secret Subkey packets contain all the data of the Public Key and Public Subkey packets, with additional algorithm-specific secret key data appended, usually in encrypted form.</t>
          <t>The packet contains:</t>
          <ul spacing="normal">
            <li>
              <t>The fields of a Public Key or Public Subkey packet, as described above.</t>
            </li>
            <li>	      
              <t>One octet (the "S2K usage octet") indicating whether and how the secret key material is protected by a passphrase.
Zero indicates that the secret key data is not encrypted.  253 (AEAD), 254 (CFB), or 255 (MalleableCFB) indicates that an S2K Specifier and other parameters will follow.
Any other value is a symmetric key encryption algorithm identifier.
A version 6 packet <bcp14>MUST NOT</bcp14> use the value 255 (MalleableCFB).</t>
            </li>
            <li>
              <t>Only for a version 6 packet where the secret key material is encrypted (that is, where the previous octet is not zero), a 1-octet scalar octet count of the cumulative length of all the following conditionally included S2K parameter fields.</t>
            </li>
            <li>
              <t>Conditionally included S2K parameter fields:  </t>
              <ul spacing="normal">
                <li>
                  <t>If the S2K usage octet was 253, 254, or 255, a 1-octet symmetric key encryption algorithm.</t>
                </li>
                <li>
                  <t>If the S2K usage octet was 253 (AEAD), a 1-octet AEAD algorithm.</t>
                </li>
                <li>
                  <t>Only for a version 6 packet, and if the S2K usage octet was 253 or 254, a 1-octet count of the size of the one field following this octet.</t>
                </li>
                <li>
                  <t>If the S2K usage octet was 253, 254, or 255, an S2K Specifier. The length of the S2K Specifier depends on its type (see <xref target="s2k-types"/>).</t>
                </li>
                <li>
                  <t>If the S2K usage octet was 253 (AEAD), an IV of a size specified by the AEAD algorithm (see <xref target="version-two-seipd"/>), which is used as the nonce for the AEAD algorithm.</t>
                </li>
                <li>
                  <t>If the S2K usage octet was 254, 255, or a cipher algorithm ID (that is, the secret data uses some form of CFB encryption), an IV of the same length as the cipher's block size.</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Plain or encrypted multiprecision integers comprising the secret key data.
This is algorithm specific and described in <xref target="algorithm-specific-parts-of-keys"/>.
If the S2K usage octet is 253 (AEAD), then an AEAD authentication tag is at the end of that data.
If the S2K usage octet is 254 (CFB), a 20-octet SHA-1 hash of the plaintext of the algorithm-specific portion is appended to plaintext and encrypted with it.
If the S2K usage octet is 255 (MalleableCFB) or another non-zero value (that is, a symmetric key encryption algorithm identifier), a 2-octet checksum of the plaintext of the algorithm-specific portion (sum of all octets, mod 65536) is appended to plaintext and encrypted with it.
(This is deprecated and <bcp14>SHOULD NOT</bcp14> be used; see below.)</t>
            </li>
            <li>
              <t>Only for a version 3 or 4 packet where the S2K usage octet is zero, a 2-octet checksum of the algorithm-specific portion (sum of all octets, mod 65536).</t>
            </li>
          </ul>
          <t>The details about storing algorithm-specific secrets above are summarized in <xref target="secret-key-protection-registry"/>.</t>
          <t>Note that the version 6 packet format adds two count values to help parsing packets with unknown S2K or public key algorithms.</t>
          <t>Secret MPI values can be encrypted using a passphrase. If an S2K Specifier is given, it describes the algorithm for converting the passphrase to a key; otherwise, a simple MD5 hash of the passphrase is used. An implementation producing a passphrase-protected Secret Key packet <bcp14>MUST</bcp14> use an S2K Specifier; the simple hash is for read-only backward compatibility, though implementations <bcp14>MAY</bcp14> continue to use existing private keys in the old format. The cipher for encrypting the MPIs is specified in the Secret Key packet.</t>
          <t>Encryption/decryption of the secret data is done using the key created from the passphrase and the IV from the packet.
If the S2K usage octet is not 253, CFB mode is used.
A different mode is used with version 3 keys (which are only RSA) than with other key formats.
With version 3 keys, the MPI bit count prefix (that is, the first two octets) is not encrypted.
Only the MPI non-prefix data is encrypted.
Furthermore, the CFB state is resynchronized at the beginning of each new MPI value so that the CFB block boundary is aligned with the start of the MPI data.</t>
          <t>With version 4 and version 6 keys, a simpler method is used.
All secret MPI values are encrypted, including the MPI bit count prefix.</t>
          <t>If the S2K usage octet is 253, the KEK is derived using HKDF <xref target="RFC5869"/> to provide key separation. SHA256 <xref target="RFC6234"/> is used as the hash algorithm for HKDF. IKM for HKDF is the key derived from S2K.
	  No salt is used. The info parameter is comprised of the Packet Type ID encoded in OpenPGP format (bits 7 and 6 are set, and bits 5-0 carry the Packet Type ID), the packet version, and the cipher-algo and AEAD-mode used to encrypt the key material.</t>	  
          <t>Then, the encrypted MPI values are encrypted as one combined plaintext using one of the AEAD algorithms specified for the version 2 Symmetrically Encrypted and Integrity Protected Data packet.
Note that no chunks are used and that there is only one authentication tag.
As additional data, the Packet Type ID in OpenPGP format encoding (bits 7 and 6 are set, and bits 5-0 carry the Packet Type ID), followed by the Public Key packet fields, starting with the packet version number, are passed to the AEAD algorithm. For example, the additional data used with a Secret Key packet of version 4 consists of the octets 0xC5, 0x04, followed by four octets of creation time, one octet denoting the public key algorithm, and the algorithm-specific public key parameters.
For a Secret Subkey packet, the first octet would be 0xC7.
For a version 6 key packet, the second octet would be 0x06, and the 4-octet octet count of the public key material would be included as well (see <xref target="public-key-packet-formats"/>).</t>
          <t>The 2-octet checksum that follows the algorithm-specific portion is the algebraic sum, mod 65536, of the plaintext of all the algorithm-specific octets (including the MPI prefix and data).
With version 3 keys, the checksum is stored in the clear. With version 4 keys, the checksum is encrypted like the algorithm-specific data. This value is used to check that the passphrase was correct.
However, this checksum is deprecated, and an implementation <bcp14>SHOULD NOT</bcp14> use it; instead, an implementation should use the SHA-1 hash denoted with a usage octet of 254.
The reason for this is that there are some attacks that involve modifying the secret key undetected.
If the S2K usage octet is 253, no checksum or SHA-1 hash is used, but the authentication tag of the AEAD algorithm follows.</t>
          <t>When decrypting the secret key material using any of these schemes (that is, where the usage octet is non-zero), the resulting cleartext octet stream must be well formed.
In particular, an implementation <bcp14>MUST NOT</bcp14> interpret octets beyond the unwrapped cleartext octet stream as part of any of the unwrapped MPI objects.
Furthermore, an implementation <bcp14>MUST</bcp14> reject any secret key material whose cleartext length does not align with the lengths of the unwrapped MPI objects as unusable.</t>
        </section>
        <section anchor="key-ids-fingerprints">
          <name>Key IDs and Fingerprints</name>
          <t>Every OpenPGP Key has a fingerprint and a Key ID.
The computation of these values differs based on the key version.
The fingerprint length varies with the key version, but the Key ID (which is only used in v3 PKESK packets; see <xref target="v3-pkesk"/>) is always 64 bits.
The following registry represents the subsections below:</t>

          <table anchor="key-id-fingerprint-registry">
            <name>OpenPGP Key IDs and Fingerprints Registry</name>
            <thead>
              <tr>
                <th align="left">Key Version</th>
                <th align="left">Fingerprint</th>
                <th align="left">Fingerprint Length (Bits)</th>
                <th align="left">Key ID</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">3</td>
                <td align="left">MD5(MPIs without length octets)</td>
                <td align="left">128</td>
                <td align="left">low 64 bits of RSA modulus</td>
                <td align="left">
                  <xref target="v3-key-id-fingerprint"/></td>
              </tr>
              <tr>
                <td align="left">4</td>
                <td align="left">SHA1(normalized pubkey packet)</td>
                <td align="left">160</td>
                <td align="left">last 64 bits of fingerprint</td>
                <td align="left">
                  <xref target="v4-key-id-fingerprint"/></td>
              </tr>
              <tr>
                <td align="left">6</td>
                <td align="left">SHA256(normalized pubkey packet)</td>
                <td align="left">256</td>
                <td align="left">first 64 bits of fingerprint</td>
                <td align="left">
                  <xref target="v6-key-id-fingerprint"/></td>
              </tr>
            </tbody>
          </table>
          <section anchor="v3-key-id-fingerprint">
            <name>Version 3 Key ID and Fingerprint</name>
            <t>For a version 3 key, the 8-octet Key ID consists of the low 64 bits of the public modulus of the RSA key.</t>
            <t>The fingerprint of a version 3 key is formed by hashing the body (but not the 2-octet length) of the MPIs that form the key material (public modulus n, followed by exponent e) with MD5.
Note that both version 3 keys and MD5 are deprecated.</t>
          </section>
          <section anchor="v4-key-id-fingerprint">
            <name>Version 4 Key ID and Fingerprint</name>
            <t>A version 4 fingerprint is the 160-bit SHA-1 hash of the octet 0x99, followed by the 2-octet packet length, followed by the entire Public Key packet starting with the version field.
The Key ID is the low-order 64 bits of the fingerprint.
Here are the fields of the hash material, including an example of an Ed25519 key:</t>
<ol type="a.%d)">
            <li>0x99 (1 octet)</li>
            <li>2-octet, big-endian scalar octet count of (b)-(e)</li>
</ol>
<ol type="%c)" start="2">
            <li>version number = 4 (1 octet)</li>
            <li>timestamp of key creation (4 octets)</li>
            <li>algorithm (1 octet): 27 = Ed25519 (example)</li>
            <li>algorithm-specific fields</li>
</ol>
            <t>Algorithm-specific fields for Ed25519 keys (example):</t>

<ol type="e.%d)">
            <li>32 octets representing the public key</li>
</ol>
          </section>
          <section anchor="v6-key-id-fingerprint">
            <name>Version 6 Key ID and Fingerprint</name>
            <t>A version 6 fingerprint is the 256-bit SHA2-256 hash of the octet 0x9B, followed by the 4-octet packet length, followed by the entire Public Key packet starting with the version field.
The Key ID is the high-order 64 bits of the fingerprint.
	    Here are the fields of the hash material, including an example of an Ed25519 key:</t>
	    
<ol type="a.%d)">
            <li>0x9B (1 octet)</li>
            <li>4-octet scalar octet count of (b)-(f)</li>
</ol>
<ol type="%c)" start="2">
            <li>version number = 6 (1 octet)</li>
            <li>timestamp of key creation (4 octets)</li>
            <li>algorithm (1 octet): 27 = Ed25519 (example)</li>
            <li>4-octet scalar octet count for the key material specified in the next field</li>
            <li>algorithm-specific public key material</li>
</ol>
            <t>Algorithm-specific fields for Ed25519 keys (example):</t>

<ol type="f.%d)">
            <li>32 octets representing the public key</li>
</ol>
            <t>Note that it is possible for there to be collisions of Key IDs -- that is, two different keys with the same Key ID. Note that there is a much smaller, but still non-zero, probability that two different keys have the same fingerprint.</t>
            <t>Also note that if version 3, version 4, and version 6 format keys share the same RSA key material, they will have different Key IDs as well as different fingerprints.</t>
            <t>Finally, the Key ID and fingerprint of a subkey are calculated in the same way as for a primary key, including the 0x99 (version 4 key) or 0x9B (version 6 key) as the first octet (even though this is not a valid Packet Type ID for a public subkey).</t>
          </section>
        </section>
        <section anchor="algorithm-specific-parts-of-keys">
          <name>Algorithm-Specific Parts of Keys</name>
          <t>The public and secret key formats specify algorithm-specific parts of a key.
The following sections describe them in detail.</t>
<section anchor="key-rsa">
            <name>Algorithm-Specific Part for RSA Keys</name>
            <t>For RSA keys, the public key consists of this series of multiprecision integers:</t>
            <ul spacing="normal">
              <li>
                <t>MPI of RSA public modulus n,</t>
              </li>
              <li>
                <t>MPI of RSA public encryption exponent e.</t>
              </li>
            </ul>
            <t>The secret key consists of this series of multiprecision integers:</t>
            <ul spacing="normal">
              <li>
                <t>MPI of RSA secret exponent d;</t>
              </li>
              <li>
                <t>MPI of RSA secret prime value p;</t>
              </li>
              <li>
                <t>MPI of RSA secret prime value q (p &lt; q); and</t>
              </li>
              <li>
                <t>MPI of u, the multiplicative inverse of p, mod q.</t>
              </li>
            </ul>
          </section>
          <section anchor="key-dsa">
            <name>Algorithm-Specific Part for DSA Keys</name>
            <t>For DSA keys, the public key consists of this series of multiprecision integers:</t>
            <ul spacing="normal">
              <li>
                <t>MPI of DSA prime p;</t>
              </li>
              <li>
                <t>MPI of DSA group order q (q is a prime divisor of p-1);</t>
              </li>
              <li>
                <t>MPI of DSA group generator g; and</t>
              </li>
              <li>
                <t>MPI of DSA public key value y (= g<sup>x</sup> mod p where x is secret).</t>
              </li>
            </ul>
            <t>The secret key consists of this single multiprecision integer:</t>
            <ul spacing="normal">
              <li>
                <t>MPI of DSA secret exponent x.</t>
              </li>
            </ul>
          </section>
          <section anchor="key-elgamal">
            <name>Algorithm-Specific Part for Elgamal Keys</name>
            <t>For Elgamal keys, the public key consists of this series of multiprecision integers:</t>
            <ul spacing="normal">
              <li>
                <t>MPI of Elgamal prime p;</t>
              </li>
              <li>
                <t>MPI of Elgamal group generator g; and</t>
              </li>
              <li>
                <t>MPI of Elgamal public key value y (= g<sup>x</sup> mod p where x is secret).</t>
              </li>
            </ul>
            <t>The secret key consists of this single multiprecision integer:</t>
            <ul spacing="normal">
              <li>
                <t>MPI of Elgamal secret exponent x.</t>
              </li>
            </ul>
          </section>
          <section anchor="key-ecdsa">
            <name>Algorithm-Specific Part for ECDSA Keys</name>
            <t>For ECDSA keys, the public key consists of this series of values:</t>
            <ul spacing="normal">
              <li>
                <t>A variable-length field containing a curve OID, which is formatted as follows:  </t>
                <ul spacing="normal">
                  <li>
                    <t>A 1-octet size of the following field; values 0 and 0xFF are reserved for future extensions.</t>
                  </li>
                  <li>
                    <t>The octets representing a curve OID, as defined in <xref target="ec-curves"/>.</t>
                  </li>
                </ul>
              </li>
              <li>
                <t>An MPI of an EC point representing a public key.</t>
              </li>
            </ul>
            <t>The secret key consists of this single multiprecision integer:</t>
            <ul spacing="normal">
              <li>
                <t>An MPI of an integer representing the secret key, which is a scalar of the public EC point.</t>
              </li>
            </ul>
          </section>
          <section anchor="key-eddsa-legacy">
            <name>Algorithm-Specific Part for EdDSALegacy Keys (Deprecated)</name>
            <t>For EdDSALegacy keys (deprecated), the public key consists of this series of values:</t>
            <ul spacing="normal">
              <li>
                <t>A variable-length field containing a curve OID, formatted as follows:  </t>
                <ul spacing="normal">
                  <li>
                    <t>A 1-octet size of the following field; values 0 and 0xFF are reserved for future extensions.</t>
                  </li>
                  <li>
                    <t>The octets representing a curve OID, as defined in <xref target="ec-curves"/>.</t>
                  </li>
                </ul>
              </li>
              <li>
                <t>An MPI of an EC point representing a public key Q in prefixed native form (see <xref target="ec-point-prefixed-native"/>).</t>
              </li>
            </ul>
            <t>The secret key consists of this single multiprecision integer:</t>
            <ul spacing="normal">
              <li>
                <t>An MPI-encoded octet string representing the native form of the secret key in the curve-specific format, as described in <xref target="curve-specific-formats"/>.</t>
              </li>
            </ul>
            <t>Note that the native form for an EdDSA secret key is a fixed-width sequence of unstructured random octets, with size corresponding to the specific curve. That sequence of random octets is used with a cryptographic digest to produce both a curve-specific secret scalar and a prefix used when making a signature.
See <xref section="5.1.5" sectionFormat="of" target="RFC8032"/> for more details about how to use the native octet strings for Ed25519Legacy.
The value stored in an OpenPGP EdDSALegacy Secret Key packet is the original sequence of random octets.</t>
            <t>Note that the only curve defined for use with EdDSALegacy is the Ed25519Legacy OID.</t>
          </section>
          <section anchor="key-ecdh">
            <name>Algorithm-Specific Part for ECDH Keys</name>
            <t>For ECDH keys, the public key consists of this series of values:</t>
            <ul spacing="normal">
              <li>
                <t>A variable-length field containing a curve OID, which is formatted as follows:  </t>
                <ul spacing="normal">
                  <li>
                    <t>A 1-octet size of the following field; values 0 and 0xFF are reserved for future extensions.</t>
                  </li>
                  <li>
                    <t>The octets representing a curve OID, as defined in <xref target="ec-curves"/>.</t>
                  </li>
                </ul>
              </li>
              <li>
                <t>An MPI of an EC point representing a public key, in the point format associated with the curve, as specified in <xref target="curve-specific-formats"/>.</t>
              </li>
              <li>
                <t>A variable-length field containing key derivation function (KDF) parameters, which is formatted as follows:  </t>
                <ul spacing="normal">
                  <li>
                    <t>A 1-octet size of the following fields; values 0 and 0xFF are reserved for future extensions.</t>
                  </li>
                  <li>
                    <t>A 1-octet value 1, reserved for future extensions.</t>
                  </li>
                  <li>
                    <t>A 1-octet hash function ID used with a KDF.</t>
                  </li>
                  <li>
                    <t>A 1-octet algorithm ID for the symmetric algorithm that is used to wrap the symmetric key for message encryption; see <xref target="ecdh"/> for details.</t>
                  </li>
                </ul>
              </li>
            </ul>
            <t>The secret key consists of this single multiprecision integer:</t>
            <ul spacing="normal">
              <li>
                <t>An MPI representing the secret key, in the curve-specific format described in <xref target="curve-specific-formats"/>.</t>
              </li>
            </ul>
            <section anchor="ecdh-secret-key-material">
              <name>ECDH Secret Key Material</name>
              <t>When curve NIST P-256, NIST P-384, NIST P-521, brainpoolP256r1, brainpoolP384r1, or brainpoolP512r1 are used in ECDH, their secret keys are represented as a simple integer in standard MPI form.
Other curves are presented on the wire differently (though still as a single MPI), as described below and in <xref target="curve-specific-formats"/>.</t>
              <section anchor="curve25519-secrets">
                <name>Curve25519Legacy ECDH Secret Key Material (Deprecated)</name>
                <t>A Curve25519Legacy secret key is stored as a standard integer in big-endian MPI form.
Curve25519Legacy <bcp14>MUST NOT</bcp14> be used in key packets version 6 or above.
Note that this form is in reverse octet order from the little-endian "native" form found in <xref target="RFC7748"/>.</t>
                <t>Note also that the integer for a Curve25519Legacy secret key for OpenPGP <bcp14>MUST</bcp14> have the appropriate form; that is, it <bcp14>MUST</bcp14> be divisible by 8, <bcp14>MUST</bcp14> be at least 2<sup>254</sup>, and <bcp14>MUST</bcp14> be less than 2<sup>255</sup>.
The length of this MPI in bits is by definition always 255, so the two leading octets of the MPI will always be <tt>00 FF</tt>, and reversing the following 32 octets from the wire will produce the "native" form.</t>
                <t>When generating a new Curve25519Legacy secret key from 32 fully random octets, the following pseudocode produces the MPI wire format (note the similarity to <tt>decodeScalar25519</tt> as described in <xref target="RFC7748"/>):</t>
                <sourcecode type="pseudocode"><![CDATA[
def curve25519Legacy_MPI_from_random(octet_list):
    octet_list[0] &= 248
    octet_list[31] &= 127
    octet_list[31] |= 64
    mpi_header = [ 0x00, 0xFF ]
    return mpi_header || reversed(octet_list)
]]></sourcecode>
              </section>
            </section>
          </section>
          <section anchor="key-x25519">
            <name>Algorithm-Specific Part for X25519 Keys</name>
            <t>For X25519 keys, the public key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>32 octets of the native public key.</t>
              </li>
            </ul>
            <t>The secret key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>32 octets of the native secret key.</t>
              </li>
            </ul>
            <t>See <xref section="6.1" sectionFormat="of" target="RFC7748"/> for more details about how to use the native octet strings.
The value stored in an OpenPGP X25519 Secret Key packet is the original sequence of random octets.
The value stored in an OpenPGP X25519 Public Key packet is the value X25519(secretKey, 9).</t>
          </section>
          <section anchor="key-x448">
            <name>Algorithm-Specific Part for X448 Keys</name>
            <t>For X448 keys, the public key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>56 octets of the native public key.</t>
              </li>
            </ul>
            <t>The secret key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>56 octets of the native secret key.</t>
              </li>
            </ul>
            <t>See <xref section="6.2" sectionFormat="of" target="RFC7748"/> for more details about how to use the native octet strings.
The value stored in an OpenPGP X448 Secret Key packet is the original sequence of random octets.
The value stored in an OpenPGP X448 Public Key packet is the value X448(secretKey, 5).</t>
          </section>
          <section anchor="key-ed25519">
            <name>Algorithm-Specific Part for Ed25519 Keys</name>
            <t>For Ed25519 keys, the public key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>32 octets of the native public key.</t>
              </li>
            </ul>
            <t>The secret key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>32 octets of the native secret key.</t>
              </li>
            </ul>
            <t>See <xref section="5.1.5" sectionFormat="of" target="RFC8032"/> for more details about how to use the native octet strings.
The value stored in an OpenPGP Ed25519 Secret Key packet is the original sequence of random octets.</t>
          </section>
          <section anchor="key-ed448">
            <name>Algorithm-Specific Part for Ed448 Keys</name>
            <t>For Ed448 keys, the public key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>57 octets of the native public key.</t>
              </li>
            </ul>
            <t>The secret key consists of this single value:</t>
            <ul spacing="normal">
              <li>
                <t>57 octets of the native secret key.</t>
              </li>
            </ul>
            <t>See <xref section="5.2.5" sectionFormat="of" target="RFC8032"/> for more details about how to use the native octet strings.
The value stored in an OpenPGP Ed448 Secret Key packet is the original sequence of random octets.</t>
          </section>
        </section>
      </section>
      <section anchor="compressed-data">
        <name>Compressed Data Packet (Type ID 8)</name>
        <t>The Compressed Data packet contains compressed data.
Typically, this packet is found as the contents of an encrypted packet, or following a Signature or One-Pass Signature packet, and contains a Literal Data packet.</t>
        <t>The body of this packet consists of:</t>
        <ul spacing="normal">
          <li>	    
            <t>One octet specifying the algorithm used to compress the packet.</t>
          </li>
          <li>
            <t>Compressed data, which makes up the remainder of the packet.</t>
          </li>
        </ul>
        <t>A Compressed Data packet's body contains data that is a compression of a series of OpenPGP packets.
See <xref target="packet-sequence-composition"/> for details on how messages are formed.</t>
        <t>A ZIP-compressed series of packets is compressed into raw DEFLATE blocks <xref target="RFC1951"/>.</t>
        <t>A ZLIB-compressed series of packets is compressed with raw ZLIB-style blocks <xref target="RFC1950"/>.</t>
        <t>A BZip2-compressed series of packets is compressed using the BZip2 <xref target="BZ2"/> algorithm.</t>
        <t>An implementation that generates a Compressed Data packet <bcp14>MUST</bcp14> use the OpenPGP format for packet framing (see <xref target="openpgp-packet-format"/>).
It <bcp14>MUST NOT</bcp14> generate a Compressed Data packet with Legacy format (<xref target="legacy-packet-format"/>).</t>
        <t>An implementation that deals with either historic data or data generated by legacy implementations predating support for <xref target="RFC2440"/> <bcp14>MAY</bcp14> interpret Compressed Data packets that use the Legacy format for packet framing.</t>
      </section>
      <section anchor="sed">
        <name>Symmetrically Encrypted Data Packet (Type ID 9)</name>
        <t>The Symmetrically Encrypted Data packet contains data encrypted with a symmetric key algorithm. When it has been decrypted, it contains other packets (usually a Literal Data packet or compressed data packet, but in theory, it could be another sequence of packets that forms a valid OpenPGP Message).</t>
        <t>This packet is obsolete.
An implementation <bcp14>MUST NOT</bcp14> create this packet.
An implementation <bcp14>SHOULD</bcp14> reject such a packet and stop processing the message.
If an implementation chooses to process the packet anyway, it <bcp14>MUST</bcp14> return a clear warning that a non-integrity-protected packet has been processed.</t>
        <t>This packet format is impossible to handle safely in general because the ciphertext it provides is malleable.
See <xref target="ciphertext-malleability"/> about selecting a better OpenPGP encryption container that does not have this flaw.</t>
        <t>The body of this packet consists of:</t>
        <ul spacing="normal">
          <li>
            <t>A random prefix, containing block-size random octets (for example, 16 octets for a 128-bit block length) followed by a copy of the last two octets, encrypted together using Cipher Feedback (CFB) mode, with an IV of all zeros.</t>
          </li>
          <li>
            <t>Data encrypted using CFB mode, with the last block-size octets of the first ciphertext as the IV.</t>
          </li>
        </ul>
        <t>The symmetric cipher used may be specified in a Public Key or Symmetric Key Encrypted Session Key packet that precedes the Symmetrically Encrypted Data packet.
In that case, the cipher algorithm ID is prefixed to the session key before it is encrypted.
If no packets of these types precede the encrypted data, the IDEA algorithm is used with the session key calculated as the MD5 hash of the passphrase, though this use is deprecated.</t>
        <t>The data is encrypted in CFB mode (see <xref target="cfb-mode"/>).
For the random prefix, the IV is specified as all zeros. Instead of achieving randomized encryption through an IV, a string of length equal to the block size of the cipher plus two is encrypted for this purpose. The first block-size octets (for example, 16 octets for a 128-bit block length) are random, and the following two octets are copies of the last two octets of the first block-size random octets. For example, for a 16-octet block length, octet 17 is a copy of octet 15, and octet 18 is a copy of octet 16. For a cipher of block length 8, octet 9 is a copy of octet 7, and octet 10 is a copy of octet 8. (In both of these examples, we consider the first octet to be numbered 1.)</t>
        <t>After encrypting these block-size-plus-two octets, a new CFB context is created for the encryption of the data, with the last block-size octets of the first ciphertext as the IV. (Alternatively and equivalently, the CFB state is resynchronized: the last block-size octets of ciphertext are passed through the cipher, and the block boundary is reset.)</t>
        <t>The repetition of two octets in the random prefix allows the receiver to immediately check whether the session key is incorrect.
See <xref target="quick-check-oracle"/> for hints on the proper use of this "quick check".</t>
      </section>
      <section anchor="marker-packet">
        <name>Marker Packet (Type ID 10)</name>
        <t>The body of the Marker packet consists of:</t>
        <ul spacing="normal">
          <li>
            <t>The three octets 0x50, 0x47, 0x50 (which spell "PGP" in UTF-8).</t>
          </li>
        </ul>
        <t>Such a packet <bcp14>MUST</bcp14> be ignored when received.</t>
      </section>
      <section anchor="lit">
        <name>Literal Data Packet (Type ID 11)</name>
        <t>A Literal Data packet contains the body of a message; that is, data that is not to be further interpreted.</t>
        <t>The body of this packet consists of:</t>
        <ul spacing="normal">
          <li>
            <t>A 1-octet field that describes how the data is formatted.  </t>
            <t>
If it is a <tt>b</tt> (0x62), then the Literal Data packet contains binary data.
If it is a <tt>u</tt> (0x75), then the Literal Data packet contains UTF-8-encoded text data and thus may need line ends converted to local form or other text mode changes.  </t>
            <t>
Previous versions of the OpenPGP specification used <tt>t</tt> (0x74) to indicate textual data but did not specify the character encoding. Implementations <bcp14>SHOULD NOT</bcp14> emit this value.
An implementation that receives a Literal Data packet with this value in the format field <bcp14>SHOULD</bcp14> interpret the packet data as UTF-8 encoded text, unless reliable (not attacker-controlled) context indicates a specific alternate text encoding. This mode is deprecated due to its ambiguity.  </t>
            <t>
Some implementations predating <xref target="RFC2440"/> also defined a value of <tt>l</tt> as a "local" mode for machine-local conversions. <xref target="RFC1991"/> incorrectly states that this local mode flag is <tt>1</tt> (ASCII numeral one). Both of these local modes are deprecated.</t>
          </li>
          <li>
            <t>The file name as a string (1-octet length, followed by a file name).
	    This may be a zero-length string. Commonly, if the source of the encrypted data is a file, it will be the name of the encrypted file. An implementation <bcp14>MAY</bcp14> consider the file name in the Literal Data packet to be a more authoritative name than the actual file name.</t>
          </li>
          <li>
            <t>A 4-octet number that indicates a date associated with the literal data.
Commonly, the date might be the modification date of a file, or the time the packet was created, or a zero that indicates no specific time.</t>
          </li>
          <li>
            <t>The remainder of the packet is literal data.  </t>
            <t>
Text data <bcp14>MUST</bcp14> be encoded with UTF-8 (see <xref target="RFC3629"/>) and stored with &lt;CR&gt;&lt;LF&gt; text endings (that is, network-normal line endings).
These should be converted to native line endings by the receiving implementation.</t>
          </li>
        </ul>
        <t>Note that OpenPGP signatures do not include the formatting octet, the file name, and the date field of the Literal Data packet in a signature hash; therefore, those fields are not protected against tampering in a signed document. A receiving implementation <bcp14>MUST NOT</bcp14> treat those fields as though they were cryptographically secured by the surrounding signature when either representing them to the user or acting on them.</t>
        <t>Due to their inherent malleability, an implementation that generates a Literal Data packet <bcp14>SHOULD</bcp14> avoid storing any significant data in these fields.
If the implementation is certain that the data is textual and is encoded with UTF-8 (for example, if it will follow this Literal Data packet with a Signature packet of type 0x01 (see <xref target="signature-types"/>), it <bcp14>MAY</bcp14> set the format octet to <tt>u</tt>.
Otherwise, it <bcp14>MUST</bcp14> set the format octet to <tt>b</tt>.
It <bcp14>SHOULD</bcp14> set the filename to the empty string (encoded as a single zero octet) and the timestamp to zero (encoded as four zero octets).</t>
        <t>An application that wishes to include such filesystem metadata within a signature is advised to sign an encapsulated archive (for example, <xref target="PAX"/>).</t>
        <t>An implementation that generates a Literal Data packet <bcp14>MUST</bcp14> use the OpenPGP format for packet framing (see <xref target="openpgp-packet-format"/>).
It <bcp14>MUST NOT</bcp14> generate a Literal Data packet with Legacy format (<xref target="legacy-packet-format"/>).</t>
        <t>An implementation that deals with either historic data or data generated by an implementation that predates support for <xref target="RFC2440"/> <bcp14>MAY</bcp14> interpret Literal Data packets that use the Legacy format for packet framing.</t>
        <section anchor="for-eyes-only">
          <name>Special Filename _CONSOLE (Deprecated)</name>
          <t>The Literal Data packet's filename field has a historical special case for the special name <tt>_CONSOLE</tt>.
When the filename field is <tt>_CONSOLE</tt>, the message is considered to be "for your eyes only".
This advises that the message data is unusually sensitive, and the receiving program should process it more carefully, perhaps avoiding storing the received data to disk, for example.</t>
          <t>An OpenPGP deployment that generates Literal Data packets <bcp14>MUST NOT</bcp14> depend on this indicator being honored in any particular way.
It cannot be enforced, and the field itself is not covered by any cryptographic signature.</t>
          <t>It is <bcp14>NOT RECOMMENDED</bcp14> to use this special filename in a newly generated Literal Data packet.</t>
        </section>
      </section>
      <section anchor="trust">
        <name>Trust Packet (Type ID 12)</name>
        <t>The Trust packet is used only within keyrings and is not normally exported.
Trust packets contain data that record the user's specifications of which keyholders are trustworthy introducers, along with other information that implementation uses for trust information.
The format of Trust packets is defined by a given implementation.</t>
        <t>Trust packets <bcp14>SHOULD NOT</bcp14> be emitted to output streams that are transferred to other users, and they <bcp14>SHOULD</bcp14> be ignored on any input other than local keyring files.</t>
      </section>
      <section anchor="uid">
        <name>User ID Packet (Type ID 13)</name>
        <t>A User ID packet consists of UTF-8 text that is intended to represent the name and email address of the keyholder.
By convention, it includes a mail name-addr as described in <xref target="RFC2822"/>, but there are no restrictions on its content. The packet length in the header specifies the length of the User ID.</t>
      </section>
      <section anchor="user-attribute-packet">
        <name>User Attribute Packet (Type ID 17)</name>
        <t>The User Attribute packet is a variation of the User ID packet.
It is capable of storing more types of data than the User ID packet, which is limited to text.
Like the User ID packet, a User Attribute packet may be certified by the key owner ("self-signed") or any other key owner who cares to certify it.
Except as noted, a User Attribute packet may be used anywhere that a User ID packet may be used.</t>
        <t>While User Attribute packets are not a required part of the OpenPGP specification, implementations <bcp14>SHOULD</bcp14> provide at least enough compatibility to properly handle a certification signature on the User Attribute packet.
A simple way to do this is by treating the User Attribute packet as a User ID packet with opaque contents, but an implementation may use any method desired.</t>
        <t>The User Attribute packet is made up of one or more attribute subpackets.
Each subpacket consists of a subpacket header and a body.
The header consists of:</t>
        <ul spacing="normal">
          <li>
            <t>the subpacket length (1, 2, or 5 octets)</t>
          </li>
          <li>
            <t>the Subpacket Type ID (1 octet)</t>
          </li>
        </ul>
        <t>and is followed by the subpacket specific data.</t>
        <t>The following table lists the currently known subpackets:</t>
        <table anchor="user-attr-subpacket-types-registry">
          <name>OpenPGP User Attribute Subpacket Types Registry</name>
          <thead>
            <tr>
              <th align="right">ID</th>
              <th align="left">Attribute Subpacket</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
	     <tr>
              <td align="right">0</td>
              <td align="left">Reserved</td>
              <td align="left"></td>
            </tr>
            <tr>
              <td align="right">1</td>
              <td align="left">Image Attribute Subpacket</td>
              <td align="left"><xref target="uat-image"/></td>
            </tr>
            <tr>
              <td align="right">100-110</td>
              <td align="left">Private or Experimental Use</td>
              <td align="left"></td>
            </tr>
          </tbody>
        </table>
        <t>An implementation <bcp14>SHOULD</bcp14> ignore any subpacket of a type that it does not recognize.</t>
        <section anchor="uat-image">
          <name>Image Attribute Subpacket</name>
          <t>The Image Attribute subpacket is used to encode an image, presumably (but not required to be) that of the key owner.</t>
          <t>The Image Attribute subpacket begins with an image header.
The first two octets of the image header contain the length of the image header.
Note that unlike other multi-octet numerical values in this document, due to a historical accident, this value is encoded as a little-endian number. The image header length is followed by a single octet for the image header version.
The only currently defined version of the image header is 1, which is a 16-octet image header.
The first three octets of a version 1 image header are thus 0x10, 0x00, 0x01.</t>
          <table anchor="image-attribute-version-registry">
            <name>OpenPGP Image Attribute Versions Registry</name>
            <thead>
              <tr>
                <th align="right">Version</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="right">1</td>
                <td align="left">
                  <xref target="uat-image"/></td>
              </tr>
            </tbody>
          </table>
          <t>The fourth octet of a version 1 image header designates the encoding format of the image.
The only currently defined encoding format is the value 1 to indicate JPEG.
Image format IDs 100 through 110 are reserved for Private or Experimental Use.
The rest of the version 1 image header is made up of 12 reserved octets, all of which <bcp14>MUST</bcp14> be set to 0.</t>
          <table anchor="image-attr-encoding-format-registry">
            <name>OpenPGP Image Attribute Encoding Format Registry</name>
            <thead>
              <tr>
                <th align="right">ID</th>
                <th align="left">Encoding</th>
              
              </tr>
            </thead>
            <tbody>
	        <tr>
                <td align="right">0</td>
                <td align="left">Reserved</td>
              
              </tr>
              <tr>
                <td align="right">1</td>
                <td align="left">JPEG <xref target="JFIF"/></td>
               
              </tr>
              <tr>
                <td align="right">100-110</td>
                <td align="left">Private or Experimental Use</td>
              
              </tr>
            </tbody>
          </table>
          <t>The rest of the image subpacket contains the image itself.
As the only currently defined image type is JPEG, the image is encoded in the JPEG File Interchange Format (JFIF), a standard file format for JPEG images <xref target="JFIF"/>.</t>
          <t>An implementation <bcp14>MAY</bcp14> try to determine the type of an image by examination of the image data if it is unable to handle a particular version of the image header or if a specified encoding format value is not recognized.</t>
        </section>
      </section>
      <section anchor="seipd">
        <name>Symmetrically Encrypted and Integrity Protected Data Packet (Type ID 18)</name>
        <t>The SEIPD packet contains integrity-protected and encrypted data.
When it has been decrypted, it will contain other packets forming an OpenPGP Message (see <xref target="openpgp-messages"/>).</t>
        <t>The first octet of this packet is always used to indicate the version number, but different versions contain ciphertext that is structured differently. Version 1 of this packet contains data encrypted with a symmetric key algorithm and is thus protected against modification by the SHA-1 hash algorithm. This mechanism was introduced in <xref target="RFC4880"/> and offers some protections against ciphertext malleability.</t>
        <t>Version 2 of this packet contains data encrypted with an AEAD construction.
This offers a more cryptographically rigorous defense against ciphertext malleability.
See <xref target="ciphertext-malleability"/> for more details on choosing between these formats.</t>
        <t>Any new version of the SEIPD packet should be registered in the registry established in <xref target="encrypted-message-versions"/>.</t>
        <section anchor="version-one-seipd">
          <name>Version 1 Symmetrically Encrypted and Integrity Protected Data Packet Format</name>
          <t>A version 1 Symmetrically Encrypted and Integrity Protected Data packet consists of:</t>
          <ul spacing="normal">
            <li>
              <t>A 1-octet version number with value 1.</t>
            </li>
            <li>
              <t>Encrypted data -- the output of the selected symmetric key cipher operating in CFB mode.</t>
            </li>
          </ul>
          <t>The symmetric cipher used <bcp14>MUST</bcp14> be specified in a Public Key or Symmetric Key Encrypted Session Key packet that precedes the Symmetrically Encrypted and Integrity Protected Data packet. In either case, the cipher algorithm ID is prefixed to the session key before it is encrypted.</t>
          <t>The data is encrypted in CFB mode (see <xref target="cfb-mode"/>). The IV is specified as all zeros. Instead of achieving randomized encryption through an IV, OpenPGP prefixes an octet string to the data before it is encrypted for this purpose.
The length of the octet string equals the block size of the cipher in octets, plus two.
The first octets in the group, of length equal to the block size of the cipher, are random; the last two octets are each copies of their 2nd preceding octet.
For example, with a cipher whose block size is 128 bits or 16 octets, the prefix data will contain 16 random octets, then two more octets, which are copies of the 15th and 16th octets, respectively.
Unlike the deprecated Symmetrically Encrypted Data packet (<xref target="sed"/>), this prefix data is encrypted in the same CFB context, and no special CFB resynchronization is done.</t>
          <t>The repetition of 16 bits in the random data prefixed to the message allows the receiver to immediately check whether the session key is incorrect.
See <xref target="quick-check-oracle"/> for hints on the proper use of this "quick check".</t>
          <t>Two constant octets with the values 0xD3 and 0x14 are appended to the plaintext. Then, the plaintext of the data to be encrypted is passed through the SHA-1 hash function. The input to the hash function is comprised of the prefix data described above and all of the plaintext, including the trailing constant octets 0xD3, 0x14.
The 20 octets of the SHA-1 hash are then appended to the plaintext (after the constant octets 0xD3, 0x14) and encrypted along with the plaintext using the same CFB context.
This trailing checksum is known as the Modification Detection Code (MDC).</t>
          <t>During decryption, the plaintext data should be hashed with SHA-1, including the prefix data as well as the trailing constant octets 0xD3, 0x14, but excluding the last 20 octets containing the SHA-1 hash. The computed SHA-1 hash is then compared with the last 20 octets of plaintext.
A mismatch of the hash indicates that the message has been modified and <bcp14>MUST</bcp14> be treated as a security problem. Any failure <bcp14>SHOULD</bcp14> be reported to the user.</t>
	  
<t indent="3">NON-NORMATIVE EXPLANATION</t>
  <t indent="3">The MDC system, as the integrity
  protection mechanism of the version 1 Symmetrically Encrypted
  and Integrity Protected Data packet is called, was created to
  provide an integrity mechanism that is less strong than a
  signature, yet stronger than bare CFB encryption.</t>
              <t indent="3">CFB encryption has a limitation as damage to the ciphertext
  will corrupt the affected cipher blocks and the block following.
  Additionally, if data is removed from the end of a CFB-encrypted
  block, that removal is undetectable.  (Note also that CBC mode has
  a similar limitation, but data removed from the front of the block
  is undetectable.)</t>
              <t indent="3">The obvious way to protect or authenticate an encrypted block is
  to digitally sign it.  However, many people do not wish to
  habitually sign data for a large number of reasons that are beyond the
  scope of this document.  Suffice it to say that many people
  consider properties such as deniability to be as valuable as
  integrity.</t>
              <t indent="3">OpenPGP addresses this desire to have more security than raw
  encryption and yet preserve deniability with the MDC system.  An
  MDC is intentionally not a Message Authentication Code (MAC).  Its name was not selected by
  accident.  It is analogous to a checksum.</t>
              <t indent="3">Despite the fact that it is a relatively modest system, it has
  proved itself in the real world.  It is an effective defense to
  several attacks that have surfaced since it has been created.  It
  has met its modest goals admirably.</t>
              <t indent="3">Consequently, because it is a modest security system, it has
  modest requirements on the hash function(s) it employs.  It does
  not rely on a hash function being collision-free; it relies on a
  hash function being one-way.  If a forger, Frank, wishes to send
  Alice a (digitally) unsigned message that says, "I've always
  secretly loved you, signed Bob", it is far easier for him to
  construct a new message than it is to modify anything intercepted
  from Bob.  (Note also that if Bob wishes to communicate secretly
  with Alice, but without authentication or identification and with
  a threat model that includes forgers, he has a problem that
  transcends mere cryptography.)</t>
              <t indent="3">Note also that unlike nearly every other OpenPGP subsystem, there
  are no parameters in the MDC system.  It hard-defines SHA-1 as its
  hash function.  This is not an accident.  It is an intentional
  choice to avoid downgrade and cross-grade attacks while making a
  simple, fast system.  (A downgrade attack is an attack that would
  replace SHA2-256 with SHA-1, for example.  A cross-grade attack
  would replace SHA-1 with another 160-bit hash, such as
  RIPEMD-160, for example.)</t>
              <t indent="3">However, no update will be needed because the MDC has been replaced
  by the AEAD encryption described in this document.</t>

        </section>
        <section anchor="version-two-seipd">
          <name>Version 2 Symmetrically Encrypted and Integrity Protected Data Packet Format</name>
          <t>A version 2 Symmetrically Encrypted and Integrity Protected Data packet consists of:</t>
          <ul spacing="normal">
            <li>
              <t>A 1-octet version number with value 2.</t>
            </li>
            <li>
              <t>A 1-octet cipher algorithm ID.</t>
            </li>
            <li>
              <t>A 1-octet AEAD algorithm identifier.</t>
            </li>
            <li>
              <t>A 1-octet chunk size.</t>
            </li>
            <li>
              <t>32 octets of salt.
The salt is used to derive the message key and <bcp14>MUST</bcp14> be securely generated (see <xref target="CSPRNG"/>).</t>
            </li>
            <li>
              <t>Encrypted data; that is, the output of the selected symmetric key cipher operating in the given AEAD mode.</t>
            </li>
            <li>
              <t>A final summary authentication tag for the AEAD mode.</t>
            </li>
          </ul>
          <t>The decrypted session key and the salt are used to derive an M-bit message key and N-64 bits used as the IV, where M is the key size of the symmetric algorithm and N is the nonce size of the AEAD algorithm. M + N - 64 bits are derived using HKDF (see <xref target="RFC5869"/>). The leftmost M bits are used as a symmetric algorithm key, and the remaining N - 64 bits are used as an IV. HKDF is used with SHA256 <xref target="RFC6234"/> as hash algorithm. The session key is used as IKM and the salt as salt. The Packet Type ID in OpenPGP format encoding (bits 7 and 6 are set, and bits 5-0 carry the Packet Type ID), version number, cipher algorithm ID, AEAD algorithm ID, and chunk size octet are used as info parameter.</t>
          <t>The KDF mechanism provides key separation between cipher and AEAD algorithms.
Furthermore, an implementation can securely reply to a message even if a recipient's certificate is unknown by reusing the Encrypted Session Key packets and replying with a different salt that yields a new, unique message key.
See <xref target="secure-sessionkey-reuse"/> for guidance on how applications can securely implement this feature.</t>
          <t>A v2 SEIPD packet consists of one or more chunks of data. The plaintext of each chunk is of a size specified by the chunk size octet using the method specified below.</t>
          <t>The encrypted data consists of the encryption of each chunk of plaintext, followed immediately by the relevant authentication tag. If the last chunk of plaintext is smaller than the chunk size, the ciphertext for that data may be shorter; nevertheless, it is followed by a full authentication tag.</t>
          <t>For each chunk, the AEAD construction is given the Packet Type ID encoded in OpenPGP format (bits 7 and 6 are set, and bits 5-0 carry the Packet Type ID), version number, cipher algorithm ID, AEAD algorithm ID, and chunk size octet as additional data.
For example, the additional data of the first chunk using EAX and AES-128 with a chunk size of 2<sup>22</sup> octets consists of the octets 0xD2, 0x02, 0x07, 0x01, and 0x10.</t>
          <t>After the final chunk, the AEAD algorithm is used to produce a final authentication tag encrypting the empty string.
This AEAD instance is given the additional data specified above, plus an 8-octet, big-endian value specifying the total number of plaintext octets encrypted. This allows detection of a truncated ciphertext.</t>
          <t>The chunk size octet specifies the size of chunks using the following formula (in C <xref target="C99"/>), where c is the chunk size octet:</t>
          <artwork><![CDATA[
  chunk_size = (uint32_t) 1 << (c + 6)
]]></artwork>
          <t>An implementation <bcp14>MUST</bcp14> accept chunk size octets with values from 0 to 16.
An implementation <bcp14>MUST NOT</bcp14> create data with a chunk size octet value larger than 16 (4 MiB chunks).</t>
          <t>The nonce for AEAD mode consists of two parts.
Let N be the size of the nonce. The leftmost N - 64 bits are the IV derived using HKDF.
The rightmost 64 bits are the chunk index as a big-endian value.
The index of the first chunk is zero.</t>
        </section>
        <section anchor="aead-mode-eax">
          <name>EAX Mode</name>
          <t>The EAX AEAD algorithm used in this document is defined in <xref target="EAX"/>.</t>
          <t>The EAX algorithm can only use block ciphers with 16-octet blocks.
The nonce is 16 octets long.
EAX authentication tags are 16 octets long.</t>
        </section>
        <section anchor="aead-mode-ocb">
          <name>OCB Mode</name>
          <t>The OCB AEAD algorithm used in this document is defined in <xref target="RFC7253"/>.</t>
          <t>The OCB algorithm can only use block ciphers with 16-octet blocks.
The nonce is 15 octets long.
OCB authentication tags are 16 octets long.</t>
        </section>
        <section anchor="aead-mode-gcm">
          <name>GCM Mode</name>
          <t>The GCM AEAD algorithm used in this document is defined in <xref target="SP800-38D"/>.</t>
          <t>The GCM algorithm can only use block ciphers with 16-octet blocks.
The nonce is 12 octets long.
GCM authentication tags are 16 octets long.</t>
        </section>
      </section>
      <section anchor="padding-packet">
        <name>Padding Packet (Type ID 21)</name>
        <t>The Padding packet contains random data and can be used to defend against traffic analysis (see <xref target="traffic-analysis"/>) on v2 SEIPD messages (see <xref target="version-two-seipd"/>) and Transferable Public Keys (see <xref target="transferable-public-keys"/>).</t>
        <t>Such a packet <bcp14>MUST</bcp14> be ignored when received.</t>
        <t>Its contents <bcp14>SHOULD</bcp14> be random octets to make the length obfuscation it provides more robust even when compressed.</t>
        <t>An implementation adding padding to an OpenPGP stream <bcp14>SHOULD</bcp14> place such a packet:</t>
        <ul spacing="normal">
          <li>
            <t>At the end of a version 6 Transferable Public Key that is transferred over an encrypted channel (see <xref target="transferable-public-keys"/>).</t>
          </li>
          <li>
            <t>As the last packet of an Optionally Padded Message within a version 2 Symmetrically Encrypted and Integrity Protected Data packet (see <xref target="unwrapping"/>).</t>
          </li>
        </ul>
        <t>An implementation <bcp14>MUST</bcp14> be able to process Padding packets anywhere else in an OpenPGP stream so that future revisions of this document may specify further locations for padding.</t>
        <t>Policy about how large to make such a packet to defend against traffic analysis is beyond the scope of this document.</t>
      </section>
    </section>
    <section anchor="base64">
      <name>Base64 Conversions</name>
      <t>As stated in the introduction, OpenPGP's underlying representation for objects is a stream of arbitrary octets, and some systems desire these objects to be immune to damage caused by character set translation, data conversions, etc.</t>
      <t>In principle, any printable encoding scheme that met the requirements of the unsafe channel would suffice, since it would not change the underlying binary bit streams of the OpenPGP data structures.
The OpenPGP specification specifies one such printable encoding scheme to ensure interoperability; see <xref target="forming-ascii-armor"/>.</t>
      <t>The encoding is composed of two parts: a base64 encoding of the binary data and an optional checksum.
The base64 encoding used is described in <xref section="4" sectionFormat="of" target="RFC4648"/>, and it is wrapped into lines of no more than 76 characters each.</t>
      <t>When decoding base64, an OpenPGP implementation <bcp14>MUST</bcp14> ignore all whitespace.</t>
      <section anchor="optional-crc24">
        <name>Optional Checksum</name>
        <t>The optional checksum is a 24-bit Cyclic Redundancy Check (CRC) converted to four characters of base64 encoding by the same MIME base64 transformation, preceded by an equal sign (=). The CRC is computed by using the generator 0x864CFB and an initialization of 0xB704CE. The accumulation is done on the data before it is converted to base64 rather than on the converted data. A sample implementation of this algorithm is in <xref target="sample-crc24"/>.</t>
<t>If present, the checksum with its leading equal sign <bcp14>MUST</bcp14> appear on the next line after the base64-encoded data.</t>
<t>An implementation <bcp14>MUST NOT</bcp14> reject an OpenPGP object when the CRC24 footer is present, missing, malformed, or disagrees with the computed CRC24 sum. When forming ASCII Armor, the CRC24 footer <bcp14>SHOULD NOT</bcp14> be generated, unless interoperability with implementations that require the CRC24 footer to be present is a concern.</t>
        <t>The CRC24 footer <bcp14>MUST NOT</bcp14> be generated if it can be determined by the context or by the OpenPGP object being encoded that the consuming implementation accepts base64-encoded blocks without a CRC24 footer. Notably:</t>
        <ul spacing="normal">
          <li>
            <t>An ASCII-armored Encrypted Message packet sequence that ends in a v2 SEIPD packet <bcp14>MUST NOT</bcp14> contain a CRC24 footer.</t>
          </li>
          <li>
            <t>An ASCII-armored sequence of Signature packets that only includes version 6 Signature packets <bcp14>MUST NOT</bcp14> contain a CRC24 footer.</t>
          </li>
          <li>
            <t>An ASCII-armored Transferable Public Key packet sequence of a version 6 key <bcp14>MUST NOT</bcp14> contain a CRC24 footer.</t>
          </li>
          <li>
            <t>An ASCII-armored keyring consisting of only version 6 keys <bcp14>MUST NOT</bcp14> contain a CRC24 footer.</t>
          </li>
        </ul>
        <t>Rationale:
Previous draft versions of this document stated that the CRC24 footer is optional, but the text was ambiguous. In practice, very few implementations require the CRC24 footer to be present. Computing the CRC24 incurs a significant cost, while providing no meaningful integrity protection.
Therefore, generating it is now discouraged.</t>
        <section anchor="sample-crc24">
          <name>An Implementation of the CRC24 in "C"</name>
          <t>The following code is written in <xref target="C99"/>.</t>
          <sourcecode type="text/c" name="sample-crc24.c"><![CDATA[
#define CRC24_INIT 0xB704CEL
#define CRC24_GENERATOR 0x864CFBL

typedef unsigned long crc24;
crc24 crc_octets(unsigned char *octets, size_t len)
{
    crc24 crc = CRC24_INIT;
    int i;
    while (len--) {
        crc ^= (*octets++) << 16;
        for (i = 0; i < 8; i++) {
            crc <<= 1;
            if (crc & 0x1000000) {
                crc &= 0XFFFFFF; /* Clear bit 25 to avoid overflow */
                crc ^= CRC24_GENERATOR;
            }
        }
    }
    return crc & 0xFFFFFFL;
}
]]></sourcecode>
        </section>
      </section>
      <section anchor="forming-ascii-armor">
        <name>Forming ASCII Armor</name>
        <t>When OpenPGP encodes data into ASCII Armor, it puts specific headers around the base64-encoded data, so OpenPGP can reconstruct the data later.
An OpenPGP implementation <bcp14>MAY</bcp14> use ASCII Armor to protect raw binary data.
OpenPGP informs the user what kind of data is encoded in the ASCII Armor through the use of the headers.</t>
        <t>Concatenating the following data creates ASCII Armor:</t>
        <ul spacing="normal">
          <li>
            <t>An Armor Header Line, appropriate for the type of data</t>
          </li>
          <li>
            <t>Armor Headers</t>
          </li>
          <li>
            <t>A blank (zero length or containing only whitespace) line</t>
          </li>
          <li>
            <t>The ASCII-Armored data</t>
          </li>
          <li>
            <t>An optional Armor Checksum (discouraged; see <xref target="optional-crc24"/>)</t>
          </li>
          <li>
            <t>The Armor Tail, which depends on the Armor Header Line</t>
          </li>
        </ul>
        <section anchor="armor-header-line">
          <name>Armor Header Line</name>
          <t>An Armor Header Line consists of the appropriate header line text surrounded by five (5) dashes (<tt>-</tt>, 0x2D) on either side of the header line text. The header line text is chosen based on the type of data being encoded in Armor and how it is being encoded.
Header line texts include the following strings:</t>

          <table anchor="armor-header-line-registry">
            <name>OpenPGP Armor Header Lines Registry</name>
            <thead>
              <tr>
                <th align="left">Armor Header</th>
                <th align="left">Use</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">
                  <tt>BEGIN PGP MESSAGE</tt></td>
                <td align="left">Used for signed, encrypted, or compressed files.</td>
              </tr>
              <tr>
                <td align="left">
                  <tt>BEGIN PGP PUBLIC KEY BLOCK</tt></td>
                <td align="left">Used for armoring public keys.</td>
              </tr>
              <tr>
                <td align="left">
                  <tt>BEGIN PGP PRIVATE KEY BLOCK</tt></td>
                <td align="left">Used for armoring private keys.</td>
              </tr>
              <tr>
                <td align="left">
                  <tt>BEGIN PGP SIGNATURE</tt></td>
                <td align="left">Used for detached signatures, OpenPGP/MIME signatures, and cleartext signatures.</td>
              </tr>
            </tbody>
          </table>
          <t>Note that all of these Armor Header Lines are to consist of a complete line.
Therefore, the header lines <bcp14>MUST</bcp14> start at the beginning of a line and <bcp14>MUST NOT</bcp14> have text other than whitespace following them on the same line.</t>
        </section>
        <section anchor="armor-headers">
          <name>Armor Headers</name>
          <t>The Armor Headers are pairs of strings that can give the user or the receiving OpenPGP implementation some information about how to decode or use the message. The Armor Headers are a part of the armor, not the message, and hence are not protected by any signatures applied to the message.</t>
          <t>The format of an Armor Header is that of a key-value pair. A colon (<tt>:</tt> 0x3A) and a single space (0x20) separate the key and value.
An OpenPGP implementation may consider improperly formatted Armor Headers to be a corruption of the ASCII Armor, but it <bcp14>SHOULD</bcp14> make an effort to recover. Unknown keys should be silently ignored, and an OpenPGP implementation <bcp14>SHOULD</bcp14> continue to process the message.</t>
          <t>Note that some transport methods are sensitive to line length.
For example, the SMTP protocol that transports email messages has a line length limit of 998 characters (see <xref section="2.1.1" sectionFormat="of" target="RFC5322"/>).</t>
          <t>While there is a limit of 76 characters for the base64 data (<xref target="base64"/>), there is no limit for the length of Armor Headers.
Care should be taken to ensure that the Armor Headers are short enough to survive transport.
One way to do this is to repeat an Armor Header Key multiple times with different values for each so that no one line is overly long.</t>
          <t>Currently defined Armor Header Keys are as follows:</t>

          <table anchor="armor-header-key-registry">
            <name>OpenPGP Armor Header Keys Registry</name>
            <thead>
              <tr>
                <th align="left">Key</th>
                <th align="left">Summary</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">
                  <tt>Version</tt></td>
                <td align="left">Implementation information</td>
                <td align="left">
                  <xref target="armor-header-key-version"/></td>
              </tr>
              <tr>
                <td align="left">
                  <tt>Comment</tt></td>
                <td align="left">Arbitrary text</td>
                <td align="left">
                  <xref target="armor-header-key-comment"/></td>
              </tr>
              <tr>
                <td align="left">
                  <tt>Hash</tt></td>
                <td align="left">Hash algorithms used in some v4 cleartext signed messages</td>
                <td align="left">
                  <xref target="armor-header-key-hash"/></td>
              </tr>
              <tr>
                <td align="left">
                  <tt>Charset</tt></td>
                <td align="left">Character set</td>
                <td align="left">
                  <xref target="armor-header-key-charset"/></td>
              </tr>
            </tbody>
          </table>
          <section anchor="armor-header-key-version">
            <name>"Version" Armor Header</name>
            <t>The Armor Header Key <tt>Version</tt> describes the OpenPGP implementation and version used to encode the message.
To minimize metadata, implementations <bcp14>SHOULD NOT</bcp14> emit this key and its corresponding value except for debugging purposes with explicit user consent.</t>
          </section>
          <section anchor="armor-header-key-comment">
            <name>"Comment" Armor Header</name>
            <t>The Armor Header Key <tt>Comment</tt> supplies a user-defined comment.
	    OpenPGP defines all text to be in UTF-8. A comment may be any UTF-8 string. However, the whole point of armoring is to provide 7-bit clean data. Consequently, if a comment has characters that are outside the ASCII range of UTF-8, they may very well not survive transport.</t>
          </section>
          <section anchor="armor-header-key-hash">
            <name>"Hash" Armor Header</name>
            <t>The Armor Header Key <tt>Hash</tt> is deprecated, but some older implementations expect it in messages using the Cleartext Signature Framework (<xref target="cleartext-signature"/>). When present, this Armor Header Key contains a comma-separated list of hash algorithms used in the signatures on message, with digest names as specified in the "Text Name" column in <xref target="hash-algorithms-registry"/>.
These headers <bcp14>SHOULD NOT</bcp14> be emitted unless:</t>
            <ul spacing="normal">
              <li>
                <t>the cleartext signed message contains a version 4 signature made using a SHA2-based digest (SHA224, SHA256, SHA384, or SHA512), and</t>
              </li>
              <li>
                <t>the cleartext signed message might be verified by a legacy OpenPGP implementation that requires this header.</t>
              </li>
            </ul>
            <t>A verifying application <bcp14>MUST</bcp14> decline to validate any signature in a message with a non-conformant <tt>Hash</tt> header (that is, a <tt>Hash</tt> header that contains anything other than a comma-separated list of hash algorithms).
When a conformant <tt>Hash</tt> header is present, a verifying application <bcp14>MUST</bcp14> ignore its contents, deferring to the hash algorithm indicated in the Embedded Signature.</t>
          </section>
          <section anchor="armor-header-key-charset">
            <name>"Charset" Armor Header</name>
            <t>The Armor Header Key <tt>Charset</tt> contains a description of the character set that the plaintext is in (see <xref target="RFC2978"/>).
Please note that OpenPGP defines text to be in UTF-8.
An implementation will get the best results by translating into and out of UTF-8.
However, there are many instances where this is easier said than done.
Also, there are communities of users who have no need for UTF-8 because they are all happy with a character set like ISO Latin-5 or a Japanese character set.
In such instances, an implementation <bcp14>MAY</bcp14> override the UTF-8 default by using this header key.
An implementation <bcp14>MAY</bcp14> implement this key and any translations it cares to; an implementation <bcp14>MAY</bcp14> ignore it and assume all text is UTF-8.</t>
          </section>
        </section>
        <section anchor="armor-tail-line">
          <name>Armor Tail Line</name>
          <t>The Armor Tail Line is composed in the same manner as the Armor Header Line, except the string "BEGIN" is replaced by the string "END".</t>
        </section>
      </section>
    </section>
    <section anchor="cleartext-signature">
      <name>Cleartext Signature Framework</name>
      <t>It is desirable to be able to sign a textual octet stream without ASCII armoring the stream itself, so the signed text is still readable with any tool capable of rendering text.
In order to bind a signature to such a cleartext, the Cleartext Signature Framework is used, which follows the same basic format and restrictions as the ASCII armoring described in <xref target="forming-ascii-armor"/>.
(Note that this framework is not intended to be reversible.
<xref target="RFC3156"/> defines another way to sign cleartext messages for environments that support MIME.)</t>
      <section anchor="cleartext-structure">
        <name>Cleartext Signed Message Structure</name>
        <t>An OpenPGP cleartext signed message consists of:</t>
        <ul spacing="normal">
          <li>
            <t>The cleartext header <tt>-----BEGIN PGP SIGNED MESSAGE-----</tt> on a single line.</t>
          </li>
          <li>
            <t>One or more legacy <tt>Hash</tt> Armor Headers that <bcp14>MAY</bcp14> be included by some implementations and <bcp14>MUST</bcp14> be ignored when well formed (see <xref target="armor-header-key-hash"/>).</t>
          </li>
          <li>
            <t>An empty line (not included in the message digest).</t>
          </li>
          <li>
            <t>The dash-escaped cleartext.</t>
          </li>
          <li>
            <t>A line ending separating the cleartext and following armored signature (not included in the message digest).</t>
          </li>
          <li>
            <t>The ASCII-armored signature(s), including the <tt>-----BEGIN PGP SIGNATURE-----</tt> Armor Header and Armor Tail Lines.</t>
          </li>
        </ul>
        <t>As with any other Text signature (<xref target="sigtype-text"/>), a cleartext signature is calculated on the text using canonical &lt;CR&gt;&lt;LF&gt; line endings.
As described above, the line ending before the <tt>-----BEGIN PGP SIGNATURE-----</tt> Armor Header Line of the armored signature is not considered part of the signed text.</t>
        <t>Also, any trailing whitespace -- spaces (0x20) and tabs (0x09) -- at the end of any line is removed before signing or verifying a cleartext signed message.</t>
        <t>Between the <tt>-----BEGIN PGP SIGNED MESSAGE-----</tt> line and the first empty line, the only Armor Header permitted is a well-formed <tt>Hash</tt> Armor Header (see <xref target="armor-header-key-hash"/>).
To reduce the risk of confusion about what has been signed, a verifying implementation <bcp14>MUST</bcp14> decline to validate any signature in a cleartext message if that message has any other Armor Header present in this location.</t>
      </section>
      <section anchor="dash-escaping">
        <name>Dash-Escaped Text</name>
        <t>The cleartext content of the message must also be dash-escaped.</t>
        <t>Dash-escaped cleartext is the ordinary cleartext where every line starting with a <u>-</u> is prefixed by the sequence <u>-</u> and <u> </u>.
This prevents the parser from recognizing Armor Headers of the cleartext itself.
An implementation <bcp14>MAY</bcp14> dash-escape any line, <bcp14>SHOULD</bcp14> dash-escape lines commencing in "From" followed by a space, and <bcp14>MUST</bcp14> dash-escape any line commencing in a dash. The message digest is computed using the cleartext itself, not the dash-escaped form.</t>
        <t>When reversing dash-escaping, an implementation <bcp14>MUST</bcp14> strip the string <tt>-</tt> if it occurs at the beginning of a line, and it <bcp14>SHOULD</bcp14> provide a warning for <tt>-</tt> and any character other than a space at the beginning of a line.</t>
      </section>
      <section anchor="csf-issues">
        <name>Issues with the Cleartext Signature Framework</name>
        <t>Since creating a cleartext signed message involves trimming trailing whitespace on every line, the Cleartext Signature Framework will fail to safely round-trip any textual stream that may include semantically meaningful whitespace.</t>
        <t>For example, the Unified Diff format <xref target="UNIFIED-DIFF"/> contains semantically meaningful whitespace: an empty line of context will consist of a line with a single <u> </u> character, and any line that has trailing whitespace added or removed will represent such a change with semantically meaningful whitespace.</t>
        <t>Furthermore, a Cleartext Signature Framework message that is very large is unlikely to work well.
In particular, it will be difficult for any human reading the message to know which part is covered by the signature because they can't understand the whole message at once, especially in the case where an Armor Header line is placed somewhere in the body.
And, very large Cleartext Signature Framework messages cannot be processed in a single pass, since the signature salt and digest algorithms are only discovered at the end.</t>
        <t>An implementation that knows it is working with a textual stream with any of the above characteristics <bcp14>SHOULD NOT</bcp14> use the Cleartext Signature Framework.
Safe alternatives for a semantically meaningful OpenPGP signature over such a file format are:</t>
        <ul spacing="normal">
          <li>
            <t>A signed message, as described in <xref target="openpgp-messages"/>.</t>
          </li>
          <li>
            <t>A detached signature, as described in <xref target="detached-signatures"/>.</t>
          </li>
        </ul>
        <t>Either of these alternatives may be ASCII-armored (see <xref target="forming-ascii-armor"/>) if they need to be transmitted across a text-only (or 7-bit clean) channel.</t>
        <t>Finally, when a Cleartext Signature Framework message is presented to the user as is, an attacker can include additional text in the <tt>Hash</tt> header, which may mislead the user into thinking it is part of the signed text.
The signature validation constraints described in Sections <xref target="armor-header-key-hash" format="counter"/> and <xref target="cleartext-structure" format="counter"/> help to mitigate the risk of arbitrary or misleading text in the Armor Headers.</t>
      </section>
    </section>

    <section anchor="regular-expressions">
      <name>Regular Expressions</name>
<t>This section describes Regular Expressions.</t>

<dl>
      <dt>Regular Expression:</dt><dd>Zero or more branches, separated by <tt>|</tt>.
It matches anything that matches one of the branches.</dd>
      <dt>Branch:</dt><dd>Zero or more pieces, concatenated. It matches a match for the first, followed by a match for the second, etc.</dd>
      <dt>Piece:</dt><dd>An atom possibly followed by <tt>*</tt>, <tt>+</tt>, or <tt>?</tt>.
An atom followed by <tt>*</tt> matches a sequence of 0 or more matches of the atom.
An atom followed by <tt>+</tt> matches a sequence of 1 or more matches of the atom.
An atom followed by <tt>?</tt> matches a match of the atom or the null string.</dd>
      <dt>Atom:</dt><dd>A Regular Expression in parentheses (matching a match for the Regular Expression), a range (see below), a <tt>.</tt> (matching any single Unicode character), a <tt>^</tt> (matching the null string at the beginning of the input string), a <tt>$</tt> (matching the null string at the end of the input string), a <tt>\</tt> followed by a single Unicode character (matching that character), or a single Unicode character with no other significance (matching that character).</dd>
      <dt>Range:</dt><dd>A sequence of characters enclosed in <tt>[]</tt>.
It normally matches any single character from the sequence.
If the sequence begins with <tt>^</tt>, it matches any single Unicode character not from the rest of the sequence. If two characters in the sequence are separated by <tt>-</tt>, this is shorthand for the full list of Unicode characters between them in codepoint order (for example, <tt>[0-9]</tt> matches any decimal digit). To include a literal <tt>]</tt> in the sequence, make it the first character (following a possible <tt>^</tt>). To include a literal <tt>-</tt>, make it the first or last character.</dd>
</dl>
    </section>
    <section anchor="constants">
      <name>Constants</name>
      <t>This section describes the constants used in OpenPGP.</t>
      <t>Note that these tables are not exhaustive lists; an implementation <bcp14>MAY</bcp14> implement an algorithm that is not on these lists, as long as the algorithm IDs are chosen from the Private or Experimental Use algorithm range.</t>
      <t>See <xref target="notes-on-algorithms"/> for more discussion of the algorithms.</t>
      <section anchor="pubkey-algos">
        <name>Public Key Algorithms</name>
        <table anchor="pubkey-algo-registry">
          <name>OpenPGP Public Key Algorithms Registry</name>
          <thead>
            <tr>
              <th align="right">ID</th>
              <th align="left">Algorithm</th>
              <th align="left">Public Key Format</th>
              <th align="left">Secret Key Format</th>
              <th align="left">Signature Format</th>
              <th align="left">PKESK Format</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="right">0</td>
              <td align="left">Reserved</td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">1</td>
              <td align="left">RSA (Encrypt or Sign) <xref target="FIPS186"/></td>
              <td align="left">MPI(n), MPI(e) [<xref target="key-rsa"/>]</td>
              <td align="left">MPI(d), MPI(p), MPI(q), MPI(u)</td>
              <td align="left">MPI(m<sup>d</sup> mod n) [<xref target="sig-rsa"/>]</td>
              <td align="left">MPI(m<sup>e</sup> mod n) [<xref target="pkesk-rsa"/>]</td>
            </tr>
            <tr>
              <td align="right">2</td>
              <td align="left">RSA Encrypt-Only <xref target="FIPS186"/></td>
              <td align="left">MPI(n), MPI(e) [<xref target="key-rsa"/>]</td>
              <td align="left">MPI(d), MPI(p), MPI(q), MPI(u)</td>
              <td align="left">N/A</td>
              <td align="left">MPI(m<sup>e</sup> mod n) [<xref target="pkesk-rsa"/>]</td>
            </tr>
            <tr>
              <td align="right">3</td>
              <td align="left">RSA Sign-Only <xref target="FIPS186"/></td>
              <td align="left">MPI(n), MPI(e) [<xref target="key-rsa"/>]</td>
              <td align="left">MPI(d), MPI(p), MPI(q), MPI(u)</td>
              <td align="left">MPI(m<sup>d</sup> mod n) [<xref target="sig-rsa"/>]</td>
              <td align="left">N/A</td>
            </tr>
            <tr>
              <td align="right">16</td>
              <td align="left">Elgamal (Encrypt-Only) <xref target="ELGAMAL"/></td>
              <td align="left">MPI(p), MPI(g), MPI(y) [<xref target="key-elgamal"/>]</td>
              <td align="left">MPI(x)</td>
              <td align="left">N/A</td>
              <td align="left">MPI(g<sup>k</sup> mod p), MPI(m * y<sup>k</sup> mod p) [<xref target="pkesk-elgamal"/>]</td>
            </tr>
            <tr>
              <td align="right">17</td>
              <td align="left">DSA (Digital Signature Algorithm) <xref target="FIPS186"/></td>
              <td align="left">MPI(p), MPI(q), MPI(g), MPI(y) [<xref target="key-dsa"/>]</td>
              <td align="left">MPI(x)</td>
              <td align="left">MPI(r), MPI(s) [<xref target="sig-dsa"/>]</td>
              <td align="left">N/A</td>
            </tr>
            <tr>
              <td align="right">18</td>
              <td align="left">ECDH public key algorithm</td>
              <td align="left">OID, MPI(point in curve-specific point format), KDFParams [Sections <xref target="curve-specific-formats" format="counter"/> and <xref target="key-ecdh" format="counter"/>]</td>
              <td align="left">MPI(value in curve-specific format) [<xref target="curve-specific-formats"/>]</td>
              <td align="left">N/A</td>
              <td align="left">MPI(point in curve-specific point format), size octet, encoded key [Sections <xref target="curve-specific-formats" format="counter"/>, <xref target="pkesk-ecdh" format="counter"/>, and <xref target="ecdh" format="counter"/>]</td>
            </tr>
            <tr>
              <td align="right">19</td>
              <td align="left">ECDSA public key algorithm <xref target="FIPS186"/></td>
              <td align="left">OID, MPI(point in SEC1 format) [<xref target="key-ecdsa"/>]</td>
              <td align="left">MPI(value)</td>
              <td align="left">MPI(r), MPI(s) [<xref target="sig-dsa"/>]</td>
              <td align="left">N/A</td>
            </tr>
            <tr>
              <td align="right">20</td>
              <td align="left">Reserved (formerly Elgamal Encrypt or Sign)</td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">21</td>
              <td align="left">Reserved for Diffie-Hellman (X9.42, as defined for IETF-S/MIME)</td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">22</td>
              <td align="left">EdDSALegacy (deprecated)</td>
              <td align="left">OID, MPI(point in prefixed native format) [Sections <xref target="ec-point-prefixed-native" format="counter"/> and <xref target="key-eddsa-legacy" format="counter"/>]</td>
              <td align="left">MPI(value in curve-specific format) [<xref target="curve-specific-formats"/>]</td>
              <td align="left">MPI, MPI [Sections <xref target="curve-specific-formats" format="counter"/> and <xref target="sig-eddsa-legacy" format="counter"/>]</td>
              <td align="left">N/A</td>
            </tr>
            <tr>
              <td align="right">23</td>
              <td align="left">Reserved (AEDH)</td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">24</td>
              <td align="left">Reserved (AEDSA)</td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">25</td>
              <td align="left">X25519</td>
              <td align="left">32 octets [<xref target="key-x25519"/>]</td>
              <td align="left">32 octets</td>
              <td align="left">N/A</td>
              <td align="left">32 octets, size octet, encoded key [<xref target="pkesk-x25519"/>]</td>
            </tr>
            <tr>
              <td align="right">26</td>
              <td align="left">X448</td>
              <td align="left">56 octets [<xref target="key-x448"/>]</td>
              <td align="left">56 octets</td>
              <td align="left">N/A</td>
              <td align="left">56 octets, size octet, encoded key [<xref target="pkesk-x448"/>]</td>
            </tr>
            <tr>
              <td align="right">27</td>
              <td align="left">Ed25519</td>
              <td align="left">32 octets [<xref target="key-ed25519"/>]</td>
              <td align="left">32 octets</td>
              <td align="left">64 octets [<xref target="sig-ed25519"/>]</td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">28</td>
              <td align="left">Ed448</td>
              <td align="left">57 octets [<xref target="key-ed448"/>]</td>
              <td align="left">57 octets</td>
              <td align="left">114 octets [<xref target="sig-ed448"/>]</td>
              <td align="left"> </td>
            </tr>
            <tr>
              <td align="right">100 to 110</td>
              <td align="left">Private or Experimental Use</td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
              <td align="left"> </td>
            </tr>
          </tbody>
        </table>

        <t>Implementations <bcp14>MUST</bcp14> implement Ed25519 (27) for signatures and X25519 (25) for encryption.
Implementations <bcp14>SHOULD</bcp14> implement Ed448 (28) and X448 (26).</t>
        <t>RSA (1) keys are deprecated and <bcp14>SHOULD NOT</bcp14> be generated but may be interpreted.
RSA Encrypt-Only (2) and RSA Sign-Only (3) are deprecated and <bcp14>MUST NOT</bcp14> be generated (see <xref target="rsa-notes"/>). Elgamal (16) keys are deprecated and <bcp14>MUST NOT</bcp14> be generated (see <xref target="elgamal-notes"/>). DSA (17) keys are deprecated and <bcp14>MUST NOT</bcp14> be generated (see <xref target="dsa-notes"/>). For notes on Elgamal Encrypt or Sign (20) and X9.42 (21), see <xref target="reserved-notes"/>.
Implementations <bcp14>MAY</bcp14> implement any other algorithm.</t>
        <t>Note that an implementation conforming to the previous version of this specification <xref target="RFC4880"/> has only DSA (17) and Elgamal (16) as the algorithms that <bcp14>MUST</bcp14> be implemented.</t>
        <t>A compatible specification of ECDSA is given in <xref target="RFC6090"/> (as "KT-I Signatures") and in <xref target="SEC1"/>; ECDH is defined in <xref target="ecdh"/> of this document.</t>
      </section>
      <section anchor="ec-curves">
        <name>ECC Curves for OpenPGP</name>
        <t>The parameter curve OID is an array of octets that defines a named curve.</t>
        <t>The table below specifies the exact sequence of octets for each named curve referenced in this document. It also specifies which public key algorithms the curve can be used with, as well as the size of expected elements in octets. Note that there is a break in "EdDSALegacy" for display purposes only.</t>

  <table anchor="ecc-oid-usage-registry">
          <name>OpenPGP ECC Curve OIDs and Usage Registry</name>
          <thead>
            <tr>
              <th align="left">ASN.1 Object Identifier</th>
              <th align="left">OID Len</th>
              <th align="left">Curve OID Octets</th>
              <th align="left">Curve Name</th>
              <th align="left">Usage</th>
              <th align="left">Field Size (fsize)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">1.2.840.10045.3.1.7</td>
              <td align="left">8</td>
              <td align="left">2A 86 48 CE 3D 03 01 07</td>
              <td align="left">NIST P-256</td>
              <td align="left">ECDSA, ECDH</td>
              <td align="left">32</td>
            </tr>
            <tr>
              <td align="left">1.3.132.0.34</td>
              <td align="left">5</td>
              <td align="left">2B 81 04 00 22</td>
              <td align="left">NIST P-384</td>
              <td align="left">ECDSA, ECDH</td>
              <td align="left">48</td>
            </tr>
            <tr>
              <td align="left">1.3.132.0.35</td>
              <td align="left">5</td>
              <td align="left">2B 81 04 00 23</td>
              <td align="left">NIST P-521</td>
              <td align="left">ECDSA, ECDH</td>
              <td align="left">66</td>
            </tr>
            <tr>
              <td align="left">1.3.36.3.3.2.8.1.1.7</td>
              <td align="left">9</td>
              <td align="left">2B 24 03 03 02 08 01 01 07</td>
              <td align="left">brainpoolP256r1</td>
              <td align="left">ECDSA, ECDH</td>
              <td align="left">32</td>
            </tr>
            <tr>
              <td align="left">1.3.36.3.3.2.8.1.1.11</td>
              <td align="left">9</td>
              <td align="left">2B 24 03 03 02 08 01 01 0B</td>
              <td align="left">brainpoolP384r1</td>
              <td align="left">ECDSA, ECDH</td>
              <td align="left">48</td>
            </tr>
            <tr>
              <td align="left">1.3.36.3.3.2.8.1.1.13</td>
              <td align="left">9</td>
              <td align="left">2B 24 03 03 02 08 01 01 0D</td>
              <td align="left">brainpoolP512r1</td>
              <td align="left">ECDSA, ECDH</td>
              <td align="left">64</td>
            </tr>
            <tr>
              <td align="left">1.3.6.1.4.1.11591.15.1</td>
              <td align="left">9</td>
              <td align="left">2B 06 01 04 01 DA 47 0F 01</td>
              <td align="left">Ed25519Legacy</td>
              <td align="left">EdDSA<br/>Legacy</td>
              <td align="left">32</td>
            </tr>
            <tr>
              <td align="left">1.3.6.1.4.1.3029.1.5.1</td>
              <td align="left">10</td>
              <td align="left">2B 06 01 04 01 97 55 01 05 01</td>
              <td align="left">Curve25519Legacy</td>
              <td align="left">ECDH</td>
              <td align="left">32</td>
            </tr>
          </tbody>
        </table>
	

        <t>The "Field Size (fsize)" column represents the field size of the group in number of octets, rounded up, such that x or y coordinates for a point on the curve or native point representations for the curve can be represented in that many octets. The curves specified here, and scalars such as the base point order and the private key, can be represented in fsize octets. However, note that curves exist outside this specification where the representation of scalars requires an additional octet.</t>
        <t>The sequence of octets in the third column is the result of applying the Distinguished Encoding Rules (DER) to the ASN.1 Object Identifier with subsequent truncation. The truncation removes the two fields of encoded Object Identifier. The first omitted field is 1 octet representing the Object Identifier tag, and the second omitted field is the length of the Object Identifier body.
For example, the complete ASN.1 DER encoding for the NIST P-256 curve OID is "06 08 2A 86 48 CE 3D 03 01 07", from which the first entry in the table above is constructed by omitting the first two octets.
Only the truncated sequence of octets is the valid representation of a curve OID.</t>
        <t>The deprecated OIDs for Ed25519Legacy and Curve25519Legacy are used only in version 4 keys and signatures.
Implementations <bcp14>MAY</bcp14> implement these variants for compatibility with existing version 4 key material and signatures.
Implementations <bcp14>MUST NOT</bcp14> accept or generate version 6 key material using the deprecated OIDs.</t>
        <section anchor="curve-specific-formats">
          <name>Curve-Specific Wire Formats</name>
          <t>Some elliptic curve public key algorithms use different conventions for specific fields depending on the curve in use. Each field is always formatted as an MPI, but with a curve-specific framing. This table summarizes those distinctions.</t>
          <table anchor="ecc-wire-formats-registry">
            <name>OpenPGP ECC Curve-Specific Wire Formats Registry</name>
            <thead>
              <tr>
                <th align="left">Curve</th>
                <th align="left">ECDH Point Format</th>
                <th align="left">ECDH Secret Key MPI</th>
                <th align="left">EdDSA Secret Key MPI</th>
                <th align="left">EdDSA Signature first MPI</th>
                <th align="left">EdDSA Signature second MPI</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">NIST P-256</td>
                <td align="left">SEC1</td>
                <td align="left">integer</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
              <tr>
                <td align="left">NIST P-384</td>
                <td align="left">SEC1</td>
                <td align="left">integer</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
              <tr>
                <td align="left">NIST P-521</td>
                <td align="left">SEC1</td>
                <td align="left">integer</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
              <tr>
                <td align="left">brainpoolP256r1</td>
                <td align="left">SEC1</td>
                <td align="left">integer</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
              <tr>
                <td align="left">brainpoolP384r1</td>
                <td align="left">SEC1</td>
                <td align="left">integer</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
              <tr>
                <td align="left">brainpoolP512r1</td>
                <td align="left">SEC1</td>
                <td align="left">integer</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
              <tr>
                <td align="left">Ed25519Legacy</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">32 octets of secret</td>
                <td align="left">32 octets of R</td>
                <td align="left">32 octets of S</td>
              </tr>
              <tr>
                <td align="left">Curve25519Legacy</td>
                <td align="left">prefixed native</td>
                <td align="left">integer (<xref target="curve25519-secrets"/>)</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
                <td align="left">N/A</td>
              </tr>
            </tbody>
          </table>
          <t>For the native octet-string forms of Ed25519Legacy values, see <xref target="RFC8032"/>.
For the native octet-string forms of Curve25519Legacy secret scalars and points, see <xref target="RFC7748"/>.</t>
        </section>
      </section>     
      <section anchor="symmetric-algos">
        <name>Symmetric Key Algorithms</name>
        <table anchor="symkey-algorithms-registry">
          <name>OpenPGP Symmetric Key Algorithms Registry</name>
          <thead>
            <tr>
              <th align="right">ID</th>
              <th align="left">Algorithm</th>
	    
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="right">0</td>
              <td align="left">Plaintext or unencrypted data</td>
	    
            </tr>
            <tr>
              <td align="right">1</td>
              <td align="left">IDEA <xref target="IDEA"/></td>
	     
            </tr>
            <tr>
              <td align="right">2</td>
              <td align="left">TripleDES (or DES-EDE) <xref target="SP800-67"/> with 168-bit key derived from 192</td>
	      
            </tr>
            <tr>
              <td align="right">3</td>
              <td align="left">CAST5 with 128-bit key <xref target="RFC2144"/></td>
	     
            </tr>
            <tr>
              <td align="right">4</td>
              <td align="left">Blowfish with 128-bit key, 16 rounds <xref target="BLOWFISH"/></td>
	      
            </tr>
            <tr>
              <td align="right">5</td>
              <td align="left">Reserved</td>
	     
            </tr>
            <tr>
              <td align="right">6</td>
              <td align="left">Reserved</td>
	     
            </tr>
            <tr>
              <td align="right">7</td>
              <td align="left">AES with 128-bit key <xref target="AES"/></td>
	    
            </tr>
            <tr>
              <td align="right">8</td>
              <td align="left">AES with 192-bit key</td>
	     
            </tr>
            <tr>
              <td align="right">9</td>
              <td align="left">AES with 256-bit key</td>
	    
            </tr>
            <tr>
              <td align="right">10</td>
              <td align="left">Twofish with 256-bit key <xref target="TWOFISH"/></td>
	     
            </tr>
            <tr>
              <td align="right">11</td>
              <td align="left">Camellia with 128-bit key <xref target="RFC3713"/></td>
	     
            </tr>
            <tr>
              <td align="right">12</td>
              <td align="left">Camellia with 192-bit key</td>
	     
            </tr>
            <tr>
              <td align="right">13</td>
              <td align="left">Camellia with 256-bit key</td>
	     
            </tr>
            <tr>
              <td align="right">100-110</td>
              <td align="left">Private or Experimental Use</td>
	     
            </tr>
            <tr>
              <td align="right">253-255</td>
              <td align="left">Reserved to avoid collision with Secret Key Encryption (<xref target="secret-key-protection-registry"/> and <xref target="secret-key-packet-formats"/>)</td>
	     
            </tr>
          </tbody>
        </table>
        <t>Implementations <bcp14>MUST</bcp14> implement AES-128.
Implementations <bcp14>SHOULD</bcp14> implement AES-256.
Implementations <bcp14>MUST NOT</bcp14> encrypt data with IDEA, TripleDES, or CAST5.
Implementations <bcp14>MAY</bcp14> decrypt data that uses IDEA, TripleDES, or CAST5 for the sake of reading older messages or new messages from implementations predating support for <xref target="RFC2440"/>.
An Implementation that decrypts data using IDEA, TripleDES, or CAST5 <bcp14>SHOULD</bcp14> generate a deprecation warning about the symmetric algorithm, indicating that message confidentiality is suspect.
Implementations <bcp14>MAY</bcp14> implement any other algorithm.</t>
      </section>
      <section anchor="compression-algos">
        <name>Compression Algorithms</name>
        <table anchor="compression-algorithms-registry">
          <name>OpenPGP Compression Algorithms Registry</name>
          <thead>
            <tr>
              <th align="right">ID</th>
              <th align="left">Algorithm</th>
	     
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="right">0</td>
              <td align="left">Uncompressed</td>
	     
            </tr>
            <tr>
              <td align="right">1</td>
              <td align="left">ZIP <xref target="RFC1951"/></td>
	   
            </tr>
            <tr>
              <td align="right">2</td>
              <td align="left">ZLIB <xref target="RFC1950"/></td>
	     
            </tr>
            <tr>
              <td align="right">3</td>
              <td align="left">BZip2 <xref target="BZ2"/></td>
	   
            </tr>
            <tr>
              <td align="right">100-110</td>
              <td align="left">Private or Experimental Use</td>
	      
            </tr>
          </tbody>
        </table>
        <t>Implementations <bcp14>MUST</bcp14> implement uncompressed data.
Implementations <bcp14>SHOULD</bcp14> implement ZLIB.
For interoperability reasons, implementations <bcp14>SHOULD</bcp14> be able to decompress using ZIP.
Implementations <bcp14>MAY</bcp14> implement any other algorithm.</t>
      </section>
      <section anchor="hash-algos">
        <name>Hash Algorithms</name>
        <table anchor="hash-algorithms-registry">
          <name>OpenPGP Hash Algorithms Registry</name>
          <thead>
            <tr>
              <th align="right">ID</th>
              <th align="left">Algorithm</th>
              <th align="left">Text Name</th>
              <th align="left">V6 Signature Salt Size</th>
	  
            </tr>
          </thead>
          <tbody>
	      <tr>
              <td align="right">0</td>
              <td align="left">Reserved</td>
              <td align="left"></td>
              <td align="left"></td>
	     
            </tr>
            <tr>
              <td align="right">1</td>
              <td align="left">MD5 <xref target="RFC1321"/></td>
              <td align="left">"MD5"</td>
              <td align="left">N/A</td>
	   
            </tr>
            <tr>
              <td align="right">2</td>
              <td align="left">SHA-1 <xref target="FIPS180"/></td>
              <td align="left">"SHA1"</td>
              <td align="left">N/A</td>
	      
            </tr>
            <tr>
              <td align="right">3</td>
              <td align="left">RIPEMD-160 <xref target="RIPEMD-160"/></td>
              <td align="left">"RIPEMD160"</td>
              <td align="left">N/A</td>
	  
            </tr>
            <tr>
              <td align="right">4</td>
              <td align="left">Reserved</td>
              <td align="left"> </td>
              <td align="left">  </td>
	
            </tr>
            <tr>
              <td align="right">5</td>
              <td align="left">Reserved</td>
              <td align="left"> </td>
              <td align="left"> </td>
	 
            </tr>
            <tr>
              <td align="right">6</td>
              <td align="left">Reserved</td>
              <td align="left"> </td>
              <td align="left"> </td>
	 
            </tr>
            <tr>
              <td align="right">7</td>
              <td align="left">Reserved</td>
              <td align="left"> </td>
              <td align="left"> </td>

            </tr>
            <tr>
              <td align="right">8</td>
              <td align="left">SHA2-256 <xref target="FIPS180"/></td>
              <td align="left">"SHA256"</td>
              <td align="left">16</td>
             
            </tr>
            <tr>
              <td align="right">9</td>
              <td align="left">SHA2-384 <xref target="FIPS180"/></td>
              <td align="left">"SHA384"</td>
              <td align="left">24</td>
	    
            </tr>
            <tr>
              <td align="right">10</td>
              <td align="left">SHA2-512 <xref target="FIPS180"/></td>
              <td align="left">"SHA512"</td>
              <td align="left">32</td>

            </tr>
            <tr>
              <td align="right">11</td>
              <td align="left">SHA2-224 <xref target="FIPS180"/></td>
              <td align="left">"SHA224"</td>
              <td align="left">16</td>
	    
            </tr>
            <tr>
              <td align="right">12</td>
              <td align="left">SHA3-256 <xref target="FIPS202"/></td>
              <td align="left">"SHA3-256"</td>
              <td align="left">16</td>
	    
            </tr>
            <tr>
              <td align="right">13</td>
              <td align="left">Reserved</td>
              <td align="left"> </td>
              <td align="left"> </td>
	 
            </tr>
            <tr>
              <td align="right">14</td>
              <td align="left">SHA3-512 <xref target="FIPS202"/></td>
              <td align="left">"SHA3-512"</td>
              <td align="left">32</td>
	    
            </tr>
            <tr>
              <td align="right">100-110</td>
              <td align="left">Private or Experimental Use</td>
              <td align="left"> </td>
              <td align="left"> </td>
	     
            </tr>
          </tbody>
        </table>
        <table anchor="emsa-hash-oids-registry">
          <name>OpenPGP Hash Algorithm Identifiers for RSA Signatures' Use of EMSA&nbhy;PKCS1&nbhy;v1_5 Padding Registry</name>
          <thead>
            <tr>
              <th align="left">Hash Algorithm</th>
              <th align="left">OID</th>
              <th align="left">Full Hash Prefix</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">MD5</td>
              <td align="left">1.2.840.113549.2.5</td>
              <td align="left">0x30, 0x20, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x02, 0x05, 0x05, 0x00, 0x04, 0x10</td>
            </tr>
            <tr>
              <td align="left">SHA-1</td>
              <td align="left">1.3.14.3.2.26</td>
              <td align="left">0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14</td>
            </tr>
            <tr>
              <td align="left">RIPEMD-160</td>
              <td align="left">1.3.36.3.2.1</td>
              <td align="left">0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x24, 0x03, 0x02, 0x01, 0x05, 0x00, 0x04, 0x14</td>
            </tr>
            <tr>
              <td align="left">SHA2-256</td>
              <td align="left">2.16.840.1.101.3.4.2.1</td>
              <td align="left">0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20</td>
            </tr>
            <tr>
              <td align="left">SHA2-384</td>
              <td align="left">2.16.840.1.101.3.4.2.2</td>
              <td align="left">0x30, 0x41, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30</td>
            </tr>
            <tr>
              <td align="left">SHA2-512</td>
              <td align="left">2.16.840.1.101.3.4.2.3</td>
              <td align="left">0x30, 0x51, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40</td>
            </tr>
            <tr>
              <td align="left">SHA2-224</td>
              <td align="left">2.16.840.1.101.3.4.2.4</td>
              <td align="left">0x30, 0x2D, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04, 0x05, 0x00, 0x04, 0x1C</td>
            </tr>
            <tr>
              <td align="left">SHA3-256</td>
              <td align="left">2.16.840.1.101.3.4.2.8</td>
              <td align="left">0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x08, 0x05, 0x00, 0x04, 0x20</td>
            </tr>
            <tr>
              <td align="left">SHA3-512</td>
              <td align="left">2.16.840.1.101.3.4.2.10</td>
              <td align="left">0x30, 0x51, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x0a, 0x05, 0x00, 0x04, 0x40</td>
            </tr>
          </tbody>
        </table>
        <t>Implementations <bcp14>MUST</bcp14> implement SHA2-256.
Implementations <bcp14>SHOULD</bcp14> implement SHA2-384 and SHA2-512.
Implementations <bcp14>MAY</bcp14> implement other algorithms.
Implementations <bcp14>SHOULD NOT</bcp14> create messages that require the use of SHA-1, with the exception of computing version 4 key fingerprints for purposes of the MDC in version 1 Symmetrically Encrypted and Integrity Protected Data packets.
Implementations <bcp14>MUST NOT</bcp14> generate signatures with MD5, SHA-1, or RIPEMD-160.
Implementations <bcp14>MUST NOT</bcp14> use MD5, SHA-1, or RIPEMD-160 as a hash function in an ECDH KDF.
Implementations <bcp14>MUST NOT</bcp14> generate packets using MD5, SHA-1, or RIPEMD-160 as a hash function in an S2K KDF.
Implementations <bcp14>MUST NOT</bcp14> decrypt a secret using MD5, SHA-1, or RIPEMD-160 as a hash function in an S2K KDF in a version 6 (or later) packet.
Implementations <bcp14>MUST NOT</bcp14> validate any recent signature that depends on MD5, SHA-1, or RIPEMD-160.
Implementations <bcp14>SHOULD NOT</bcp14> validate any old signature that depends on MD5, SHA-1, or RIPEMD-160 unless the signature's creation date predates known weakness of the algorithm used, and the implementation is confident that the message has been in the secure custody of the user the whole time.</t>
      </section>
      <section anchor="aead-algorithms">
        <name>AEAD Algorithms</name>
        <table anchor="aead-algorithms-registry">
          <name>OpenPGP AEAD Algorithms Registry</name>
          <thead>
            <tr>
              <th align="right">ID</th>
              <th align="left">Name</th>             
              <th align="left">Nonce Length (Octets)</th>
              <th align="left">Authentication Tag Length (Octets)</th>
	     
            </tr>
          </thead>
          <tbody>
	    <tr>
              <td align="right">0</td>
              <td align="left">Reserved</td>
              <td align="left"></td>
              <td align="left"></td>
	     
            </tr>
            <tr>
              <td align="right">1</td>
              <td align="left">EAX <xref target="EAX"/></td>
              <td align="left">16</td>
              <td align="left">16</td>
	    
            </tr>
            <tr>
              <td align="right">2</td>
              <td align="left">OCB <xref target="RFC7253"/></td>
              <td align="left">15</td>
              <td align="left">16</td>
	    
            </tr>
            <tr>
              <td align="right">3</td>
              <td align="left">GCM <xref target="SP800-38D"/></td>
              <td align="left">12</td>
              <td align="left">16</td>
	     
            </tr>
            <tr>
              <td align="right">100-110</td>
              <td align="left">Private or Experimental Use</td>
              <td align="left"> </td>
              <td align="left"> </td>
            
            </tr>
          </tbody>
        </table>
        <t>Implementations <bcp14>MUST</bcp14> implement OCB. Implementations <bcp14>MAY</bcp14> implement EAX, GCM, and other algorithms.</t>
      </section>
    </section>
    <section anchor="packet-sequence-composition">
      <name>Packet Sequence Composition</name>
      <t>OpenPGP packets are assembled into sequences in order to create messages and to transfer keys.
Not all possible packet sequences are meaningful and correct.
This section describes the rules for how packets should be placed into sequences.</t>
      <t>There are three distinct sequences of packets:</t>
      <ul spacing="normal">
        <li>
          <t>Transferable Public Keys (<xref target="transferable-public-keys"/>) and their close counterpart, Transferable Secret Keys (<xref target="transferable-secret-keys"/>)</t>
        </li>
        <li>
          <t>OpenPGP Messages (<xref target="openpgp-messages"/>)</t>
        </li>
        <li>
          <t>Detached Signatures (<xref target="detached-signatures"/>)</t>
        </li>
      </ul>
      <t>Each sequence has an explicit grammar of what packet types (<xref target="packet-types-registry"/>) can appear in what place. The presence of an unknown critical packet, or a known but unexpected packet, is a critical error, invalidating the entire sequence (see <xref target="packet-criticality"/>).
On the other hand, unknown non-critical packets can appear anywhere within any sequence. This provides a structured way to introduce new packets into OpenPGP, while making sure that certain packets will be handled strictly.</t>
      <t>An implementation may "recognize" a packet but not implement it.
The purpose of Packet Criticality is to allow the producer to tell the consumer whether it would prefer a new, unknown packet to generate an error or be ignored.</t>
      <t>Note that previous versions of this document did not have a concept of Packet Criticality and did not give clear guidance on what to do when unknown packets are encountered. Therefore, implementations of the previous versions may reject unknown non-critical packets or accept unknown critical packets.</t>
      <t>When generating a sequence of OpenPGP packets according to one of the three grammars, an implementation <bcp14>MUST NOT</bcp14> inject a critical packet of a type that does not adhere to the grammar.</t>
      <t>When consuming a sequence of OpenPGP packets, if an implementation encounters a critical packet of an inappropriate type according to the relevant grammar, the implementation <bcp14>MUST</bcp14> reject the sequence with an error.</t>
      <section anchor="transferable-public-keys">
        <name>Transferable Public Keys</name>
        <t>OpenPGP users may transfer public keys.
This section describes the structure of public keys in transit to ensure interoperability.
An OpenPGP Transferable Public Key is also known as an OpenPGP certificate, in order to distinguish it from both its constituent Public Key packets (Sections <xref target="pubkey" format="counter"/> and <xref target="pubsubkey" format="counter"/>) and the underlying cryptographic key material.</t>
        <section anchor="v6-certificate-structures">
          <name>OpenPGP Version 6 Certificate Structure</name>
          <t>The format of an OpenPGP version 6 certificate is as follows.
Entries in square brackets are optional and ellipses indicate repetition.</t>
          <artwork><![CDATA[
Primary Key
   [Revocation Signature...]
    Direct Key Signature...
   [User ID or User Attribute
           [Certification Revocation Signature...]
           [Certification Signature...]]...
   [Subkey [Subkey Revocation Signature...]
           Subkey Binding Signature...]...
   [Padding]
]]></artwork>
          <t>In addition to these rules, a Marker packet (<xref target="marker-packet"/>) can appear anywhere in the sequence.</t>
          <t>Note that a version 6 key uses a self-signed Direct Key signature to store algorithm preferences.</t>
          <t>Every subkey for a version 6 primary key <bcp14>MUST</bcp14> be a version 6 subkey.
Every subkey <bcp14>MUST</bcp14> have at least one Subkey Binding signature.
Every Subkey Binding signature <bcp14>MUST</bcp14> be a self-signature (that is, made by the version 6 primary key).
Like all other signatures, every self-signature made by a version 6 key <bcp14>MUST</bcp14> be a version 6 signature.</t>
        </section>
        <section anchor="v6-revocation-certificate">
          <name>OpenPGP Version 6 Revocation Certificate</name>
          <t>When a primary version 6 Public Key is revoked, it is sometimes distributed with only the Revocation Signature:</t>
          <artwork><![CDATA[
Primary Key
    Revocation Signature
]]></artwork>
          <t>In this case, the Direct Key signature is no longer necessary, since the primary key itself has been marked as unusable.</t>
        </section>
        <section anchor="openpgp-v4-certificate-structure">
          <name>OpenPGP Version 4 Certificate Structure</name>
          <t>The format of an OpenPGP version 4 key is as follows.</t>
          <artwork><![CDATA[
Primary Key
   [Revocation Signature]
   [Direct Key Signature...]
   [User ID or User Attribute [Signature...]]...
   [Subkey [Subkey Revocation Signature...]
           Subkey Binding Signature...]...
]]></artwork>
          <t>In addition to these rules, a Marker packet (<xref target="marker-packet"/>) can appear anywhere in the sequence.</t>
          <t>A subkey always has at least one Subkey Binding signature after it that is issued using the primary key to tie the two keys together. These binding signatures may be in either version 3 or version 4 format, but they <bcp14>SHOULD</bcp14> be in version 4 format.
Subkeys that can issue signatures <bcp14>MUST</bcp14> have a version 4 binding signature due to the <bcp14>REQUIRED</bcp14> embedded Primary Key Binding signature.</t>
          <t>Every subkey for a version 4 primary key <bcp14>MUST</bcp14> be a version 4 subkey.</t>
          <t>When a primary version 4 Public Key is revoked, the Revocation Signature is sometimes distributed by itself, without the primary key packet it applies to. This is referred to as a "revocation certificate".
Instead, a version 6 revocation certificate <bcp14>MUST</bcp14> include the primary key packet, as described in <xref target="v6-revocation-certificate"/>.</t>
        </section>
        <section anchor="openpgp-v3-key-structure">
          <name>OpenPGP Version 3 Key Structure</name>
          <t>The format of an OpenPGP version 3 key is as follows.</t>
          <artwork><![CDATA[
RSA Public Key
   [Revocation Signature]
    User ID [Signature...]
   [User ID [Signature...]]...
]]></artwork>
          <t>In addition to these rules, a Marker packet (<xref target="marker-packet"/>) can appear anywhere in the sequence.</t>
          <t>Each signature certifies the RSA public key and the preceding User ID.
The RSA public key can have many User IDs, and each User ID can have many signatures.
Version 3 keys are deprecated. Implementations <bcp14>MUST NOT</bcp14> generate new version 3 keys but <bcp14>MAY</bcp14> continue to use existing ones.</t>
          <t>Version 3 keys <bcp14>MUST NOT</bcp14> have subkeys.</t>
        </section>
        <section anchor="common-requirements">
          <name>Common Requirements</name>
          <t>The Public Key packet occurs first.</t>
          <t>The primary key <bcp14>MUST</bcp14> be an algorithm capable of making signatures (that is, not an encryption-only algorithm). This is because the primary key needs to be able to create self-signatures (see <xref target="self-sigs"/>).
The subkeys may be keys of any type. For example, there may be a single-key RSA key, an Ed25519 primary key with an RSA encryption subkey, an Ed25519 primary key with an X25519 subkey, etc.</t>
          <t>Each of the following User ID packets provides the identity of the owner of this public key.
If there are multiple User ID packets, this corresponds to multiple means of identifying the same unique individual user; for example, a user may have more than one email address and construct a User ID for each one.
A Transferable Public Key <bcp14>SHOULD</bcp14> include at least one User ID packet unless storage requirements prohibit this.</t>
          <t>Immediately following each User ID packet, there are zero or more Signature packets.
Each Signature packet is calculated on the immediately preceding User ID packet and the initial Public Key packet. The signature serves to certify the corresponding public key and User ID. In effect, the signer is testifying to the belief that this public key belongs to the user identified by this User ID.</t>
          <t>Within the same section as the User ID packets, there are zero or more User Attribute packets. Like the User ID packets, a User Attribute packet is followed by zero or more Signature packets calculated on the immediately preceding User Attribute packet and the initial Public Key packet.</t>
          <t>User Attribute packets and User ID packets may be freely intermixed in this section, as long as the signatures that follow them are maintained on the proper User Attribute or User ID packet.</t>
          <t>After the sequence of User ID packets and Attribute packets and their associated signatures, zero or more Subkey packets follow, each with their own signatures. In general, subkeys are provided in cases where the top-level public key is a certification-only key.
However, any version 4 or version 6 key may have subkeys, and the subkeys may be encryption keys, signing keys, authentication keys, etc.
It is good practice to use separate subkeys for every operation (i.e., signature-only, encryption-only, authentication-only keys, etc.).</t>
          <t>Each Subkey packet <bcp14>MUST</bcp14> be followed by one Signature packet, which should be a Subkey Binding signature issued by the top-level key.
For subkeys that can issue signatures, the Subkey Binding signature <bcp14>MUST</bcp14> contain an Embedded Signature subpacket with a Primary Key Binding signature (Type ID 0x19) issued by the subkey on the top-level key.</t>
          <t>Subkey and Key packets may each be followed by a Revocation Signature packet to indicate that the key is revoked.
Revocation Signatures are only accepted if they are issued by the key itself or by a key that is authorized to issue revocations via a Revocation Key subpacket in a self-signature by the top-level key.</t>
          <t>The optional trailing Padding packet is a mechanism to defend against traffic analysis (see <xref target="traffic-analysis"/>).
For maximum interoperability, if the Public Key packet is a version 4 key, the optional Padding packet <bcp14>SHOULD NOT</bcp14> be present unless the recipient has indicated that they are capable of ignoring it successfully.
An implementation that is capable of receiving a Transferable Public Key with a version 6 Public Key primary key <bcp14>MUST</bcp14> be able to accept (and ignore) the trailing optional Padding packet.</t>
          <t>Transferable Public Key packet sequences may be concatenated to allow transferring multiple public keys in one operation (see <xref target="keyrings"/>).</t>
        </section>
      </section>
      <section anchor="transferable-secret-keys">
        <name>Transferable Secret Keys</name>
        <t>OpenPGP users may transfer secret keys.
	The format of a Transferable Secret Key is the same as a Transferable Public Key except that Secret Key and Secret Subkey packets can be used in addition to the Public Key and Public Subkey packets. If a single Secret Key or Secret Subkey packet is included in a packet sequence, it is a Transferable Secret Key and should be handled and marked as such (see <xref target="armor-header-line"/>).
An implementation <bcp14>SHOULD</bcp14> include self-signatures on any User IDs and subkeys, as this allows for a complete public key to be automatically extracted from the Transferable Secret Key. An implementation <bcp14>MAY</bcp14> choose to omit the self-signatures, especially if a Transferable Public Key accompanies the Transferable Secret Key.</t>
      </section>
      <section anchor="openpgp-messages">
        <name>OpenPGP Messages</name>	
        <t>An OpenPGP Message is a packet or sequence of packets that adheres to the following grammatical rules (a comma (,) represents sequential composition, and a vertical bar (|) separates alternatives):</t>
        <dl>
          <dt>OpenPGP Message:</dt>
          <dd>
            <t>Encrypted Message | Signed Message | Compressed Message | Literal Message.</t>
          </dd>
          <dt>Compressed Message:</dt>
          <dd>
            <t>Compressed Data Packet.</t>
          </dd>
          <dt>Literal Message:</dt>
          <dd>
            <t>Literal Data Packet.</t>
          </dd>
          <dt>ESK:</dt>
          <dd>
            <t>Public Key Encrypted Session Key Packet | Symmetric Key Encrypted Session Key Packet.</t>
          </dd>
          <dt>ESK Sequence:</dt>
          <dd>
            <t>ESK | ESK Sequence, ESK.</t>
          </dd>
          <dt>Encrypted Data:</dt>
          <dd>
            <t>Symmetrically Encrypted Data Packet | Symmetrically Encrypted and Integrity Protected Data Packet.</t>
          </dd>
          <dt>Encrypted Message:</dt>
          <dd>
            <t>Encrypted Data | ESK Sequence, Encrypted Data.</t>
          </dd>
          <dt>One-Pass Signed Message:</dt>
          <dd>
            <t>One-Pass Signature Packet, OpenPGP Message, Corresponding Signature Packet.</t>
          </dd>
          <dt>Signed Message:</dt>
          <dd>
            <t>Signature Packet, OpenPGP Message | One-Pass Signed Message.</t>
          </dd>
          <dt>Optionally Padded Message:</dt>
          <dd>
            <t>OpenPGP Message | OpenPGP Message, Padding Packet.</t>
          </dd>
        </dl>
        <t>In addition to these rules, a Marker packet (<xref target="marker-packet"/>) can appear anywhere in the sequence.</t>
        <section anchor="unwrapping">
          <name>Unwrapping Encrypted and Compressed Messages</name>
          <t>In addition to the above grammar, certain messages can be "unwrapped" to yield new messages.
In particular:</t>
          <ul spacing="normal">
            <li>
              <t>Decrypting a version 2 Symmetrically Encrypted and Integrity Protected Data packet <bcp14>MUST</bcp14> yield a valid Optionally Padded Message.</t>
            </li>
            <li>
              <t>Decrypting a version 1 Symmetrically Encrypted and Integrity Protected Data packet or -- for historic data -- a Symmetrically Encrypted Data packet <bcp14>MUST</bcp14> yield a valid OpenPGP Message.</t>
            </li>
            <li>
              <t>Decompressing a Compressed Data packet <bcp14>MUST</bcp14> also yield a valid OpenPGP Message.</t>
            </li>
          </ul>
          <t>When any unwrapping is performed, the resulting stream of octets is parsed into a series of OpenPGP packets like any other stream of octets.
The packet boundaries found in the series of octets are expected to align with the length of the unwrapped octet stream.
An implementation <bcp14>MUST NOT</bcp14> interpret octets beyond the boundaries of the unwrapped octet stream as part of any OpenPGP packet.
If an implementation encounters a packet whose header length indicates that it would extend beyond the boundaries of the unwrapped octet stream, the implementation <bcp14>MUST</bcp14> reject that packet as malformed and unusable.</t>
        </section>
        <section anchor="additional-constraints-on-packet-sequences">
          <name>Additional Constraints on Packet Sequences</name>
          <t>Note that some subtle combinations that are formally acceptable by this grammar are nonetheless unacceptable.</t>
          <section anchor="encrypted-message-versions">
            <name>Packet Versions in Encrypted Messages</name>
            <t>As noted above, an Encrypted Message is a sequence of zero or more PKESK packets (<xref target="pkesk"/>) and SKESK packets (<xref target="skesk"/>), followed by an SEIPD (<xref target="seipd"/>) payload. In some historic data, the payload may be a deprecated SED packet (<xref target="sed"/>) instead of SEIPD, though implementations <bcp14>MUST NOT</bcp14> generate SED packets (see <xref target="ciphertext-malleability"/>).
The versions of the preceding ESK packets within an Encrypted Message <bcp14>MUST</bcp14> align with the version of the payload SEIPD packet, as described in this section.</t>
            <t>v3 PKESK and v4 SKESK packets both contain the Symmetric Cipher Algorithm ID and the session key for the subsequent SEIPD packet in their cleartext.
Since a v1 SEIPD does not contain a symmetric algorithm ID, all ESK packets preceding a v1 SEIPD payload <bcp14>MUST</bcp14> be either v3 PKESK or v4 SKESK.</t>
            <t>On the other hand, the cleartext of the v6 ESK packets (either PKESK or SKESK) do not contain a Symmetric Cipher Algorithm ID, so they cannot be used in combination with a v1 SEIPD payload.
The payload following any v6 PKESK or v6 SKESK packet <bcp14>MUST</bcp14> be a v2 SEIPD.</t>
            <t>Additionally, to avoid potentially conflicting cipher algorithm IDs, and for simplicity, implementations <bcp14>MUST NOT</bcp14> precede a v2 SEIPD payload with either v3 PKESK or v4 SKESK packets.</t>
            <t>The versions of packets found in an Encrypted Message are summarized in the following table.
An implementation <bcp14>MUST</bcp14> only generate an Encrypted Message using packet versions that match a row with "Yes" in the "Generate?" column.
Other rows are provided for the purpose of historic interoperability.
A conforming implementation <bcp14>MUST</bcp14> only generate an Encrypted Message using packets whose versions correspond to a single row.</t>
            <table anchor="encrypted-packet-versions-registry">
              <name>OpenPGP Encrypted Message Packet Versions Registry</name>
              <thead>
                <tr>
                  <th align="left">Version of Encrypted Data Payload</th>
                  <th align="left">Version of Preceding Symmetric Key ESK (If Any)</th>
                  <th align="left">Version of Preceding Public Key ESK (If Any)</th>
                  <th align="left">Generate?</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">SED (<xref target="sed"/>)</td>
                  <td align="left">-</td>
                  <td align="left">v2 PKESK <xref target="RFC2440"/></td>
                  <td align="left">No</td>
                </tr>
                <tr>
                  <td align="left">SED (<xref target="sed"/>)</td>
                  <td align="left">v4 SKESK (<xref target="v4-skesk"/>)</td>
                  <td align="left">v3 PKESK (<xref target="v3-pkesk"/>)</td>
                  <td align="left">No</td>
                </tr>
                <tr>
                  <td align="left">v1 SEIPD (<xref target="version-one-seipd"/>)</td>
                  <td align="left">v4 SKESK (<xref target="v4-skesk"/>)</td>
                  <td align="left">v3 PKESK (<xref target="v3-pkesk"/>)</td>
                  <td align="left">Yes</td>
                </tr>
                <tr>
                  <td align="left">v2 SEIPD (<xref target="version-two-seipd"/>)</td>
                  <td align="left">v6 SKESK (<xref target="v6-skesk"/>)</td>
                  <td align="left">v6 PKESK (<xref target="v6-pkesk"/>)</td>
                  <td align="left">Yes</td>
                </tr>
              </tbody>
            </table>
            <t>An implementation processing an Encrypted Message <bcp14>MUST</bcp14> discard any preceding ESK packet with a version that does not align with the version of the payload.</t>
          </section>
          <section anchor="signed-message-versions">
            <name>Packet Versions in Signatures</name>
            <t>OpenPGP Key packets and Signature packets are also versioned.
The version of a Signature typically matches the version of the signing key.
When a version 6 key produces a Signature packet, it <bcp14>MUST</bcp14> produce a version 6 Signature packet, regardless of the Signature packet type.
When a message is signed or verified using the one-pass construction, the version of the One-Pass Signature packet (<xref target="one-pass-sig"/>) should also be aligned to the other versions.</t>
            <t>Some legacy implementations have produced unaligned signature versions for older key material, which are also described in the table below for the purpose of historic interoperability.
A conforming implementation <bcp14>MUST</bcp14> only generate Signature packets with version numbers matching rows with "Yes" in the "Generate?" column.</t>
            <table anchor="signed-packet-versions-registry">
              <name>OpenPGP Key and Signature Versions Registry</name>
              <thead>
                <tr>
                  <th align="left">Signing Key Version</th>
                  <th align="left">Signature Packet Version</th>
                  <th align="left">OPS Packet Version</th>
                  <th align="left">Generate?</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">3 (<xref target="v3-pubkeys"/>)</td>
                  <td align="left">3 (<xref target="version-three-sig"/>)</td>
                  <td align="left">3 (<xref target="one-pass-sig"/>)</td>
                  <td align="left">No</td>
                </tr>
                <tr>
                  <td align="left">4 (<xref target="v4-pubkeys"/>)</td>
                  <td align="left">3 (<xref target="version-three-sig"/>)</td>
                  <td align="left">3 (<xref target="one-pass-sig"/>)</td>
                  <td align="left">No</td>
                </tr>
                <tr>
                  <td align="left">4 (<xref target="v4-pubkeys"/>)</td>
                  <td align="left">4 (<xref target="version-four-and-six-sig"/>)</td>
                  <td align="left">3 (<xref target="one-pass-sig"/>)</td>
                  <td align="left">Yes</td>
                </tr>
                <tr>
                  <td align="left">6 (<xref target="v6-pubkeys"/>)</td>
                  <td align="left">6 (<xref target="version-four-and-six-sig"/>)</td>
                  <td align="left">6 (<xref target="one-pass-sig"/>)</td>
                  <td align="left">Yes</td>
                </tr>
              </tbody>
            </table>
            <t>Note, however, that a version mismatch between these packets does not invalidate the packet sequence as a whole; it merely invalidates the signature, as a signature with an unknown version <bcp14>SHOULD</bcp14> be discarded (see <xref target="malformed-signatures"/>).</t>
          </section>
        </section>
      </section>
      <section anchor="detached-signatures">
        <name>Detached Signatures</name>
        <t>Some OpenPGP applications use so-called "detached signatures".
For example, a program bundle may contain a file, and with it a second file that is a detached signature of the first file. These detached signatures are simply one or more Signature packets stored separately from the data for which they are a signature.</t>
        <t>In addition, a Marker packet (<xref target="marker-packet"/>) and a Padding packet (<xref target="padding-packet"/>) can appear anywhere in the sequence.</t>
      </section>
    </section>
    <section anchor="elliptic-curve-cryptography">
      <name>Elliptic Curve Cryptography</name>
      <t>This section describes algorithms and parameters used with Elliptic Curve Cryptography (ECC) keys. A thorough introduction to ECC can be found in <xref target="KOBLITZ"/>. Refer to <xref target="FIPS186"/>, Appendix B.4, for the methods to generate a uniformly distributed ECC private key.</t>
      <t>None of the ECC methods described in this document are allowed with deprecated version 3 keys. </t>
      <section anchor="ecc-curves">
        <name>ECC Curves</name>
        <t>This document references three named prime field curves defined in <xref target="FIPS186"/> as "Curve P-256", "Curve P-384", and "Curve P-521" and three named prime field curves defined in <xref target="RFC5639"/> as "brainpoolP256r1", "brainpoolP384r1", and "brainpoolP512r1". All six curves can be used with ECDSA and ECDH public key algorithms. They are referenced using a sequence of octets, referred to as the curve OID. <xref target="ec-curves"/> describes in detail how this sequence of octets is formed.</t>	
        <t>Separate algorithms are also defined for the use of X25519 and X448 <xref target="RFC7748"/> and Ed25519 and Ed448 <xref target="RFC8032"/>.
Additionally, legacy OIDs are defined for "Curve25519Legacy" (for encryption using the ECDH algorithm) and "Ed25519Legacy" (for signing using the EdDSALegacy algorithm).</t>
      </section>
      <section anchor="ec-point-wire-formats">
        <name>EC Point Wire Formats</name>
        <t>A point on an elliptic curve will always be represented on the wire as an MPI.
Each curve uses a specific point format for the data within the MPI itself.
Each format uses a designated prefix octet to ensure that the high octet has at least 1 bit set to make the MPI a constant size.</t>
        <table anchor="ec-point-wire-formats-registry">
          <name>OpenPGP Elliptic Curve Point Wire Formats Registry</name>
          <thead>
            <tr>
              <th align="right">Name</th>
              <th align="left">Wire Format</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="right">SEC1</td>
              <td align="left">0x04 || x || y</td>
              <td align="left">
                <xref target="ec-point-sec1"/></td>
            </tr>
            <tr>
              <td align="right">Prefixed native</td>
              <td align="left">0x40 || native</td>
              <td align="left">
                <xref target="ec-point-prefixed-native"/></td>
            </tr>
          </tbody>
        </table>
        <section anchor="ec-point-sec1">
          <name>SEC1 EC Point Wire Format</name>
          <t>For a SEC1-encoded (uncompressed) point, the content of the MPI is:</t>
          <artwork><![CDATA[
B = 04 || x || y
]]></artwork>
          <t>where x and y are coordinates of the point P = (x, y), and each is encoded in the big-endian format and zero-padded to the adjusted underlying field size.
The adjusted underlying field size is the underlying field size rounded up to the nearest 8-bit boundary, as noted in the "fsize" column in <xref target="ec-curves"/>.
This encoding is compatible with the definition given in <xref target="SEC1"/>.</t>
        </section>
        <section anchor="ec-point-prefixed-native">
          <name>Prefixed Native EC Point Wire Format</name>
          <t>For a custom compressed point, the content of the MPI is:</t>
          <artwork><![CDATA[
B = 40 || p
]]></artwork>
          <t>where p is the public key of the point encoded using the rules defined for the specified curve.
This format is used for ECDH keys based on curves expressed in Montgomery form and for points when using EdDSA.</t>
        </section>
        <section anchor="notes-on-ec-point-wire-formats">
          <name>Notes on EC Point Wire Formats</name>
          <t>Given the above definitions, the exact size of the MPI payload for an encoded point is 515 bits for both NIST P-256 and brainpoolP256r1, 771 for both NIST P-384 and brainpoolP384r1, 1059 for NIST P-521, 1027 for brainpoolP512r1, and 263 for both Curve25519Legacy and Ed25519Legacy. For example, the length of an EdDSALegacy public key for the curve Ed25519Legacy is 263 bits: 7 bits to represent the 0x40 prefix octet and 32 octets for the native value of the public key.</t>
          <t>Even though the zero point (also called the "point at infinity") may occur as a result of arithmetic operations on points of an elliptic curve, it <bcp14>SHALL NOT</bcp14> appear in data structures defined in this document.</t>
          <t>Each particular curve uses a designated wire format for the point found in its public key or ECDH data structure.
An implementation <bcp14>MUST NOT</bcp14> use a different wire format for a point other than the wire format associated with the curve.</t>
        </section>
      </section>
      <section anchor="ec-scalar-wire-formats">
        <name>EC Scalar Wire Formats</name>
        <t>Some non-curve values in elliptic curve cryptography (for example, secret keys and signature components) are not points on a curve, but they are also encoded on the wire in OpenPGP as an MPI.</t>
        <t>Because of different patterns of deployment, some curves treat these values as opaque bit strings with the high bit set, while others are treated as actual integers, encoded in the standard OpenPGP big-endian form.
	The choice of encoding is specific to the public key algorithm in use.</t>	
        <table anchor="ec-scalar-wire-formats-registry">
          <name>OpenPGP Elliptic Curve Scalar Encodings Registry</name>
          <thead>
            <tr>
              <th align="left">Type</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">integer</td>
              <td align="left">An integer encoded in big-endian format as a standard OpenPGP MPI</td>
              <td align="left">
                <xref target="mpi"/></td>
            </tr>
            <tr>
              <td align="left">octet string</td>
              <td align="left">An octet string of fixed length that may be shorter on the wire due to leading zeros being stripped by the MPI encoding and may need to be zero-padded before use</td>
              <td align="left">
                <xref target="ec-octet-string"/></td>
            </tr>
            <tr>
              <td align="left">prefixed N octets</td>
              <td align="left">An octet string of fixed length N, prefixed with octet 0x40 to ensure no leading zero octet</td>
              <td align="left">
                <xref target="ec-prefix"/></td>
            </tr>
          </tbody>
        </table>
        <section anchor="ec-octet-string">
          <name>EC Octet String Wire Format</name>
          <t>Some opaque strings of octets are represented on the wire as an MPI by simply stripping the leading zeros and counting the remaining bits.
These strings are of known, fixed length.
They are represented in this document as <tt>MPI(N octets of X)</tt>, where <tt>N</tt> is the expected length in octets of the octet string.</t>
          <t>For example, a 5-octet opaque string (<tt>MPI(5 octets of X)</tt>) where <tt>X</tt> has the value <tt>00 02 EE 19 00</tt> would be represented on the wire as an MPI like so: <tt>00 1A 02 EE 19 00</tt>.</t>
          <t>To encode <tt>X</tt> to the wire format, set the MPI's 2-octet bit counter to the value of the highest set bit (bit 26, or 0x001A), and do not transfer the leading all-zero octet to the wire.</t>
          <t>To reverse the process, an implementation can take the following steps, if it knows that X has an expected length of, for example, 5 octets:</t>
          <ul spacing="normal">
            <li>
              <t>Ensure that the MPI's 2-octet bit count is less than or equal to 40 (5 octets of 8 bits)</t>
            </li>
            <li>
              <t>Allocate 5 octets, setting all to zero initially</t>
            </li>
            <li>
              <t>Copy the MPI data octets (without the two count octets) into the lower octets of the allocated space</t>
            </li>
          </ul>
        </section>
        <section anchor="ec-prefix">
          <name>EC Prefixed Octet String Wire Format</name>
          <t>Another way to ensure that a fixed-length bytes string is encoded simply to the wire while remaining in MPI format is to prefix the byte string with a dedicated non-zero octet.
This specification uses 0x40 as the prefix octet.
This is represented in this specification as <tt>MPI(prefixed N octets of X)</tt>, where <tt>N</tt> is the known byte string length.</t>
          <t>For example, a 5-octet opaque string using <tt>MPI(prefixed 5 octets of X)</tt> where <tt>X</tt> has the value <tt>00 02 EE 19 00</tt> would be written to the wire form as: <tt>00 2F 40 00 02 EE 19 00</tt>.</t>
          <t>To encode the string, prefix it with the octet 0x40 (whose 7th bit is set), and then set the MPI's 2-octet bit counter to 47 (0x002F -- 7 bits for the prefix octet and 40 bits for the string).</t>
          <t>To decode the string from the wire, an implementation that knows that the variable is formed in this way can:</t>
          <ul spacing="normal">
            <li>
              <t>ensure that the first three octets of the MPI (the 2-bit count octets plus the prefix octet) are <tt>00 2F 40</tt>, and</t>
            </li>
            <li>
              <t>use the remainder of the MPI directly off the wire.</t>
            </li>
          </ul>
          <t>Note that this is a similar approach to that used in the EC point encodings found in <xref target="ec-point-prefixed-native"/>.</t>
        </section>
      </section>
      <section anchor="key-derivation-function">
        <name>Key Derivation Function</name>
        <t>A key derivation function (KDF) is necessary to implement EC encryption.
The Concatenation Key Derivation Function (Approved Alternative 1) <xref target="SP800-56A"/> with the KDF hash function that is SHA2-256 <xref target="FIPS180"/> or stronger is <bcp14>REQUIRED</bcp14>.</t>
        <t>For convenience, the synopsis of the encoding method is given below with significant simplifications attributable to the restricted choice of hash functions in this document.
However, <xref target="SP800-56A"/> is the normative source of the definition.</t>
        <artwork><![CDATA[
//   Implements KDF( X, oBits, Param );
//   Input: point X = (x,y)
//   oBits - the desired size of output
//   hBits - the size of output of hash function Hash
//   Param - octets representing the parameters
//   Assumes that oBits <= hBits
// Convert the point X to the octet string:
//   ZB' = 04 || x || y
// and extract the x portion from ZB'
ZB = x;
MB = Hash ( 00 || 00 || 00 || 01 || ZB || Param );
return oBits leftmost bits of MB.
]]></artwork>
        <t>Note that ZB in the KDF description above is the compact representation of X as defined in <xref section="4.2" sectionFormat="of" target="RFC6090"/>.</t>
      </section>
      <section anchor="ecdh">	
<name>ECDH Algorithm</name>
<t>This section describes the One-Pass Diffie-Hellman method, which is a
combination of the ECC Diffie-Hellman method that establishes a
shared secret and the key derivation method that processes the
shared secret into a derived key.  Additionally, this section
describes a key wrapping method that uses the derived key to protect
a session key used to encrypt a message.</t>
        <t>The One-Pass Diffie-Hellman method C(1, 1, ECC CDH) <xref target="SP800-56A"/> <bcp14>MUST</bcp14> be implemented with the following restrictions: the ECC Cofactor Diffie-Hellman (CDH) primitive employed by this method is modified to always assume the cofactor is 1, the KDF specified in <xref target="key-derivation-function"/> is used, and the KDF parameters specified below are used.</t>
        <t>The KDF parameters are encoded as a concatenation of the following 5 variable-length and fixed-length fields, which are compatible with the definition of the OtherInfo bit string <xref target="SP800-56A"/>:</t>
        <ul spacing="normal">
          <li>
            <t>A variable-length field containing a curve OID, which is formatted as follows:  </t>
            <ul spacing="normal">
              <li>
                <t>A 1-octet size of the following field.</t>
              </li>
              <li>
                <t>The octets representing a curve OID, as defined in <xref target="ec-curves"/>.</t>
              </li>
            </ul>
          </li>
          <li>
            <t>A 1-octet public key algorithm ID, as defined in <xref target="pubkey-algos"/>.</t>
          </li>
          <li>
            <t>A variable-length field containing KDF parameters, which are identical to the corresponding field in the ECDH public key and formatted as follows:  </t>
            <ul spacing="normal">
              <li>
                <t>A 1-octet size of the following fields; values 0 and 0xFF are reserved for future extensions.</t>
              </li>
              <li>
                <t>A 1-octet value 0x01, reserved for future extensions.</t>
              </li>
              <li>
                <t>A 1-octet hash function ID used with the KDF.</t>
              </li>
              <li>
                <t>A 1-octet algorithm ID for the symmetric algorithm that is used to wrap the symmetric key for message encryption; see <xref target="ecdh"/> for details.</t>
              </li>
            </ul>
          </li>
          <li>
            <t>20 octets representing the UTF-8 encoding of the string "Anonymous Sender" padded at the end with spaces (0x20) to 20 octets, which is the octet sequence 41 6E 6F 6E 79 6D 6F 75 73 20 53 65 6E 64 65 72 20 20 20 20.</t>
          </li>
          <li>
            <t>A variable-length field containing the fingerprint of the recipient encryption subkey identifying the key material that is needed for decryption.
For version 4 keys, this field is 20 octets.
For version 6 keys, this field is 32 octets.</t>
          </li>
        </ul>
        <t>The size in octets of the KDF parameters sequence, as defined above, for encrypting to a version 4 key is 54 for curve NIST P-256; 51 for curves NIST P-384 and NIST P-521; 55 for curves brainpoolP256r1, brainpoolP384r1, and brainpoolP512r1; or 56 for Curve25519Legacy. For encrypting to a version 6 key, the size of the sequence is 66 for curve NIST P-256; 63 for curves NIST P-384 and NIST P-521; or 67 for curves brainpoolP256r1, brainpoolP384r1, and brainpoolP512r1.</t>
        <t>The key wrapping method is described in <xref target="RFC3394"/>.
The KDF produces a symmetric key that is used as a KEK as specified in <xref target="RFC3394"/>. Refer to <xref target="ecdh-parameters"/> for the details regarding the choice of the KEK algorithm, which <bcp14>SHOULD</bcp14> be one of the three AES algorithms.
Key wrapping and unwrapping is performed with the default initial value of <xref target="RFC3394"/>.</t>
        <t>To produce the input to the key wrapping method, first concatenate the following values:</t>
        <ul spacing="normal">
          <li>
            <t>The 1-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).</t>
          </li>
          <li>
            <t>The session key.</t>
          </li>
          <li>
            <t>A 2-octet checksum of the session key, equal to the sum of the session key octets, modulo 65536.</t>
          </li>
        </ul>
        <t>Then, the above values are padded to an 8-octet granularity using the method described in <xref target="RFC8018"/>.</t>
        <t>For example, in a version 3 Public Key Encrypted Session Key packet, an AES-256 session key is encoded as follows, forming a 40-octet sequence:</t>
        <artwork><![CDATA[
09 k0 k1 ... k31 s0 s1 05 05 05 05 05
]]></artwork>
        <t>The octets k0 to k31 above denote the session key, and the octets s0 and s1 denote the checksum of the session key octets.
This encoding allows the sender to obfuscate the size of the symmetric encryption key used to encrypt the data.
For example, assuming that an AES algorithm is used for the session key, the sender <bcp14>MAY</bcp14> use 21, 13, and 5 octets of padding for AES-128, AES-192, and AES-256, respectively, to provide the same number of octets, 40 total, as an input to the key wrapping method.</t>
        <t>In a version 6 Public Key Encrypted Session Key packet, the symmetric algorithm is not included, as described in <xref target="pkesk"/>.
For example, an AES-256 session key would be composed as follows:</t>
        <artwork><![CDATA[
k0 k1 ... k31 s0 s1 06 06 06 06 06 06
]]></artwork>
        <t>The octets k0 to k31 above again denote the session key, and the octets s0 and s1 denote the checksum.
In this case, assuming that an AES algorithm is used for the session key, the sender <bcp14>MAY</bcp14> use 22, 14, and 6 octets of padding for AES-128, AES-192, and AES-256, respectively, to provide the same number of octets, 40 total, as an input to the key wrapping method.</t>
        <t>The output of the method consists of two fields.
The first field is the MPI containing the ephemeral key used to establish the shared secret.
The second field is composed of the following two subfields:</t>
        <ul spacing="normal">
          <li>
            <t>One octet encoding the size in octets of the result of the key wrapping method; the value 255 is reserved for future extensions.</t>
          </li>
          <li>
            <t>Up to 254 octets representing the result of the key wrapping method, applied to the 8-octet padded session key, as described above.</t>
          </li>
        </ul>
        <t>Note that for session key sizes 128, 192, and 256 bits, the size of the result of the key wrapping method is, respectively, 32, 40, and 48 octets, unless size obfuscation is used.</t>
        <t>For convenience, the synopsis of the encoding method is given below; however, this section, <xref target="SP800-56A"/>, and <xref target="RFC3394"/> are the normative sources of the definition.</t>	
        <ul spacing="normal">
          <li>
            <t>Obtain the authenticated recipient public key R</t>
          </li>
          <li>
            <t>Generate an ephemeral, single-use key pair {v, V=vG}</t>
          </li>
          <li>
            <t>Compute the shared point S = vR</t>
          </li>
          <li>
            <t>m = symm_alg_ID || session key || checksum || pkcs5_padding</t>
          </li>
          <li>
            <t>curve_OID_len = (octet)len(curve_OID)</t>
          </li>
          <li>
            <t>Param = curve_OID_len || curve_OID || public_key_alg_ID || 03 || 01 || KDF_hash_ID || KEK_alg_ID for AESKeyWrap || 41 6E 6F 6E 79 6D 6F 75 73 20 53 65 6E 64 65 72 20 20 20 20 || recipient_fingerprint</t>
          </li>
          <li>
            <t>Z_len = the key size for the KEK_alg_ID used with AESKeyWrap</t>
          </li>
          <li>
            <t>Compute Z = KDF( S, Z_len, Param )</t>
          </li>
          <li>
            <t>Compute C = AESKeyWrap( Z, m ) (per <xref target="RFC3394"/>)</t>
          </li>
          <li>
            <t>Wipe the memory that contained S, v, and Z to avoid leaking ephemeral secrets</t>
          </li>
          <li>
            <t>VB = convert point V to the octet string</t>
          </li>
          <li>
            <t>Output (MPI(VB) || len(C) || C)</t>
          </li>
        </ul>
        <t>The decryption is the inverse of the method given.
Note that the recipient with key pair (r,R) obtains the shared secret by calculating:</t>
        <artwork><![CDATA[
S = rV = rvG
]]></artwork>
        <section anchor="ecdh-parameters">
          <name>ECDH Parameters</name>
          <t>ECDH keys have a hash algorithm parameter for key derivation and a symmetric algorithm for key encapsulation.</t>
          <t>For version 6 keys, the following algorithms <bcp14>MUST</bcp14> be used depending on the curve.
An implementation <bcp14>MUST NOT</bcp14> generate a version 6 ECDH key over any listed curve that uses different KDF or KEK parameters.
An implementation <bcp14>MUST NOT</bcp14> encrypt any message to a version 6 ECDH key over a listed curve that announces a different KDF or KEK parameter.</t>
          <t>For version 4 keys, the following algorithms <bcp14>SHOULD</bcp14> be used depending on the curve.
An implementation <bcp14>SHOULD</bcp14> only use an AES algorithm as a KEK algorithm.</t>
          <table anchor="ecdh-kdf-kek-parameters-registry">
            <name>OpenPGP ECDH KDF and KEK Parameters Registry</name>
            <thead>
              <tr>
                <th align="left">Curve</th>
                <th align="left">Hash Algorithm</th>
                <th align="left">Symmetric Algorithm</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">NIST P-256</td>
                <td align="left">SHA2-256</td>
                <td align="left">AES-128</td>
              </tr>
              <tr>
                <td align="left">NIST P-384</td>
                <td align="left">SHA2-384</td>
                <td align="left">AES-192</td>
              </tr>
              <tr>
                <td align="left">NIST P-521</td>
                <td align="left">SHA2-512</td>
                <td align="left">AES-256</td>
              </tr>
              <tr>
                <td align="left">brainpoolP256r1</td>
                <td align="left">SHA2-256</td>
                <td align="left">AES-128</td>
              </tr>
              <tr>
                <td align="left">brainpoolP384r1</td>
                <td align="left">SHA2-384</td>
                <td align="left">AES-192</td>
              </tr>
              <tr>
                <td align="left">brainpoolP512r1</td>
                <td align="left">SHA2-512</td>
                <td align="left">AES-256</td>
              </tr>
              <tr>
                <td align="left">Curve25519Legacy</td>
                <td align="left">SHA2-256</td>
                <td align="left">AES-128</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="notes-on-algorithms">
      <name>Notes on Algorithms</name>
      <section anchor="pkcs-encoding">
        <name>PKCS#1 Encoding in OpenPGP</name>
        <t>This specification makes use of the PKCS#1 functions EME-PKCS1-v1_5 and EMSA-PKCS1-v1_5. However, the calling conventions of these functions have changed in the past. To avoid potential confusion and interoperability problems, we are including local copies in this document, adapted from those in PKCS#1 v2.1 <xref target="RFC8017"/>. <xref target="RFC8017"/> should be treated as the ultimate authority on PKCS#1 for OpenPGP. Nonetheless, we believe that there is value in having a self-contained document that avoids problems in the future with needed changes in the conventions.</t>
        <section anchor="eme-pkcs1-v1-5-encode">
  
          <name>EME-PKCS1-v1_5-ENCODE</name>
          <t>Input:</t>
          <dl>
            <dt>k =</dt>
            <dd>key modulus length in octets.
            </dd>
            <dt>M =</dt>
            <dd>message to be encoded; an octet string of length mLen, where mLen &lt;= k - 11.
            </dd>
          </dl>
          <t>Output:</t>
          <dl>
            <dt>EM =</dt>
            <dd>encoded message; an octet string of length k.
            </dd>
          </dl>
          <t>Error: "message too long".</t>
          <ol spacing="normal" type="1"><li>
              <t>Length checking: If mLen &gt; k - 11, output "message too long" and stop.</t>
            </li>
            <li>
              <t>Generate an octet string PS of length k - mLen - 3 consisting of pseudorandomly generated non-zero octets. The length of PS will be at least 8 octets.</t>
            </li>
            <li>
              <t>Concatenate PS, the message M, and other padding to form an encoded message EM of length k octets as  </t>
              <artwork><![CDATA[
EM = 0x00 || 0x02 || PS || 0x00 || M.
]]></artwork>
            </li>
            <li>
              <t>Output EM.</t>
            </li>
          </ol>
        </section>
        <section anchor="eme-pkcs1-v1-5-decode">
          <name>EME-PKCS1-v1_5-DECODE</name>	  
          <t>Input:</t>
          <dl>
            <dt>EM =</dt>
            <dd>
              <t>encoded message; an octet string.</t>
            </dd>
          </dl>
          <t>Output:</t>
          <dl>
            <dt>M =</dt>
            <dd>
              <t>decoded message; an octet string.</t>
            </dd>
          </dl>
          <t>Error: "decryption error".</t>
          <t>To decode an EME-PKCS1_v1_5 message, separate the encoded message EM into an octet string PS consisting of non-zero octets and a message M as follows</t>
          <artwork><![CDATA[
  EM = 0x00 || 0x02 || PS || 0x00 || M.
]]></artwork>
          <t>If the first octet of EM does not have hexadecimal value 0x00, the second octet of EM does not have hexadecimal value 0x02, there is no octet with hexadecimal value 0x00 to separate PS from M, or the length of PS is less than 8 octets, output "decryption error" and stop. See also <xref target="pkcs1-errors"/> regarding differences in reporting between a decryption error and a padding error.</t>
        </section>
        <section anchor="emsa-pkcs1-v1-5">	  
          <name>EMSA-PKCS1-v1_5</name>
          <t>This encoding method is deterministic and only has an encoding operation.</t>
          <t>Input:</t>
          <dl>
            <dt>Hash =</dt>
            <dd>
              <t>hash function to be used.</t>
            </dd>
            <dt>M =</dt>
            <dd>
              <t>message to be encoded.</t>
            </dd>
            <dt>emLen =</dt>
            <dd>
              <t>intended length of the encoded message in octets, at least tLen + 11, where tLen is the octet length of the DER encoding T of a certain value computed during the encoding operation.</t>
            </dd>
          </dl>
          <t>Output:</t>
          <dl>
            <dt>EM =</dt>
            <dd>
              <t>encoded message; an octet string of length emLen.</t>
            </dd>
          </dl>
          <t>Errors: "message too long"; "intended encoded message length too short".</t>
          <t>Steps:</t>
          <ol spacing="normal" type="1"><li>
              <t>Apply the hash function to the message M to produce hash value H:  </t>
              <t>
H = Hash(M).  </t>
              <t>
If the hash function outputs "message too long," output "message too long" and stop.</t>
            </li>
            <li>
              <t>Let T be the Full Hash Prefix from <xref target="emsa-hash-oids-registry"/> for the given hash function, concatenated with the hash digest H (representing an ASN.1 DER value for the hash function used and the hash digest). Let tLen be the length in octets of T.</t>
            </li>
            <li>
              <t>If emLen &lt; tLen + 11, output "intended encoded message length too short" and stop.</t>
            </li>
            <li>
              <t>Generate an octet string PS consisting of emLen - tLen - 3 octets with hexadecimal value 0xFF.
The length of PS will be at least 8 octets.</t>
            </li>
            <li>
              <t>Concatenate PS, the hash prefix T, and other padding to form the encoded message EM as  </t>
              <artwork><![CDATA[
EM = 0x00 || 0x01 || PS || 0x00 || T.
]]></artwork>
            </li>
            <li>
              <t>Output EM.</t>
            </li>
          </ol>
        </section>
      </section>
      <section anchor="symmetric-algorithm-preferences">
        <name>Symmetric Algorithm Preferences</name>
        <t>The symmetric algorithm preference is an ordered list of algorithms that the keyholder accepts.
Since it is found on a self-signature, it is possible that a keyholder may have multiple, different preferences. For example, Alice may have AES-128 only specified for "alice@work.com" but Camellia-256, Twofish, and AES-128 specified for "alice@home.org". Note that it is also possible for preferences to be in a subkey's binding signature.</t>
        <t>Since AES-128 is the algorithm that <bcp14>MUST</bcp14> be implemented, if it is not explicitly in the list, it is tacitly at the end. However, it is good form to place it there explicitly.
Note also that if an implementation does not implement the preference, then it is implicitly an AES-128-only implementation. Furthermore, note that implementations conforming to the previous version of this specification <xref target="RFC4880"/> have TripleDES as the only algorithm that <bcp14>MUST</bcp14> be implemented.</t>
        <t>An implementation <bcp14>MUST NOT</bcp14> use a symmetric algorithm that is not in the recipient's preference list. When encrypting to more than one recipient, the implementation finds a suitable algorithm by taking the intersection of the preferences of the recipients. Note that since the AES-128 algorithm <bcp14>MUST</bcp14> be implemented, the intersection is guaranteed to be non-empty.</t>
        <t>If an implementation can decrypt a message that a keyholder doesn't have in their preferences, the implementation <bcp14>SHOULD</bcp14> decrypt the message anyway, but it <bcp14>MUST</bcp14> warn the keyholder. For example, suppose that Alice (above) has an implementation that implements all algorithms in this specification. Nonetheless, she prefers subsets for work or home. If she is sent a message encrypted with IDEA, which is not in her preferences, the implementation warns her that someone sent an IDEA-encrypted message, but it would ideally decrypt it anyway.</t>
        <section anchor="plaintext">
          <name>Plaintext</name>
          <t>Algorithm 0, "plaintext", may only be used to denote secret keys that are stored in the clear.
An implementation <bcp14>MUST NOT</bcp14> use algorithm 0 as the indicated symmetric cipher for an encrypted data packet (Sections <xref target="sed" format="counter"/> or <xref target="seipd" format="counter"/>); it can use a Literal Data packet (<xref target="lit"/>) to encode unencrypted literal data.</t>
        </section>
      </section>
      <section anchor="other-algorithm-preferences">
        <name>Other Algorithm Preferences</name>
        <t>Other algorithm preferences work similarly to the symmetric algorithm preference in that they specify which algorithms the keyholder accepts. There are two interesting cases in which further comments are needed: the compression preferences and the hash preferences.</t>
        <section anchor="compression-preferences">
          <name>Compression Preferences</name>
          <t>Like the algorithm preferences, an implementation <bcp14>MUST NOT</bcp14> use an algorithm that is not in the preference vector.
If Uncompressed (0) is not explicitly in the list, it is tacitly at the end.
That is, uncompressed messages may always be sent.</t>
          <t>Note that earlier implementations may assume that the absence of compression preferences means that [ZIP(1), Uncompressed(0)] are preferred, and default to ZIP compression.
Therefore, an implementation that prefers uncompressed data <bcp14>SHOULD</bcp14> explicitly state this in the Preferred Compression Algorithms.</t>
          <section anchor="uncompressed">
            <name>Uncompressed</name>
            <t>Algorithm 0, "uncompressed", may only be used to denote a preference for uncompressed data.
An implementation <bcp14>MUST NOT</bcp14> use algorithm 0 as the indicated compression algorithm in a Compressed Data packet (<xref target="compressed-data"/>); it can use a Literal Data packet (<xref target="lit"/>) to encode uncompressed literal data.</t>
          </section>
        </section>
        <section anchor="hash-algorithm-preferences">
          <name>Hash Algorithm Preferences</name>  
          <t>Typically, the signer chooses which hash algorithm to use, rather than the verifier, because a signer rarely knows who is going to be verifying the signature. This preference allows a protocol based upon digital signatures ease in negotiation.</t>
          <t>Thus, if Alice is authenticating herself to Bob with a signature, it makes sense for her to use a hash algorithm that Bob's implementation uses. This preference allows Bob to state which algorithms Alice may use in his key.</t>
          <t>Since SHA2-256 is the hash algorithm that <bcp14>MUST</bcp14> be implemented, if it is not explicitly in the list, it is tacitly at the end.
However, it is good form to place it there explicitly.</t>
        </section>
      </section>
      <section anchor="rsa-notes">
        <name>RSA</name>
        <t>The PKCS1-v1_5 padding scheme, used by the RSA algorithms defined in this document, is no longer recommended, and its use is deprecated by <xref target="SP800-131A"/>.
Therefore, an implementation <bcp14>SHOULD NOT</bcp14> generate RSA keys.</t>
        <t>There are algorithm types for RSA Sign-Only and RSA Encrypt-Only keys. These types are deprecated in favor of the Key Flags signature subpacket. An implementation <bcp14>MUST NOT</bcp14> create such a key, but it <bcp14>MAY</bcp14> interpret it.</t>
        <t>An implementation <bcp14>MUST NOT</bcp14> generate RSA keys of a size less than 3072 bits.
An implementation <bcp14>SHOULD NOT</bcp14> encrypt, sign, or verify using RSA keys of a size less than 3072 bits. An implementation <bcp14>MUST NOT</bcp14> encrypt, sign, or verify using RSA keys of a size less than 2048 bits. An implementation that decrypts a message using an RSA secret key of a size less than 3072 bits <bcp14>SHOULD</bcp14> generate a deprecation warning that the key is too weak for modern use.</t>
      </section>
      <section anchor="dsa-notes">
        <name>DSA</name>
        <t>DSA is no longer recommended.
It has also been deprecated in <xref target="FIPS186"/>.
Therefore, an implementation <bcp14>MUST NOT</bcp14> generate DSA keys.</t>
        <t>An implementation <bcp14>MUST NOT</bcp14> sign or verify using DSA keys.</t>
      </section>
      <section anchor="elgamal-notes">
        <name>Elgamal</name>
        <t>The PKCS1-v1_5 padding scheme, used by the Elgamal algorithm defined in this document, is no longer recommended, and its use is deprecated by <xref target="SP800-131A"/>.
Therefore, an implementation <bcp14>MUST NOT</bcp14> generate Elgamal keys.</t>
        <t>An implementation <bcp14>MUST NOT</bcp14> encrypt using Elgamal keys.
An implementation that decrypts a message using an Elgamal secret key <bcp14>SHOULD</bcp14> generate a deprecation warning that the key is too weak for modern use.</t>
      </section>
      <section anchor="eddsa-notes">
        <name>EdDSA</name>
        <t>Although the EdDSA algorithm allows arbitrary data as input, its use with OpenPGP requires that a digest of the message be used as input (pre-hashed). See <xref target="computing-signatures"/> for details.
Truncation of the resulting digest is never applied; the resulting digest value is used verbatim as input to the EdDSA algorithm.</t>
        <t>For clarity: while <xref target="RFC8032"/> describes different variants of EdDSA, OpenPGP uses the "pure" variant (PureEdDSA).
The hashing that happens with OpenPGP is done as part of the standard OpenPGP signature process, and that hash itself is fed as the input message to the PureEdDSA algorithm.</t>
        <t>As specified in <xref target="RFC8032"/>, Ed448 also expects a "context string".
In OpenPGP, Ed448 is used with the empty string as a context string.</t>
      </section>
      <section anchor="reserved-notes">
        <name>Reserved Algorithm IDs</name>
        <t>A number of algorithm IDs have been reserved for algorithms that would be useful to use in an OpenPGP implementation, yet there are issues that prevent an implementer from actually implementing the algorithm. These are marked as reserved in <xref target="pubkey-algos"/>.</t>

        <t>The reserved public key algorithm X9.42 (21) does not have the necessary parameters, parameter order, or semantics defined. The same is currently true for reserved public key algorithms AEDH (23) and AEDSA (24).</t>
        <t>Previous versions of the OpenPGP specification permitted Elgamal <xref target="ELGAMAL"/> signatures with a public key algorithm ID of 20. These are no longer permitted. An implementation <bcp14>MUST NOT</bcp14> generate such keys. An implementation <bcp14>MUST NOT</bcp14> generate Elgamal signatures;
see <xref target="BLEICHENBACHER"/>.</t>
      </section>
      <section anchor="cfb-mode">
        <name>CFB Mode</name>
        <t>The Cipher Feedback (CFB) mode used in this document is defined in Section 6.3 of <xref target="SP800-38A"/>.</t>
        <t>The CFB segment size <tt>s</tt> is equal to the block size of the cipher (i.e., n-bit CFB mode, where n is the block size used).</t>
      </section>
      <section anchor="private-or-experimental-parameters">
        <name>Private or Experimental Parameters</name>
        <t>S2K Specifiers, Signature Subpacket Type IDs, User Attribute Subpacket Type IDs, image format IDs, and the various algorithm IDs described in <xref target="constants"/> all reserve the range 100 to 110 for Private and Experimental Use.
Packet Type IDs reserve the range 60 to 63 for Private and Experimental Use.
These are intentionally managed by the Private Use and Experimental Use policies, as described in <xref target="RFC8126"/>.</t>
        <t>However, implementations need to be careful with these and promote them to full IANA-managed parameters when they grow beyond the original, limited system.</t>
      </section>
      <section anchor="meta-considerations-for-expansion">
        <name>Meta Considerations for Expansion</name>
        <t>If OpenPGP is extended in a way that is not backward compatible, meaning that old implementations will not gracefully handle their absence of a new feature, the extension proposal can be declared in the keyholder's self-signature as part of the Features signature subpacket.</t>
        <t>We cannot state definitively what extensions will not be forward compatible, but typically new algorithms are forward compatible, whereas new packets are not.</t>
        <t>If an extension proposal does not update the Features system, it <bcp14>SHOULD</bcp14> include an explanation of why this is unnecessary.
If the proposal contains neither an extension to the Features system nor an explanation of why such an extension is unnecessary, the proposal <bcp14>SHOULD</bcp14> be rejected.</t>
      </section>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <ul spacing="normal">
        <li>
          <t>As with any technology involving cryptography, implementers should check the current literature to determine if any algorithms used here have been found to be vulnerable to an attack.
If so, implementers should consider disallowing such algorithms for new data and warning the end user, or preventing use, when they are trying to consume data protected by such algorithms that are now vulnerable.</t>
        </li>
        <li>
          <t>This specification uses Public Key Cryptography technologies.
It is assumed that the private key portion of a public-private key pair is controlled and secured by the proper party or parties.</t>
        </li>
        <li>
          <t>The MD5 and SHA-1 hash algorithms have been found to have weaknesses, with collisions found in a number of cases.
MD5 and SHA-1 are deprecated for use in OpenPGP (see <xref target="hash-algos"/>).</t>
        </li>
        <li>
          <t>Many security protocol designers think that it is a bad idea to use a single key for both privacy (encryption) and integrity (signatures).
In fact, this was one of the motivating forces behind the version 4 key format with separate signature and encryption keys. Using a single key for encrypting and signing is discouraged.</t>
        </li>
        <li>
          <t>The DSA algorithm will work with any hash, but it is sensitive to the quality of the hash algorithm.
Verifiers should be aware that even if the signer used a strong hash, an attacker could have modified the signature to use a weak one. Only signatures using acceptably strong hash algorithms should be accepted as valid.</t>
        </li>
        <li>
          <t>As OpenPGP combines many different asymmetric, symmetric, and hash algorithms, each with different measures of strength, care should be taken to ensure that the weakest element of an OpenPGP Message is still sufficiently strong for the purpose at hand. While consensus about the strength of a given algorithm may evolve, NIST Special Publication 800-57 <xref target="SP800-57"/> contains recommendations (current at the time of this publication) about equivalent security levels of different algorithms.</t>
        </li>
        <li>
          <t>There is a somewhat-related potential security problem in signatures.
If an attacker can find a message that hashes to the same hash with a different algorithm, a bogus signature structure can be constructed that evaluates correctly.  </t>
          <t>
For example, suppose Alice DSA-signs message M using hash algorithm H.
Suppose that Mallet finds a message M' that has the same hash value as M with H'.
Mallet can then construct a signature block that verifies as Alice's signature of M' with H'.
However, this would also constitute a weakness in either H or H', or both.
Should this ever occur, a revision will have to be made to this document to revise the allowed hash algorithms.</t>
        </li>
        <li>
          <t>If you are building an authentication system, the recipient may specify a preferred signing algorithm.
However, the signer would be foolish to use a weak algorithm simply because the recipient requests it.</t>
        </li>
        <li>
          <t>Some of the encryption algorithms mentioned in this document have been analyzed less than others.
For example, although TWOFISH is presently considered reasonably strong, it has been analyzed much less than AES.
Other algorithms may have other concerns surrounding them.</t>
        </li>
        <li>
          <t>In late summer 2002, Jallad, Katz, and Schneier published an interesting attack on previous versions of the OpenPGP specification and some of its implementations <xref target="JKS02"/>.
In this attack, the attacker modifies a message and sends it to a user who then returns the erroneously decrypted message to the attacker.
The attacker is thus using the user as a decryption oracle and can often decrypt the message.
This attack is a particular form of ciphertext malleability.
See <xref target="ciphertext-malleability"/> for information on how to defend against such an attack using more recent versions of OpenPGP.</t>
        </li>
      </ul>
      <section anchor="sha1cd">
        <name>SHA-1 Collision Detection</name>
        <t>As described in <xref target="SHAMBLES"/>, the SHA-1 digest algorithm is not collision resistant.
However, an OpenPGP implementation cannot completely discard the SHA-1 algorithm, because it is required for implementing version 4 public keys.
In particular, the version 4 fingerprint derivation uses SHA-1.
So as long as an OpenPGP implementation supports version 4 public keys, it will need to implement SHA-1 in at least some scenarios.</t>
        <t>To avoid the risk of uncertain breakage from a maliciously introduced SHA-1 collision, an OpenPGP implementation <bcp14>MAY</bcp14> attempt to detect when a hash input is likely from a known collision attack and then either reject the hash input deliberately or modify the hash output.
This should convert an uncertain breakage (where it is unclear what the effect of a collision will be) to an explicit breakage, which is more desirable for a robust implementation.</t>
        <t><xref target="STEVENS2013"/> describes a method for detecting indicators of well-known SHA-1 collision attacks.
Some example C code implementing this technique can be found at <xref target="SHA1CD"/>.</t>
      </section>
      <section anchor="signature-salt-rationale">
        <name>Advantages of Salted Signatures</name>
        <t>Version 6 signatures include a salt that is hashed first, and it's size depends on the hashing algorithm. This makes version 6 OpenPGP signatures non-deterministic and protects against a broad class of attacks that depend on creating a signature over a predictable message. By selecting a new random salt for each signature made, the signed hashes and the signatures are not predictable.</t>
        <t>While the material to be signed could be attacker controlled, hashing the salt first means that there is no attacker-controlled hashed prefix.
An example of this kind of attack is described in the paper "SHA-1 is a Shambles" <xref target="SHAMBLES"/>, which leverages a chosen prefix collision attack against SHA-1.
This means that an adversary carrying out a chosen-message attack will not be able to control the hash that is being signed and will need to break second-preimage resistance instead of the simpler collision resistance to create two messages having the same signature.
The size of the salt is bound to the hash function to match the expected collision-resistance level and is at least 16 octets.</t>
        <t>In some cases, an attacker may be able to induce a signature to be made, even if they do not control the content of the message. In some scenarios, a repeated signature over the exact same message may risk leakage of part or all of the signing key; for example, see discussion of hardware faults over EdDSA and deterministic ECDSA in <xref target="PSSLR17"/>.
Choosing a new random salt for each signature ensures that no repeated signatures are produced, which mitigates this risk.</t>
      </section>
      <section anchor="ecc-side-channels">
        <name>Elliptic Curve Side Channels</name>
        <t>Side-channel attacks are a concern when a compliant application's use of the OpenPGP format can be modeled by a decryption or signing oracle, for example, when an application is a network service performing decryption to unauthenticated remote users.
ECC scalar multiplication operations used in ECDSA and ECDH are vulnerable to side-channel attacks. Countermeasures can often be taken at the higher protocol level, such as limiting the number of allowed failures or time-blinding the operations associated with each network interface. Mitigations at the scalar multiplication level seek to eliminate any measurable distinction between the ECC point addition and doubling operations.</t>
      </section>
      <section anchor="quick-check-oracle">
        <name>Risks of a Quick Check Oracle</name>
        <t>In winter 2005, Serge Mister and Robert Zuccherato from Entrust released a paper describing a way that the "quick check" in v1 SEIPD and SED packets can be used as an oracle to decrypt two octets of every cipher block <xref target="MZ05"/>.
This check was intended for early detection of session key decryption errors, particularly to detect a wrong passphrase, since v4 SKESK packets do not include an integrity check.</t>
        <t>There is a danger when using the quick check if timing or error information about the check can be exposed to an attacker, particularly via an automated service that allows rapidly repeated queries.</t>
        <t>Disabling the quick check prevents the attack.</t>
        <t>For very large encrypted data whose session key is protected by a passphrase using a v4 SKESK, the quick check may be convenient to the user by informing them early that they typed the wrong passphrase.
But the implementation should use the quick check with care.
The recommended approach for secure and early detection of decryption failure is to encrypt data using v2 SEIPD.
If the session key is public key encrypted, the quick check is not useful as the public key encryption of the session key should guarantee that it is the right session key.</t>
        <t>The quick check oracle attack is a particular type of attack that exploits ciphertext malleability.
For information about other similar attacks, see <xref target="ciphertext-malleability"/>.</t>
      </section>
      <section anchor="pkcs1-errors">
        <name>Avoiding Leaks from PKCS#1 Errors</name>
        <t>The PKCS#1 padding (used in RSA-encrypted and ElGamal-encrypted PKESK) has been found to be vulnerable to attacks in which a system that allows distinguishing padding errors from other decryption errors can act as a decryption and/or signing oracle that can leak the session key or allow signing arbitrary data, respectively <xref target="BLEICHENBACHER-PKCS1"/>.
The number of queries required to carry out an attack can range from thousands to millions, depending on how strict and careful an implementation is in processing the padding.</t>
        <t>To make the attack more difficult, an implementation <bcp14>SHOULD</bcp14> implement strict, robust, and constant time padding checks.</t>
        <t>To prevent the attack, in settings where the attacker does not have access to timing information concerning message decryption, the simplest solution is to report a single error code for all variants of PKESK processing errors as well as SEIPD integrity errors (this also includes session key parsing errors, such as on an invalid cipher algorithm for v3 PKESK, or a session key size mismatch for v6 PKESK). If the attacker may have access to timing information, then a constant time solution is also needed. This requires careful design, especially for v3 PKESK, where session key size and cipher information is typically not known in advance, as it is part of the PKESK encrypted payload.</t>
      </section>
      <section anchor="fingerprint-usability">
        <name>Fingerprint Usability</name>
        <t>This specification uses fingerprints in several places on the wire (e.g., Sections <xref target="revocation-key" format="counter"/>, <xref target="issuer-fingerprint-subpacket" format="counter"/>, and <xref target="intended-recipient-fingerprint" format="counter"/>) and in processing (e.g., in ECDH KDF <xref target="ecdh"/>). An implementation may also use the fingerprint internally, for example, as an index to a keystore.</t>
        <t>Additionally, some OpenPGP users have historically used manual fingerprint comparison to verify the public key of a peer.
For a version 4 fingerprint, this has typically been done with the fingerprint represented as 40 hexadecimal digits, often broken into groups of four digits with whitespace between each group.</t>
        <t>When a human is actively involved, the result of such a verification is dubious.
There is little evidence that most humans are good at precise comparison of high-entropy data, particularly when that data is represented in compact textual form like a hexadecimal <xref target="USENIX-STUDY"/>.</t>
        <t>The version 6 fingerprint makes the challenge for a human verifier even worse.
At 256 bits (compared to version 4's 160-bit fingerprint), a version 6 fingerprint is even harder for a human to successfully compare.</t>
        <t>An OpenPGP implementation should prioritize mechanical fingerprint transfer and comparison where possible and <bcp14>SHOULD NOT</bcp14> promote manual transfer or comparison of full fingerprints by a human unless there is no other way to achieve the desired result.</t>
        <t>While this subsection acknowledges existing practice for human-representable version 4 fingerprints, this document does not attempt to standardize any specific human-readable form of version 6 fingerprint for this discouraged use case.</t>
        <t>NOTE: the topic of interoperable human-in-the-loop key verification needs more work, which will be done in a separate document.</t>
      </section>
      <section anchor="ciphertext-malleability">
        <name>Avoiding Ciphertext Malleability</name>
        <t>If ciphertext can be modified by an attacker but still subsequently decrypted to some new plaintext, it is considered "malleable". A number of attacks can arise in any cryptosystem that uses malleable encryption, so <xref target="RFC4880"/> and later versions of OpenPGP offer mechanisms to defend against it. However, OpenPGP data may have been created before these defense mechanisms were available. Because OpenPGP implementations deal with historic stored data, they may encounter malleable ciphertexts.</t>
	
        <t>When an OpenPGP implementation discovers that it is decrypting data that appears to be malleable, it <bcp14>MUST</bcp14> generate a clear error message that indicates the integrity of the message is suspect, it <bcp14>SHOULD NOT</bcp14> attempt to parse nor release decrypted data to the user, and it <bcp14>SHOULD</bcp14> halt with an error.
Parsing or releasing decrypted data before having confirmed its integrity can leak the decrypted data <xref target="EFAIL"/> <xref target="MRLG15"/>.</t>
        <t>In the case of AEAD encrypted data, if the authentication tag fails to verify, the implementation <bcp14>MUST NOT</bcp14> attempt to parse nor release decrypted data to the user, and it <bcp14>MUST</bcp14> halt with an error.</t>
        <t>An implementation that encounters malleable ciphertext <bcp14>MAY</bcp14> choose to release cleartext to the user if it is not encrypted using AEAD, it is known to be dealing with historic archived legacy data, and the user is aware of the risks.</t>
        <t>In the case of AEAD encrypted messages, if the message is truncated, i.e., the final zero-octet chunk and possibly (part of) some chunks before it are missing, the implementation <bcp14>MAY</bcp14> choose to release cleartext from the fully authenticated chunks before it to the user if it is operating in a streaming fashion, but it <bcp14>MUST</bcp14> indicate a clear error message as soon as the truncation is detected.</t>
        <t>Any of the following OpenPGP data elements indicate that malleable ciphertext is present:</t>
        <ul spacing="normal">
          <li>
            <t>All Symmetrically Encrypted Data packets (<xref target="sed"/>).</t>
          </li>
          <li>
            <t>Within any encrypted container, any Compressed Data packet (<xref target="compressed-data"/>) where there is a decompression failure.</t>
          </li>
          <li>
            <t>Any version 1 Symmetrically Encrypted and Integrity Protected Data packet (<xref target="version-one-seipd"/>) where the internal Modification Detection Code does not validate.</t>
          </li>
          <li>
            <t>Any version 2 Symmetrically Encrypted and Integrity Protected Data packet (<xref target="version-two-seipd"/>) where the authentication tag of any chunk fails or where there is no final zero-octet chunk.</t>
          </li>
          <li>
            <t>Any Secret-Key packet with encrypted secret key material (<xref target="secret-key-encryption"/>) where there is an integrity failure, based on the value of the secret key protection octet:  </t>
	    
            <ul spacing="normal">
              <li>
                <t>Value 253 (AEAD): where the AEAD authentication tag is invalid.</t>
              </li>
              <li>
                <t>Value 254 (CFB): where the SHA1 checksum is mismatched.</t>
              </li>
              <li>
                <t>Value 255 (MalleableCFB) or raw cipher algorithm: where the trailing 2-octet checksum does not match.</t>
              </li>
            </ul>
          </li>
        </ul>
        <t>To avoid these circumstances, an implementation that generates OpenPGP encrypted data <bcp14>SHOULD</bcp14> select the encrypted container format with the most robust protections that can be handled by the intended recipients.
In particular:</t>
        <ul spacing="normal">
          <li>
            <t>The SED packet is deprecated and <bcp14>MUST NOT</bcp14> be generated.</t>
          </li>
          <li>
            <t>When encrypting to one or more public keys:  </t>
            <ul spacing="normal">
              <li>
                <t>If all recipient keys indicate support for a version 2 Symmetrically Encrypted and Integrity Protected Data packet in their Features signature subpacket (<xref target="features-subpacket"/>), if all recipient keys are version 6 keys without a Features signature subpacket, or the implementation can otherwise infer that all recipients support v2 SEIPD packets, the implementation <bcp14>SHOULD</bcp14> encrypt using a v2 SEIPD packet.</t>
              </li>
              <li>
                <t>If one of the recipients does not support v2 SEIPD packets, then the message generator <bcp14>MAY</bcp14> use a v1 SEIPD packet instead.</t>
              </li>
            </ul>
          </li>
          <li>
            <t>Passphrase-protected secret key material in a version 6 Secret Key or version 6 Secret Subkey packet <bcp14>SHOULD</bcp14> be protected with AEAD encryption (S2K usage octet 253) unless it will be transferred to an implementation that is known to not support AEAD.
An implementation should be aware that, in scenarios where an attacker has write access to encrypted private keys, CFB-encrypted keys (S2K usage octet 254 or 255) are vulnerable to corruption attacks that can cause leakage of secret data when the secret key is used <xref target="KOPENPGP"/> <xref target="KR02"/>.</t>
          </li>
        </ul>
        <t>Implementers should implement AEAD (v2 SEIPD and S2K usage octet 253) promptly and encourage its spread.</t>
        <t>Users are <bcp14>RECOMMENDED</bcp14> to migrate to AEAD.</t>
      </section>
      <section anchor="secure-sessionkey-reuse">
        <name>Secure Use of the v2 SEIPD Session-Key-Reuse Feature</name>
        <t>The salted key derivation of v2 SEIPD packets (<xref target="version-two-seipd"/>) allows the recipient of an encrypted message to reply to the sender and all other recipients without needing their public keys but by using the same v6 PKESK packets it received and a different random salt value.
This ensures a secure mechanism on the cryptographic level that enables the use of message encryption in cases where a sender does not have a copy of an encryption-capable certificate for one or more participants in the conversation and thus can enhance the overall security of an application. However, care must be taken when using this mechanism not to create security vulnerabilities, such as the following:</t>
        <ul spacing="normal">
          <li>
            <t>Replying to only a subset of the original recipients and the original sender by use of the session-key-reuse feature would mean that the remaining recipients (including the sender) of the original message could read the encrypted reply message, too.</t>
          </li>
          <li>
            <t>Adding a further recipient to the reply that is encrypted using the session-key-reuse feature gives that further recipient also cryptographic access to the original message that is being replied to (and potentially to a longer history of previous messages).</t>
          </li>
          <li>
            <t>A modification of the list of recipients addressed in the above points also needs to be safeguarded when a message is initially composed as a reply with session-key reuse but then is stored (e.g., as a draft) and later reopened for further editing and to be finally sent.</t>
          </li>
          <li>
            <t>There is the potential threat that an attacker with network or mailbox access, who is at the same time a recipient of the original message, silently removes themselves from the message before the victim's client receives it.
The victim's client that then uses the mechanism for replying with session-key reuse would unknowingly compose an encrypted message that could be read by the attacker.
Implementations are encouraged to use the Intended Recipient Fingerprint subpacket (<xref target="intended-recipient-fingerprint"/>) when composing messages and checking the consistency of the set of recipients of a message before replying to it with session-key reuse.</t>
          </li>
          <li>	    
	    <t>When using the session-key-reuse feature in any higher-layer protocol, care should be taken to ensure that there is no other potentially interfering practice of session-key reuse established in that protocol. Such interfering session-key reuse could, for instance, be given -- if an initial message is already composed -- by reusing the session key of an existing encrypted file that may have been shared among a group of users already. Using the session-key-reuse feature to compose an encrypted reply to such a message would unknowingly give this whole group of users cryptographic access to the encrypted message.</t>
          </li>
          <li>
            <t>Generally, the use of the session-key-reuse feature should be under the control of the user. Specifically, care should be taken so that this feature is not silently used when the user assumes that proper public key encryption is used. This can be the case, for instance, when the public key of one of the recipients of the reply is known but has expired. Special care should be taken to ensure that users do not get caught in continued use of the session-key reuse unknowingly but instead receive the chance to switch to proper fresh public key encryption as soon as possible.</t>
          </li>
          <li>
            <t>Whenever possible, a client should prefer a fresh public key encryption over the session-key reuse.</t>
          </li>
        </ul>
        <t>Even though this is not necessarily a security aspect, note that initially composing an encrypted reply using the session-key-reuse feature on one client and then storing it (e.g., as a draft) and later reopening the stored unfinished reply with another client that does not support the session-key-reuse feature may lead to interoperability problems.</t>
        <t>Avoiding the pitfalls described above requires context-specific expertise.
An implementation should only make use of the session-key-reuse feature in any particular application layer when it can follow reasonable documentation about how to deploy the feature safely in the specific application.
At the time of this writing, there is no known documentation about safe reuse of OpenPGP session keys for any specific context. An implementer that intends to make use of this feature should publish their own proposed guidance for others to review.</t>
      </section>
      <section anchor="escrowed-revocations">
        <name>Escrowed Revocation Signatures</name>
        <t>A keyholder, Alice, may wish to designate a third party to be able to revoke her own key.</t>
        <t>The preferred way for Alice to do this is to produce a specific Revocation Signature (Signature Type ID 0x20, 0x28, or 0x30) and distribute it securely to a preferred revoker who can hold it in escrow. The preferred revoker can then publish the escrowed Revocation Signature at whatever time is deemed appropriate rather than generating the Revocation Signature themselves.</t>
        <t>There are multiple advantages of using an escrowed Revocation Signature over the deprecated Revocation Key subpacket (<xref target="revocation-key"/>):</t>
        <ul spacing="normal">
          <li>
            <t>The keyholder can constrain what types of revocation the preferred revoker can issue, by only escrowing those specific signatures.</t>
          </li>
          <li>
            <t>There is no public/visible linkage between the keyholder and the preferred revoker.</t>
          </li>
          <li>
            <t>Third parties can verify the revocation without needing to find the key of the preferred revoker.</t>
          </li>
          <li>
            <t>The preferred revoker doesn't even need to have a public OpenPGP Key if some other secure transport is possible between them and the keyholder.</t>
          </li>
          <li>
            <t>Implementation support for enforcing a revocation from an authorized Revocation Key subpacket is uneven and unreliable.</t>
          </li>
          <li>
            <t>If the fingerprint mechanism suffers a cryptanalytic flaw, the escrowed Revocation Signature is not affected.</t>
          </li>
        </ul>
        <t>A Revocation Signature may also be split up into shares and distributed among multiple parties, requiring some subset of those parties to collaborate before the escrowed Revocation Signature is recreated.</t>
      </section>
      <section anchor="CSPRNG">
        <name>Random Number Generation and Seeding</name>
        <t>OpenPGP requires a cryptographically secure pseudorandom number generator (CSPRNG). In most cases, the operating system provides an appropriate facility such as a <tt>getrandom()</tt> syscall on Linux or BSD, which should be used absent other (for example, performance) concerns.
It is <bcp14>RECOMMENDED</bcp14> to use an existing CSPRNG implementation as opposed to crafting a new one.
Many adequate cryptographic libraries are already available under favorable license terms. Should those prove unsatisfactory, <xref target="RFC4086"/> provides guidance on the generation of random values.</t>
        <t>OpenPGP uses random data with three different levels of visibility:</t>
        <ul spacing="normal">
          <li>
            <t>In publicly visible fields such as nonces, IVs, public padding material, or salts.</t>
          </li>
          <li>
            <t>In shared-secret values, such as session keys for encrypted data or padding material within an encrypted packet.</t>
          </li>
          <li>
            <t>In entirely private data, such as asymmetric key generation.</t>
          </li>
        </ul>
        <t>With a properly functioning CSPRNG, this range of visibility does not present a security problem, as it is not feasible to determine the CSPRNG state from its output.
However, with a broken CSPRNG, it may be possible for an attacker to use visible output to determine the CSPRNG internal state and thereby predict less-visible data like keying material, as documented in <xref target="CHECKOWAY"/>.</t>
        <t>An implementation can provide extra security against this form of attack by using separate CSPRNGs to generate random data with different levels of visibility.</t>
      </section>
      <section anchor="traffic-analysis">
        <name>Traffic Analysis</name>
        <t>When sending OpenPGP data through the network, the size of the data may leak information to an attacker. There are circumstances where such a leak could be unacceptable from a security perspective.</t>
        <t>For example, if possible cleartext messages for a given protocol are known to be either <tt>yes</tt> (3 octets) or <tt>no</tt> (2 octets) and the messages are sent within a Symmetrically Encrypted and Integrity Protected Data packet, the length of the encrypted message will reveal the contents of the cleartext.</t>
        <t>In another example, sending an OpenPGP Transferable Public Key over an encrypted network connection might reveal the length of the certificate. Since the length of an OpenPGP certificate varies based on the content, an external observer interested in metadata (e.g., which individual is trying to contact another individual) may be able to guess the identity of the certificate sent, if its length is unique.</t>
        <t>In both cases, an implementation can adjust the size of the compound structure by including a Padding packet (see <xref target="padding-packet"/>).</t>
      </section>
      <section anchor="surreptitious-forwarding">
        <name>Surreptitious Forwarding</name>
        <t>When an attacker obtains a signature for some text, e.g., by receiving a signed message, they may be able to use that signature maliciously by sending a message purporting to come from the original sender, with the same body and signature, to a different recipient.
To prevent this, an implementation <bcp14>SHOULD</bcp14> implement the Intended Recipient Fingerprint subpacket (<xref target="intended-recipient-fingerprint"/>).</t>
      </section>
      <section anchor="subpacket-section-guidance">
        <name>Hashed vs. Unhashed Subpackets</name>
        <t>Each OpenPGP signature can have subpackets in two different sections.
The first set of subpackets (the "hashed section") is covered by the signature itself.
The second set has no cryptographic protections and is used for advisory material only, including locally stored annotations about the signature.</t>
        <t>For example, consider an implementation working with a specific signature that happens to know that the signature was made by a certain key, even though the signature contains no Issuer Fingerprint subpacket (<xref target="issuer-fingerprint-subpacket"/>) in the hashed section.
That implementation <bcp14>MAY</bcp14> synthesize an Issuer Fingerprint subpacket and store it in the unhashed section so that it will be able to recall which key issued the signature in the future.</t>
        <t>Some subpackets are only useful when they are in the hashed section, and an implementation <bcp14>SHOULD</bcp14> ignore them when they are found with unknown provenance in the unhashed section.
For example, a Preferred AEAD Ciphersuites subpacket (<xref target="preferred-v2-seipd"/>) in a Direct Key self-signature indicates the preferences of the keyholder when encrypting v2 SEIPD data to the key.
An implementation that observes such a subpacket found in the unhashed section would open itself to an attack where the recipient's certificate is tampered with to encourage the use of a specific cipher or mode of operation.</t>
      </section>
      <section anchor="compress-bomb">
        <name>Malicious Compressed Data</name>
        <t>It is possible to form a compression quine that produces itself upon decompression, leading to infinite regress in any implementation willing to parse arbitrary numbers of layers of compression. This could cause resource exhaustion, which itself could lead to termination by the operating system. If the operating system creates a "crash report", that report could contain confidential information.</t>
        <t>An OpenPGP implementation <bcp14>SHOULD</bcp14> limit the number of layers of compression it is willing to decompress in a single message.</t>
      </section>
    </section>
    <section anchor="implementation-considerations">
      <name>Implementation Considerations</name>
      <t>This section is a collection of comments to help an implementer who has a particular interest in backward compatibility. Often the differences are small, but small differences are frequently more vexing than large differences. Thus, this is a non-comprehensive list of potential problems and gotchas for a developer who is trying to achieve backward compatibility.</t>
      <ul spacing="normal">
        <li>
          <t>There are many possible ways for two keys to have the same key material but different fingerprints (and thus different Key IDs). For example, since a version 4 fingerprint is constructed by hashing the key creation time along with other things, two version 4 keys created at different times yet with the same key material will have different fingerprints.</t>
        </li>
        <li>
          <t>OpenPGP does not put limits on the size of public keys.
However, larger keys are not necessarily better keys.
Larger keys take more computation time to use, and this can quickly become impractical.
Different OpenPGP implementations may also use different upper bounds for public key sizes, so care should be taken when choosing sizes to maintain interoperability.</t>
        </li>
        <li>
          <t>ASCII Armor is an optional feature of OpenPGP.
The OpenPGP Working Group strives for a minimal set of mandatory-to-implement features, and since there could be useful implementations that only use binary object formats, this is not a "<bcp14>MUST</bcp14>" feature for an implementation.
For example, an implementation that is using OpenPGP as a mechanism for file signatures may find ASCII Armor unnecessary.
OpenPGP permits an implementation to declare what features it does and does not support, but ASCII Armor is not one of these.
Since most implementations allow binary and armored objects to be used indiscriminately, an implementation that does not implement ASCII Armor may find itself with compatibility issues with general-purpose implementations.
Moreover, implementations of OpenPGP-MIME <xref target="RFC3156"/> already have a requirement for ASCII Armor, so those implementations will necessarily have support.</t>
        </li>
        <li>
          <t>What this document calls the "Legacy packet format" (<xref target="legacy-packet-format"/>) is what older documents called the "old packet format".
It is the packet format used by implementations predating <xref target="RFC2440"/>.
The current "OpenPGP packet format" (<xref target="openpgp-packet-format"/>) was called the "new packet format" by older RFCs. This is the format introduced in <xref target="RFC2440"/> and maintained through <xref target="RFC4880"/> to this document.</t>
        </li>
      </ul>
      <section anchor="constrained-legacy-fingerprint-storage-for-v6-keys">
        <name>Constrained Legacy Fingerprint Storage for Version 6 Keys</name>
        <t>Some OpenPGP implementations have fixed length constraints for key fingerprint storage that will not fit all 32 octets of a version 6 fingerprint.
For example, <xref target="OPENPGPCARD"/> reserves 20 octets for each stored fingerprint.</t>
        <t>An OpenPGP implementation <bcp14>MUST NOT</bcp14> attempt to map any part of a version 6 fingerprint to such a constrained field unless the relevant specification for the constrained environment has explicit guidance for storing a version 6 fingerprint that distinguishes it from a version 4 fingerprint. An implementation interacting with such a constrained field <bcp14>SHOULD</bcp14> directly calculate the version 6 fingerprint from public key material and associated metadata instead of relying on the constrained field.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      
<name>IANA Considerations</name>
      <t>This document obsoletes <xref target="RFC4880"/>. IANA has updated all registration information that references <xref target="RFC4880"/> to reference this RFC instead.</t>
      <section anchor="rename-pretty-good-privacy-pgp-protocol-group-to-openpgp">
        <name>Renamed Protocol Group</name>
        <t>IANA bundles a set of registries associated with a particular protocol into a "protocol group". IANA has updated the name of the "Pretty Good Privacy (PGP)" protocol group (i.e., the group of registries described at <eref target="https://www.iana.org/assignments/pgp-parameters" brackets="angle"/>) to "OpenPGP". IANA has arranged a permanent redirect from the existing URL to the new URL for the registries in this protocol group. All further updates specified below are for registries within this same OpenPGP protocol group.</t>
      </section>
      <section anchor="registries-to-be-renamed-and-updated">
        <name>Renamed and Updated Registries</name>
        <t>IANA has renamed the "PGP String-to-Key (S2K)" registry to "OpenPGP String-to-Key (S2K) Types" and updated its contents as shown in  <xref target="s2k-types-registry"/>.</t>

<t>IANA has renamed the "PGP Packet Types/Tags" registry to "OpenPGP Packet Types" and updated its contents as shown in <xref target="packet-types-registry"/>.</t>

        <t>IANA has renamed the "Signature Subpacket Types" registry to "OpenPGP Signature Subpacket Types" and updated its contents as shown in <xref target="signature-subpacket-types-registry"/>.</t>

<t>IANA has renamed the "Key Server Preference Extensions" registry to "OpenPGP Key Server Preference Flags" and updated its contents as shown in <xref target="key-server-preference-flags-registry"/>.</t>

        <t>IANA has renamed the "Key Flags Extensions" registry to "OpenPGP Key Flags" and updated its contents as shown in <xref target="key-flags-registry"/>.</t>

<t>IANA has renamed the "Reason for Revocation Extensions" registry to "OpenPGP Reason for Revocation (Revocation Octet)" and updated its contents as shown in <xref target="reason-for-revocation-code-registry"/>.</t>

        <t>IANA has renamed the "Implementation Features" registry to "OpenPGP Features Flags" and updated its contents as shown in <xref target="features-flags-registry"/>.</t>

        <t>IANA has renamed the "PGP User Attribute Types" registry to "OpenPGP User Attribute Subpacket Types" and updated its contents as shown in <xref target="user-attr-subpacket-types-registry"/>.</t>

        <t>IANA has renamed the "Image Format Subpacket Types" registry to "OpenPGP Image Attribute Encoding Format" and updated its contents as shown in <xref target="image-attr-encoding-format-registry"/>.</t>

        <t>IANA has renamed the "Public Key Algorithms" registry to "OpenPGP Public Key Algorithms" and updated its contents as shown in <xref target="pubkey-algo-registry"/>.</t>

        <t>IANA has renamed the "Symmetric Key Algorithms" registry to "OpenPGP Symmetric Key Algorithms" and updated its contents as shown in <xref target="symkey-algorithms-registry"/>.</t>

        <t>IANA has renamed the "Compression Algorithms" registry to "OpenPGP Compression Algorithms" and updated its contents as shown in <xref target="compression-algorithms-registry"/>.</t>

        <t>IANA has renamed the "Hash Algorithms" registry to "OpenPGP Hash Algorithms" and updated its contents as shown in <xref target="hash-algorithms-registry"/>.</t>

      </section>
      <section anchor="removed-registries">
        <name>Removed Registry</name>
        <t>IANA has marked the empty "New Packet Versions" registry as OBSOLETE.</t>
        <t>A tombstone note has been added to the OpenPGP protocol group with the following content:</t>

<blockquote>Those wishing to use the removed "New Packet Versions" registry should instead register new versions of the relevant packets in the "OpenPGP Key and Signature Versions", "OpenPGP Key IDs and Fingerprints", and "OpenPGP Encrypted Message Packet Versions" registries.</blockquote>
      </section>
      <section anchor="added-registries">
        <name>Added Registries</name>
        <t>IANA has added the following registries in the OpenPGP protocol group. Note that the initial contents of each registry is shown in the corresponding table.</t>
        <ul spacing="normal">
          <li>
            <t>"OpenPGP Secret Key Encryption (S2K Usage Octet)" (<xref target="secret-key-protection-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Signature Types" (<xref target="signature-types-registry"/>).</t>
          </li>

          <li>
            <t>"OpenPGP Signature Notation Data Subpacket Notation Flags" (<xref target="sig-note-data-note-flags-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Signature Notation Data Subpacket Types" (<xref target="sig-note-data-subpacket-types"/>).</t>
          </li>

          <li>
            <t>"OpenPGP Key IDs and Fingerprints" (<xref target="key-id-fingerprint-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Image Attribute Versions" (<xref target="image-attribute-version-registry"/>).</t>
          </li>

          <li>
            <t>"OpenPGP Armor Header Lines" (<xref target="armor-header-line-registry"/>).</t>
          </li>

          <li>
            <t>"OpenPGP Armor Header Keys" (<xref target="armor-header-key-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP ECC Curve OIDs and Usage" (<xref target="ecc-oid-usage-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP ECC Curve-Specific Wire Formats" (<xref target="ecc-wire-formats-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Hash Algorithm Identifiers for RSA Signatures' Use of EMSA-PKCS1-v1_5 Padding" (<xref target="emsa-hash-oids-registry"/>).</t>
          </li>

          <li>
            <t>"OpenPGP AEAD Algorithms" (<xref target="aead-algorithms-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Encrypted Message Packet Versions" (<xref target="encrypted-packet-versions-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Key and Signature Versions" (<xref target="signed-packet-versions-registry"/>).</t>
          </li>


          <li>
            <t>"OpenPGP Elliptic Curve Point Wire Formats" (<xref target="ec-point-wire-formats-registry"/>).</t>
          </li>

          <li>
            <t>"OpenPGP Elliptic Curve Scalar Encodings" (<xref target="ec-scalar-wire-formats-registry"/>).</t>
          </li>

          <li>
            <t>"OpenPGP ECDH KDF and KEK Parameters" (<xref target="ecdh-kdf-kek-parameters-registry"/>).</t>
          </li>
        </ul>
      </section>
      <section anchor="registration-policies">
        <name>Registration Policies</name>
        <t>All registries within the OpenPGP protocol group, with the exception of the registries listed in <xref target="rfc-required-registries"/>, use the Specification Required registration policy; see <xref section="4.6" sectionFormat="of" target="RFC8126"/>.
This policy means that review and approval by a designated expert is required and that the IDs and their meanings must be documented in a permanent and readily available public specification, in sufficient detail, so that interoperability between independent implementations is possible.</t>
        <section anchor="rfc-required-registries">
          <name>Registries That Use RFC Required</name>
          <t>The following registries use the RFC Required registration policy, as described in <xref section="4.7" sectionFormat="of" target="RFC8126"/>:</t>
          <ul spacing="normal">
            <li>
              <t>"OpenPGP Packet Types" (<xref target="packet-types-registry"/>).</t>
            </li>
            <li>
              <t>"OpenPGP Key IDs and Fingerprints" (<xref target="key-id-fingerprint-registry"/>).</t>
            </li>

            <li>
              <t>"OpenPGP Encrypted Message Packet Versions" (<xref target="encrypted-packet-versions-registry"/>).</t>
            </li>
            <li>
              <t>"OpenPGP Key and Signature Versions" (<xref target="signed-packet-versions-registry"/>).</t>
            </li>
          </ul>
        </section>
      </section>
      <section anchor="designated-experts">
        <name>Designated Experts</name>
        <t>The designated experts will determine whether the new registrations retain the security properties that are expected by the base implementation and whether these new registrations do not cause interoperability issues with existing implementations, other than not producing or consuming the IDs associated with these new registrations.
Registration proposals that fail to meet these criteria could instead be proposed as new work items for the OpenPGP Working Group or its successor.</t>
        <t>The subsections below describe specific guidance for classes of registry updates that a designated expert will consider.</t>
        <t>The designated experts should also consider <xref target="meta-considerations-for-expansion"/> when reviewing proposed additions to the OpenPGP protocol group.</t>
        <section anchor="key-and-signature-versions">
          <name>Key and Signature Versions</name>
          <t>When defining a new version of OpenPGP Keys or Signatures, the "OpenPGP Key and Signature Versions" registry (<xref target="signed-packet-versions-registry"/>) should be updated. When a new version of OpenPGP Key is defined, the "OpenPGP Key IDs and Fingerprints" registry (<xref target="key-id-fingerprint-registry"/>) should also be updated.</t>
        </section>
        <section anchor="encryption-versions">
          <name>Encryption Versions</name>
          <t>When defining a new version of the Symmetrically Encrypted and Integrity Protected Data packet (<xref target="seipd"/>), Public Key Encrypted Session Key packet (<xref target="pkesk"/>), and/or Symmetric Key Encrypted Session Key packet (<xref target="skesk"/>), the "OpenPGP Encrypted Message Packet Versions" registry (<xref target="encrypted-packet-versions-registry"/>) should be updated. When the SEIPD is updated, consider also adding a corresponding flag to the "OpenPGP Features Flags" registry (<xref target="features-flags-registry"/>).</t>
        </section>
        <section anchor="algorithms">
          <name>Algorithms</name>
          <t><xref target="constants"/> lists the cryptographic and compression algorithms that OpenPGP uses.
Adding new algorithms is usually simple; in some cases, allocating an ID and pointing to a reference is only needed. But some algorithm registries require some subtle additional details when a new algorithm is introduced.</t>
          <section anchor="elliptic-curve-algorithms">
            <name>Elliptic Curve Algorithms</name>
            <t>To register a new elliptic curve for use with OpenPGP, its OID needs to be registered in the "OpenPGP ECC Curve OIDs and Usage" registry (<xref target="ecc-oid-usage-registry"/>), its wire format needs to be documented in the "OpenPGP ECC Curve-Specific Wire Formats" registry (<xref target="ecc-wire-formats-registry"/>), and if used for ECDH, its KDF and KEK parameters must be populated in the "OpenPGP ECDH KDF and KEK Parameters" registry (<xref target="ecdh-kdf-kek-parameters-registry"/>). If the wire format(s) used is not already defined in the "OpenPGP Elliptic Curve Point Wire Formats" (<xref target="ec-point-wire-formats-registry"/>) or "OpenPGP Elliptic Curve Scalar Encodings" (<xref target="ec-scalar-wire-formats-registry"/>) registries, they should be defined there as well.</t>
          </section>
          <section anchor="symmetric-key-algorithms">
            <name>Symmetric Key Algorithms</name>
            <t>When registering a new symmetric cipher with a block size of 64 or 128 bits and a key size that is a multiple of 64 bits, no new considerations are needed.</t>
            <t>If the new cipher has a different block size, there needs to be additional documentation describing how to use the cipher in CFB mode.</t>
            <t>If the new cipher has an unusual key size, then padding needs to be considered for X25519 and X448 key wrapping, which currently needs no padding.</t>
          </section>
          <section anchor="hash-algorithms">
            <name>Hash Algorithms</name>
            <t>When registering a new hash algorithm in the "OpenPGP Hash Algorithms" registry (<xref target="hash-algorithms-registry"/>), if the algorithm is also to be used with RSA signing schemes, it must also have an entry in the "OpenPGP Hash Algorithm Identifiers for RSA Signatures' Use of EMSA-PKCS1-v1_5 Padding" registry (<xref target="emsa-hash-oids-registry"/>).</t>
          </section>
        </section>
      </section>
    </section>
  </middle>
  <back>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <reference anchor="BLOWFISH" target="https://www.schneier.com/academic/archives/1994/09/description_of_a_new.html">
          <front>
            <title>Description of a New Variable-Length Key, 64-Bit Block Cipher (Blowfish)</title>
            <author initials="B." surname="Schneier">
              <organization/>
            </author>
            <date year="1993" month="December"/>
          </front>
	  <refcontent>Fast Software Encryption, Cambridge Security Workshop Proceedings, pp. 191-204</refcontent>
        </reference>
        <reference anchor="BZ2" target="https://sourceware.org/bzip2/">
          <front>
            <title>bzip2 and libbzip2</title>
            <author>
              <organization>bzip2</organization>
            </author>
            <date year="2010"/>
          </front>
        </reference>

        <reference anchor="EAX" target="https://seclab.cs.ucdavis.edu/papers/eax.pdf">
          <front>
            <title>A Conventional Authenticated-Encryption Mode</title>
            <author initials="M." surname="Bellare">
              <organization/>
            </author>
            <author initials="P." surname="Rogaway">
              <organization/>
            </author>
            <author initials="D." surname="Wagner">
              <organization/>
            </author>
            <date year="2003" month="April"/>
          </front>
        </reference>

        <reference anchor="ELGAMAL">
          <front>
            <title>A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms</title>
            <author initials="T." surname="Elgamal">
              <organization/>
            </author>
            <date month="July" year="1985"/>
          </front>
	  <seriesInfo name="DOI" value="10.1109/TIT.1985.1057074"/>
          <refcontent>IEEE Transactions on Information Theory, Vol. 31, Issue 4, pp. 469-472</refcontent>
        </reference>

        <reference anchor="IDEA" target="https://link.springer.com/chapter/10.1007/3-540-46877-3_35">
          <front>
            <title>A Proposal for a New Block Encryption Standard</title>
            <author initials="X." surname="Lai">
              <organization/>
            </author>
	      <author initials="J. L." surname="Massey">
              <organization/>
            </author>
            <date month="January" year="1991"/>
          </front>
          <refcontent>Advances in Cryptology - EUROCRYPT '90, Vol. 473, pp. 389-404</refcontent>
	  <seriesInfo name="DOI" value="10.1007/3-540-46877-3_35"/>
        </reference>

        <reference anchor="ISO10646" target="https://www.iso.org/standard/76835.html">
          <front>
            <title>Information technology - Universal coded character set (UCS)</title>
            <author>
              <organization>ISO</organization>
            </author>
            <date month="December" year="2020"/>
          </front>
          <seriesInfo name="ISO/IEC" value="10646:2020"/>
        </reference>

        <reference anchor="JFIF" target="https://www.itu.int/rec/T-REC-T.871-201105-I">
          <front>
            <title>Information technology - Digital compression and coding of continuous-tone still images: JPEG File Interchange Format (JFIF)</title>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date year="2011" month="May"/>
          </front>
          <seriesInfo name="Recommendation" value="ITU-T T.871"/>
        </reference>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1321.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1950.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1951.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2144.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2822.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3156.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3394.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3713.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5322.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7253.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7748.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8018.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8032.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9106.xml"/>

        <reference anchor="RIPEMD-160">
          <front>
            <title>Information technology - Security techniques - Hash-functions - Part 3: Dedicated hash-functions</title>
            <author>
              <organization>ISO</organization>
            </author>
            <date month="May" year="1998"/>
          </front>
          <seriesInfo name="ISO/IEC" value="10118-3:1998"/>
        </reference>

        <reference anchor="SP800-38A" target="https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38a.pdf">
          <front>
            <title>Recommendation for Block Cipher Modes of Operation: Methods and Techniques</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date year="2001" month="December"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-38A"/>
	  <seriesInfo name="DOI" value="10.6028/NIST.SP.800-38A"/>
        </reference>

         <reference anchor="SP800-38D" target="https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38d.pdf">
          <front>
            <title>Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</title>
            <author>
            <organization>NIST</organization>
            </author>
            <date year="2007" month="November"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-38D"/>
	  <seriesInfo name="DOI" value="10.6028/NIST.SP.800-38D"/>
         </reference>
	 
        <reference anchor="SP800-56A" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
         nist.sp.800-56Ar3.pdf">
          <front>
            <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
            <author>
            <organization>NIST</organization>
            </author>
            <date year="2018" month="April"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-56A Revision 3"/>
	  <seriesInfo name="DOI" value="10.6028/NIST.SP.800-56Ar"/>
        </reference>
	
        <reference anchor="SP800-67" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-67r2.pdf">
          <front>
            <title>Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher</title>
            <author>
             <organization>NIST</organization>
            </author>
            <date year="2017" month="November"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-67 Revision 2"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-67r2"/>
        </reference>

        <reference anchor="TWOFISH" target="https://www.schneier.com/wp-content/uploads/2016/02/paper-twofish-paper.pdf">
          <front>
            <title>Twofish: A 128-Bit Block Cipher</title>
            <author initials="B." surname="Schneier">
              <organization/>
            </author>
            <author initials="J." surname="Kelsey">
              <organization/>
            </author>
            <author initials="D." surname="Whiting">
              <organization/>
            </author>
            <author initials="D." surname="Wagner">
              <organization/>
            </author>
            <author initials="C." surname="Hall">
              <organization/>
            </author>
            <author initials="N." surname="Ferguson">
              <organization/>
            </author>
            <date month="June" year="1998"/>
          </front>
        </reference>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

	
        <reference anchor="FIPS186" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf">
          <front>
            <title>Digital Signature Standard (DSS)</title>
            <author>
              <organization>NIST</organization> 
            </author>
            <date month="February" year="2023"/>
          </front>
          <seriesInfo name="FIPS PUB" value="186-5"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.186-5"/>
        </reference>


        <reference anchor="AES" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197-upd1.pdf">
          <front>
            <title>Advanced Encryption Standard (AES)</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date month="November" year="2001"/>
          </front>
          <seriesInfo name="FIPS PUB" value="197"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.197-upd1"/>
	  <refcontent>Updated May 2023</refcontent>
        </reference>

        <reference anchor="FIPS180" target="https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.180-4.pdf">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date month="August" year="2015"/>
          </front>
          <seriesInfo name="FIPS PUB" value="180-4"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
        </reference>

        <reference anchor="FIPS202" target="https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.202.pdf">
          <front>
            <title>SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date month="August" year="2015"/>
          </front>
          <seriesInfo name="FIPS PUB" value="202"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.202"/>
        </reference>

      </references>
      <references>
        <name>Informative References</name>

        <reference anchor="BLEICHENBACHER">
          <front>
            <title>Generating ElGamal Signatures Without Knowing the Secret Key</title>
            <author initials="D." surname="Bleichenbacher">
              <organization/>
            </author>
            <date month="May" year="1996"/>
          </front>
          <refcontent>EUROCRYPT'96: International Conference on the Theory and Applications of Cryptographic Techniques Proceedings, Vol. 1070, pp. 10-18</refcontent>
        </reference>

        <reference anchor="BLEICHENBACHER-PKCS1" target="http://archiv.infsec.ethz.ch/education/fs08/secsem/Bleichenbacher98.pdf">
          <front>
            <title>Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1</title>
            <author initials="D." surname="Bleichenbacher">
              <organization/>
            </author>
            <date month="August" year="1998"/>
          </front>
	  <refcontent>CRYPTO '98: International Cryptology Conference Proceedings, Vol. 1462, pp. 1-12</refcontent>
        </reference>
	
        <reference anchor="C99" target="https://www.iso.org/standard/74528.html">
          <front>
            <title>Information technology - Programming languages: C</title>
            <author>
              <organization>ISO</organization>
            </author>
            <date year="2018" month="June"/>
          </front>
	  <seriesInfo name="ISO/IEC" value="9899:2018"/>
        </reference>

        <reference anchor="EFAIL" target="https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-poddebniak.pdf">
          <front>
            <title>Efail: Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels</title>
            <author initials="D." surname="Poddebniak" fullname="Damian Poddebniak">
              <organization/>
            </author>
            <author initials="C." surname="Dresen" fullname="Christian Dresen">
              <organization/>
            </author>
            <author initials="J." surname="Müller" fullname="Jens Müller">
              <organization/>
            </author>
            <author initials="F." surname="Ising" fullname="Fabian Ising">
              <organization/>
            </author>
            <author initials="S." surname="Schinzel" fullname="Sebastian Schinzel">
              <organization/>
            </author>
            <author initials="S." surname="Friedberger" fullname="Simon Friedberger">
              <organization/>
            </author>
            <author initials="J." surname="Somorovsky" fullname="Juraj Somorovsky">
              <organization/>
            </author>
            <author initials="J." surname="Schwenk" fullname="Jörg Schwenk">
              <organization/>
            </author>
            <date month="August" year="2018"/>
          </front>
          <refcontent>Proceedings of the 27th USENIX Security Symposium</refcontent>
        </reference>

<reference anchor="Errata-2199"  quote-title="false" target="https://www.rfc-editor.org/errata/eid2199">
  <front>
    <title>Erratum ID 2199</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2200" quote-title="false" target="https://www.rfc-editor.org/errata/eid2200">
  <front>
    <title>Erratum ID 2200</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2206" quote-title="false" target="https://www.rfc-editor.org/errata/eid2206">
  <front>
    <title>Erratum ID 2206</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2208" quote-title="false" target="https://www.rfc-editor.org/errata/eid2208">
  <front>
    <title>Erratum ID 2208</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2214" quote-title="false" target="https://www.rfc-editor.org/errata/eid2214">
  <front>
    <title>Erratum ID 2214</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2216" quote-title="false" target="https://www.rfc-editor.org/errata/eid2216">
  <front>
    <title>Erratum ID 2216</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2219" quote-title="false" target="https://www.rfc-editor.org/errata/eid2219">
  <front>
    <title>Erratum ID 2219</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2222" quote-title="false" target="https://www.rfc-editor.org/errata/eid2222">
  <front>
    <title>Erratum ID 2222</title>
    <author >
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2226" quote-title="false" target="https://www.rfc-editor.org/errata/eid2226">
  <front>
    <title>Erratum ID 2226</title>
    <author >
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2234" quote-title="false" target="https://www.rfc-editor.org/errata/eid2234">
  <front>
    <title>Erratum ID 2234</title>
    <author >
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2235" quote-title="false" target="https://www.rfc-editor.org/errata/eid2235">
  <front>
    <title>Erratum ID 2235</title>
    <author >
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2236" quote-title="false" target="https://www.rfc-editor.org/errata/eid2236">
  <front>
    <title>Erratum ID 2236</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2238" quote-title="false" target="https://www.rfc-editor.org/errata/eid2238">
  <front>
    <title>Erratum ID 2238</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2240" quote-title="false" target="https://www.rfc-editor.org/errata/eid2240">
  <front>
    <title>Erratum ID 2240</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2242" quote-title="false" target="https://www.rfc-editor.org/errata/eid2242">
  <front>
    <title>Erratum ID 2242</title>
    <author >
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2243" quote-title="false" target="https://www.rfc-editor.org/errata/eid2243">
  <front>
    <title>Erratum ID 2243</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2270" quote-title="false" target="https://www.rfc-editor.org/errata/eid2270">
  <front>
    <title>Erratum ID 2270</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-2271" quote-title="false" target="https://www.rfc-editor.org/errata/eid2271">
  <front>
    <title>Erratum ID 2271</title>
    <author >
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-3298" quote-title="false" target="https://www.rfc-editor.org/errata/eid3298">
  <front>
    <title>Erratum ID 3298</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-5491" quote-title="false" target="https://www.rfc-editor.org/errata/eid5491">
  <front>
    <title>Erratum ID 5491</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-7545" quote-title="false" target="https://www.rfc-editor.org/errata/eid7545">
  <front>
    <title>Erratum ID 7545</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

<reference anchor="Errata-7889" quote-title="false" target="https://www.rfc-editor.org/errata/eid7889">
  <front>
    <title>Erratum ID 7889</title>
    <author>
      <organization>RFC Errata</organization>
    </author>
    <date />
  </front>
  <refcontent>RFC 4880</refcontent>
</reference>

        <reference anchor="HASTAD">
          <front>
            <title>Solving Simultaneous Modular Equations of Low Degree</title>
            <author initials="J." surname="Hastad" fullname="Johan Hastad">
              <organization/>
            </author>
            <date month="April" year="1988"/>
          </front>
          <seriesInfo name="DOI" value="10.1137/0217019"/>
        </reference>


        <reference anchor="JKS02" target="https://www.schneier.com/academic/archives/2002/01/implementation_of_ch.html">
          <front>
            <title>Implementation of Chosen-Ciphertext Attacks against PGP and GnuPG</title>
            <author initials="K." surname="Jallad" fullname="Kahil Jallad">
              <organization/>
            </author>
            <author initials="J." surname="Katz" fullname="Jonathan Katz">
              <organization/>
            </author>
            <author initials="B." surname="Schneier" fullname="Bruce Schneier">
              <organization/>
            </author>
            <date month="September" year="2002"/>
          </front>
	  <seriesInfo name="DOI" value="0.1007/3-540-45811-5_7"/>
        </reference>

        <reference anchor="KOBLITZ">
          <front>
            <title>A course in number theory and cryptography</title>
            <author initials="N." surname="Koblitz">
              <organization/>
            </author>
            <date year="1997"/>
          </front>
	  <seriesInfo name="DOI" value="10.2307/3618498"/>
	  <refcontent>Chapter VI: Elliptic Curves</refcontent>
        </reference>

        <reference anchor="KOPENPGP" target="https://dl.acm.org/doi/10.1145/3548606.3559363">
          <front>
            <title>Victory by KO: Attacking OpenPGP Using Key Overwriting</title>
            <author initials="L." surname="Bruseghini" fullname="Lara Bruseghini">
              <organization/>
            </author>
            <author initials="K. G." surname="Paterson" fullname="Kenneth G. Paterson">
              <organization/>
            </author>
            <author initials="D." surname="Huigens" fullname="Daniel Huigens">
              <organization/>
            </author>
            <date month="November" year="2022"/>
          </front>
	  <seriesInfo name="DOI" value="10.1145/3548606.3559363"/>
          <refcontent>Proceedings of the ACM SIGSAC Conference on Computer and Communications Security, pp. 411-423</refcontent>
        </reference>

        <reference anchor="KR02" target="https://eprint.iacr.org/2002/076">
          <front>
            <title>Attack on Private Signature Keys of the OpenPGP Format, PGP(TM) Programs and Other Applications Compatible with OpenPGP</title>
            <author initials="V." surname="Klíma" fullname="Vlastimil Klíma">
              <organization/>
            </author>
            <author initials="T." surname="Rosa" fullname="Tomáš Rosa">
              <organization/>
            </author>
            <date month="March" year="2001"/>
          </front>
          <refcontent>Cryptology ePrint Archive, Paper 2002/076</refcontent>
        </reference>

        <reference anchor="MRLG15">
          <front>
            <title>Format Oracles on OpenPGP</title>
            <author initials="F." surname="Maury" fullname="Florian Maury">
              <organization/>
            </author>
            <author initials="JR." surname="Reinhard" fullname="Jean-René Reinhard">
              <organization/>
            </author>
            <author initials="O." surname="Levillain" fullname="Olivier Levillain">
              <organization/>
            </author>
            <author initials="H." surname="Gilbert" fullname="Henri Gilbert">
              <organization/>
            </author>
            <date month="January" year="2015"/>
          </front>
          <seriesInfo name="DOI" value="10.1007/978-3-319-16715-2_12"/>
	  <refcontent>Topics in Cryptology -- CT-RSA 2015, Vol. 9048, pp. 220-236</refcontent>
        </reference>

        <reference anchor="MZ05" target="http://eprint.iacr.org/2005/033">
          <front>
            <title>An Attack on CFB Mode Encryption As Used By OpenPGP</title>
            <author initials="S." surname="Mister" fullname="Serge Mister">
              <organization/>
            </author>
            <author initials="R." surname="Zuccherato" fullname="Robert Zuccherato">
              <organization/>
            </author>
            <date year="2005" month="February"/>
          </front>
          <refcontent>Cryptology ePrint Archive, Paper 2005/033</refcontent>
        </reference>

	
        <reference anchor="OPENPGPCARD" target="https://gnupg.org/ftp/specs/OpenPGP-smart-card-application-3.4.1.pdf">
          <front>
            <title>Functional Specification of the OpenPGP application on ISO Smart Card Operating Systems</title>
            <author initials="A." surname="Pietig" fullname="Achim Pietig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
          </front>
	  <refcontent>Version 3.4.1</refcontent>
        </reference>

	  <reference anchor="PAX"  target="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html">
          <front>
            <title>The Open Group Base Specifications</title>
            <author>
              <organization>The Open Group</organization>
            </author>
            <date year="2018"/>
          </front>
          <seriesInfo name="IEEE Std" value="1003.1-2017"/>
          <refcontent>'pax - portable archive interchange', Issue 7, 2018 Edition </refcontent>
        </reference>

        <reference anchor="PSSLR17" target="https://eprint.iacr.org/2017/1014">
          <front>
            <title>Attacking Deterministic Signature Schemes using Fault Attacks</title>
            <author initials="D." surname="Poddebniak">
              <organization/>
            </author>
            <author initials="J." surname="Somorovsky">
              <organization/>
            </author>
            <author initials="S." surname="Schinzel">
              <organization/>
            </author>
            <author initials="M." surname="Lochter">
              <organization/>
            </author>
            <author initials="P." surname="Rösler">
              <organization/>
            </author>
            <date year="2017" month="October"/>
          </front>
	  <refcontent>Cryptology ePrint Archive, Paper 2017/1014 </refcontent>
        </reference>
	
        <reference anchor="REGEX" target="https://garyhouston.github.io/regex/">
          <front>
            <title>Henry Spencer's regular expression libraries</title>
            <author>
              <organization>regex</organization>
            </author>
            <date/>
          </front>
                 </reference>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1991.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2440.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4880.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5581.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5639.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5869.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6090.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6637.xml"/>

        <reference anchor="SEC1" target="https://www.secg.org/sec1-v2.pdf">
          <front>
            <title>SEC 1: Elliptic Curve Cryptography</title>
            <author>
              <organization>Standards for Efficient Cryptography Group</organization>
            </author>
            <date year="2009" month="May"/>
          </front>
	  <refcontent></refcontent>
        </reference>


        <reference anchor="SHA1CD" target="https://github.com/cr-marcstevens/sha1collisiondetection">
          <front>
            <title>sha1collisiondetection</title>
            <author>
              <organization/>
            </author>
            <date month="December" year="2020"/>
          </front>
	  <refcontent>commit b4a7b0b</refcontent>
        </reference>

        <reference anchor="SHAMBLES" target="https://dl.acm.org/doi/abs/10.5555/3489212.3489316/">
          <front>
            <title>Sha-1 is a shambles: first chosen-prefix collision on sha-1 and application to the PGP web of trust</title>
            <author initials="G." surname="Leurent" fullname="Gaëtan Leurent">
              <organization/>
            </author>
            <author initials="T." surname="Peyrin" fullname="Thomas Peyrin">
              <organization/>
            </author>
            <date month="August" year="2020"/>
          </front>
        </reference>


        <reference anchor="SP800-57" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf">
          <front>
            <title>Recommendation for Key Management: Part 1 - General</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date year="2020" month="May"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-57 Part 1, Revision 5"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-57pt1r5"/>
        </reference>

        <reference anchor="SP800-131A" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">
          <front>
            <title>Transitioning the Use of Cryptographic Algorithms and Key Lengths</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date year="2019" month="March"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-131A, Revision 2"/>
	  <seriesInfo name="DOI" value="10.6028/NIST.SP.800-131Ar2"/>
        </reference>

        <reference anchor="STEVENS2013" target="https://eprint.iacr.org/2013/358">
          <front>
            <title>Counter-cryptanalysis</title>
            <author initials="M." surname="Stevens" fullname="Marc Stevens">
              <organization/>
            </author>
            <date year="2013" month="June"/>
          </front>
	  <refcontent>Cryptology ePrint Archive, Paper 2013/358</refcontent>
        </reference>

        <reference anchor="UNIFIED-DIFF" target="https://www.gnu.org/software/diffutils/manual/html_node/Detailed-Unified.html">
          <front>
            <title>Comparing and Merging Files</title>
            <author>
              <organization>Free Software Foundation</organization>
            </author>
            <date year="2021" month="January"/>
          </front>
	  <refcontent>'Detailed Description of Unified Format', Section 2.2.2.2</refcontent>
        </reference>

        <reference anchor="USENIX-STUDY" target="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_dechand.pdf">
          <front>
            <title>An Empirical Study of Textual Key-Fingerprint Representations</title>
            <author fullname="Sergej Dechand" initials="S." surname="Dechand">
              <organization/>
            </author>
            <author fullname="Dominik Schürmann" initials="D." surname="Schürmann">
              <organization/>
            </author>
            <author fullname="Karoline Busse" initials="K." surname="Busse">
              <organization/>
            </author>
            <author fullname="Yasemin Acar" initials="Y." surname="Acar">
              <organization/>
            </author>
            <author fullname="Sascha Fahl" initials="S." surname="Fahl">
              <organization/>
            </author>
            <author fullname="Matthew Smith" initials="M." surname="Smith">
              <organization/>
            </author>
            <date year="2016" month="August"/>
          </front>
          <seriesInfo name="ISBN" value="978-1-931971-32-4"/>
        </reference>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2978.xml"/>

        <reference anchor="CHECKOWAY">
          <front>
            <title>A Systematic Analysis of the Juniper Dual EC Incident</title>
            <author fullname="Stephen Checkoway" initials="S." surname="Checkoway">
              <organization>University of Illinois at Chicago, Chicago, IL, USA</organization>
            </author>
            <author fullname="Jacob Maskiewicz" initials="J." surname="Maskiewicz">
              <organization>UC San Diego, La Jolla, CA, USA</organization>
            </author>
            <author fullname="Christina Garman" initials="C." surname="Garman">
              <organization>Johns Hopkins University, Baltimore, MD, USA</organization>
            </author>
            <author fullname="Joshua Fried" initials="J." surname="Fried">
              <organization>University of Pennsylvania, Philadelphia, PA, USA</organization>
            </author>
            <author fullname="Shaanan Cohney" initials="S." surname="Cohney">
              <organization>University of Pennsylvania, Philadelphia, PA, USA</organization>
            </author>
            <author fullname="Matthew Green" initials="M." surname="Green">
              <organization>Johns Hopkins University, Baltimore, MD, USA</organization>
            </author>
            <author fullname="Nadia Heninger" initials="N." surname="Heninger">
              <organization>University of Pennsylvania, Philadelphia, PA, USA</organization>
            </author>
            <author fullname="Ralf-Philipp Weinmann" initials="RP." surname="Weinmann">
              <organization>Comsecuris, Duisburg, Germany</organization>
            </author>
            <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
              <organization>UC San Diego, La Jolla, CA, USA</organization>
            </author>
            <author fullname="Hovav Shacham" initials="H." surname="Shacham">
              <organization>UC San Diego, La Jolla, CA, USA</organization>
            </author>
            <date month="October" year="2016"/>
          </front>
          <refcontent>Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security</refcontent>
          <seriesInfo name="DOI" value="10.1145/2976749.2978395"/>
        </reference>

      </references>
    </references>
    <section anchor="test-vectors">
      <name>Test Vectors</name>
      <t>To help with the implementation of this specification, a set of non-normative examples follow.</t>
      <section anchor="sample-v4-ed25519legacy-key">
        <name>Sample Version 4 Ed25519Legacy Key</name>
        <t>The secret key used for this example is:</t>
        <artwork><![CDATA[
D: 1a8b1ff05ded48e18bf50166c664ab023ea70003d78d9e41f5758a91d850f8d2
]]></artwork>
        <t>Note that this is the raw secret key used as input to the EdDSA signing operation.
The key was created on 2014-08-19 14:28:27 and thus the fingerprint of the OpenPGP Key is:</t>
        <artwork><![CDATA[
   C959 BDBA FA32 A2F8 9A15  3B67 8CFD E121 9796 5A9A
]]></artwork>
        <t>The algorithm-specific input parameters without the MPI length headers are:</t>
        <artwork><![CDATA[
oid: 2b06010401da470f01

q: 403f098994bdd916ed4053197934e4a87c80733a1280d62f8010992e43ee3b2406
]]></artwork>
        <t>The entire Public Key packet is thus:</t>
        <artwork><![CDATA[
   98 33 04 53 f3 5f 0b 16  09 2b 06 01 04 01 da 47
   0f 01 01 07 40 3f 09 89  94 bd d9 16 ed 40 53 19
   79 34 e4 a8 7c 80 73 3a  12 80 d6 2f 80 10 99 2e
   43 ee 3b 24 06
]]></artwork>
        <t>The same packet represented in ASCII-armored form is:</t>
        <sourcecode type="application/pgp-keys" name="v4-ed25519-pubkey-packet.key"><![CDATA[
-----BEGIN PGP PUBLIC KEY BLOCK-----

xjMEU/NfCxYJKwYBBAHaRw8BAQdAPwmJlL3ZFu1AUxl5NOSofIBzOhKA1i+AEJku
Q+47JAY=
-----END PGP PUBLIC KEY BLOCK-----
]]></sourcecode>
      </section>
      <section anchor="sample-v4-ed25519legacy-signature">
        <name>Sample Version 4 Ed25519Legacy Signature</name>
        <t>The signature is created using the sample key over the input data "OpenPGP" on 2015-09-16 12:24:53 UTC and thus the input to the hash function is:</t>
        <artwork><![CDATA[
m: 4f70656e504750040016080006050255f95f9504ff0000000c
]]></artwork>
        <t>Using the SHA2-256 hash algorithm yields the digest:</t>
        <artwork><![CDATA[
d: f6220a3f757814f4c2176ffbb68b00249cd4ccdc059c4b34ad871f30b1740280
]]></artwork>
        <t>which is fed into the EdDSA signature function and yields the following signature:</t>
        <artwork><![CDATA[
r: 56f90cca98e2102637bd983fdb16c131dfd27ed82bf4dde5606e0d756aed3366

s: d09c4fa11527f038e0f57f2201d82f2ea2c9033265fa6ceb489e854bae61b404
]]></artwork>
        <t>The entire Signature packet is thus:</t>
        <artwork><![CDATA[
   88 5e 04 00 16 08 00 06  05 02 55 f9 5f 95 00 0a
   09 10 8c fd e1 21 97 96  5a 9a f6 22 00 ff 56 f9
   0c ca 98 e2 10 26 37 bd  98 3f db 16 c1 31 df d2
   7e d8 2b f4 dd e5 60 6e  0d 75 6a ed 33 66 01 00
   d0 9c 4f a1 15 27 f0 38  e0 f5 7f 22 01 d8 2f 2e
   a2 c9 03 32 65 fa 6c eb  48 9e 85 4b ae 61 b4 04
]]></artwork>
        <t>The same packet represented in ASCII-armored form is:</t>
        <sourcecode type="application/pgp-signature" name="v4-ed25519-signature-over-OpenPGP.sig"><![CDATA[
-----BEGIN PGP SIGNATURE-----

iF4EABYIAAYFAlX5X5UACgkQjP3hIZeWWpr2IgD/VvkMypjiECY3vZg/2xbBMd/S
ftgr9N3lYG4NdWrtM2YBANCcT6EVJ/A44PV/IgHYLy6iyQMyZfps60iehUuuYbQE
-----END PGP SIGNATURE-----
]]></sourcecode>
      </section>
      <section anchor="v6-cert">
        <name>Sample Version 6 Certificate (Transferable Public Key)</name>
        <t>Here is a Transferable Public Key consisting of:</t>
        <ul spacing="normal">
          <li>
            <t>A version 6 Ed25519 Public Key packet</t>
          </li>
          <li>
            <t>A version 6 Direct Key self-signature</t>
          </li>
          <li>
            <t>A version 6 X25519 Public Subkey packet</t>
          </li>
          <li>
            <t>A version 6 Subkey Binding signature</t>
          </li>
        </ul>
        <t>The primary key has the following fingerprint:</t> <t><tt>CB186C4F0609A697E4D52DFA6C722B0C1F1E27C18A56708F6525EC27BAD9ACC9</tt></t>
        <t>The subkey has the following fingerprint:</t> <t><tt>12C83F1E706F6308FE151A417743A1F033790E93E9978488D1DB378DA9930885</tt></t>
        <sourcecode type="application/pgp-keys" name="v6-minimal-cert.key"><![CDATA[
-----BEGIN PGP PUBLIC KEY BLOCK-----

xioGY4d/4xsAAAAg+U2nu0jWCmHlZ3BqZYfQMxmZu52JGggkLq2EVD34laPCsQYf
GwoAAABCBYJjh3/jAwsJBwUVCg4IDAIWAAKbAwIeCSIhBssYbE8GCaaX5NUt+mxy
KwwfHifBilZwj2Ul7Ce62azJBScJAgcCAAAAAK0oIBA+LX0ifsDm185Ecds2v8lw
gyU2kCcUmKfvBXbAf6rhRYWzuQOwEn7E/aLwIwRaLsdry0+VcallHhSu4RN6HWaE
QsiPlR4zxP/TP7mhfVEe7XWPxtnMUMtf15OyA51YBM4qBmOHf+MZAAAAIIaTJINn
+eUBXbki+PSAld2nhJh/LVmFsS+60WyvXkQ1wpsGGBsKAAAALAWCY4d/4wKbDCIh
BssYbE8GCaaX5NUt+mxyKwwfHifBilZwj2Ul7Ce62azJAAAAAAQBIKbpGG2dWTX8
j+VjFM21J0hqWlEg+bdiojWnKfA5AQpWUWtnNwDEM0g12vYxoWM8Y81W+bHBw805
I8kWVkXU6vFOi+HWvv/ira7ofJu16NnoUkhclkUrk0mXubZvyl4GBg==
-----END PGP PUBLIC KEY BLOCK-----
]]></sourcecode>
        <t>The corresponding Transferable Secret Key can be found in <xref target="v6-key"/>.</t>
        <section anchor="sig-hashed-data-example">
          <name>Hashed Data Stream for Signature Verification</name>
          <t>The Direct Key self-signature in the certificate in <xref target="v6-cert"/> is made over the following sequence of data:</t>
          <artwork><![CDATA[
0x0000  10 3e 2d 7d 22 7e c0 e6
0x0008  d7 ce 44 71 db 36 bf c9
0x0010  70 83 25 36 90 27 14 98
0x0018  a7 ef 05 76 c0 7f aa e1
0x0020  9b 00 00 00 2a 06 63 87
0x0028  7f e3 1b 00 00 00 20 f9
0x0030  4d a7 bb 48 d6 0a 61 e5
0x0038  67 70 6a 65 87 d0 33 19
0x0040  99 bb 9d 89 1a 08 24 2e
0x0048  ad 84 54 3d f8 95 a3 06
0x0050  1f 1b 0a 00 00 00 42 05
0x0058  82 63 87 7f e3 03 0b 09
0x0060  07 05 15 0a 0e 08 0c 02
0x0068  16 00 02 9b 03 02 1e 09
0x0070  22 21 06 cb 18 6c 4f 06
0x0078  09 a6 97 e4 d5 2d fa 6c
0x0080  72 2b 0c 1f 1e 27 c1 8a
0x0088  56 70 8f 65 25 ec 27 ba
0x0090  d9 ac c9 05 27 09 02 07
0x0098  02 06 ff 00 00 00 4a
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  10 3e 2d 7d 22 7e c0 e6  salt
0x0008  d7 ce 44 71 db 36 bf c9
0x0010  70 83 25 36 90 27 14 98
0x0018  a7 ef 05 76 c0 7f aa e1
        [ pubkey begins ]
0x0020  9b                       key packet
0x0021     00 00 00 2a           pubkey length
0x0025                 06        pubkey version
0x0026                    63 87  creation time
0x0028  7f e3                      (2022-11-30T16:08:03Z)
0x002a        1b                 key algo: Ed25519
0x002b           00 00 00 20     key length
0x002f                       f9  Ed25519 public key
0x0030  4d a7 bb 48 d6 0a 61 e5
0x0038  67 70 6a 65 87 d0 33 19
0x0040  99 bb 9d 89 1a 08 24 2e
0x0048  ad 84 54 3d f8 95 a3
         [ trailer begins ]
0x004f                       06  sig version 6
0x0050  1f                       sig type: Direct Key signature
0x0051     1b                    sig algo: Ed25519
0x0052        0a                 hash ago: SHA2-512
0x0053           00 00 00 42     hashed subpackets length
0x0057                       05  subpkt length
0x0058  82                       critical subpkt: Sig Creation Time
0x0059     63 87 7f e3           Signature Creation Time
0x005d                 03        subpkt length
0x005e                    0b     subpkt type: Pref. v1 SEIPD Ciphers
0x005f                       09  Ciphers: [AES256 AES128]
0x0060  07
0x0061     05                    subpkt length
0x0062        15                 subpkt type: Pref. Hash Algorithms
0x0063           0a 0e           Hashes: [SHA2-512 SHA3-512
0x0065                 08 0c              SHA2-256 SHA3-256]
0x0067                       02  subpkt length
0x0068  16                       subpkt type: Pref. Compression
0x0069     00                    Compression: [none]
0x006a        02                 subpkt length
0x006b           9b              critical subpkt: Key Flags
0x006c              03           Key Flags: {certify, sign}
0x006d                 02        subpkt length
0x006e                    1e     subpkt type: Features
0x006f                       09  Features: {v1SEIPD, v2SEIPD}
0x0070  22                       subpkt length
0x0071     21                    subpkt type: Issuer Fingerprint
0x0072        06                 Fingerprint version 6
0x0073           cb 18 6c 4f 06  Fingerprint
0x0078  09 a6 97 e4 d5 2d fa 6c
0x0080  72 2b 0c 1f 1e 27 c1 8a
0x0088  56 70 8f 65 25 ec 27 ba
0x0090  d9 ac c9
0x0093           05              subpkt length
0x0094              27           subpkt type: Pref. AEAD Ciphersuites
0x0095                 09 02 07  Ciphersuites:
0x0098  02                         [ AES256-OCB, AES128-OCB ]
0x0099     06                    sig version 6
0x009a        ff                 sentinel octet
0x009b           00 00 00 4a     trailer length
]]></artwork>
          <t>The Subkey Binding signature in <xref target="v6-cert"/> is made over the following sequence of data:</t>
          <artwork><![CDATA[
0x0000  a6 e9 18 6d 9d 59 35 fc
0x0008  8f e5 63 14 cd b5 27 48
0x0010  6a 5a 51 20 f9 b7 62 a2
0x0018  35 a7 29 f0 39 01 0a 56
0x0020  9b 00 00 00 2a 06 63 87
0x0028  7f e3 1b 00 00 00 20 f9
0x0030  4d a7 bb 48 d6 0a 61 e5
0x0038  67 70 6a 65 87 d0 33 19
0x0040  99 bb 9d 89 1a 08 24 2e
0x0048  ad 84 54 3d f8 95 a3 9b
0x0050  00 00 00 2a 06 63 87 7f
0x0058  e3 19 00 00 00 20 86 93
0x0060  24 83 67 f9 e5 01 5d b9
0x0068  22 f8 f4 80 95 dd a7 84
0x0070  98 7f 2d 59 85 b1 2f ba
0x0078  d1 6c af 5e 44 35 06 18
0x0080  1b 0a 00 00 00 2c 05 82
0x0088  63 87 7f e3 02 9b 0c 22
0x0090  21 06 cb 18 6c 4f 06 09
0x0098  a6 97 e4 d5 2d fa 6c 72
0x00a0  2b 0c 1f 1e 27 c1 8a 56
0x00a8  70 8f 65 25 ec 27 ba d9
0x00b0  ac c9 06 ff 00 00 00 34
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>	  
          <artwork><![CDATA[
0x0000  a6 e9 18 6d 9d 59 35 fc  salt
0x0008  8f e5 63 14 cd b5 27 48
0x0010  6a 5a 51 20 f9 b7 62 a2
0x0018  35 a7 29 f0 39 01 0a 56
      [ primary pubkey begins ]
0x0020  9b                       key packet
0x0021     00 00 00 2a           pubkey length
0x0025                 06        pubkey version
0x0026                    63 87  creation time
0x0028  7f e3                      (2022-11-30T16:08:03Z)
0x002a        1b                 key algo: Ed25519
0x002b           00 00 00 20     key length
0x002f                       f9  Ed25519 public key
0x0030  4d a7 bb 48 d6 0a 61 e5
0x0038  67 70 6a 65 87 d0 33 19
0x0040  99 bb 9d 89 1a 08 24 2e
0x0048  ad 84 54 3d f8 95 a3
      [ subkey pubkey begins ]
0x004f                       9b  key packet
0x0050  00 00 00 2a              pubkey length
0x0054              06           pubkey version
0x0055                 63 87 7f  creation time (2022-11-30T16:08:03Z)
0x0058  e3
0x0059     19                    key algo: X25519
0x005a        00 00 00 20        key length
0x005e                    86 93  X25519 public key
0x0060  24 83 67 f9 e5 01 5d b9
0x0068  22 f8 f4 80 95 dd a7 84
0x0070  98 7f 2d 59 85 b1 2f ba
0x0078  d1 6c af 5e 44 35
       [ trailer begins ]
0x007e                    06     sig version 6
0x007f                       18  sig type: Subkey Binding sig
0x0080  1b                       sig algo Ed25519
0x0081     0a                    hash algo: SHA2-512
0x0082        00 00 00 2c        hashed subpackets length
0x0086                    05     subpkt length
0x0087                       82  critical subpkt: Sig Creation Time
0x0088  63 87 7f e3              Signature Creation Time
0x008c              02           subpkt length
0x008d                 9b        critical subpkt: Key Flags
0x008e                    0c     Key Flags: {EncComms, EncStorage}
0x008f                       22  subpkt length
0x0090  21                       subpkt type: Issuer Fingerprint
0x0091     06                    Fingerprint version 6
0x0092        cb 18 6c 4f 06 09  Fingerprint
0x0098  a6 97 e4 d5 2d fa 6c 72
0x00a0  2b 0c 1f 1e 27 c1 8a 56
0x00a8  70 8f 65 25 ec 27 ba d9
0x00b0  ac c9
0x00b2        06                 sig version 6
0x00b3           ff              sentinel octet
0x00b4              00 00 00 34  trailer length
]]></artwork>
        </section>
      </section>
      <section anchor="v6-key">
        <name>Sample Version 6 Secret Key (Transferable Secret Key)</name>
        <t>Here is a Transferable Secret Key consisting of:</t>
        <ul spacing="normal">
          <li>
            <t>A version 6 Ed25519 Secret Key packet</t>
          </li>
          <li>
            <t>A version 6 Direct Key self-signature</t>
          </li>
          <li>
            <t>A version 6 X25519 Secret Subkey packet</t>
          </li>
          <li>
            <t>A version 6 Subkey Binding signature</t>
          </li>
        </ul>
        <sourcecode type="application/pgp-keys" name="v6-minimal-secret.key"><![CDATA[
-----BEGIN PGP PRIVATE KEY BLOCK-----

xUsGY4d/4xsAAAAg+U2nu0jWCmHlZ3BqZYfQMxmZu52JGggkLq2EVD34laMAGXKB
exK+cH6NX1hs5hNhIB00TrJmosgv3mg1ditlsLfCsQYfGwoAAABCBYJjh3/jAwsJ
BwUVCg4IDAIWAAKbAwIeCSIhBssYbE8GCaaX5NUt+mxyKwwfHifBilZwj2Ul7Ce6
2azJBScJAgcCAAAAAK0oIBA+LX0ifsDm185Ecds2v8lwgyU2kCcUmKfvBXbAf6rh
RYWzuQOwEn7E/aLwIwRaLsdry0+VcallHhSu4RN6HWaEQsiPlR4zxP/TP7mhfVEe
7XWPxtnMUMtf15OyA51YBMdLBmOHf+MZAAAAIIaTJINn+eUBXbki+PSAld2nhJh/
LVmFsS+60WyvXkQ1AE1gCk95TUR3XFeibg/u/tVY6a//1q0NWC1X+yui3O24wpsG
GBsKAAAALAWCY4d/4wKbDCIhBssYbE8GCaaX5NUt+mxyKwwfHifBilZwj2Ul7Ce6
2azJAAAAAAQBIKbpGG2dWTX8j+VjFM21J0hqWlEg+bdiojWnKfA5AQpWUWtnNwDE
M0g12vYxoWM8Y81W+bHBw805I8kWVkXU6vFOi+HWvv/ira7ofJu16NnoUkhclkUr
k0mXubZvyl4GBg==
-----END PGP PRIVATE KEY BLOCK-----
]]></sourcecode>
        <t>The corresponding Transferable Public Key can be found in <xref target="v6-cert"/>.</t>
      </section>
      <section anchor="v6-locked-key">
        <name>Sample Locked Version 6 Secret Key (Transferable Secret Key)</name>
        <t>Here is the same secret key as in <xref target="v6-key"/>, but the secret key material is locked with a passphrase using AEAD and Argon2.</t>
        <t>The passphrase is the ASCII string:</t>
        <artwork><![CDATA[
correct horse battery staple
]]></artwork>
        <sourcecode type="application/pgp-keys" name="v6-minimal-secret-locked.key"><![CDATA[
-----BEGIN PGP PRIVATE KEY BLOCK-----

xYIGY4d/4xsAAAAg+U2nu0jWCmHlZ3BqZYfQMxmZu52JGggkLq2EVD34laP9JgkC
FARdb9ccngltHraRe25uHuyuAQQVtKipJ0+r5jL4dacGWSAheCWPpITYiyfyIOPS
3gIDyg8f7strd1OB4+LZsUhcIjOMpVHgmiY/IutJkulneoBYwrEGHxsKAAAAQgWC
Y4d/4wMLCQcFFQoOCAwCFgACmwMCHgkiIQbLGGxPBgmml+TVLfpscisMHx4nwYpW
cI9lJewnutmsyQUnCQIHAgAAAACtKCAQPi19In7A5tfORHHbNr/JcIMlNpAnFJin
7wV2wH+q4UWFs7kDsBJ+xP2i8CMEWi7Ha8tPlXGpZR4UruETeh1mhELIj5UeM8T/
0z+5oX1RHu11j8bZzFDLX9eTsgOdWATHggZjh3/jGQAAACCGkySDZ/nlAV25Ivj0
gJXdp4SYfy1ZhbEvutFsr15ENf0mCQIUBA5hhGgp2oaavg6mFUXcFMwBBBUuE8qf
9Ock+xwusd+GAglBr5LVyr/lup3xxQvHXFSjjA2haXfoN6xUGRdDEHI6+uevKjVR
v5oAxgu7eJpaXNjCmwYYGwoAAAAsBYJjh3/jApsMIiEGyxhsTwYJppfk1S36bHIr
DB8eJ8GKVnCPZSXsJ7rZrMkAAAAABAEgpukYbZ1ZNfyP5WMUzbUnSGpaUSD5t2Ki
Nacp8DkBClZRa2c3AMQzSDXa9jGhYzxjzVb5scHDzTkjyRZWRdTq8U6L4da+/+Kt
ruh8m7Xo2ehSSFyWRSuTSZe5tm/KXgYG
-----END PGP PRIVATE KEY BLOCK-----
]]></sourcecode>
        <section anchor="intermediate-data-for-locked-primary-key">
          <name>Intermediate Data for Locked Primary Key</name>
          <t>The S2K-derived material for the primary key is:</t>
          <artwork><![CDATA[
832bd2662a5c2b251ee3fc82aec349a766ca539015880133002e5a21960b3bcf
]]></artwork>
          <t>After HKDF, the symmetric key used for AEAD encryption of the primary key is:</t>
          <artwork><![CDATA[
9e37cb26787f37e18db172795c4c297550d39ac82511d9af4c8706db6a77fd51
]]></artwork>
          <t>The additional data for AEAD for the primary key is:</t>
          <artwork><![CDATA[
c50663877fe31b00000020f94da7bb48d60a61e567706a6587d0331999bb9d89
1a08242ead84543df895a3
]]></artwork>
        </section>
        <section anchor="intermediate-data-for-locked-subkey">
          <name>Intermediate Data for Locked Subkey</name>
          <t>The S2K-derived key material for the subkey is:</t>
          <artwork><![CDATA[
f74a6ce873a089ef13a3da9ac059777bb22340d15eaa6c9dc0f8ef09035c67cd
]]></artwork>
          <t>After HKDF, the symmetric key used for AEAD encryption of the subkey is:</t>
          <artwork><![CDATA[
3c60cb63285f62f4c3de49835786f011cf6f4c069f61232cd7013ff5fd31e603
]]></artwork>
          <t>The additional data for AEAD for the subkey is:</t>
          <artwork><![CDATA[
c70663877fe319000000208693248367f9e5015db922f8f48095dda784987f2d
5985b12fbad16caf5e4435
]]></artwork>
        </section>
      </section>
      <section anchor="sample-csf-message">
        <name>Sample Cleartext Signed Message</name>
        <t>Here is a signed message that uses the Cleartext Signature Framework (<xref target="cleartext-signature"/>). It can be verified with the certificate from <xref target="v6-cert"/>.</t>
        <t>Note that this message makes use of dash-escaping (<xref target="dash-escaping"/>) due to its contents.</t>
        <sourcecode type="text/plain" name="cleartext-signed-message.txt"><![CDATA[
-----BEGIN PGP SIGNED MESSAGE-----

What we need from the grocery store:

- - tofu
- - vegetables
- - noodles

-----BEGIN PGP SIGNATURE-----

wpgGARsKAAAAKQWCY5ijYyIhBssYbE8GCaaX5NUt+mxyKwwfHifBilZwj2Ul7Ce6
2azJAAAAAGk2IHZJX1AhiJD39eLuPBgiUU9wUA9VHYblySHkBONKU/usJ9BvuAqo
/FvLFuGWMbKAdA+epq7V4HOtAPlBWmU8QOd6aud+aSunHQaaEJ+iTFjP2OMW0KBr
NK2ay45cX1IVAQ==
-----END PGP SIGNATURE-----
]]></sourcecode>
        <t>The Signature packet here is:</t>
        <artwork><![CDATA[
0x0000  c2                       packet type: Signature
0x0001     98                    packet length
0x0002        06                 sig version 6
0x0003           01              sig type: Canonical Text
0x0004              1b           pubkey algorithm: Ed25519
0x0005                 0a        hash algorithm used: SHA2-512
0x0006                    00 00  hashed subpackets length: 41
0x0008  00 29
0x000a        05                 subpkt length
0x000b           82              critical subpkt: Sig Creation Time
0x000c              63 98 a3 63   (2022-12-13T16:08:03Z)
0x0010  22                       subpkt length
0x0011     21                    subpkt type: Issuer Fingerprint
0x0012        06                 Fingerprint version 6
0x0013           cb 18 6c 4f 06  Fingerprint
0x001a  09 a6 97 e4 d5 2d fa 6c
0x0020  72 2b 0c 1f 1e 27 c1 8a
0x0028  56 70 8f 65 25 ec 27 ba
0x0030  d9 ac c9
0x0033           00 00 00 00     unhashed subpackets length: 0
0x0037                       69  left 16 bits of signed hash
0x0038  36
0x0039     20                    salt length
0x003a        76 49 5f 50 21 88  salt
0x0040  90 f7 f5 e2 ee 3c 18 22
0x0048  51 4f 70 50 0f 55 1d 86
0x0050  e5 c9 21 e4 04 e3 4a 53
0x0058  fb ac
0x005a        27 d0 6f b8 0a a8  Ed25519 signature
0x0060  fc 5b cb 16 e1 96 31 b2
0x0068  80 74 0f 9e a6 ae d5 e0
0x0070  73 ad 00 f9 41 5a 65 3c
0x0078  40 e7 7a 6a e7 7e 69 2b
0x0080  a7 1d 06 9a 10 9f a2 4c
0x0088  58 cf d8 e3 16 d0 a0 6b
0x0090  34 ad 9a cb 8e 5c 5f 52
0x0098  15 01
]]></artwork>
        <t>The signature is made over the following data:</t>
        <artwork><![CDATA[
0x0000  76 49 5f 50 21 88 90 f7
0x0008  f5 e2 ee 3c 18 22 51 4f
0x0010  70 50 0f 55 1d 86 e5 c9
0x0018  21 e4 04 e3 4a 53 fb ac
0x0020  57 68 61 74 20 77 65 20
0x0028  6e 65 65 64 20 66 72 6f
0x0030  6d 20 74 68 65 20 67 72
0x0038  6f 63 65 72 79 20 73 74
0x0040  6f 72 65 3a 0d 0a 0d 0a
0x0048  2d 20 74 6f 66 75 0d 0a
0x0050  2d 20 76 65 67 65 74 61
0x0058  62 6c 65 73 0d 0a 2d 20
0x0060  6e 6f 6f 64 6c 65 73 0d
0x0068  0a 06 01 1b 0a 00 00 00
0x0070  29 05 82 63 98 a3 63 22
0x0078  21 06 cb 18 6c 4f 06 09
0x0080  a6 97 e4 d5 2d fa 6c 72
0x0088  2b 0c 1f 1e 27 c1 8a 56
0x0090  70 8f 65 25 ec 27 ba d9
0x0098  ac c9 06 ff 00 00 00 31
]]></artwork>
        <t>The same data, broken out by octet and semantics, is:</t>
        <artwork><![CDATA[
0x0000  76 49 5f 50 21 88 90 f7  salt
0x0008  f5 e2 ee 3c 18 22 51 4f
0x0010  70 50 0f 55 1d 86 e5 c9
0x0018  21 e4 04 e3 4a 53 fb ac
      [ message begins ]
0x0020  57 68 61 74 20 77 65 20  canonicalized message
0x0028  6e 65 65 64 20 66 72 6f
0x0030  6d 20 74 68 65 20 67 72
0x0038  6f 63 65 72 79 20 73 74
0x0040  6f 72 65 3a 0d 0a 0d 0a
0x0048  2d 20 74 6f 66 75 0d 0a
0x0050  2d 20 76 65 67 65 74 61
0x0058  62 6c 65 73 0d 0a 2d 20
0x0060  6e 6f 6f 64 6c 65 73 0d
0x0068  0a
      [ trailer begins ]
0x0069     06                    sig version 6
0x006a        01                 sig type: Canonical Text
0x006b           1b              pubkey algorithm: Ed25519
0x006c              0a           hash algorithm: SHA2-512
0x006d                 00 00 00  hashed subpackets length
0x0070  29
0x0071     05                    subpacket length
0x0072        82                 critical subpkt: Sig Creation Time
0x0073           63 98 a3 63       (2022-12-13T16:08:03Z)
0x0077                       22  subpkt length
0x0078  21                       subpkt type: Issuer Fingerprint
0x0079     06                    Fingerprint version 6
0x007a        cb 18 6c 4f 06 09  Fingerprint
0x0080  a6 97 e4 d5 2d fa 6c 72
0x0088  2b 0c 1f 1e 27 c1 8a 56
0x0090  70 8f 65 25 ec 27 ba d9
0x0098  ac c9
0x009a        06                 sig version 6
0x009b           ff              sentinel octet
0x009c              00 00 00 31  trailer length
]]></artwork>
        <t>The calculated SHA2-512 hash digest over this data is:</t>
        <artwork><![CDATA[
69365bf44a97af1f0844f1f6ab83fdf6b36f26692efaa621a8aac91c4e29ea07
e894cabc6e2f20eedfce6c03b89141a2cc7cbe245e6e7a5654addbec5000b89b
]]></artwork>
      </section>
      <section anchor="sample-inline-signed-message">
        <name>Sample Inline-Signed Message</name>
        <t>This is the same message and signature as in <xref target="sample-csf-message"/> but as an inline-signed message. The hashed data is exactly the same, and all intermediate values and annotated hex dumps are also applicable.</t>
        <sourcecode type="text/plain" name="inline-signed-message.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----

xEYGAQobIHZJX1AhiJD39eLuPBgiUU9wUA9VHYblySHkBONKU/usyxhsTwYJppfk
1S36bHIrDB8eJ8GKVnCPZSXsJ7rZrMkBy0p1AAAAAABXaGF0IHdlIG5lZWQgZnJv
bSB0aGUgZ3JvY2VyeSBzdG9yZToKCi0gdG9mdQotIHZlZ2V0YWJsZXMKLSBub29k
bGVzCsKYBgEbCgAAACkFgmOYo2MiIQbLGGxPBgmml+TVLfpscisMHx4nwYpWcI9l
JewnutmsyQAAAABpNiB2SV9QIYiQ9/Xi7jwYIlFPcFAPVR2G5ckh5ATjSlP7rCfQ
b7gKqPxbyxbhljGygHQPnqau1eBzrQD5QVplPEDnemrnfmkrpx0GmhCfokxYz9jj
FtCgazStmsuOXF9SFQE=
-----END PGP MESSAGE-----
]]></sourcecode>
      </section>
      <section anchor="sample-x25519-aead-ocb-encryption-and-decryption">
        <name>Sample X25519-AEAD-OCB Encryption and Decryption</name>
        <t>This example encrypts the cleartext string <tt>Hello, world!</tt> for the sample cert (see <xref target="v6-cert"/>), using AES-128 with AEAD-OCB encryption.</t>
        <section anchor="sample-public-key-encrypted-session-key-packet-v6">
          <name>Sample Version 6 Public Key Encrypted Session Key Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="v6pkesk-x25519.hexdump"><![CDATA[
0x0000  c1 5d 06 21 06 12 c8 3f
0x0008  1e 70 6f 63 08 fe 15 1a
0x0010  41 77 43 a1 f0 33 79 0e
0x0018  93 e9 97 84 88 d1 db 37
0x0020  8d a9 93 08 85 19 87 cf
0x0028  18 d5 f1 b5 3f 81 7c ce
0x0030  5a 00 4c f3 93 cc 89 58
0x0038  bd dc 06 5f 25 f8 4a f5
0x0040  09 b1 7d d3 67 64 18 de
0x0048  a3 55 43 79 56 61 79 01
0x0050  e0 69 57 fb ca 8a 6a 47
0x0058  a5 b5 15 3e 8d 3a b7
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  c1                       packet type: PKESK
0x0001     5d                    packet length
0x0002        06                 v6 PKESK
0x0003           21              length of fingerprint
0x0004              06           Key version 6
0x0005                 12 c8 3f  Key fingerprint
0x0008  1e 70 6f 63 08 fe 15 1a
0x0010  41 77 43 a1 f0 33 79 0e
0x0018  93 e9 97 84 88 d1 db 37
0x0020  8d a9 93 08 85
0x0025                 19        algorithm: X25519
0x0026                    87 cf  Ephemeral key
0x0028  18 d5 f1 b5 3f 81 7c ce
0x0030  5a 00 4c f3 93 cc 89 58
0x0038  bd dc 06 5f 25 f8 4a f5
0x0040  09 b1 7d d3 67 64
0x0046                    18     ESK length
0x0047                       de  ESK
0x0048  a3 55 43 79 56 61 79 01
0x0050  e0 69 57 fb ca 8a 6a 47
0x0058  a5 b5 15 3e 8d 3a b7
]]></artwork>
        </section>
        <section anchor="x25519-encryptiondecryption-of-the-session-key">
          <name>X25519 Encryption/Decryption of the Session Key</name>
          <t>Ephemeral key:</t>
          <artwork><![CDATA[
  87 cf 18 d5 f1 b5 3f 81 7c ce 5a 00 4c f3 93 cc
  89 58 bd dc 06 5f 25 f8 4a f5 09 b1 7d d3 67 64
]]></artwork>
          <t>This ephemeral key is derived from the following ephemeral secret key material, which is never placed on the wire:</t>
          <artwork><![CDATA[
  af 1e 43 c0 d1 23 ef e8 93 a7 d4 d3 90 f3 a7 61
  e3 fa c3 3d fc 7f 3e da a8 30 c9 01 13 52 c7 79
]]></artwork>
          <t>Public key from the target certificate (see <xref target="v6-cert"/>):</t>
          <artwork><![CDATA[
  86 93 24 83 67 f9 e5 01 5d b9 22 f8 f4 80 95 dd
  a7 84 98 7f 2d 59 85 b1 2f ba d1 6c af 5e 44 35
]]></artwork>
          <t>The corresponding long-lived X25519 private key material (see <xref target="v6-key"/>):</t>
          <artwork><![CDATA[
  4d 60 0a 4f 79 4d 44 77 5c 57 a2 6e 0f ee fe d5
  58 e9 af ff d6 ad 0d 58 2d 57 fb 2b a2 dc ed b8
]]></artwork>
          <t>Shared point:</t>
          <artwork><![CDATA[
  67 e3 0e 69 cd c7 ba b2 a2 68 0d 78 ac a4 6a 2f
  8b 6e 2a e4 4d 39 8b dc 6f 92 c5 ad 4a 49 25 14
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  f6 6d ad cf f6 45 92 23 9b 25 45 39 b6 4f f6 07
]]></artwork>
          <t>Decrypted session key:</t>
          <artwork><![CDATA[
  dd 70 8f 6f a1 ed 65 11 4d 68 d2 34 3e 7c 2f 1d
]]></artwork>
        </section>
        <section anchor="sample-v2-seipd-packet">
          <name>Sample v2 SEIPD Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="x25519-v2seipd-aes128-ocb.hexdump"><![CDATA[
0x0000  d2 69 02 07 02 06 61 64
0x0008  16 53 5b e0 b0 71 6d 60
0x0010  e0 52 a5 6c 4c 40 7f 9e
0x0018  b3 6b 0e fa fe 9a d0 a0
0x0020  df 9b 03 3c 69 a2 1b a9
0x0028  eb d2 c0 ec 95 bf 56 9d
0x0030  25 c9 99 ee 4a 3d e1 70
0x0038  58 f4 0d fa 8b 4c 68 2b
0x0040  e3 fb bb d7 b2 7e b0 f5
0x0048  9b b5 00 5f 80 c7 c6 f4
0x0050  03 88 c3 0a d4 06 ab 05
0x0058  13 dc d6 f9 fd 73 76 56
0x0060  28 6e 11 77 d0 0f 88 8a
0x0068  db 31 c4
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  d2                       packet type: SEIPD
0x0001     69                    packet length
0x0002        02                 v2 SEIPD
0x0003           07              cipher: AES128
0x0004              02           AEAD mode: OCB
0x0005                 06        chunk size (2^12 octets)
0x0006                    61 64  salt
0x0008  16 53 5b e0 b0 71 6d 60
0x0010  e0 52 a5 6c 4c 40 7f 9e
0x0018  b3 6b 0e fa fe 9a d0 a0
0x0020  df 9b 03 3c 69 a2
0x0026                    1b a9  chunk #0 encrypted data
0x0028  eb d2 c0 ec 95 bf 56 9d
0x0030  25 c9 99 ee 4a 3d e1 70
0x0038  58 f4 0d fa 8b 4c 68 2b
0x0040  e3 fb bb d7 b2 7e b0 f5
0x0048  9b b5 00
0x004b           5f 80 c7 c6 f4  chunk #0 AEAD tag
0x0050  03 88 c3 0a d4 06 ab 05
0x0058  13 dc d6
0x005b           f9 fd 73 76 56  final AEAD tag (#1)
S0x0060  28 6e 11 77 d0 0f 88 8a
0x0068  db 31 c4
]]></artwork>
        </section>
        <section anchor="decryption-of-data">
          <name>Decryption of Data</name>
          <t>Starting AEAD-OCB decryption of data, using the session key.</t>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  d2 02 07 02 06
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  45 12 f7 14 9d 86 33 41 52 7c 65 67 d5 bf fc 42
  5f af 32 50 21 2f f9
]]></artwork>
          <t>Message key:</t>
          <artwork><![CDATA[
  45 12 f7 14 9d 86 33 41 52 7c 65 67 d5 bf fc 42
]]></artwork>
          <t>Initialization vector:</t>
          <artwork><![CDATA[
  5f af 32 50 21 2f f9
]]></artwork>
          <t>Chunk #0:</t>
          <t>Nonce:</t>
          <artwork><![CDATA[
  5f af 32 50 21 2f f9 00 00 00 00 00 00 00 00
]]></artwork>
          <t>Additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 02 06
]]></artwork>
          <t>Encrypted data chunk:</t>
          <artwork><![CDATA[
  1b a9 eb d2 c0 ec 95 bf 56 9d 25 c9 99 ee 4a 3d
  e1 70 58 f4 0d fa 8b 4c 68 2b e3 fb bb d7 b2 7e
  b0 f5 9b b5 00 5f 80 c7 c6 f4 03 88 c3 0a d4 06
  ab 05 13 dc d6
]]></artwork>
          <t>Decrypted chunk #0.</t>
          <t>Literal Data packet with the string contents <tt>Hello, world!</tt>:</t>
          <artwork><![CDATA[
  cb 13 62 00 00 00 00 00 48 65 6c 6c 6f 2c 20 77
  6f 72 6c 64 21
]]></artwork>
          <t>Padding packet:</t>
          <artwork><![CDATA[
  d5 0e c5 a2 93 07 29 91 62 81 47 d7 2c 8f 86 b7
]]></artwork>
          <t>Authenticating final tag:</t>
          <t>Final nonce:</t>
          <artwork><![CDATA[
  5f af 32 50 21 2f f9 00 00 00 00 00 00 00 01
]]></artwork>
          <t>Final additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 02 06 00 00 00 00 00 00 00 25
]]></artwork>
        </section>
        <section anchor="complete-x25519-aead-ocb-encrypted-packet-sequence">
          <name>Complete X25519-AEAD-OCB Encrypted Packet Sequence</name>
          <sourcecode type="application/pgp-encrypted" name="v6pkesk-aes128-ocb.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----

wV0GIQYSyD8ecG9jCP4VGkF3Q6HwM3kOk+mXhIjR2zeNqZMIhRmHzxjV8bU/gXzO
WgBM85PMiVi93AZfJfhK9QmxfdNnZBjeo1VDeVZheQHgaVf7yopqR6W1FT6NOrfS
aQIHAgZhZBZTW+CwcW1g4FKlbExAf56zaw76/prQoN+bAzxpohup69LA7JW/Vp0l
yZnuSj3hcFj0DfqLTGgr4/u717J+sPWbtQBfgMfG9AOIwwrUBqsFE9zW+f1zdlYo
bhF30A+IitsxxA==
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
      </section>
      <section anchor="sample-aead-eax-encryption-and-decryption">
        <name>Sample AEAD-EAX Encryption and Decryption</name>
        <t>This example encrypts the cleartext string <tt>Hello, world!</tt> with the passphrase <tt>password</tt>, using AES-128 with AEAD-EAX encryption.</t>
        <section anchor="sample-symmetric-key-encrypted-session-key-packet-v6">
          <name>Sample Version 6 Symmetric Key Encrypted Session Key Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="v6skesk-aes128-eax.hexdump"><![CDATA[
0x0000  c3 40 06 1e 07 01 0b 03
0x0008  08 a5 ae 57 9d 1f c5 d8
0x0010  2b ff 69 22 4f 91 99 93
0x0018  b3 50 6f a3 b5 9a 6a 73
0x0020  cf f8 c5 ef c5 f4 1c 57
0x0028  fb 54 e1 c2 26 81 5d 78
0x0030  28 f5 f9 2c 45 4e b6 5e
0x0038  be 00 ab 59 86 c6 8e 6e
0x0040  7c 55
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  c3                       packet type: SKESK
0x0001     40                    packet length
0x0002        06                 v6 SKESK
0x0003           1e              length through end of AEAD nonce
0x0004              07           cipher: AES128
0x0005                 01        AEAD mode: EAX
0x0006                    0b     length of S2K
0x0007                       03  S2K type: iterated+salted
0x0008  08                       S2K hash: SHA2-256
0x0009     a5 ae 57 9d 1f c5 d8  S2K salt
0x0010  2b
0x0011     ff                    S2K iterations (65011712 octets)
0x0012        69 22 4f 91 99 93  AEAD nonce
0x0018  b3 50 6f a3 b5 9a 6a 73
0x0020  cf f8
0x0022        c5 ef c5 f4 1c 57  encrypted session key
0x0028  fb 54 e1 c2 26 81 5d 78
0x0030  28 f5
0x0032        f9 2c 45 4e b6 5e  AEAD tag
0x0038  be 00 ab 59 86 c6 8e 6e
0x0040  7c 55
]]></artwork>
        </section>
        <section anchor="starting-aead-eax-decryption-of-the-session-key">
          <name>Starting AEAD-EAX Decryption of the Session Key</name>
          <t>The derived key is:</t>
          <artwork><![CDATA[
  15 49 67 e5 90 aa 1f 92 3e 1c 0a c6 4c 88 f2 3d
]]></artwork>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  c3 06 07 01
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  2f ce 33 1f 39 dd 95 5c c4 1e 95 d8 70 c7 21 39
]]></artwork>
          <t>Authenticated Data:</t>
          <artwork><![CDATA[
  c3 06 07 01
]]></artwork>
          <t>Nonce:</t>
          <artwork><![CDATA[
  69 22 4f 91 99 93 b3 50 6f a3 b5 9a 6a 73 cf f8
]]></artwork>
          <t>Decrypted session key:</t>
          <artwork><![CDATA[
  38 81 ba fe 98 54 12 45 9b 86 c3 6f 98 cb 9a 5e
]]></artwork>
        </section>
        <section anchor="sample-v2-seipd-packet-1">
          <name>Sample v2 SEIPD Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="v2seipd-aes128-eax.hexdump"><![CDATA[
0x0000  d2 69 02 07 01 06 9f f9
0x0008  0e 3b 32 19 64 f3 a4 29
0x0010  13 c8 dc c6 61 93 25 01
0x0018  52 27 ef b7 ea ea a4 9f
0x0020  04 c2 e6 74 17 5d 4a 3d
0x0028  22 6e d6 af cb 9c a9 ac
0x0030  12 2c 14 70 e1 1c 63 d4
0x0038  c0 ab 24 1c 6a 93 8a d4
0x0040  8b f9 9a 5a 99 b9 0b ba
0x0048  83 25 de 61 04 75 40 25
0x0050  8a b7 95 9a 95 ad 05 1d
0x0058  da 96 eb 15 43 1d fe f5
0x0060  f5 e2 25 5c a7 82 61 54
0x0068  6e 33 9a
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  d2                       packet type: SEIPD
0x0001     69                    packet length
0x0002        02                 v2 SEIPD
0x0003           07              cipher: AES128
0x0004              01           AEAD mode: EAX
0x0005                 06        chunk size (2^12 octets)
0x0005                    9f f9  salt
0x0008  0e 3b 32 19 64 f3 a4 29
0x0010  13 c8 dc c6 61 93 25 01
0x0018  52 27 ef b7 ea ea a4 9f
0x0020  04 c2 e6 74 17 5d
0x0026                    4a 3d  chunk #0 encrypted data
0x0028  22 6e d6 af cb 9c a9 ac
0x0030  12 2c 14 70 e1 1c 63 d4
0x0038  c0 ab 24 1c 6a 93 8a d4
0x0040  8b f9 9a 5a 99 b9 0b ba
0x0048  83 25 de
0x004b           61 04 75 40 25  chunk #0 AEAD tag
0x0050  8a b7 95 9a 95 ad 05 1d
0x0058  da 96 eb
0x005b           15 43 1d fe f5  final AEAD tag (#1)
0x0060  f5 e2 25 5c a7 82 61 54
0x0068  6e 33 9a
]]></artwork>
        </section>
        <section anchor="decryption-of-data-1">
          <name>Decryption of Data</name>
          <t>Starting AEAD-EAX decryption of data, using the session key.</t>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  d2 02 07 01 06
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  b5 04 22 ac 1c 26 be 9d dd 83 1d 5b bb 36 b6 4f
  78 b8 33 f2 e9 4a 60 c0
]]></artwork>
          <t>Message key:</t>
          <artwork><![CDATA[
  b5 04 22 ac 1c 26 be 9d dd 83 1d 5b bb 36 b6 4f
]]></artwork>
          <t>Initialization vector:</t>
          <artwork><![CDATA[
  78 b8 33 f2 e9 4a 60 c0
]]></artwork>
          <t>Chunk #0:</t>
          <t>Nonce:</t>
          <artwork><![CDATA[
  78 b8 33 f2 e9 4a 60 c0 00 00 00 00 00 00 00 00
]]></artwork>
          <t>Additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 01 06
]]></artwork>
          <t>Decrypted chunk #0.</t>
          <t>Literal Data packet with the string contents <tt>Hello, world!</tt>:</t>
          <artwork><![CDATA[
  cb 13 62 00 00 00 00 00 48 65 6c 6c 6f 2c 20 77
  6f 72 6c 64 21
]]></artwork>
          <t>Padding packet:</t>
          <artwork><![CDATA[
  d5 0e ae 5b f0 cd 67 05 50 03 55 81 6c b0 c8 ff
]]></artwork>
          <t>Authenticating final tag:</t>
          <t>Final nonce:</t>
          <artwork><![CDATA[
  78 b8 33 f2 e9 4a 60 c0 00 00 00 00 00 00 00 01
]]></artwork>
          <t>Final additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 01 06 00 00 00 00 00 00 00 25
]]></artwork>
        </section>
        <section anchor="complete-aead-eax-encrypted-packet-sequence">
          <name>Complete AEAD-EAX Encrypted Packet Sequence</name>
          <sourcecode type="application/pgp-encrypted" name="v6skesk-aes128-eax.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----

w0AGHgcBCwMIpa5XnR/F2Cv/aSJPkZmTs1Bvo7WaanPP+MXvxfQcV/tU4cImgV14
KPX5LEVOtl6+AKtZhsaObnxV0mkCBwEGn/kOOzIZZPOkKRPI3MZhkyUBUifvt+rq
pJ8EwuZ0F11KPSJu1q/LnKmsEiwUcOEcY9TAqyQcapOK1Iv5mlqZuQu6gyXeYQR1
QCWKt5Wala0FHdqW6xVDHf719eIlXKeCYVRuM5o=
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
      </section>
      <section anchor="sample-aead-ocb-encryption-and-decryption">
        <name>Sample AEAD-OCB Encryption and Decryption</name>
        <t>This example encrypts the cleartext string <tt>Hello, world!</tt> with the passphrase <tt>password</tt>, using AES-128 with AEAD-OCB encryption.</t>
        <section anchor="sample-symmetric-key-encrypted-session-key-packet-v6-1">
          <name>Sample Version 6 Symmetric Key Encrypted Session Key Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="v6skesk-aes128-ocb.hexdump"><![CDATA[
0x0000  c3 3f 06 1d 07 02 0b 03
0x0008  08 56 a2 98 d2 f5 e3 64
0x0010  53 ff cf cc 5c 11 66 4e
0x0018  db 9d b4 25 90 d7 dc 46
0x0020  b0 72 41 b6 12 c3 81 2c
0x0028  ff fb ea 00 f2 34 7b 25
0x0030  64 11 23 f8 87 ae 60 d4
0x0038  fd 61 4e 08 37 d8 19 d3
0x0040  6c
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  c3                       packet type: SKESK
0x0001     3f                    packet length
0x0002        06                 v6 SKESK
0x0003           1d              length through end of AEAD nonce
0x0004              07           cipher: AES128
0x0005                 02        AEAD mode: OCB
0x0006                    0b     length of S2K
0x0007                       03  S2K type: iterated+salted
0x0008  08                       S2K hash: SHA2-256
0x0009     56 a2 98 d2 f5 e3 64  S2K salt
0x0010  53
0x0011    ff                     S2K iterations (65011712 octets)
0x0012        cf cc 5c 11 66 4e  AEAD nonce
0x0018  db 9d b4 25 90 d7 dc 46
0x0020  b0
0x0021     72 41 b6 12 c3 81 2c  encrypted session key
0x0028  ff fb ea 00 f2 34 7b 25
0x0030  64
0x0031     11 23 f8 87 ae 60 d4  AEAD tag
0x0038  fd 61 4e 08 37 d8 19 d3
0x0040  6c
]]></artwork>
        </section>
        <section anchor="starting-aead-ocb-decryption-of-the-session-key">
          <name>Starting AEAD-OCB Decryption of the Session Key</name>
          <t>The derived key is:</t>
          <artwork><![CDATA[
  e8 0d e2 43 a3 62 d9 3b 9d c6 07 ed e9 6a 73 56
]]></artwork>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  c3 06 07 02
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  38 a9 b3 45 b5 68 0b b6 1b b6 5d 73 ee c7 ec d9
]]></artwork>
          <t>Authenticated Data:</t>
          <artwork><![CDATA[
  c3 06 07 02
]]></artwork>
          <t>Nonce:</t>
          <artwork><![CDATA[
  cf cc 5c 11 66 4e db 9d b4 25 90 d7 dc 46 b0
]]></artwork>
          <t>Decrypted session key:</t>
          <artwork><![CDATA[
  28 e7 9a b8 23 97 d3 c6 3d e2 4a c2 17 d7 b7 91
]]></artwork>
        </section>
        <section anchor="sample-v2-seipd-packet-2">
          <name>Sample v2 SEIPD Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="v2seipd-aes128-ocb.hexdump"><![CDATA[
0x0000  d2 69 02 07 02 06 20 a6
0x0008  61 f7 31 fc 9a 30 32 b5
0x0010  62 33 26 02 7e 3a 5d 8d
0x0018  b5 74 8e be ff 0b 0c 59
0x0020  10 d0 9e cd d6 41 ff 9f
0x0028  d3 85 62 75 80 35 bc 49
0x0030  75 4c e1 bf 3f ff a7 da
0x0038  d0 a3 b8 10 4f 51 33 cf
0x0040  42 a4 10 0a 83 ee f4 ca
0x0048  1b 48 01 a8 84 6b f4 2b
0x0050  cd a7 c8 ce 9d 65 e2 12
0x0058  f3 01 cb cd 98 fd ca de
0x0060  69 4a 87 7a d4 24 73 23
0x0068  f6 e8 57
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  d2                       packet type: SEIPD
0x0001     69                    packet length
0x0002        02                 v2 SEIPD
0x0003           07              cipher: AES128
0x0004              02           AEAD mode: OCB
0x0005                 06        chunk size (2^12 octets)
0x0006                    20 a6  salt
0x0008  61 f7 31 fc 9a 30 32 b5
0x0010  62 33 26 02 7e 3a 5d 8d
0x0018  b5 74 8e be ff 0b 0c 59
0x0020  10 d0 9e cd d6 41
0x0026                    ff 9f  chunk #0 encrypted data
0x0028  d3 85 62 75 80 35 bc 49
0x0030  75 4c e1 bf 3f ff a7 da
0x0038  d0 a3 b8 10 4f 51 33 cf
0x0040  42 a4 10 0a 83 ee f4 ca
0x0048  1b 48 01
0x004b           a8 84 6b f4 2b  chunk #0 authentication tag
0x0050  cd a7 c8 ce 9d 65 e2 12
0x0058  f3 01 cb
0x005b           cd 98 fd ca de  final AEAD tag (#1)
0x0060  69 4a 87 7a d4 24 73 23
0x0068  f6 e8 57
]]></artwork>
        </section>
        <section anchor="decryption-of-data-2">
          <name>Decryption of Data</name>
          <t>Starting AEAD-OCB decryption of data, using the session key.</t>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  d2 02 07 02 06
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  71 66 2a 11 ee 5b 4e 08 14 4e 6d e8 83 a0 09 99
  eb de 12 bb 57 0d cf
]]></artwork>
          <t>Message key:</t>
          <artwork><![CDATA[
  71 66 2a 11 ee 5b 4e 08 14 4e 6d e8 83 a0 09 99
]]></artwork>
          <t>Initialization vector:</t>
          <artwork><![CDATA[
  eb de 12 bb 57 0d cf
]]></artwork>
          <t>Chunk #0:</t>
          <t>Nonce:</t>
          <artwork><![CDATA[
  eb de 12 bb 57 0d cf 00 00 00 00 00 00 00 00
]]></artwork>
          <t>Additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 02 06
]]></artwork>
          <t>Decrypted chunk #0.</t>
          <t>Literal Data packet with the string contents <tt>Hello, world!</tt>:</t>
          <artwork><![CDATA[
  cb 13 62 00 00 00 00 00 48 65 6c 6c 6f 2c 20 77
  6f 72 6c 64 21
]]></artwork>
          <t>Padding packet:</t>
          <artwork><![CDATA[
  d5 0e ae 6a a1 64 9b 56 aa 83 5b 26 13 90 2b d2
]]></artwork>
          <t>Authenticating final tag:</t>
          <t>Final nonce:</t>
          <artwork><![CDATA[
  eb de 12 bb 57 0d cf 00 00 00 00 00 00 00 01
]]></artwork>
          <t>Final additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 02 06 00 00 00 00 00 00 00 25
]]></artwork>
        </section>
        <section anchor="complete-aead-ocb-encrypted-packet-sequence">
          <name>Complete AEAD-OCB Encrypted Packet Sequence</name>
          <sourcecode type="application/pgp-encrypted" name="v6skesk-aes128-ocb.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----

wz8GHQcCCwMIVqKY0vXjZFP/z8xcEWZO2520JZDX3EawckG2EsOBLP/76gDyNHsl
ZBEj+IeuYNT9YU4IN9gZ02zSaQIHAgYgpmH3MfyaMDK1YjMmAn46XY21dI6+/wsM
WRDQns3WQf+f04VidYA1vEl1TOG/P/+n2tCjuBBPUTPPQqQQCoPu9MobSAGohGv0
K82nyM6dZeIS8wHLzZj9yt5pSod61CRzI/boVw==
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
      </section>
      <section anchor="sample-aead-gcm-encryption-and-decryption">
        <name>Sample AEAD-GCM Encryption and Decryption</name>
        <t>This example encrypts the cleartext string <tt>Hello, world!</tt> with the passphrase <tt>password</tt>, using AES-128 with AEAD-GCM encryption.</t>
        <section anchor="sample-symmetric-key-encrypted-session-key-packet-v6-2">
          <name>Sample Version 6 Symmetric Key Encrypted Session Key Packet</name>
          <t>This packet contains the following series of octets:</t>
          <artwork name="v6skesk-aes128-gcm.hexdump"><![CDATA[
0x0000  c3 3c 06 1a 07 03 0b 03
0x0008  08 e9 d3 97 85 b2 07 00
0x0010  08 ff b4 2e 7c 48 3e f4
0x0018  88 44 57 cb 37 26 b9 b3
0x0020  db 9f f7 76 e5 f4 d9 a4
0x0028  09 52 e2 44 72 98 85 1a
0x0030  bf ff 75 26 df 2d d5 54
0x0038  41 75 79 a7 79 9f
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  c3                       packet type: SKESK
0x0001     3c                    packet length
0x0002        06                 v6 SKESK
0x0003           1a              length through end of AEAD nonce
0x0004              07           cipher: AES128
0x0005                 03        AEAD mode: GCM
0x0006                    0b     length of S2K
0x0007                       03  S2K type: iterated+salted
0x0008  08                       S2K hash: SHA2-256
0x0009     e9 d3 97 85 b2 07 00  S2K salt
0x0010  08
0x0011     ff                    S2K iterations (65011712 octets)
0x0012        b4 2e 7c 48 3e f4  AEAD nonce
0x0018  88 44 57 cb 37 26
0x001e                    b9 b3  encrypted session key
0x0020  db 9f f7 76 e5 f4 d9 a4
0x0028  09 52 e2 44 72 98
0x002e                     85 1a  AEAD tag
0x0030  bf ff 75 26 df 2d d5 54
0x0038  41 75 79 a7 79 9f
]]></artwork>
        </section>
        <section anchor="starting-aead-gcm-decryption-of-the-session-key">
          <name>Starting AEAD-GCM Decryption of the Session Key</name>
          <t>The derived key is:</t>
          <artwork><![CDATA[
  25 02 81 71 5b ba 78 28 ef 71 ef 64 c4 78 47 53
]]></artwork>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  c3 06 07 03
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  7a 6f 9a b7 f9 9f 7e f8 db ef 84 1c 65 08 00 f5
]]></artwork>
          <t>Authenticated Data:</t>
          <artwork><![CDATA[
  c3 06 07 03
]]></artwork>
          <t>Nonce:</t>
          <artwork><![CDATA[
  b4 2e 7c 48 3e f4 88 44 57 cb 37 26
]]></artwork>
          <t>Decrypted session key:</t>
          <artwork><![CDATA[
  19 36 fc 85 68 98 02 74 bb 90 0d 83 19 36 0c 77
]]></artwork>
        </section>
        <section anchor="sample-v2-seipd-packet-3">
          <name>Sample v2 SEIPD Packet</name>
          <t>This packet contains the following series of octets, is:</t>
          <artwork name="v2seipd-aes128-ocb.hexdump"><![CDATA[
0x0000  d2 69 02 07 03 06 fc b9
0x0008  44 90 bc b9 8b bd c9 d1
0x0010  06 c6 09 02 66 94 0f 72
0x0018  e8 9e dc 21 b5 59 6b 15
0x0020  76 b1 01 ed 0f 9f fc 6f
0x0028  c6 d6 5b bf d2 4d cd 07
0x0030  90 96 6e 6d 1e 85 a3 00
0x0038  53 78 4c b1 d8 b6 a0 69
0x0040  9e f1 21 55 a7 b2 ad 62
0x0048  58 53 1b 57 65 1f d7 77
0x0050  79 12 fa 95 e3 5d 9b 40
0x0058  21 6f 69 a4 c2 48 db 28
0x0060  ff 43 31 f1 63 29 07 39
0x0068  9e 6f f9
]]></artwork>
          <t>The same data, broken out by octet and semantics, is:</t>
          <artwork><![CDATA[
0x0000  d2                       packet type: SEIPD
0x0001     69                    packet length
0x0002        02                 v2 SEIPD
0x0003           07              cipher: AES128
0x0004              03           AEAD mode: GCM
0x0005                 06        chunk size (2^12 octets)
0x0006                    fc b9  salt
0x0008  44 90 bc b9 8b bd c9 d1
0x0010  06 c6 09 02 66 94 0f 72
0x0018  e8 9e dc 21 b5 59 6b 15
0x0020  76 b1 01 ed 0f 9f
0x0026                    fc 6f  chunk #0 encrypted data
0x0028  c6 d6 5b bf d2 4d cd 07
0x0030  90 96 6e 6d 1e 85 a3 00
0x0038  53 78 4c b1 d8 b6 a0 69
0x0040  9e f1 21 55 a7 b2 ad 62
0x0048  58 53 1b
0x004b           57 65 1f d7 77  chunk #0 authentication tag
0x0050  79 12 fa 95 e3 5d 9b 40
0x0058  21 6f 69
0x005b           a4 c2 48 db 28  final AEAD tag (#1)
0x0060  ff 43 31 f1 63 29 07 39
0x0068  9e 6f f9
]]></artwork>
        </section>
        <section anchor="decryption-of-data-3">
          <name>Decryption of Data</name>
          <t>Starting AEAD-GCM decryption of data, using the session key.</t>
          <t>HKDF info:</t>
          <artwork><![CDATA[
  d2 02 07 03 06
]]></artwork>
          <t>HKDF output:</t>
          <artwork><![CDATA[
  ea 14 38 80 3c b8 a4 77 40 ce 9b 54 c3 38 77 8d
  4d 2b dc 2b
]]></artwork>
          <t>Message key:</t>
          <artwork><![CDATA[
  ea 14 38 80 3c b8 a4 77 40 ce 9b 54 c3 38 77 8d
]]></artwork>
          <t>Initialization vector:</t>
          <artwork><![CDATA[
  4d 2b dc 2b
]]></artwork>
          <t>Chunk #0:</t>
          <t>Nonce:</t>
          <artwork><![CDATA[
  4d 2b dc 2b 00 00 00 00 00 00 00 00
]]></artwork>
          <t>Additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 03 06
]]></artwork>
          <t>Decrypted chunk #0.</t>
          <t>Literal Data packet with the string contents <tt>Hello, world!</tt>:</t>
          <artwork><![CDATA[
  cb 13 62 00 00 00 00 00 48 65 6c 6c 6f 2c 20 77
  6f 72 6c 64 21
]]></artwork>
          <t>Padding packet:</t>
          <artwork><![CDATA[
  d5 0e 1c e2 26 9a 9e dd ef 81 03 21 72 b7 ed 7c
]]></artwork>
          <t>Authenticating final tag:</t>
          <t>Final nonce:</t>
          <artwork><![CDATA[
  4d 2b dc 2b 00 00 00 00 00 00 00 01
]]></artwork>
          <t>Final additional authenticated data:</t>
          <artwork><![CDATA[
  d2 02 07 03 06 00 00 00 00 00 00 00 25
]]></artwork>
        </section>
        <section anchor="complete-aead-gcm-encrypted-packet-sequence">
          <name>Complete AEAD-GCM Encrypted Packet Sequence</name>
          <sourcecode type="application/pgp-encrypted" name="v6skesk-aes128-gcm.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----

wzwGGgcDCwMI6dOXhbIHAAj/tC58SD70iERXyzcmubPbn/d25fTZpAlS4kRymIUa
v/91Jt8t1VRBdXmneZ/SaQIHAwb8uUSQvLmLvcnRBsYJAmaUD3LontwhtVlrFXax
Ae0Pn/xvxtZbv9JNzQeQlm5tHoWjAFN4TLHYtqBpnvEhVaeyrWJYUxtXZR/Xd3kS
+pXjXZtAIW9ppMJI2yj/QzHxYykHOZ5v+Q==
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
      </section>
      <section anchor="sample-messages-encrypted-using-argon2">
        <name>Sample Messages Encrypted Using Argon2</name>
        <t>These messages are the literal data <tt>Hello, world!</tt> encrypted using v1 SEIPD, with Argon2 and the passphrase "password", using different session key sizes. In each example, the choice of symmetric cipher is the same in both the v4 SKESK packet and v1 SEIPD packet. In all cases, the Argon2 parameters are t = 1, p = 4, and m = 21.</t>
        <section anchor="version-4-skesk-using-argon2-with-aes-128">
          <name>V4 SKESK Using Argon2 with AES-128</name>
          <sourcecode type="application/pgp-encrypted" name="v4skesk-argon2-aes128.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----
Comment: Encrypted using AES with 128-bit key
Comment: Session key: 01FE16BBACFD1E7B78EF3B865187374F

wycEBwScUvg8J/leUNU1RA7N/zE2AQQVnlL8rSLPP5VlQsunlO+ECxHSPgGYGKY+
YJz4u6F+DDlDBOr5NRQXt/KJIf4m4mOlKyC/uqLbpnLJZMnTq3o79GxBTdIdOzhH
XfA3pqV4mTzF
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
        <section anchor="version-4-skesk-using-argon2-with-aes-192">
          <name>V4 SKESK Using Argon2 with AES-192</name>
          <sourcecode type="application/pgp-encrypted" name="v4skesk-argon2-aes192.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----
Comment: Encrypted using AES with 192-bit key
Comment: Session key: 27006DAE68E509022CE45A14E569E91001C2955...
Comment: Session key: ...AF8DFE194

wy8ECAThTKxHFTRZGKli3KNH4UP4AQQVhzLJ2va3FG8/pmpIPd/H/mdoVS5VBLLw
F9I+AdJ1Sw56PRYiKZjCvHg+2bnq02s33AJJoyBexBI4QKATFRkyez2gldJldRys
LVg77Mwwfgl2n/d572WciAM=
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
        <section anchor="version-4-skesk-using-argon2-with-aes-256">
          <name>V4 SKESK Using Argon2 with AES-256</name>
          <sourcecode type="application/pgp-encrypted" name="v4skesk-argon2-aes256.pgp"><![CDATA[
-----BEGIN PGP MESSAGE-----
Comment: Encrypted using AES with 256-bit key
Comment: Session key: BBEDA55B9AAE63DAC45D4F49D89DACF4AF37FEF...
Comment: Session key: ...C13BAB2F1F8E18FB74580D8B0

wzcECQS4eJUgIG/3mcaILEJFpmJ8AQQVnZ9l7KtagdClm9UaQ/Z6M/5roklSGpGu
623YmaXezGj80j4B+Ku1sgTdJo87X1Wrup7l0wJypZls21Uwd67m9koF60eefH/K
95D1usliXOEm8ayQJQmZrjf6K6v9PWwqMQ==
-----END PGP MESSAGE-----
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="upgrade-guidance">
      <name>Upgrade Guidance (Adapting Implementations from RFCs 4880 and 6637)</name>
      <t>This subsection offers a concise, non-normative summary of the substantial additions to and departures from <xref target="RFC4880"/> and <xref target="RFC6637"/>.
It is intended to help implementers who are augmenting an existing implementation from those specifications to comply with this specification. Cryptographic algorithms marked with "MTI" are mandatory to implement.</t>
      <ul spacing="normal">
        <li>
          <t>Public Key Signing Algorithms:
          </t>
          <ul spacing="normal">
            <li>
              <t>Ed25519 (Sections <xref target="key-ed25519" format="counter"/> and <xref target="sig-ed25519" format="counter"/>) -- MTI</t>
            </li>
            <li>
              <t>Ed448 (Sections <xref target="key-ed448" format="counter"/> and <xref target="sig-ed448" format="counter"/>)</t>
            </li>
            <li>
              <t>EdDSALegacy with Ed25519Legacy (Sections <xref target="key-eddsa-legacy" format="counter"/> and <xref target="sig-eddsa-legacy" format="counter"/>)</t>
            </li>
            <li>
              <t>ECDSA with Brainpool curves (<xref target="ec-curves"/>)</t>
            </li>
          </ul>
        </li>
        <li>
          <t>Public Key Encryption Algorithms:
          </t>
          <ul spacing="normal">
            <li>
              <t>X25519 (Sections <xref target="key-x25519" format="counter"/> and <xref target="pkesk-x25519" format="counter"/>) -- MTI</t>
            </li>
            <li>
              <t>X448 (Sections <xref target="key-x448" format="counter"/> and <xref target="pkesk-x448" format="counter"/>)</t>
            </li>
            <li>
              <t>ECDH with Curve25519Legacy (<xref target="ec-curves"/>)</t>
            </li>
            <li>
              <t>ECDH with Brainpool curves (<xref target="ec-curves"/>)</t>
            </li>
          </ul>
        </li>
        <li>
          <t>AEAD Encryption:
          </t>
          <ul spacing="normal">
            <li>
              <t>V2 SEIPD (<xref target="version-two-seipd"/>)</t>
            </li>
            <li>
              <t>AEAD modes:
              </t>
              <ul spacing="normal">
                <li>
                  <t>OCB mode (<xref target="aead-mode-ocb"/>) -- MTI</t>
                </li>
                <li>
                  <t>EAX mode (<xref target="aead-mode-eax"/>)</t>
                </li>
                <li>
                  <t>GCM mode (<xref target="aead-mode-gcm"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>V6 PKESK (<xref target="v6-pkesk"/>)</t>
            </li>
            <li>
              <t>V6 SKESK (<xref target="v6-skesk"/>)</t>
            </li>
            <li>
              <t>Features signature subpacket: add flag for v2 SEIPD (<xref target="features-subpacket"/>)</t>
            </li>
            <li>
              <t>Signature Subpacket: Preferred AEAD Ciphersuites (<xref target="preferred-v2-seipd"/>)</t>
            </li>
            <li>
              <t>Secret key encryption: AEAD "S2K usage octet" (Sections <xref target="s2k-usage-octet" format="counter"/> and <xref target="secret-key-packet-formats" format="counter"/>)</t>
            </li>
          </ul>
        </li>
        <li>
          <t>Version 6 Keys and Signatures:
          </t>
          <ul spacing="normal">
            <li>
              <t>Version 6 Public Keys (<xref target="v6-pubkeys"/>)</t>
            </li>
            <li>
              <t>Version 6 Fingerprint and Key ID (<xref target="v6-key-id-fingerprint"/>)</t>
            </li>
            <li>
              <t>Version 6 Secret Keys (<xref target="secret-key-packet-formats"/>)</t>
            </li>
            <li>
              <t>Version 6 Signatures (<xref target="version-four-and-six-sig"/>)</t>
            </li>
            <li>
              <t>Version 6 One-Pass Signatures (<xref target="one-pass-sig"/>)</t>
            </li>
          </ul>
        </li>
        <li>
          <t>Certificate (Transferable Public Key) Structure:
          </t>
          <ul spacing="normal">
            <li>
              <t>Preferences subpackets in Direct Key signatures (<xref target="self-sigs"/>)</t>
            </li>
            <li>
              <t>Self-verifying revocation certificate (<xref target="v6-revocation-certificate"/>)</t>
            </li>
            <li>
              <t>User ID is explicitly optional (<xref target="v6-certificate-structures"/>)</t>
            </li>
          </ul>
        </li>
        <li>
          <t>S2K: Argon2 (<xref target="s2k-argon2"/>)</t>
        </li>
        <li>
          <t>Subpacket: Intended Recipient Fingerprint (<xref target="intended-recipient-fingerprint"/>)</t>
        </li>
        <li>
          <t>Digest Algorithms: SHA3-256 and SHA3-512 (<xref target="hash-algos"/>)</t>
        </li>
        <li>
          <t>Packet: Padding (<xref target="padding-packet"/>)</t>
        </li>
        <li>
          <t>Message Structure: Packet Criticality (<xref target="packet-criticality"/>)</t>
        </li>
        <li>
          <t>Deprecations:
          </t>
          <ul spacing="normal">
            <li>
              <t>Public Key Algorithms:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid RSA weak keys (<xref target="rsa-notes"/>)</t>
                </li>
                <li>
                  <t>Avoid DSA (<xref target="dsa-notes"/>)</t>
                </li>
                <li>
                  <t>Avoid ElGamal (Sections <xref target="elgamal-notes" format="counter"/> and <xref target="pkesk-elgamal" format="counter"/>)</t>
                </li>
                <li>
                  <t>For Version 6 Keys: Avoid EdDSA25519Legacy and Curve25519Legacy (<xref target="ec-curves"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Digest Algorithms:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid MD5, SHA1, and RIPEMD160 (<xref target="hash-algos"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Symmetric Key Algorithms:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid IDEA, TripleDES, and CAST5 (<xref target="symmetric-algos"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>S2K Specifier:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid Simple S2K (<xref target="s2k-simple"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Secret Key Protections (a.k.a.&nbsp;S2K Usage):
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid MalleableCFB (<xref target="secret-key-encryption"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Packet Types:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid Symmetrically Encrypted Data (Sections <xref target="sed" format="counter"/> and <xref target="ciphertext-malleability" format="counter"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Literal Data Packet Metadata:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid Filename and Date fields (<xref target="lit"/>)</t>
                </li>
                <li>
                  <t>Avoid Special <tt>_CONSOLE</tt> "filename" (<xref target="for-eyes-only"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Packet Versions:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid Version 3 Public Keys (<xref target="v3-pubkeys"/>)</t>
                </li>
                <li>
                  <t>Avoid Version 3 Signatures (<xref target="signature-packet"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Signature Types:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Avoid Reserved Signature Type ID 0xFF (Sections <xref target="sigtype-reserved" format="counter"/> and <xref target="sig-computation-notes" format="counter"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Signature Subpackets:
              </t>
              <ul spacing="normal">
                <li>
                  <t>For Version 6 Signatures: Avoid Issuer Key ID (<xref target="issuer-keyid-subpacket"/>)</t>
                </li>
                <li>
                  <t>Avoid Revocation Key (<xref target="revocation-key"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>ASCII Armor:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Ignore; do not emit CRC (<xref target="optional-crc24"/>)</t>
                </li>
                <li>
                  <t>Do not emit "Version" Armor Header (<xref target="armor-header-key-version"/>)</t>
                </li>
              </ul>
            </li>
            <li>
              <t>Cleartext Signature Framework:
              </t>
              <ul spacing="normal">
                <li>
                  <t>Ignore; avoid emitting unnecessary Hash: headers (<xref target="armor-header-key-hash"/>)</t>
                </li>
                <li>
                  <t>Reject Cleartext Signature Framework signatures with invalid Hash: headers (<xref target="armor-header-key-hash"/>) or any other Armor Header (<xref target="cleartext-structure"/>)</t>
                </li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
      <section anchor="terminology-changes">
        <name>Terminology Changes</name>
        <t>Note that some of the words used in previous versions of the OpenPGP specification have been improved in this document.</t>
        <t>In previous versions, the following terms were used:</t>
        <ul spacing="normal">
          <li>
            <t>"Radix-64" was used to refer to OpenPGP's ASCII Armor base64 encoding (<xref target="base64"/>).</t>
          </li>
          <li>
            <t>"Old packet format" was used to refer to the Legacy packet format (<xref target="legacy-packet-format"/>) predating <xref target="RFC2440"/>.</t>
          </li>
          <li>
            <t>"New packet format" was used to refer to the OpenPGP packet format (<xref target="openpgp-packet-format"/>) introduced in <xref target="RFC2440"/>.</t>
          </li>
          <li>
            <t>"Certificate" was used ambiguously to mean multiple things.
In this document, it means "Transferable Public Key" exclusively.</t>
          </li>
          <li>
            <t>"Preferred Symmetric Algorithms" was the old name for the "Preferred Symmetric Ciphers for v1 SEIPD" subpacket (<xref target="preferred-v1-seipd"/>).</t>
          </li>
          <li>
            <t>"Modification Detection Code" or "MDC" was originally described as a distinct packet (Packet Type ID 19), and its corresponding flag in the Features signature subpacket (<xref target="features-subpacket"/>) was known as "Modification Detection".
It is now described as an intrinsic part of v1 SEIPD (<xref target="version-one-seipd"/>), and the same corresponding flag is known as "Version 1 Symmetrically Encrypted and Integrity Protected Data packet".</t>
          </li>
          <li>
            <t>"Packet Tag" was used to refer to the Packet Type ID (<xref target="packet-types"/>) or sometimes to the encoded Packet Type ID (<xref target="packet-headers"/>).</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="errata-listing">
      <name>Errata Addressed by This Document</name>
      <t>The following verified errata have been incorporated or are otherwise resolved by this document:</t>
      <ul spacing="normal">
        <li>
          <t><xref target="Errata-2199"/> - S2K hash/cipher octet correction</t>
        </li>
        <li>
          <t><xref target="Errata-2200"/> - No implicit use of IDEA correction</t>
        </li>
        <li>
          <t><xref target="Errata-2206"/> - PKESK acronym expansion</t>
        </li>
        <li>
          <t><xref target="Errata-2208"/> - Signature key owner clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2214"/> - Signature hashing clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2216"/> - Self-signature applies to user ID correction</t>
        </li>
        <li>
          <t><xref target="Errata-2219"/> - Session key encryption storage clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2222"/> - Simple hash <bcp14>MUST</bcp14>/<bcp14>MAY</bcp14> clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2226"/> - Native line endings <bcp14>SHOULD</bcp14> clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2234"/> - Radix-64/base64 clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2235"/> - ASCII/UTF-8 collation sequence clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2236"/> - Packet Composition is a sequence clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2238"/> - Subkey packets come after all User ID packets clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2240"/> - Subkey removal clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2242"/> - mL/emLen variable correction</t>
        </li>
        <li>
          <t><xref target="Errata-2243"/> - CFB mode initialization vector (IV) clarification</t>
        </li>
        <li>
          <t><xref target="Errata-2270"/> - SHA-224 octet sequence correction</t>
        </li>
        <li>
          <t><xref target="Errata-2271"/> - Radix-64 correction</t>
        </li>
        <li>
          <t><xref target="Errata-3298"/> - Key Revocation signatures correction</t>
        </li>
        <li>
          <t><xref target="Errata-5491"/> - C code fix for CRC24_POLY define</t>
        </li>
        <li>
          <t><xref target="Errata-7545"/> - Armor Header colon hex fix</t>
        </li>
	  <li>
          <t><xref target="Errata-7889"/> - Signature/certification correction</t>
        </li>
      </ul>
    </section>
 <section anchor="acknowledgements" numbered="false">
      <name>Acknowledgements</name>
      <t>Thanks to the OpenPGP Design Team for working on this document and preparing it for working group consumption: <contact fullname="Stephen Farrell"/>, <contact fullname="Daniel Kahn Gillmor"/>, <contact fullname="Daniel Huigens"/>, <contact fullname="Jeffrey Lau"/>, <contact fullname="Yutaka Niibe"/>, <contact fullname="Justus Winter"/>, and <contact fullname="Paul Wouters"/>.</t>
      
      <t>Thanks to <contact fullname="Werner Koch"/> for the early work on rfc4880bis and <contact fullname="Andrey Jivsov"/> for the work on <xref target="RFC6637"/>.</t>
      <t>This document also draws on much previous work from a number of other authors including <contact fullname="Derek Atkins"/>, <contact fullname="Charles Breed"/>, <contact fullname="Dave Del Torto"/>, <contact fullname="Marc Dyksterhouse"/>, <contact fullname="Gail Haspert"/>, <contact fullname="Gene Hoffman"/>, <contact fullname="Paul Hoffman"/>, <contact fullname="Ben Laurie"/>, <contact fullname="Raph Levien"/>, <contact fullname="Colin Plumb"/>, <contact fullname="Will Price"/>, <contact fullname="Daphne Shaw"/>, <contact fullname="William Stallings"/>, <contact fullname="Mark Weaver"/>, and <contact fullname="Philip R. Zimmermann"/>.</t>
    </section>
  </back>
</rfc>

