<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc [
<!ENTITY nbsp    "&#160;">
<!ENTITY zwsp   "&#8203;">
<!ENTITY nbhy   "&#8209;">
<!ENTITY wj     "&#8288;">
]> 

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-oauth-dpop-16" number="9449" submissionType="IETF" category="std"
consensus="true" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" updates="" obsoletes="" version="3">

<front>
<title abbrev="OAuth DPoP">OAuth 2.0 Demonstrating Proof of Possession (DPoP)</title>
<seriesInfo name="RFC" value="9449"/>

<author initials="D." surname="Fett" fullname="Daniel Fett"><organization>Authlete</organization><address><postal><street></street>
</postal><email>mail@danielfett.de</email>
</address></author>

<author initials="B." surname="Campbell" fullname="Brian Campbell"><organization>Ping Identity</organization><address><postal><street></street>
</postal><email>bcampbell@pingidentity.com</email></address></author>

<author initials="J." surname="Bradley" fullname="John Bradley"><organization>Yubico</organization><address><postal><street></street>
</postal><email>ve7jtb@ve7jtb.com</email>
</address></author>

<author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt"><organization>Tuconic</organization><address><postal><street></street>
</postal><email>torsten@lodderstedt.net</email></address></author>

<author initials="M." surname="Jones" fullname="Michael Jones"><organization>Self-Issued Consulting</organization><address><postal><street></street>
</postal><email>michael_b_jones@hotmail.com</email>
<uri>https://self-issued.info/</uri>
</address></author>

<author initials="D." surname="Waite" fullname="David Waite"><organization>Ping Identity</organization><address><postal><street></street>
</postal><email>david@alkaline-solutions.com</email>
</address></author>

<date year="2023" month="September"/>

<area>sec</area>
<workgroup>oauth</workgroup>
<keyword>security</keyword>
<keyword>oauth2</keyword>

<abstract>
<t>This document describes a mechanism for sender-constraining OAuth 2.0
tokens via a proof-of-possession mechanism on the application level.
This mechanism allows for the detection of replay attacks with access and refresh
tokens.</t>
</abstract>

</front>

<middle>

  <section anchor="Introduction"><name>Introduction</name>
<t>Demonstrating Proof of Possession (DPoP) is an application-level mechanism for
sender-constraining OAuth <xref target="RFC6749"></xref> access and refresh tokens. It enables a client to
prove the possession of a public/private key pair by including
a <tt>DPoP</tt> header in an HTTP request. The value of the header is a JSON Web Token
(JWT) <xref target="RFC7519"></xref> that enables the authorization
server to bind issued tokens to the public part of a client's
key pair. Recipients of such tokens are then able to verify the binding of the
token to the key pair that the client has demonstrated that it holds via
the <tt>DPoP</tt> header, thereby providing some assurance that the client presenting
the token also possesses the private key.
In other words, the legitimate presenter of the token is constrained to be
the sender that holds and proves possession of the private part of the
key pair.</t>
<t>The mechanism specified herein can be used in cases where other
methods of sender-constraining tokens that utilize elements of the underlying
secure transport layer, such as <xref target="RFC8705"></xref> or <xref target="I-D.ietf-oauth-token-binding"></xref>,
are not available or desirable. For example, due to a sub-par user experience
of TLS client authentication in user agents and a lack of support for HTTP token
binding, neither mechanism can be used if an OAuth client is an application that
is dynamically downloaded and executed in a web browser (sometimes referred to as a
"single-page application"). 
   Additionally, applications that are installed and run directly
   on a user's device are well positioned to benefit from
   DPoP-bound tokens that guard against the misuse of tokens by
   a compromised or malicious resource.
Such applications often have dedicated protected storage
for cryptographic keys.</t>
<t>DPoP can be used to sender-constrain access tokens regardless of the
client authentication method employed, but DPoP itself is not used for client authentication.
DPoP can also be used to sender-constrain refresh tokens issued to public clients
(those without authentication credentials associated with the <tt>client_id</tt>).</t>

<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation
of <xref target="RFC5234"></xref>.</t>
<t>This specification uses the terms "access token", "refresh token",
"authorization server", "resource server", "authorization endpoint",
"authorization request", "authorization response", "token endpoint",
"grant type", "access token request", "access token response",
"client", "public client", and "confidential client" defined by "The OAuth 2.0 Authorization Framework" <xref target="RFC6749"></xref>.</t>
<t>The terms "request", "response", "header field", and "target URI"
are imported from <xref target="RFC9110"></xref>.</t>
<t>The terms "JOSE" and "JOSE Header" are imported from <xref target="RFC7515"></xref>.</t>
<t>This document contains non-normative examples of partial and complete HTTP messages.
Some examples use a single trailing backslash to indicate line wrapping for long values, as per <xref target="RFC8792"></xref>.
The character and leading spaces on wrapped lines are not part of the value.</t>
</section>
</section>

<section anchor="objective"><name>Objectives</name>
<t>The primary aim of DPoP is to prevent unauthorized or illegitimate
parties from using leaked or stolen access tokens, by binding a token
to a public key upon issuance and requiring that the client proves
possession of the corresponding private key when using the token.
This constrains the legitimate sender of the token to only the party with
access to the private key and gives the server receiving the token added
assurances that the sender is legitimately authorized to use it.</t>
<t>Access tokens that are sender-constrained via DPoP thus stand in
contrast to the typical bearer token, which can be used by any party in
possession of such a token. Although protections generally exist to prevent unintended disclosure of bearer tokens, unforeseen vectors for leakage have occurred due to vulnerabilities and implementation issues in other layers in the protocol or software stack (see, e.g., Compression Ratio Info-leak Made Easy (CRIME) <xref target="CRIME"></xref>, Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext (BREACH) <xref target="BREACH"></xref>,
Heartbleed <xref target="Heartbleed"></xref>, and the Cloudflare parser bug <xref target="Cloudbleed"></xref>).
There have also been numerous published token theft attacks on OAuth
implementations themselves (<xref target="GitHub.Tokens"></xref> is just one high-profile example).
DPoP provides a general defense in depth
against the impact of unanticipated token leakage. DPoP is not, however,
a substitute for a secure transport and <bcp14>MUST</bcp14> always be used in
conjunction with HTTPS.</t>
<t>The very nature of the typical OAuth protocol interaction
necessitates that the client discloses the access token to the
protected resources that it accesses. The attacker model
in <xref target="I-D.ietf-oauth-security-topics"></xref> describes cases where a
protected resource might be counterfeit, malicious, or compromised
and plays received tokens against other protected resources to gain
unauthorized access. Audience-restricted access tokens
(e.g., using the JWT <xref target="RFC7519"></xref> <tt>aud</tt> claim) can
prevent such misuse. However, doing so in practice has proven to be
prohibitively cumbersome for many deployments (despite extensions such as <xref target="RFC8707"></xref>).
Sender-constraining access tokens is a more robust and straightforward
mechanism to prevent such token replay at a different endpoint, and DPoP
is an accessible application-layer means of doing so.</t>
<t>Due to the potential for cross-site scripting (XSS), browser-based
OAuth clients bring to bear added considerations with respect to protecting
tokens. The most straightforward XSS-based attack is for an attacker to
exfiltrate a token and use it themselves completely independent of the
legitimate client. A stolen access token is used for protected
resource access, and a stolen refresh token is used for obtaining new access tokens.
If the private key is non-extractable (as is possible with <xref target="W3C.WebCryptoAPI"></xref>),
DPoP renders exfiltrated tokens alone unusable.</t>
<t>XSS vulnerabilities also allow an attacker to execute code in the context of
the browser-based client application and maliciously use a token indirectly
through the client. That execution context has access to utilize the signing
key; thus, it can produce DPoP proofs to use in conjunction with the token.
At this application layer, there is most likely no feasible defense against
this threat except generally preventing XSS; therefore, it is considered
out of scope for DPoP.</t>
<t>Malicious XSS code executed in the context of the browser-based client
application is also in a position to create DPoP proofs with timestamp values in
the future and exfiltrate them in conjunction with a token. These stolen
artifacts can later be used independent of the client application to
access protected resources. To prevent this, servers can optionally require
clients to include a server-chosen value into the proof that cannot be predicted
by an attacker (nonce). In the absence of the optional nonce, the impact of
pre-computed DPoP proofs is limited somewhat by the proof being bound to an
access token on protected resource access. Because a proof covering an access
token that does not yet exist cannot feasibly be created, access tokens obtained
with an exfiltrated refresh token and pre-computed proofs will be unusable.</t>
<t>Additional security considerations are discussed in <xref target="Security"></xref>.</t>
</section>

<section anchor="concept"><name>Concept</name>
<t>The main data structure introduced by this specification is a DPoP
proof JWT that is sent as a header in an
HTTP request, as described in detail below. A client uses a DPoP proof JWT to prove
the possession of a private key corresponding to a certain public key.</t>
<t>Roughly speaking, a DPoP proof is a signature over:</t>
<ul>
<li>some data of the
HTTP request to which it is attached,</li> 
<li>a timestamp,</li> 
<li>a unique
identifier,</li> 
<li>an optional server-provided nonce, and</li>
<li>a hash of the
associated access token when an access token is present within the
  request.</li>
</ul>
<figure anchor="basic-flow"><name>Basic DPoP Flow </name>
<artwork type="ascii-art"><![CDATA[
+--------+                                          +---------------+
|        |--(A)-- Token Request ------------------->|               |
| Client |        (DPoP Proof)                      | Authorization |
|        |                                          |     Server    |
|        |<-(B)-- DPoP-Bound Access Token ----------|               |
|        |        (token_type=DPoP)                 +---------------+
|        |
|        | 
|        |                                          +---------------+
|        |--(C)-- DPoP-Bound Access Token --------->|               |
|        |        (DPoP Proof)                      |    Resource   |
|        |                                          |     Server    |
|        |<-(D)-- Protected Resource ---------------|               |
|        |                                          +---------------+
+--------+
]]></artwork>
</figure>
<t>The basic steps of an OAuth flow with DPoP (without the optional nonce) are shown in <xref target="basic-flow"></xref>.</t>

<ol type="A" spacing="normal">
<li>In the token request, the client sends an authorization grant
(e.g., an authorization code, refresh token, etc.)
to the authorization server in order to obtain an access token
(and potentially a refresh token). The client attaches a DPoP
proof to the request in an HTTP header.</li>
<li>The authorization server binds (sender-constrains) the access token to the
public key claimed by the client in the DPoP proof; that is, the access token cannot
be used without proving possession of the respective private key.
If a refresh token is issued to a public client, it is also bound to the public key of the DPoP proof.</li>
<li>To use the access token, the client has to prove
possession of the private key by, again, adding a header to the
request that carries a DPoP proof for that request. The resource server needs to
receive information about the public key to which the access token is bound. This
information may be encoded directly into the access token (for
JWT-structured access tokens) or provided via token
introspection endpoint (not shown).
The resource server verifies that the public key to which the
access token is bound matches the public key of the DPoP proof.
It also verifies that the access token hash in the DPoP proof matches the
access token presented in the request.</li>
<li>The resource server refuses to serve the request if the
signature check fails or if the data in the DPoP proof is wrong,
e.g., the target URI does not match the URI claim in the DPoP
proof JWT. The access token itself, of course, must also be
valid in all other respects.</li>
</ol>
<t>The DPoP mechanism presented herein is not a client authentication method.
In fact, a primary use case of DPoP is for public clients (e.g., single-page
applications and applications on a user's device) that do not use client authentication. Nonetheless, DPoP
is designed to be compatible with <tt>private_key_jwt</tt> and all
other client authentication methods.</t>
<t>DPoP does not directly ensure message integrity, but it relies on the TLS
layer for that purpose. See <xref target="Security"></xref> for details.</t>
</section>

<section anchor="the-proof"><name>DPoP Proof JWTs</name>
<t>DPoP introduces the concept of a DPoP proof, which is a JWT created by
the client and sent with an HTTP request using the <tt>DPoP</tt> header field.
Each HTTP request requires a unique DPoP proof.</t>
<t>A valid DPoP proof demonstrates to the server that the client holds the private
key that was used to sign the DPoP proof JWT. This enables authorization servers to bind
issued tokens to the corresponding public key (as described in <xref target="access-token-request"></xref>)
and enables resource servers to verify the key-binding of tokens that
it receives (see <xref target="http-auth-scheme"></xref>), which prevents said tokens from
being used by any entity that does not have access to the private key.</t>
<t>The DPoP proof demonstrates possession of a key and, by itself, is not
an authentication or access control mechanism. When presented
in conjunction with a key-bound access token as described in <xref target="http-auth-scheme"></xref>,
the DPoP proof provides additional assurance about the legitimacy of the client
to present the access token. However, a valid DPoP proof JWT is not sufficient alone
to make access control decisions.</t>

<section anchor="the-dpop-http-header"><name>The DPoP HTTP Header</name>
<t>A DPoP proof is included in an HTTP request using the following request header field.</t>

<dl spacing="compact">
<dt><tt>DPoP</tt>:</dt>
<dd>A JWT that adheres to the structure and syntax of <xref target="DPoP-Proof-Syntax"></xref>.</dd>
</dl>
<t><xref target="dpop-proof-jwt"></xref> shows an example DPoP HTTP header field. The example uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="dpop-proof-jwt"><name>Example <tt>DPoP</tt> Header </name>
<sourcecode type="http-message">DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6Ik\
 VDIiwieCI6Imw4dEZyaHgtMzR0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCR\
 nMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFqSG10NnY5VERWclUwQ2R2R1JE\
 QSIsImNydiI6IlAtMjU2In19.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaHRtIj\
 oiUE9TVCIsImh0dSI6Imh0dHBzOi8vc2VydmVyLmV4YW1wbGUuY29tL3Rva2VuIiwia\
 WF0IjoxNTYyMjYyNjE2fQ.2-GxA6T8lP4vfrg8v-FdWP0A0zdrj8igiMLvqRMUvwnQg\
 4PtFLbdLXiOSsX0x7NVY-FNyJK70nfbV37xRZT3Lg
</sourcecode>
</figure>
<t>Note that per <xref target="RFC9110"></xref>, header field names are case insensitive; thus, <tt>DPoP</tt>, <tt>DPOP</tt>, <tt>dpop</tt>, etc., are all valid and equivalent header
field names. However, case is significant in the header field value.</t>
<t>The <tt>DPoP</tt> HTTP header field value
uses the token68 syntax defined in <xref target="RFC9110" sectionFormat="of" section="11.2"></xref> and is repeated below in <xref target="dpop-header-abnf"></xref> for ease of reference.</t>

<figure anchor="dpop-header-abnf"><name>DPoP Header Field ABNF</name>
<sourcecode type="abnf"><![CDATA[
DPoP       = token68
token68    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
]]></sourcecode></figure>
</section>

<section anchor="DPoP-Proof-Syntax"><name>DPoP Proof JWT Syntax</name>
<t>A DPoP proof is a JWT <xref target="RFC7519"></xref> that is signed (using JSON Web Signature (JWS) <xref target="RFC7515"></xref>) with a private key chosen by the client (see below). The
JOSE Header of a DPoP JWT <bcp14>MUST</bcp14> contain at least the following parameters:</t>
<dl spacing="normal">
<dt><tt>typ</tt>:</dt><dd>A field with the value <tt>dpop+jwt</tt>, which explicitly types the DPoP proof JWT as recommended in <xref target="RFC8725" sectionFormat="of" section="3.11"></xref>.</dd>
<dt><tt>alg</tt>:</dt><dd>An identifier for a JWS asymmetric digital signature algorithm from <xref target="IANA.JOSE.ALGS"></xref>. It
<bcp14>MUST NOT</bcp14> be <tt>none</tt> or an identifier for a symmetric algorithm (Message Authentication Code (MAC)).</dd>
<dt><tt>jwk</tt>:</dt><dd>Represents the public key chosen by the client in JSON Web Key (JWK) <xref target="RFC7517"/> format as defined in <xref target="RFC7515" sectionFormat="of" section="4.1.3"></xref>. It
<bcp14>MUST NOT</bcp14> contain a private key.</dd>
</dl>
<t>The payload of a DPoP proof <bcp14>MUST</bcp14> contain at least the following claims:</t>

<dl spacing="normal">
<dt><tt>jti</tt>:</dt><dd>Unique identifier for the DPoP proof JWT.
The value <bcp14>MUST</bcp14> be assigned such that there is a negligible
probability that the same value will be assigned to any
other DPoP proof used in the same context during the time window of validity.
Such uniqueness can be accomplished by encoding (base64url or any other
suitable encoding) at least 96 bits of
pseudorandom data or by using a version 4 Universally Unique Identifier (UUID) string according to <xref target="RFC4122"></xref>.
The <tt>jti</tt> can be used by the server for replay
detection and prevention; see <xref target="Token_Replay"></xref>.</dd>
<dt><tt>htm</tt>:</dt><dd>The value of the HTTP method (<xref target="RFC9110" sectionFormat="of" section="9.1"></xref>) of the
request to which the JWT is attached.</dd>
<dt><tt>htu</tt>:</dt><dd>The HTTP target URI (<xref target="RFC9110" sectionFormat="of" section="7.1"></xref>) of the request to which the JWT is attached, without query and fragment
parts.</dd>
<dt><tt>iat</tt>:</dt><dd>Creation timestamp of the JWT (<xref target="RFC7519" sectionFormat="of" section="4.1.6"></xref>).</dd>
</dl>
<t>When the DPoP proof is used in conjunction with the presentation of an access token in protected resource access (see
<xref target="protected-resource-access"></xref>), the DPoP proof <bcp14>MUST</bcp14> also contain the following claim:</t>
<dl spacing="normal">
<dt><tt>ath</tt>:</dt><dd>Hash of the access token.
The value <bcp14>MUST</bcp14> be the result of a base64url encoding (as defined in <xref target="RFC7515" sectionFormat="of" section="2"></xref>) the SHA-256 <xref target="SHS"></xref>
hash of the ASCII encoding of the associated access token's value.</dd>
</dl>
<t>When the authentication server or resource server provides a <tt>DPoP-Nonce</tt> HTTP header
in a response (see Sections <xref target="ASNonce" format="counter"></xref> and <xref target="RSNonce" format="counter"></xref>), the DPoP proof <bcp14>MUST</bcp14> also contain
the following claim:</t>

<dl spacing="normal">
<dt><tt>nonce</tt>:</dt><dd>A recent nonce provided via the <tt>DPoP-Nonce</tt> HTTP header.</dd>
</dl>
<t>A DPoP proof <bcp14>MAY</bcp14> contain other JOSE Header Parameters or claims as defined by extension,
profile, or deployment-specific requirements.</t>
<t><xref target="dpop-proof"></xref> is a conceptual example showing the decoded content of the DPoP
proof in <xref target="dpop-proof-jwt"></xref>. The JSON of the JWT header and payload are shown,
but the signature part is omitted. As usual, line breaks and extra spaces
are included for formatting and readability.</t>
<figure anchor="dpop-proof"><name>Example JWT Content of a <tt>DPoP</tt> Proof</name>
<sourcecode>{
  "typ":"dpop+jwt",
  "alg":"ES256",
  "jwk": {
    "kty":"EC",
    "x":"l8tFrhx-34tV3hRICRDY9zCkDlpBhF42UQUfWVAWBFs",
    "y":"9VE4jf_Ok_o64zbTTlcuNJajHmt6v9TDVrU0CdvGRDA",
    "crv":"P-256"
  }
}
.
{
  "jti":"-BwC3ESc6acc2lTc",
  "htm":"POST",
  "htu":"https://server.example.com/token",
  "iat":1562262616
}
</sourcecode>
</figure>
<t>Of the HTTP request, only the HTTP method and URI are
included in the DPoP JWT; therefore, only these two message parts
are covered by the DPoP proof.
The idea is to sign just enough of the HTTP data to
provide reasonable proof of possession with respect to the HTTP request.
This design approach of using only a minimal subset of the HTTP header
data is to avoid the substantial difficulties inherent in attempting to
normalize HTTP messages.
Nonetheless, DPoP proofs can be extended to contain other information of the
HTTP request (see also <xref target="request_integrity"></xref>).</t>
</section>

<section anchor="checking"><name>Checking DPoP Proofs</name>
<t>To validate a DPoP proof, the receiving server <bcp14>MUST</bcp14> ensure the following:</t>

<ol spacing="compact">
<li>There is not more than one <tt>DPoP</tt> HTTP request header field.</li>
<li>The DPoP HTTP request header field value is a single and well-formed JWT.</li>
<li>All required claims per <xref target="DPoP-Proof-Syntax"></xref> are contained in the JWT.</li>
<li>The <tt>typ</tt> JOSE Header Parameter has the value <tt>dpop+jwt</tt>.</li>
<li>The <tt>alg</tt> JOSE Header Parameter indicates a registered asymmetric digital
signature algorithm <xref target="IANA.JOSE.ALGS"></xref>, is not <tt>none</tt>, is supported by the
application, and is acceptable per local policy.</li>
<li>The JWT signature verifies with the public key contained in the <tt>jwk</tt>
JOSE Header Parameter.</li>
<li>The <tt>jwk</tt> JOSE Header Parameter does not contain a private key.</li>
<li>The <tt>htm</tt> claim matches the HTTP method of the current request.</li>
<li>The <tt>htu</tt> claim matches the HTTP URI value for the HTTP
request in which the JWT was received, ignoring any query and
fragment parts.</li>
<li>If the server provided a nonce value to the client,
the <tt>nonce</tt> claim matches the server-provided nonce value.</li>
<li>The creation time of the JWT, as determined by either the <tt>iat</tt> claim or a server managed timestamp via the <tt>nonce</tt> claim, is within an acceptable window (see <xref target="Token_Replay"></xref>).</li>
<li><t>If presented to a protected resource in conjunction with an access token,</t>

<ul spacing="compact">
<li>ensure that the value of the <tt>ath</tt> claim equals the hash of that access token, and</li>
<li>confirm that the public key to which the access token is bound matches the public key from the DPoP proof.</li>
</ul></li>
</ol>
<t>To reduce the likelihood of false negatives,
servers <bcp14>SHOULD</bcp14> employ syntax-based normalization (<xref target="RFC3986" sectionFormat="of" section="6.2.2"></xref>) and scheme-based
normalization (<xref target="RFC3986" sectionFormat="of" section="6.2.3"></xref>) before comparing the <tt>htu</tt> claim.</t>
<t>These checks may be performed in any order.</t>
</section>
</section>

<section anchor="access-token-request"><name>DPoP Access Token Request</name>
<t>To request an access token that is bound to a public key using DPoP, the client <bcp14>MUST</bcp14>
provide a valid DPoP proof JWT in a <tt>DPoP</tt> header when making an access token
request to the authorization server's token endpoint. This is applicable for all
access token requests regardless of grant type (e.g.,
the common <tt>authorization_code</tt> and <tt>refresh_token</tt> grant types and extension grants
such as the JWT authorization grant <xref target="RFC7523"></xref>). The HTTP request shown in
<xref target="token-request-code"></xref> illustrates such an access
token request using an authorization code grant with a DPoP proof JWT
in the <tt>DPoP</tt> header. <xref target="token-request-code"/> uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="token-request-code"><name>Token Request for a DPoP Sender-Constrained Token Using an Authorization Code</name>
<sourcecode type="http-message"><![CDATA[POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6Ik\
 VDIiwieCI6Imw4dEZyaHgtMzR0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCR\
 nMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFqSG10NnY5VERWclUwQ2R2R1JE\
 QSIsImNydiI6IlAtMjU2In19.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaHRtIj\
 oiUE9TVCIsImh0dSI6Imh0dHBzOi8vc2VydmVyLmV4YW1wbGUuY29tL3Rva2VuIiwia\
 WF0IjoxNTYyMjYyNjE2fQ.2-GxA6T8lP4vfrg8v-FdWP0A0zdrj8igiMLvqRMUvwnQg\
 4PtFLbdLXiOSsX0x7NVY-FNyJK70nfbV37xRZT3Lg
 
grant_type=authorization_code\
&client_id=s6BhdRkqt\
&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb\
&code_verifier=bEaL42izcC-o-xBk0K2vuJ6U-y1p9r_wW2dFWIWgjz-
]]></sourcecode>
</figure>
<t>The <tt>DPoP</tt> HTTP header field <bcp14>MUST</bcp14> contain a valid DPoP proof JWT.
If the DPoP proof is invalid, the authorization server issues an error
response per <xref target="RFC6749" sectionFormat="of" section="5.2"></xref> with <tt>invalid_dpop_proof</tt> as the
value of the <tt>error</tt> parameter.</t>
<t>To sender-constrain the access token after checking the validity of the
DPoP proof, the authorization server associates the issued access token with the
public key from the DPoP proof, which can be accomplished as described in <xref target="Confirmation"></xref>.
A <tt>token_type</tt> of <tt>DPoP</tt> <bcp14>MUST</bcp14> be included in the access token
response to signal to the client that the access token was bound to
its DPoP key and can be used as described in <xref target="http-auth-scheme"></xref>.
The example response shown in <xref target="token-response"></xref> illustrates such a
response.</t>
<figure anchor="token-response"><name>Access Token Response </name>
<sourcecode type="http-message">HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
 "access_token": "Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU",
 "token_type": "DPoP",
 "expires_in": 2677,
 "refresh_token": "Q..Zkm29lexi8VnWg2zPW1x-tgGad0Ibc3s3EwM_Ni4-g"
}
</sourcecode>
</figure>
<t>The example response in <xref target="token-response"></xref> includes a refresh token that the
client can use to obtain a new access token when the previous one expires.
Refreshing an access token is a token request using the <tt>refresh_token</tt>
grant type made to the authorization server's token endpoint.  As with
all access token requests, the client makes it a DPoP request by including
a DPoP proof, as shown in <xref target="token-request-rt"></xref>. <xref target="token-request-rt"/> uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="token-request-rt"><name>Token Request for a DPoP-Bound Token Using a Refresh Token </name>
<sourcecode type="http-message"><![CDATA[POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6Ik\
 VDIiwieCI6Imw4dEZyaHgtMzR0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCR\
 nMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFqSG10NnY5VERWclUwQ2R2R1JE\
 QSIsImNydiI6IlAtMjU2In19.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaHRtIj\
 oiUE9TVCIsImh0dSI6Imh0dHBzOi8vc2VydmVyLmV4YW1wbGUuY29tL3Rva2VuIiwia\
 WF0IjoxNTYyMjY1Mjk2fQ.pAqut2IRDm_De6PR93SYmGBPXpwrAk90e8cP2hjiaG5Qs\
 GSuKDYW7_X620BxqhvYC8ynrrvZLTk41mSRroapUA

grant_type=refresh_token\
&client_id=s6BhdRkqt\
&refresh_token=Q..Zkm29lexi8VnWg2zPW1x-tgGad0Ibc3s3EwM_Ni4-g
]]></sourcecode>
</figure>
<t>When an authorization server supporting DPoP issues a
refresh token to a public client that presents a valid DPoP proof at the
token endpoint, the refresh token <bcp14>MUST</bcp14> be bound
to the respective public key. The binding <bcp14>MUST</bcp14> be validated when the refresh
token is later presented to get new access tokens. As a result, such a client
<bcp14>MUST</bcp14> present a DPoP proof for the same key that was used to obtain the refresh
token each time that refresh token is used to obtain a new access token.
The implementation details of the binding of the refresh token are at the discretion of
the authorization server. Since the authorization server both produces and
validates its refresh tokens, there is no interoperability
consideration in the specific details of the binding.</t>
<t>An authorization server <bcp14>MAY</bcp14> elect to issue access tokens that are not DPoP bound,
which is signaled to the client with a value of <tt>Bearer</tt> in the <tt>token_type</tt> parameter
of the access token response per <xref target="RFC6750"></xref>. For a public client that is
also issued a refresh token, this has the effect of DPoP-binding the refresh token
alone, which can improve the security posture even when protected resources are not
updated to support DPoP.</t>
<t>If the access token response contains a different <tt>token_type</tt> value than <tt>DPoP</tt>, the
access token protection provided by DPoP is not given. The client <bcp14>MUST</bcp14> discard the response in this
case if this protection is deemed important for the security of the
application; otherwise, the client may continue as in a regular OAuth interaction.</t>
<t>Refresh tokens issued to confidential clients (those having
established authentication credentials with the authorization server)
are not bound to the DPoP proof public key because they are already
sender-constrained with a different existing mechanism. The OAuth 2.0 Authorization
Framework <xref target="RFC6749"></xref> already requires that an authorization server bind
refresh tokens to the client to which they were issued and that
confidential clients authenticate to the authorization server when
presenting a refresh token.  As a result, such refresh tokens
are sender-constrained by way of the client identifier and the associated
authentication requirement. This existing sender-constraining mechanism
is more flexible (e.g., it allows credential rotation for the client
without invalidating refresh tokens) than binding directly to a particular public key.</t>

<section anchor="as-meta"><name>Authorization Server Metadata</name>
<t>This document introduces the following authorization server metadata
<xref target="RFC8414"></xref> parameter to signal support for DPoP in general and the specific
JWS <tt>alg</tt> values the authorization server supports for DPoP proof JWTs.</t>

<dl spacing="compact">
  <dt><tt>dpop_signing_alg_values_supported</tt>:</dt>
<dd>A JSON array containing a list of the JWS <tt>alg</tt> values (from the <xref target="IANA.JOSE.ALGS"></xref> registry) supported
by the authorization server for DPoP proof JWTs.</dd>
</dl>
</section>

<section anchor="client-meta"><name>Client Registration Metadata</name>
<t>The Dynamic Client Registration Protocol <xref target="RFC7591"></xref> defines an API
for dynamically registering OAuth 2.0 client metadata with authorization servers.
The metadata defined by <xref target="RFC7591"></xref>, and registered extensions to it,
also imply a general data model for clients that is useful for authorization server implementations
even when the Dynamic Client Registration Protocol isn't in play.
Such implementations will typically have some sort of user interface available for managing client configuration.</t>
<t>This document introduces the following client registration metadata
<xref target="RFC7591"></xref> parameter to indicate that the client always uses
DPoP when requesting tokens from the authorization server.</t>

<dl spacing="compact">
<dt><tt>dpop_bound_access_tokens</tt>:</dt>
<dd>A boolean value specifying whether the client always uses DPoP for token requests.  If omitted, the default value is <tt>false</tt>.</dd>
</dl>
<t>If the value is <tt>true</tt>, the authorization server <bcp14>MUST</bcp14> reject token requests from the client that do not contain the DPoP header.</t>
</section>
</section>

<section anchor="Confirmation"><name>Public Key Confirmation</name>
<t>Resource servers <bcp14>MUST</bcp14> be able to reliably identify whether
an access token is DPoP-bound and ascertain sufficient information
to verify the binding to the public key of the DPoP proof (see <xref target="http-auth-scheme"></xref>).
Such a binding is accomplished by associating the public key
with the token in a way that can be
accessed by the protected resource, such as embedding the JWK
hash in the issued access token directly, using the syntax described
in <xref target="jwk-thumb-jwt"></xref>, or through token introspection as described in
<xref target="jwk-thumb-intro"></xref>. 
Other methods of associating a
public key with an access token are possible per an agreement by the
authorization server and the protected resource; however, they are beyond the
scope of this specification.</t>
<t>Resource servers supporting DPoP <bcp14>MUST</bcp14> ensure that the public key from
the DPoP proof matches the one bound to the access token.</t>

<section anchor="jwk-thumb-jwt"><name>JWK Thumbprint Confirmation Method</name>
<t>When access tokens are represented as JWTs <xref target="RFC7519"></xref>,
the public key information is represented
using the <tt>jkt</tt> confirmation method member defined herein.
To convey the hash of a public key in a JWT, this specification
introduces the following JWT Confirmation Method <xref target="RFC7800"></xref> member for
use under the <tt>cnf</tt> claim.</t>

<dl spacing="compact">
<dt><tt>jkt</tt>:</dt>
<dd>JWK SHA-256 Thumbprint confirmation method. The value of the <tt>jkt</tt> member
<bcp14>MUST</bcp14> be the base64url encoding (as defined in <xref target="RFC7515"></xref>)
of the JWK SHA-256 Thumbprint (according to <xref target="RFC7638"></xref>) of the DPoP public key
(in JWK format) to which the access token is bound.</dd>
</dl>
<t>The following example JWT in <xref target="cnf-claim-jwt"></xref> with a decoded JWT payload shown in
<xref target="cnf-claim"></xref> contains a <tt>cnf</tt> claim with the <tt>jkt</tt> JWK Thumbprint confirmation
method member.  The <tt>jkt</tt> value in these examples is the hash of the public key
from the DPoP proofs in the examples shown in <xref target="access-token-request"></xref>.
The example uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="cnf-claim-jwt"><name>JWT Containing a JWK SHA-256 Thumbprint Confirmation </name>
<sourcecode type="jwt">eyJhbGciOiJFUzI1NiIsImtpZCI6IkJlQUxrYiJ9.eyJzdWIiOiJzb21lb25lQGV4YW1\
wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJuYmYiOjE\
1NjIyNjI2MTEsImV4cCI6MTU2MjI2NjIxNiwiY25mIjp7ImprdCI6IjBaY09DT1JaTll\
5LURXcHFxMzBqWnlKR0hUTjBkMkhnbEJWM3VpZ3VBNEkifX0.3Tyo8VTcn6u_PboUmAO\
YUY1kfAavomW_YwYMkmRNizLJoQzWy2fCo79Zi5yObpIzjWb5xW4OGld7ESZrh0fsrA
</sourcecode>
</figure>
<figure anchor="cnf-claim"><name>JWT Claims Set with a JWK SHA-256 Thumbprint Confirmation </name>
<sourcecode type="json">{
  "sub":"someone@example.com",
  "iss":"https://server.example.com",
  "nbf":1562262611,
  "exp":1562266216,
  "cnf":
  {
    "jkt":"0ZcOCORZNYy-DWpqq30jZyJGHTN0d2HglBV3uiguA4I"
  }
}
</sourcecode>
</figure>
</section>

<section anchor="jwk-thumb-intro"><name>JWK Thumbprint Confirmation Method in Token Introspection</name>
<t>"OAuth 2.0 Token Introspection" <xref target="RFC7662"></xref> defines a method for a
protected resource to query an authorization server about the active
state of an access token. The protected resource also determines metainformation
about the token.</t>
<t>For a DPoP-bound access token, the hash of the public key to which the token
is bound is conveyed to the protected resource as metainformation in a token
introspection response. The hash is conveyed using the same <tt>cnf</tt> content with
<tt>jkt</tt> member structure as the JWK Thumbprint confirmation method, described in
<xref target="jwk-thumb-jwt"></xref>, as a top-level member of the
introspection response JSON. Note that the resource server
does not send a DPoP proof with the introspection request, and the authorization
server does not validate an access token's DPoP binding at the introspection
endpoint. Rather, the resource server uses the data of the introspection response
to validate the access token binding itself locally.</t>
<t>If the <tt>token_type</tt> member is included in the introspection response, it <bcp14>MUST</bcp14> contain
the value <tt>DPoP</tt>.</t>
<t>The example introspection request in <xref target="introspect-req"></xref> and corresponding response in
<xref target="introspect-resp"></xref> illustrate an introspection exchange for the example DPoP-bound
access token that was issued in <xref target="token-response"></xref>.</t>
<figure anchor="introspect-req"><name>Example Introspection Request </name>
<sourcecode type="http-message">POST /as/introspect.oauth2 HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic cnM6cnM6TWt1LTZnX2xDektJZHo0ZnNON2tZY3lhK1Rp

token=Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU
</sourcecode>
</figure>
<figure anchor="introspect-resp"><name>Example Introspection Response for a DPoP-Bound Access Token </name>
<sourcecode>HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "active": true,
  "sub": "someone@example.com",
  "iss": "https://server.example.com",
  "nbf": 1562262611,
  "exp": 1562266216,
  "cnf":
  {
    "jkt": "0ZcOCORZNYy-DWpqq30jZyJGHTN0d2HglBV3uiguA4I"
  }
}
</sourcecode>
</figure>
</section>
</section>

<section anchor="protected-resource-access"><name>Protected Resource Access</name>
<t>Requests to DPoP-protected resources
<bcp14>MUST</bcp14> include both a DPoP proof as per <xref target="the-proof"></xref> and
the access token as described in <xref target="http-auth-scheme"></xref>.
The DPoP proof <bcp14>MUST</bcp14> include the <tt>ath</tt> claim with a valid hash of the
associated access token.</t>
<t>Binding the token value to the proof in this way prevents a proof
to be used with multiple different access token values across different requests.
For example, if a client holds tokens bound to two different resource owners, AT1 and AT2,
and uses the same key when talking to the authorization server, it's possible that these tokens could be swapped.
Without the <tt>ath</tt> field to bind it, a captured signature applied to AT1 could be
replayed with AT2 instead, changing the rights and access of the intended request.
This same substitution prevention remains for rotated access tokens within the same
combination of client and resource owner -- a rotated token value would require the
calculation of a new proof. This binding additionally ensures that a proof intended for use
with the access token is not usable without an access token, or vice-versa.</t>
<t>The resource server is required to calculate the hash of the token value presented
and verify that it is the same as the hash value in the <tt>ath</tt> field as described in <xref target="checking"></xref>.
Since the <tt>ath</tt> field value is covered by the DPoP proof's signature, its inclusion binds
the access token value to the holder of the key used to generate the signature.</t>
<t>Note that the <tt>ath</tt> field alone does not prevent replay of the DPoP proof or provide binding
to the request in which the proof is presented, and it is still important to check the time
window of the proof as well as the included message parameters, such as <tt>htm</tt> and <tt>htu</tt>.</t>

<section anchor="http-auth-scheme"><name>The DPoP Authentication Scheme</name>
<t>A DPoP-bound access token is sent using the <tt>Authorization</tt> request
header field per <xref target="RFC9110" sectionFormat="of" section="11.6.2"></xref> with an authentication scheme of <tt>DPoP</tt>. The syntax of the <tt>Authorization</tt>
header field for the <tt>DPoP</tt> scheme
uses the token68 syntax defined in <xref target="RFC9110" sectionFormat="of" section="11.2"></xref> for credentials and is repeated below for ease of reference.
The ABNF notation syntax for DPoP authentication scheme credentials is as follows:</t>
<figure anchor="dpop-auth-scheme-abnf"><name>DPoP Authentication Scheme ABNF
</name>
<sourcecode type="abnf"><![CDATA[
token68    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="

credentials = "DPoP" 1*SP token68
]]></sourcecode>
</figure>
<t>For such an access token, a resource server <bcp14>MUST</bcp14> check that a DPoP proof
was also received in the <tt>DPoP</tt> header field of the HTTP request,
check the DPoP proof according to the rules in <xref target="checking"></xref>,
and check that the public key of the DPoP proof matches the public
key to which the access token is bound per <xref target="Confirmation"></xref>.</t>
<t>The resource server <bcp14>MUST NOT</bcp14> grant access to the resource unless all
checks are successful.</t>
<t><xref target="protected-resource-request"></xref> shows an example request to a protected
resource with a DPoP-bound access token in the <tt>Authorization</tt> header
and the DPoP proof in the <tt>DPoP</tt> header.
The example uses "\" line wrapping per <xref target="RFC8792"/>.
<xref target="dpop-proof-pr"></xref> shows the decoded content of that DPoP
proof. The JSON of the JWT header and payload are shown,
but the signature part is omitted. As usual, line breaks and indentation
are included for formatting and readability.</t>
<figure anchor="protected-resource-request"><name>DPoP-Protected Resource Request </name>
<sourcecode type="http-message">GET /protectedresource HTTP/1.1
Host: resource.example.org
Authorization: DPoP Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU
DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6Ik\
 VDIiwieCI6Imw4dEZyaHgtMzR0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCR\
 nMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFqSG10NnY5VERWclUwQ2R2R1JE\
 QSIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVCIiwiaHRtIj\
 oiR0VUIiwiaHR1IjoiaHR0cHM6Ly9yZXNvdXJjZS5leGFtcGxlLm9yZy9wcm90ZWN0Z\
 WRyZXNvdXJjZSIsImlhdCI6MTU2MjI2MjYxOCwiYXRoIjoiZlVIeU8ycjJaM0RaNTNF\
 c05yV0JiMHhXWG9hTnk1OUlpS0NBcWtzbVFFbyJ9.2oW9RP35yRqzhrtNP86L-Ey71E\
 OptxRimPPToA1plemAgR6pxHF8y6-yqyVnmcw6Fy1dqd-jfxSYoMxhAJpLjA
</sourcecode>
</figure>
<figure anchor="dpop-proof-pr"><name>Decoded Content of the <tt>DPoP</tt> Proof JWT in Figure 13</name>
<sourcecode type="json">{
  "typ":"dpop+jwt",
  "alg":"ES256",
  "jwk": {
    "kty":"EC",
    "x":"l8tFrhx-34tV3hRICRDY9zCkDlpBhF42UQUfWVAWBFs",
    "y":"9VE4jf_Ok_o64zbTTlcuNJajHmt6v9TDVrU0CdvGRDA",
    "crv":"P-256"
  }
}
.
{
  "jti":"e1j3V_bKic8-LAEB",
  "htm":"GET",
  "htu":"https://resource.example.org/protectedresource",
  "iat":1562262618,
  "ath":"fUHyO2r2Z3DZ53EsNrWBb0xWXoaNy59IiKCAqksmQEo"
}
</sourcecode>
</figure>
<t>Upon receipt of a request to a protected resource within the protection
space requiring DPoP authentication, the server can respond with a challenge
to the client to provide DPoP authentication information if the request does
not include valid credentials or does not contain an access token sufficient
for access.  Such a challenge is made using the 401 (Unauthorized) response
status code (<xref target="RFC9110" sectionFormat="comma"
section="15.5.2"></xref>) and the <tt>WWW-Authenticate</tt> header field
(<xref target="RFC9110" sectionFormat="comma" section="11.6.1"></xref>). The
server <bcp14>MAY</bcp14> include the <tt>WWW-Authenticate</tt> header in
response to other conditions as well.</t>
<t>In such challenges:</t>

<ul spacing="compact">
<li>The scheme name is <tt>DPoP</tt>.</li>
<li>The authentication parameter <tt>realm</tt> <bcp14>MAY</bcp14> be included to indicate the
scope of protection in the manner described in <xref target="RFC9110" sectionFormat="comma" section="11.5"></xref>.</li>
<li>A <tt>scope</tt> authentication parameter <bcp14>MAY</bcp14> be included as defined in
<xref target="RFC6750" sectionFormat="comma" section="3"></xref>.</li>
<li>An <tt>error</tt> parameter (<xref target="RFC6750" sectionFormat="comma" section="3"></xref>) <bcp14>SHOULD</bcp14> be included
to indicate the reason why the request was declined,
if the request included an access token but failed authentication.
The error parameter values described in <xref target="RFC6750" sectionFormat="comma" section="3.1"></xref> are suitable,
as are any appropriate values defined by extension. The value <tt>use_dpop_nonce</tt> can be
used as described in <xref target="RSNonce"></xref> to signal that a nonce is needed in the DPoP proof of a
subsequent request(s). Additionally, <tt>invalid_dpop_proof</tt> is used to indicate that the DPoP proof
itself was deemed invalid based on the criteria of <xref target="checking"></xref>.</li>
<li>An <tt>error_description</tt> parameter (<xref target="RFC6750" sectionFormat="comma" section="3"></xref>) <bcp14>MAY</bcp14> be included
along with the <tt>error</tt> parameter to provide developers a human-readable
explanation that is not meant to be displayed to end-users.</li>
<li>An <tt>algs</tt> parameter <bcp14>SHOULD</bcp14> be included to signal to the client the
JWS algorithms that are acceptable for the DPoP proof JWT.
The value of the parameter is a space-delimited list of JWS <tt>alg</tt> (Algorithm)
header values (<xref target="RFC7515" sectionFormat="comma" section="4.1.1"></xref>).</li>
<li>Additional authentication parameters <bcp14>MAY</bcp14> be used, and unknown parameters
<bcp14>MUST</bcp14> be ignored by recipients.</li>
</ul>
<t><xref target="http-401-response-protected-req-without-auth"/> shows a response to a protected resource request without
authentication.</t>
<figure anchor="http-401-response-protected-req-without-auth"><name>HTTP 401 Response to a Protected Resource Request without Authentication
</name>
<sourcecode type="http-message"> HTTP/1.1 401 Unauthorized
 WWW-Authenticate: DPoP algs="ES256 PS256"
</sourcecode>
</figure>
<t><xref target="http-401-response-protected-req-with-invalid-token"/> shows a response to a protected resource request that was rejected
due to the failed confirmation of the DPoP binding in the access token. <xref target="http-401-response-protected-req-with-invalid-token"/>
uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="http-401-response-protected-req-with-invalid-token"><name>HTTP 401 Response to a Protected Resource Request with an Invalid Token
</name>
<sourcecode type="http-message">
HTTP/1.1 401 Unauthorized
WWW-Authenticate: DPoP error="invalid_token", \
   error_description="Invalid DPoP key binding", algs="ES256"
</sourcecode>
</figure>
<t>Note that browser-based client applications using Cross-Origin Resource Sharing (CORS) <xref target="WHATWG.Fetch"></xref> only have access
to CORS-safelisted response HTTP headers by default.
In order for the application to obtain and use the <tt>WWW-Authenticate</tt> HTTP response header
value, the server needs to make it available to the application by including
<tt>WWW-Authenticate</tt> in the <tt>Access-Control-Expose-Headers</tt> response header list value.</t>
<t>This authentication scheme is for origin-server authentication only.
Therefore, this authentication scheme <bcp14>MUST NOT</bcp14> be used with the
<tt>Proxy-Authenticate</tt> or <tt>Proxy-Authorization</tt> header fields.</t>
<t>Note that the syntax of the <tt>Authorization</tt> header field for this authentication scheme
follows the usage of the <tt>Bearer</tt> scheme defined in <xref target="RFC6750" sectionFormat="of" section="2.1"></xref>.
While it is not the preferred credential syntax of <xref target="RFC9110"></xref>, it is compatible
with the general authentication framework therein and is used for consistency
and familiarity with the <tt>Bearer</tt> scheme.</t>
</section>

<section anchor="compatibility-with-the-bearer-authentication-scheme"><name>Compatibility with the Bearer Authentication Scheme</name>
<t>Protected resources simultaneously supporting both the <tt>DPoP</tt> and <tt>Bearer</tt>
schemes need to update how the evaluation process is performed for bearer tokens to prevent
downgraded usage of a DPoP-bound access token.
Specifically, such a protected resource <bcp14>MUST</bcp14> reject a DPoP-bound access
token received as a bearer token per <xref target="RFC6750"></xref>.</t>
<t><xref target="RFC9110" sectionFormat="of" section="11.6.1"></xref> allows a protected resource to indicate support for
multiple authentication schemes (i.e., <tt>Bearer</tt> and <tt>DPoP</tt>) with the
<tt>WWW-Authenticate</tt> header field of a 401 (Unauthorized) response.</t>
<t>A protected resource that supports only <xref target="RFC6750"></xref> and is unaware of DPoP
would most presumably accept a DPoP-bound access token as a bearer token
(JWT <xref target="RFC7519"></xref> says to ignore unrecognized claims, Introspection <xref target="RFC7662"></xref>
says that other parameters might be present while placing no functional
requirements on their presence, and <xref target="RFC6750"></xref> is effectively silent on
the content of the access token since it relates to validity).  
As such, a
client can send a DPoP-bound access token using the <tt>Bearer</tt> scheme upon
receipt of a <tt>WWW-Authenticate: Bearer</tt> challenge from a protected resource
(or it can send a DPoP-bound access token if it has prior knowledge of the capabilities of the protected
resource). The effect of this likely simplifies the logistics of phased
upgrades to protected resources in their support DPoP or
prolonged deployments of protected resources with mixed token type support.</t>
<t>If a protected resource supporting both <tt>Bearer</tt> and <tt>DPoP</tt> schemes elects to
respond with multiple <tt>WWW-Authenticate</tt> challenges, attention should be paid to
which challenge(s) should deliver the actual error information. It is
<bcp14>RECOMMENDED</bcp14> that the following rules be adhered to:</t>

<ul>
<li><t>If no authentication information has been included with the request, then the
challenges <bcp14>SHOULD NOT</bcp14> include an error code or other error information, as per
<xref target="RFC6750" sectionFormat="of" section="3.1"></xref> (<xref target="multi-challenge-no-token"></xref>).</t>
</li>
<li><t>If the mechanism used to attempt authentication could be established
unambiguously, then the corresponding challenge <bcp14>SHOULD</bcp14> be used to deliver error
information (<xref target="multi-challenge-invalid-token"></xref>).</t>
</li>
<li><t>Otherwise, both <tt>Bearer</tt> and <tt>DPoP</tt> challenges <bcp14>MAY</bcp14> be used to deliver error information (<xref target="multi-challenge-ambiguous"></xref>).</t>
</li>
</ul>
<t>The following examples use "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="multi-challenge-no-token"><name>HTTP 401 Response to a Protected Resource Request without Authentication </name>
<sourcecode type="http-message">GET /protectedresource HTTP/1.1
Host: resource.example.org

HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer, DPoP algs="ES256 PS256"
</sourcecode>
</figure>
<figure anchor="multi-challenge-invalid-token"><name>HTTP 401 Response to a Protected Resource Request with Invalid Authentication </name>
<sourcecode type="http-message">GET /protectedresource HTTP/1.1
Host: resource.example.org
Authorization: Bearer INVALID_TOKEN

HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer error="invalid_token", \
    error_description="Invalid token", DPoP algs="ES256 PS256"
</sourcecode>
</figure>
<figure anchor="multi-challenge-ambiguous"><name>HTTP 400 Response to a Protected Resource Request with Ambiguous Authentication </name>
<sourcecode type="http-message">GET /protectedresource HTTP/1.1
Host: resource.example.org
Authorization: Bearer Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU
Authorization: DPoP Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU

HTTP/1.1 400 Bad Request
WWW-Authenticate: Bearer error="invalid_request", \
 error_description="Multiple methods used to include access token", \
 DPoP algs="ES256 PS256", error="invalid_request", \
 error_description="Multiple methods used to include access token"
</sourcecode>
</figure>
</section>

<section anchor="client-considerations"><name>Client Considerations</name>
<t>Authorization including a DPoP proof may not be idempotent (depending on server
enforcement of <tt>jti</tt>, <tt>iat</tt>, and <tt>nonce</tt> claims). Consequently, all previously
idempotent requests for protected resources that were previously idempotent may
no longer be idempotent. It is <bcp14>RECOMMENDED</bcp14> that clients generate a unique DPoP
proof, even when retrying idempotent requests in response to HTTP errors
generally understood as transient.</t>
<t>Clients that encounter frequent network errors may experience additional
challenges when interacting with servers with stricter nonce validation
implementations.</t>
</section>
</section>

<section anchor="ASNonce"><name>Authorization Server-Provided Nonce</name>
<t>This section specifies a mechanism using opaque nonces provided by the server
that can be used to limit the lifetime of DPoP proofs.
Without employing such a mechanism, a malicious party controlling the client
(potentially including the end-user)
can create DPoP proofs for use arbitrarily far in the future.</t>
<t>Including a nonce value contributed by the authorization server in the DPoP proof
<bcp14>MAY</bcp14> be used by authorization servers to limit the lifetime of DPoP proofs.
   The server determines when to issue a new DPoP nonce challenge and if
   it is needed, thereby requiring the use of the nonce value in
   subsequent DPoP proofs.
The logic through which the server makes that determination is out of scope of this document.</t>
<t>An authorization server <bcp14>MAY</bcp14> supply a nonce value to be included by the client
in DPoP proofs sent. In this case, the authorization server responds to requests that do not include a nonce
with an HTTP 400 (Bad Request) error response per <xref target="RFC6749" sectionFormat="of" section="5.2"></xref> using <tt>use_dpop_nonce</tt> as the
error code value. The authorization server includes a <tt>DPoP-Nonce</tt> HTTP header in the response supplying
a nonce value to be used when sending the subsequent request. Nonce values <bcp14>MUST</bcp14> be unpredictable.
This same error code is used when supplying a new nonce value when there was a nonce mismatch.
The client will typically retry the request with the new nonce value supplied
upon receiving a <tt>use_dpop_nonce</tt> error with an accompanying nonce value.</t>
<t>For example, in response to a token request without a nonce when the authorization server requires one,
the authorization server can respond with a <tt>DPoP-Nonce</tt> value such as the following to provide
a nonce value to include in the DPoP proof:</t>
<figure anchor="http-400-response-token-without-nonce"><name>HTTP 400 Response to a Token Request without a Nonce
</name>
<sourcecode type="http-message"> HTTP/1.1 400 Bad Request
 DPoP-Nonce: eyJ7S_zG.eyJH0-Z.HX4w-7v

 {
  "error": "use_dpop_nonce",
  "error_description":
    "Authorization server requires nonce in DPoP proof"
 }
</sourcecode>
</figure>
<t>Other HTTP headers and JSON fields <bcp14>MAY</bcp14> also be included in the error response,
but there <bcp14>MUST NOT</bcp14> be more than one <tt>DPoP-Nonce</tt> header.</t>
<t>Upon receiving the nonce, the client is expected to retry its token request
using a DPoP proof including the supplied nonce value in the <tt>nonce</tt> claim
of the DPoP proof.
An example unencoded JWT payload of such a DPoP proof including a nonce is shown below.</t>
<figure anchor="dpop-proof-payload-nonce-value"><name>DPoP Proof Payload including a Nonce Value
</name>
<sourcecode type="json"> {
  "jti": "-BwC3ESc6acc2lTc",
  "htm": "POST",
  "htu": "https://server.example.com/token",
  "iat": 1562262616,
  "nonce": "eyJ7S_zG.eyJH0-Z.HX4w-7v"
 }
</sourcecode>
</figure>
<t>The nonce is opaque to the client.</t>
<t>If the <tt>nonce</tt> claim in the DPoP proof
does not exactly match a nonce recently supplied by the authorization server to the client,
the authorization server <bcp14>MUST</bcp14> reject the request.
The rejection response <bcp14>MAY</bcp14> include a <tt>DPoP-Nonce</tt> HTTP header
providing a new nonce value to use for subsequent requests.</t>

<t>The intent is that clients need to keep only one nonce value and servers need to keep a
window of recent nonces.
That said, transient circumstances may arise in which the 
   stored nonce values for the server and the client differ.
However, this situation is self-correcting.
With any rejection message,
the server can send the client the nonce value it wants to use
to the client, and the client can store that nonce value and retry the request with it.
Even if the client and/or server discard their stored nonce values,
that situation is also self-correcting because new nonce values can be communicated
when responding to or retrying failed requests.</t>
<t>Note that browser-based client applications using CORS <xref target="WHATWG.Fetch"></xref> only have access
to CORS-safelisted response HTTP headers by default.
In order for the application to obtain and use the <tt>DPoP-Nonce</tt> HTTP response header
value, the server needs to make it available to the application by including
<tt>DPoP-Nonce</tt> in the <tt>Access-Control-Expose-Headers</tt> response header list value.</t>

<section anchor="NonceSyntax"><name>Nonce Syntax</name>
<t>The nonce syntax in ABNF as used by <xref target="RFC6749"></xref>
(which is the same as the scope-token syntax) is shown below.</t>
<figure anchor="nonce-abnf"><name>Nonce ABNF
</name>
<sourcecode type="abnf"><![CDATA[nonce = 1*NQCHAR]]></sourcecode>
</figure>
</section>

<section anchor="NewNonce"><name>Providing a New Nonce Value</name>
<t>It is up to the authorization server when to supply a new nonce value
for the client to use.
The client is expected to use the existing supplied nonce in DPoP proofs
until the server supplies a new nonce value.</t>
<t>The authorization server <bcp14>MAY</bcp14> supply the new nonce in the same way that
the initial one was supplied: by using a <tt>DPoP-Nonce</tt> HTTP header in the response.
The <tt>DPoP-Nonce</tt> HTTP header field uses the nonce syntax defined in <xref target="NonceSyntax"></xref>.
Each time this happens, it requires an extra protocol round trip.</t>
<t>A more efficient manner of supplying a new nonce value is also defined
by including a <tt>DPoP-Nonce</tt> HTTP header
in the HTTP 200 (OK) response from the previous request.
The client <bcp14>MUST</bcp14> use the new nonce value supplied for the next token request
and for all subsequent token requests until the authorization server
supplies a new nonce.</t>
<t>Responses that include the <tt>DPoP-Nonce</tt> HTTP header should be uncacheable
(e.g., using <tt>Cache-Control: no-store</tt> in response to a <tt>GET</tt> request) to
prevent the response from being used to serve a subsequent request and a stale
nonce value from being used as a result.</t>
<t>An example 200 OK response providing a new nonce value is shown below.</t>
<figure anchor="http-200-response-next-nonce-value"><name>HTTP 200 Response Providing the Next Nonce Value
</name>
<sourcecode type="http-message"> HTTP/1.1 200 OK
 Cache-Control: no-store
 DPoP-Nonce: eyJ7S_zG.eyJbYu3.xQmBj-1
</sourcecode>
</figure>
</section>
</section>

<section anchor="RSNonce"><name>Resource Server-Provided Nonce</name>
<t>Resource servers can also choose to provide a nonce value to be included
in DPoP proofs sent to them.
They provide the nonce using the <tt>DPoP-Nonce</tt> header in the same way that authorization servers do
as described in Sections <xref target="ASNonce" format="counter"></xref> and <xref target="NewNonce" format="counter"></xref>.
The error signaling is performed as described in <xref target="http-auth-scheme"></xref>.
Resource servers use an HTTP 401 (Unauthorized) error code
with an accompanying <tt>WWW-Authenticate: DPoP</tt> value
and <tt>DPoP-Nonce</tt> value to accomplish this.</t>
<t>For example, in response to a resource request without a nonce when the resource server requires one,
the resource server can respond with a <tt>DPoP-Nonce</tt> value such as the following to provide
a nonce value to include in the DPoP proof.
The example below uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="http-401-response-resource-request-without-nonce"><name>HTTP 401 Response to a Resource Request without a Nonce
</name>
<sourcecode type="http-message"> HTTP/1.1 401 Unauthorized
 WWW-Authenticate: DPoP error="use_dpop_nonce", \
   error_description="Resource server requires nonce in DPoP proof"
 DPoP-Nonce: eyJ7S_zG.eyJH0-Z.HX4w-7v
</sourcecode>
</figure>
<t>Note that the nonces provided by an authorization server and a resource server are different
and should not be confused with one another
since nonces will be only accepted by the server that issued them.
Likewise, should a client use multiple authorization servers and/or resource servers,
a nonce issued by any of them should be used only at the issuing server.
Developers should also be careful to not confuse DPoP nonces with the
OpenID Connect <xref target="OpenID.Core"></xref> ID Token nonce.</t>
</section>

<section anchor="dpop_jkt"><name>Authorization Code Binding to a DPoP Key</name>
<t>Binding the authorization code issued to the client's proof-of-possession key
can enable end-to-end binding of the entire authorization flow.
This specification defines the <tt>dpop_jkt</tt> authorization request parameter for this purpose.
The value of the <tt>dpop_jkt</tt> authorization request parameter is the
JWK Thumbprint <xref target="RFC7638"></xref> of the proof-of-possession public key
using the SHA-256 hash function, which is
the same value as used for the <tt>jkt</tt> confirmation method defined in <xref target="jwk-thumb-jwt"></xref>.</t>
<t>When a token request is received, the authorization server computes the
JWK Thumbprint of the proof-of-possession public key in the DPoP proof
and verifies that it matches the <tt>dpop_jkt</tt> parameter value in the authorization request.
If they do not match, it <bcp14>MUST</bcp14> reject the request.</t>
<t>An example authorization request using the <tt>dpop_jkt</tt> authorization request parameter is shown below and uses "\" line wrapping per <xref target="RFC8792"/>.</t>
<figure anchor="auth-req-using-dpopjkt-parameter"><name>Authorization Request Using the <tt>dpop_jkt</tt> Parameter
</name>
<sourcecode type="http-message"><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz\
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb\
    &code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM\
    &code_challenge_method=S256\
    &dpop_jkt=NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs HTTP/1.1
Host: server.example.com
]]></sourcecode>
</figure>
<t>Use of the <tt>dpop_jkt</tt> authorization request parameter is <bcp14>OPTIONAL</bcp14>.
Note that the <tt>dpop_jkt</tt> authorization request parameter <bcp14>MAY</bcp14> also be used
in combination with Proof Key for Code Exchange (PKCE) <xref target="RFC7636"></xref>, which is recommended by <xref target="I-D.ietf-oauth-security-topics"></xref>
as a countermeasure to authorization code injection. The <tt>dpop_jkt</tt> authorization
request parameter only provides similar protections when a unique DPoP key is
used for each authorization request.</t>

<section anchor="dpop-with-pushed-authorization-requests"><name>DPoP with Pushed Authorization Requests</name>
<t>When Pushed Authorization Requests (PARs) <xref target="RFC9126"></xref> are used in conjunction with DPoP, there are two ways in which the DPoP key can be communicated in the PAR request:</t>

<ul spacing="compact">
<li>The <tt>dpop_jkt</tt> parameter can be used as described in <xref target="dpop_jkt"></xref> to bind the issued
authorization code to a specific key. In this case, <tt>dpop_jkt</tt> <bcp14>MUST</bcp14> be included alongside other authorization request parameters in the POST body of the PAR request.</li>
<li>Alternatively, the <tt>DPoP</tt> header can be added to the PAR request. In this
case, the authorization server <bcp14>MUST</bcp14> check the provided DPoP proof JWT as
defined in <xref target="checking"></xref>. It <bcp14>MUST</bcp14> further behave as if the contained public key's
thumbprint was provided using <tt>dpop_jkt</tt>, i.e., reject the subsequent token
request unless a DPoP proof for the same key is provided. This can help to
simplify the implementation of the client, as it can "blindly" attach the
<tt>DPoP</tt> header to all requests to the authorization server regardless of the
type of request. Additionally, it provides a stronger binding, as the <tt>DPoP</tt>
header contains a proof of possession of the private key.</li>
</ul>
<t>Both mechanisms <bcp14>MUST</bcp14> be supported by an authorization server that supports PAR and DPoP. If both mechanisms are used at the same time, the authorization server <bcp14>MUST</bcp14> reject the request if the JWK Thumbprint in <tt>dpop_jkt</tt> does not match the public key in the <tt>DPoP</tt> header.</t>
<t>Allowing both mechanisms ensures that clients using <tt>dpop_jkt</tt> do not need to
distinguish between front-channel and pushed authorization requests, and at the
same time, clients that only have one code path for protecting all calls to authorization server
endpoints do not need to distinguish between requests to the PAR endpoint and the
token endpoint.</t>
</section>
</section>

<section anchor="Security"><name>Security Considerations</name>
<t>In DPoP, the prevention of token replay at a different endpoint (see
<xref target="objective"></xref>) is achieved through authentication of the server per <xref target="RFC6125"></xref> and
the binding of the DPoP proof to a certain URI and HTTP method. However, DPoP
has a somewhat different nature of protection than TLS-based
methods such as OAuth Mutual TLS <xref target="RFC8705"></xref> or OAuth Token
Binding <xref target="I-D.ietf-oauth-token-binding"></xref> (see also Sections <xref target="Token_Replay" format="counter"/> and <xref target="request_integrity" format="counter"/>).
TLS-based mechanisms can leverage a tight integration
between the TLS layer and the application layer to achieve strong
message integrity, authenticity,
and replay protection.</t>

<section anchor="Token_Replay"><name>DPoP Proof Replay</name>
<t>If an adversary is able to get hold of a DPoP proof JWT, the adversary
could replay that token at the same endpoint (the HTTP endpoint
and method are enforced via the respective claims in the JWTs). To
limit this, servers <bcp14>MUST</bcp14> only accept DPoP proofs for a limited time
after their creation (preferably only for a relatively brief period
on the order of seconds or minutes).</t>
<t>In the context of the target URI, servers can store the <tt>jti</tt> value of
each DPoP proof for the time window in which the respective DPoP proof JWT                             
would be accepted to prevent multiple uses of the same DPoP proof.
HTTP requests to the same URI for which the <tt>jti</tt> value has been seen before
would be declined. When strictly enforced, such a single-use check provides a very strong protection against DPoP
proof replay, but it may not always be feasible in practice, e.g., when
multiple servers behind a single endpoint have no shared state.</t>
<t>In order to guard against
memory exhaustion attacks, a server that is tracking <tt>jti</tt> values should reject
DPoP proof JWTs with unnecessarily large <tt>jti</tt> values or store only a hash thereof.</t>
<t>Note: To accommodate for clock offsets, the server <bcp14>MAY</bcp14> accept DPoP
proofs that carry an <tt>iat</tt> time in the reasonably near future (on the order of seconds or minutes).
Because clock skews between servers
and clients may be large, servers <bcp14>MAY</bcp14> limit DPoP proof lifetimes by using
server-provided nonce values containing the time at the server rather than
comparing the client-supplied <tt>iat</tt> time to the time at the server.  Nonces
created in this way yield the same result even in the face of arbitrarily
large clock skews.</t>
<t>Server-provided nonces are an effective means for further reducing the chances for successful DPoP proof replay.
Unlike cryptographic nonces, it is acceptable for clients to use the same
<tt>nonce</tt> multiple times and for the server to accept the same nonce multiple
times. As long as the <tt>jti</tt> value is tracked and duplicates are rejected for the lifetime of the <tt>nonce</tt>, there
is no additional risk of token replay.</t>
</section>

<section anchor="Pre-Generation"><name>DPoP Proof Pre-generation</name>
<t>An attacker in control of the client can pre-generate DPoP proofs for
specific endpoints arbitrarily far into the future by choosing the
<tt>iat</tt> value in the DPoP proof to be signed by the proof-of-possession key.
Note that one such attacker is the person who is the legitimate user of the client.
The user may pre-generate DPoP proofs to exfiltrate
from the machine possessing the proof-of-possession key
upon which they were generated
and copy them to another machine that does not possess the key.
For instance, a bank employee might pre-generate DPoP proofs
on a bank computer and then copy them to another machine
for use in the future, thereby bypassing bank audit controls.
When DPoP proofs can be pre-generated and exfiltrated,
all that is actually being proved in DPoP protocol interactions
is possession of a DPoP proof -- not of the proof-of-possession key.</t>
<t>Use of server-provided nonce values that are not predictable by attackers can prevent this attack.
By providing new nonce values at times of its choosing,
the server can limit the lifetime of DPoP proofs,
preventing pre-generated DPoP proofs from being used.
When server-provided nonces are used, possession
of the proof-of-possession key is being demonstrated --
not just possession of a DPoP proof.</t>
<t>The <tt>ath</tt> claim limits the use of pre-generated DPoP proofs to the lifetime
of the access token. Deployments that do not utilize the nonce mechanism
<bcp14>SHOULD NOT</bcp14> issue long-lived DPoP constrained access tokens,
preferring instead to use short-lived access tokens and refresh tokens.
Whilst an attacker could pre-generate DPoP proofs to use the refresh token
to obtain a new access token, they would be unable to realistically
pre-generate DPoP proofs to use a newly issued access token.</t>
</section>

<section anchor="Nonce-Downgrade"><name>DPoP Nonce Downgrade</name>
<t>A server <bcp14>MUST NOT</bcp14> accept any DPoP proofs without the <tt>nonce</tt> claim when a DPoP nonce has been provided to the client.</t>
</section>

<section anchor="untrusted-code-in-the-client-context"><name>Untrusted Code in the Client Context</name>
<t>If an adversary is able to run code in the client's execution context,
the security of DPoP is no longer guaranteed. Common issues in web
applications leading to the execution of untrusted code are XSS and remote code inclusion attacks.</t>
<t>If the private key used for DPoP is stored in such a way that it
cannot be exported, e.g., in a hardware or software security module,
the adversary cannot exfiltrate the key and use it to create arbitrary
DPoP proofs. The adversary can, however, create new DPoP proofs as
long as the client is online and uses these proofs (together with the
respective tokens) either on the victim's device or on a device under
the attacker's control to send arbitrary requests that will be
accepted by servers.</t>
<t>To send requests even when the client is offline, an adversary can try
to pre-compute DPoP proofs using timestamps in the future and
exfiltrate these together with the access or refresh token.</t>
<t>An adversary might further try to associate tokens issued from the
token endpoint with a key pair under the adversary's control. One way
to achieve this is to modify existing code, e.g., by replacing
cryptographic APIs. Another way is to launch a new authorization grant
between the client and the authorization server in an iframe. This
grant needs to be "silent", i.e., not require interaction with the
user. With code running in the client's origin, the adversary has
access to the resulting authorization code and can use it to associate
their own DPoP keys with the tokens returned from the token endpoint.
The adversary is then able to use the resulting tokens on their own
device even if the client is offline.</t>
<t>Therefore, protecting clients against the execution of untrusted code
is extremely important even if DPoP is used. Besides secure coding
practices, Content Security Policy <xref target="W3C.CSP"></xref> can be used as a second
layer of defense against XSS.</t>
</section>

<section anchor="signed-jwt-swapping"><name>Signed JWT Swapping</name>
<t>Servers accepting signed DPoP proof JWTs <bcp14>MUST</bcp14> verify that the <tt>typ</tt> field is <tt>dpop+jwt</tt> in the
headers of the JWTs to ensure that adversaries cannot use JWTs created
for other purposes.</t>
</section>

<section anchor="signature-algorithms"><name>Signature Algorithms</name>
<t>Implementers <bcp14>MUST</bcp14> ensure that only asymmetric digital signature algorithms (such as <tt>ES256</tt>) that
are deemed secure can be used for signing DPoP proofs. In particular,
the algorithm <tt>none</tt> <bcp14>MUST NOT</bcp14> be allowed.</t>
</section>

<section anchor="request_integrity"><name>Request Integrity</name>
<t>DPoP does not ensure the integrity of the payload or headers of
requests. The DPoP proof only contains claims for the HTTP URI and
method, but not the message body or general request
headers, for example.</t>
<t>This is an intentional design decision intended to keep DPoP simple to use, but
as described, it makes DPoP potentially susceptible to replay attacks
where an attacker is able to modify message contents and headers. In
many setups, the message integrity and confidentiality provided by TLS
is sufficient to provide a good level of protection.</t>
<t>Note: While signatures covering other parts of requests are out of the scope of
this specification, additional information to be signed can be
added into DPoP proofs.</t>
</section>

<section anchor="access-token-and-public-key-binding"><name>Access Token and Public Key Binding</name>
<t>The binding of the access token to the DPoP public key, as specified in <xref target="Confirmation"></xref>, uses a cryptographic hash of the JWK
representation of the public key. It relies
on the hash function having sufficient second-preimage resistance so
as to make it computationally infeasible to find or create another
key that produces to the same hash output value. The SHA-256
hash function was used because it meets the aforementioned
requirement while being widely available.</t>
<t>Similarly, the binding of the DPoP proof to the access token uses a
hash of that access token as the value of the <tt>ath</tt> claim
in the DPoP proof (see <xref target="DPoP-Proof-Syntax"></xref>). This relies on the value
of the hash being sufficiently unique so as to reliably identify the
access token. The collision resistance of SHA-256 meets that requirement.</t>
</section>

<section anchor="authorization-code-and-public-key-binding"><name>Authorization Code and Public Key Binding</name>
<t>Cryptographic binding of the authorization code to the DPoP public key
is specified in <xref target="dpop_jkt"></xref>.
   This binding prevents attacks in which the attacker captures the
   authorization code and creates a DPoP proof using a proof-of-possession key
   other than the one held by the client and redeems the authorization code
   using that DPoP proof.  By ensuring end to end that only the client's DPoP
   key can be used, this prevents captured authorization codes from being
   exfiltrated and used at locations other than the one to which the
   authorization code was issued.</t>
<t>Authorization codes can, for instance, be harvested by attackers
from places where the HTTP messages containing them are logged.
Even when efforts are made to make authorization codes one-time-use, in practice,
there is often a time window during which attackers can replay them.
For instance, when authorization servers are implemented as scalable replicated services,
some replicas may temporarily not yet have the information needed to prevent replay.
DPoP binding of the authorization code solves these problems.</t>
<t>If an authorization server does not (or cannot) strictly enforce the single-use limitation for authorization codes
and an attacker can access the authorization code (and if PKCE is used, the <tt>code_verifier</tt>),
the attacker can create a forged token request, binding the resulting token to an attacker-controlled key.
For example, using XSS, attackers might obtain access to the authorization code and PKCE parameters.
Use of the <tt>dpop_jkt</tt> parameter prevents this attack.</t>
<t>The binding of the authorization code to the DPoP public key
uses a JWK Thumbprint of the public key, just as the access token binding does.
The same JWK Thumbprint considerations apply.</t>
</section>

<section anchor="hash-algorithm-agility"><name>Hash Algorithm Agility</name>
<t>The <tt>jkt</tt> confirmation method member, the <tt>ath</tt> JWT claim, and the <tt>dpop_jkt</tt> authorization
request parameter defined herein all use the output of the SHA-256 hash function as their value.
The use of a single hash function by this specification was intentional and aimed at
simplicity and avoidance of potential security and interoperability issues arising from
common mistakes implementing and deploying parameterized algorithm agility schemes.
However, the use of a different hash function is not precluded if future circumstances
change and make SHA-256 insufficient for the requirements of this specification.
Should that need arise, it is expected that a short specification will be produced that
updates this one. 
Using the output of an appropriate
hash function as the value, that specification will likely define a new confirmation method member, a new JWT claim,
and a new authorization request parameter. These items will be used in place of, or alongside, their
respective counterparts in the same message structures and flows of the larger protocol defined
by this specification.</t>
</section>

<section anchor="binding-to-client-identity"><name>Binding to Client Identity</name>
<t>In cases where DPoP is used with client authentication, it is only bound to authentication by being
coincident in the same TLS tunnel.  Since the DPoP proof is not directly bound
to the authentication cryptographically, it's possible that the authentication or the DPoP messages were copied into
the tunnel.  While including the URI in the DPoP can partially mitigate some of this risk, modifying
the authentication mechanism to provide cryptographic binding between authentication and DPoP could
provide better protection.  However, providing additional binding with authentication through the
modification of authentication mechanisms or other means is beyond the scope of this specification.</t>
</section>
</section>

<section anchor="IANA"><name>IANA Considerations</name>
<section anchor="oauth-access-token-type-registration"><name>OAuth Access Token Types Registration</name>
<t>IANA has registered the following access token
type in the "OAuth Access Token Types" registry <xref target="IANA.OAuth.Params"></xref>
established by <xref target="RFC6749"></xref>.</t>

<dl spacing="normal">
<dt>Name:</dt><dd><tt>DPoP</tt></dd>
<dt>Additional Token Endpoint Response Parameters:</dt><dd>(none)</dd>
<dt>HTTP Authentication Scheme(s):</dt><dd><tt>DPoP</tt></dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd>RFC 9449</dd>
</dl>
</section>

<section anchor="oauth-extensions-error-registration"><name>OAuth Extensions Error Registration</name>
<t>IANA has registered the following error values
in the "OAuth Extensions Error" registry <xref target="IANA.OAuth.Params"></xref>
established by <xref target="RFC6749"></xref>.</t>
<dl spacing="normal">
<dt>Invalid DPoP proof:</dt>
<dd><t><br/></t>
<dl spacing="normal">
<dt>Name:</dt><dd><tt>invalid_dpop_proof</tt></dd>
<dt>Usage Location:</dt><dd>token error response, resource access error response</dd>
<dt>Protocol Extension:</dt><dd>Demonstrating Proof of Possession (DPoP)</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd>RFC 9449</dd>
</dl>
</dd>
</dl>

<dl spacing="normal">
<dt>Use DPoP nonce:</dt>
<dd>
<t><br/></t>
<dl spacing="normal">
<dt>Name:</dt><dd><tt>use_dpop_nonce</tt></dd>
<dt>Usage Location:</dt><dd>token error response, resource access error response</dd>
<dt>Protocol Extension:</dt><dd>Demonstrating Proof of Possession (DPoP)</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd>RFC 9449</dd>
</dl></dd></dl>
</section>

<section anchor="oauth-parameters-registration"><name>OAuth Parameters Registration</name>
<t>IANA has registered the following authorization request parameter
in the "OAuth Parameters" registry <xref target="IANA.OAuth.Params"></xref>
established by <xref target="RFC6749"></xref>.</t>

<dl spacing="normal">
<dt>Name:</dt><dd><tt>dpop_jkt</tt></dd>
<dt>Parameter Usage Location:</dt><dd>authorization request</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="dpop_jkt"></xref> of RFC 9449</dd>
</dl>
</section>

<section anchor="http-authentication-scheme-registration"><name>HTTP Authentication Schemes Registration</name>
<t>IANA has registered the following scheme in the
"HTTP Authentication Schemes" registry <xref target="IANA.HTTP.AuthSchemes"></xref> established by <xref target="RFC9110" sectionFormat="comma" section="16.4.1"></xref>.</t>

<dl spacing="normal">
<dt>Authentication Scheme Name:</dt><dd><tt>DPoP</tt></dd>
<dt>Reference:</dt><dd><xref target="http-auth-scheme"></xref> of RFC 9449</dd>
</dl>
</section>

<section anchor="media-type-registration"><name>Media Type Registration</name>
<t>IANA has registered the <tt>application/dpop+jwt</tt> media type <xref target="RFC2046"></xref>
in the "Media Types" registry <xref target="IANA.MediaTypes"></xref> in the manner described in <xref target="RFC6838"></xref>,
which is used to indicate that the content is a DPoP JWT.</t>

<dl spacing="normal">
<dt>Type name:</dt><dd>application</dd>
<dt>Subtype name:</dt><dd>dpop+jwt</dd>
<dt>Required parameters:</dt><dd>n/a</dd>
<dt>Optional parameters:</dt><dd> n/a</dd>
<dt>Encoding considerations:</dt><dd>binary. A DPoP JWT is a JWT; JWT values are encoded as a series of base64url-encoded values (some of which may be the empty string) separated by period ('.') characters.</dd>
<dt>Security considerations:</dt><dd>See <xref target="Security"></xref> of RFC 9449</dd>
<dt>Interoperability considerations:</dt><dd>n/a</dd>
<dt>Published specification:</dt><dd>RFC 9449</dd>
<dt>Applications that use this media type:</dt><dd>Applications using RFC 9449 for application-level proof of possession</dd>
<dt>Fragment identifier considerations:</dt><dd>n/a</dd>
<dt>Additional information:</dt>
<dd>
<t><br/></t>
<dl spacing="compact">
<dt>File extension(s):</dt><dd>n/a</dd>
<dt>Macintosh file type code(s):</dt><dd>n/a</dd>
</dl></dd>
<dt>Person &amp; email address to contact for further information:</dt><dd>Michael B.&nbsp;Jones, michael_b_jones@hotmail.com</dd>
<dt>Intended usage:</dt><dd>COMMON</dd>
<dt>Restrictions on usage:</dt><dd>none</dd>
<dt>Author:</dt><dd>Michael B.&nbsp;Jones, michael_b_jones@hotmail.com</dd>
<dt>Change controller:</dt><dd>IETF</dd>
</dl>
</section>

<section anchor="jwt-confirmation-methods-registration"><name>JWT Confirmation Methods Registration</name>
<t>IANA has registered the following JWT <tt>cnf</tt> member value
in the "JWT Confirmation Methods" registry <xref target="IANA.JWT"></xref>
established by <xref target="RFC7800"></xref>.</t>

<dl spacing="normal">
<dt>Confirmation Method Value:</dt><dd><tt>jkt</tt></dd>
<dt>Confirmation Method Description:</dt><dd>JWK SHA-256 Thumbprint</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="Confirmation"></xref> of RFC 9449</dd>
</dl>
</section>

<section anchor="json-web-token-claims-registration"><name>JSON Web Token Claims Registration</name>
<t>IANA has registered the following Claims in the "JSON Web Token Claims" registry <xref target="IANA.JWT"></xref> established by <xref target="RFC7519"></xref>.</t>
<dl spacing="normal">
<dt>HTTP method:</dt>
<dd>
<t><br/></t>
<dl spacing="normal">
<dt>Claim Name:</dt><dd><tt>htm</tt></dd>
<dt>Claim Description:</dt><dd>The HTTP method of the request</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="DPoP-Proof-Syntax"></xref> of RFC 9449</dd>
</dl>
</dd></dl>
<dl spacing="normal">
<dt>HTTP URI:</dt>
<dd>
<t><br/></t>
<dl spacing="normal">
<dt>Claim Name:</dt><dd><tt>htu</tt></dd>
<dt>Claim Description:</dt><dd>The HTTP URI of the request (without query and fragment parts)</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="DPoP-Proof-Syntax"></xref> of RFC 9449</dd>
</dl></dd></dl>
<dl spacing="normal">
<dt>Access token hash:</dt>
<dd>
<t><br/></t>
<dl spacing="normal">
<dt>Claim Name:</dt><dd><tt>ath</tt></dd>
<dt>Claim Description:</dt><dd>The base64url-encoded SHA-256 hash of the ASCII encoding of the associated access token's value</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="DPoP-Proof-Syntax"></xref> of RFC 9449</dd>
</dl>
</dd>
</dl>
<section anchor="nonce-registry-update"><name>"nonce" Registration Update</name>
<t>The Internet Security Glossary <xref target="RFC4949"></xref> provides a useful definition of nonce
as a random or non-repeating value that is included in data
exchanged by a protocol, usually for the purpose of guaranteeing
liveness and thus detecting and protecting against replay attacks.</t>
<t>However, the initial registration of the <tt>nonce</tt> claim by <xref target="OpenID.Core"></xref>
used language that was contextually specific to that application,
which was potentially limiting to its general applicability.</t>
<t>Therefore, IANA has updated the entry for <tt>nonce</tt> in the
"JSON Web Token Claims" registry <xref target="IANA.JWT"></xref> with an expanded definition to reflect
that the claim can be used appropriately in other contexts and with the addition of this document as a reference, as follows.</t>

<dl spacing="normal">
<dt>Claim Name:</dt><dd><tt>nonce</tt></dd>
<dt>Claim Description:</dt><dd>Value used to associate a Client session with an ID Token (<bcp14>MAY</bcp14> also be used for nonce values in other applications of JWTs)</dd>
<dt>Change Controller:</dt><dd>OpenID Foundation Artifact Binding Working Group, openid-specs-ab@lists.openid.net</dd>
<dt>Specification Document(s):</dt><dd><xref target="OpenID.Core" sectionFormat="of" relative="openid-connect-core-1_0.html#IDToken" section="2"></xref> and RFC 9449</dd>
</dl>
</section>
</section>

<section anchor="http-message-header-field-names-registration"><name>Hypertext Transfer Protocol (HTTP) Field Name Registration</name>
<t>IANA has registered the following HTTP header fields, as specified by this document, in the "Hypertext Transfer Protocol (HTTP) Field Name Registry"
 <xref target="IANA.HTTP.Fields"></xref> established by <xref target="RFC9110"></xref>:</t>

<dl spacing="normal">
<dt>DPoP:</dt>
<dd>
<t><br/></t>
<dl spacing="normal">
<dt>Field Name:</dt><dd><tt>DPoP</tt></dd>
<dt>Status:</dt><dd>permanent</dd>
<dt>Reference:</dt><dd>RFC 9449</dd>
</dl>
</dd>
</dl>
<dl spacing="normal">
<dt>DPoP-Nonce:</dt>
<dd>
<t><br/></t>
<dl spacing="normal">
<dt>Field Name:</dt><dd><tt>DPoP-Nonce</tt></dd>
<dt>Status:</dt><dd>permanent</dd>
<dt>Reference:</dt><dd>RFC 9449</dd>
</dl>
</dd>
</dl>
</section>

<section anchor="oauth-authorization-server-metadata-registration"><name>OAuth Authorization Server Metadata Registration</name>
<t>IANA has registered the following value
in the "OAuth Authorization Server Metadata" registry <xref target="IANA.OAuth.Params"></xref>
established by <xref target="RFC8414"></xref>.</t>

<dl spacing="normal">
<dt>Metadata Name:</dt><dd><tt>dpop_signing_alg_values_supported</tt></dd>
<dt>Metadata Description:</dt><dd>JSON array containing a list of the JWS algorithms supported for DPoP proof JWTs</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="as-meta"></xref> of RFC 9449</dd>
</dl>
</section>

<section anchor="oauth-dynamic-client-registration-metadata"><name>OAuth Dynamic Client Registration Metadata</name>
<t>IANA has registered the following value
in the IANA "OAuth Dynamic Client Registration Metadata" registry <xref target="IANA.OAuth.Params"></xref>
established by <xref target="RFC7591"></xref>.</t>

<dl spacing="normal">
<dt>Client Metadata Name:</dt><dd><tt>dpop_bound_access_tokens</tt></dd>
<dt>Client Metadata Description:</dt><dd>Boolean value specifying whether the client always uses DPoP for token requests</dd>
<dt>Change Controller:</dt><dd>IETF</dd>
<dt>Reference:</dt><dd><xref target="client-meta"></xref> of RFC 9449</dd>
</dl>
</section>
</section>

</middle>

<back>

<displayreference target="I-D.ietf-oauth-security-topics" to="SECURITY-TOPICS"/>
<displayreference target="I-D.ietf-oauth-token-binding" to="TOKEN-BINDING"/>

<references>
<name>References</name>
<references>
<name>Normative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7638.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7800.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

<reference anchor="SHS" target="http://dx.doi.org/10.6028/NIST.FIPS.180-4">
  <front>
    <title>Secure Hash Standard (SHS)</title>
    <author>
      <organization>National Institute of Standards and Technology</organization>
    </author>
    <date year="2015" month="August"></date>
  </front>
  <seriesInfo name="FIPS" value="PUB 180-4"></seriesInfo>
  <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
</reference>
</references>

<references><name>Informative References</name>

<reference anchor="BREACH" target="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3587">
  <front>
    <title>CVE-2013-3587</title>
    <author><organization>CVE</organization></author>
  </front>
</reference>

<reference anchor="CRIME" target="https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2012-4929">
  <front>
    <title>CVE-2012-4929</title>
    <author><organization>CVE</organization></author>
  </front>
</reference>

<reference anchor="Cloudbleed" target="https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/">
  <front>
    <title>Incident report on memory leak caused by Cloudflare parser bug</title>
    <author initials="J." surname="Graham-Cumming" fullname="John Graham-Cumming"/>
    <date month="February" year="2017"/>
  </front>
</reference>

<reference anchor="GitHub.Tokens" target="https://github.blog/2022-04-15-security-alert-stolen-oauth-user-tokens/">
  <front>
    <title>Security alert: Attack campaign involving stolen OAuth user tokens issued to two third-party integrators</title>
    <author initials="M." surname="Hanley" fullname="Mike Hanley"/>
    <date month="April" year="2022"/>
  </front>
</reference>

<reference anchor="Heartbleed" target="https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2014-0160">
  <front>
    <title>CVE-2014-0160</title>
    <author></author>
  </front>
</reference>

<!-- [I-D.ietf-oauth-security-topics] IESG state I-D Exists as of 8/9/23  -->
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-oauth-security-topics.xml"/>

<!-- [I-D.ietf-oauth-token-binding] IESG state Expired as of 8/9/23 -->
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-oauth-token-binding.xml"/>

<reference anchor="IANA.HTTP.AuthSchemes" target="https://www.iana.org/assignments/http-authschemes/">
  <front>
    <title>Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry</title>
    <author>
      <organization>IANA</organization>
    </author>
  </front>
</reference>

<reference anchor="IANA.HTTP.Fields" target="https://www.iana.org/assignments/http-fields/">
  <front>
    <title>Hypertext Transfer Protocol (HTTP) Field Name Registry</title>
    <author>
      <organization>IANA</organization>
    </author>
  </front>
</reference>

<reference anchor="IANA.JOSE.ALGS" target="https://www.iana.org/assignments/jose/">
  <front>
    <title>JSON Web Signature and Encryption Algorithms</title>
    <author>
      <organization>IANA</organization>
    </author>
  </front>
</reference>

<reference anchor="IANA.JWT" target="https://www.iana.org/assignments/jwt/">
  <front>
    <title>JSON Web Token Claims</title>
    <author>
      <organization>IANA</organization>
    </author>
  </front>
</reference>

<reference anchor="IANA.MediaTypes" target="https://www.iana.org/assignments/media-types/">
  <front>
    <title>Media Types</title>
    <author>
      <organization>IANA</organization>
    </author>
  </front>
</reference>

<reference anchor="IANA.OAuth.Params" target="https://www.iana.org/assignments/oauth-parameters/">
  <front>
    <title>OAuth Parameters</title>
    <author>
      <organization>IANA</organization>
    </author>
  </front>
</reference>

<reference anchor="OpenID.Core" target="https://openid.net/specs/openid-connect-core-1_0.html">
  <front>
    <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
    </author>
    <author fullname="Michael B. Jones" initials="M." surname="Jones">
    </author>
    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
    </author>
    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
    </author>
    <date year="2014" month="November"></date>
  </front>
</reference>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2046.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4122.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6838.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7523.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7662.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8725.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8792.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9110.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9126.xml"/>

<reference anchor="W3C.CSP" target="https://www.w3.org/TR/CSP3/">
  <front>
    <title>Content Security Policy Level 3</title>
    <author fullname="Mike West" initials="M." surname="West">
      <organization></organization>
    </author>
    <date year="2023" month="July"></date>
  </front>
<refcontent>W3C Working Draft</refcontent>
</reference>

<reference anchor="W3C.WebCryptoAPI" target="https://www.w3.org/TR/2017/REC-WebCryptoAPI-20170126">
  <front>
    <title>Web Cryptography API</title>
    <author fullname="Mark Watson" initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"></date>
  </front>
<refcontent>W3C Recommendation</refcontent> 
</reference>

<reference anchor="WHATWG.Fetch" target="https://fetch.spec.whatwg.org/">
  <front>
    <title>Fetch Living Standard</title>
    <author>
      <organization>WHATWG</organization>
    </author>
    <date year="2023" month="July"></date>
  </front>
</reference>
</references>
</references>
<section anchor="Acknowledgements" numbered="false"><name>Acknowledgements</name>
<t>We would like to thank
<contact fullname="Brock Allen"/>,
<contact fullname="Annabelle Backman"/>,
<contact fullname="Dominick Baier"/>,
<contact fullname="Spencer Balogh"/>,
<contact fullname="Vittorio Bertocci"/>,
<contact fullname="Jeff Corrigan"/>,
<contact fullname="Domingos Creado"/>,
<contact fullname="Philippe De Ryck"/>,
<contact fullname="Andrii Deinega"/>,
<contact fullname="William Denniss"/>,
<contact fullname="Vladimir Dzhuvinov"/>,
<contact fullname="Mike Engan"/>,
<contact fullname="Nikos Fotiou"/>,
<contact fullname="Mark Haine"/>,
<contact fullname="Dick Hardt"/>,
<contact fullname="Joseph Heenan"/>,
<contact fullname="Bjorn Hjelm"/>,
<contact fullname="Jacob Ideskog"/>,
<contact fullname="Jared Jennings"/>,
<contact fullname="Benjamin Kaduk"/>,
<contact fullname="Pieter Kasselman"/>,
<contact fullname="Neil Madden"/>,
<contact fullname="Rohan Mahy"/>,
<contact fullname="Karsten Meyer zu Selhausen"/>,
<contact fullname="Nicolas Mora"/>,
<contact fullname="Steinar Noem"/>,
<contact fullname="Mark Nottingham"/>,
<contact fullname="Rob Otto"/>,
<contact fullname="Aaron Parecki"/>,
<contact fullname="Michael Peck"/>,
<contact fullname="Roberto Polli"/>,
<contact fullname="Paul Querna"/>,
<contact fullname="Justin Richer"/>,
<contact fullname="Joseph Salowey"/>,
<contact fullname="Rifaat Shekh-Yusef"/>,
<contact fullname="Filip Skokan"/>,
<contact fullname="Dmitry Telegin"/>,
<contact fullname="Dave Tonge"/>,
<contact fullname="Jim Willeke"/>,
and others for their valuable input, feedback, and general support of this work.</t>
<t>This document originated from discussions at the 4th OAuth Security
Workshop in Stuttgart, Germany. We thank the organizers of this
workshop (<contact fullname="Ralf Küsters"/> and <contact fullname="Guido Schmitz"/>).</t>
</section>
</back>
</rfc>
