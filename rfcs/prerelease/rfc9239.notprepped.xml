<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-dispatch-javascript-mjs-17" number="9239" submissionType="IETF" category="info" consensus="true" obsoletes="4329" updates="" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  
  <!-- xml2rfc v2v3 conversion 3.12.2 -->
  <front>
    <title>Updates to ECMAScript Media Types</title>
    <seriesInfo name="RFC" value="9239"/>
    <author initials="M." surname="Miller" fullname="Matthew A. Miller">
      <organization/>
      <address>
        <email>linuxwolf+ietf@outer-planes.net</email>
      </address>
    </author>
    <author initials="M." surname="Borins" fullname="Myles Borins">
      <organization>GitHub</organization>
      <address>
        <email>mylesborins@github.com</email>
      </address>
    </author>
    <author initials="M." surname="Bynens" fullname="Mathias Bynens">
      <organization>Google</organization>
      <address>
        <email>mths@google.com</email>
      </address>
    </author>
    <author initials="B." surname="Farias" fullname="Bradley Farias">
      <organization/>
      <address>
        <email>bradley.meck@gmail.com</email>
      </address>
    </author>
    <date year="2022" month="May"/>
    <area>ART</area>
    <workgroup>DISPATCH</workgroup>

<keyword>JavaScript</keyword>
<keyword>ECMAScript</keyword>
<keyword>MIME type</keyword>
<keyword>Content-Type</keyword>
<keyword>modules</keyword>
<keyword>TC39</keyword>
<keyword>ESM</keyword>

    <abstract>
      <t>This document describes the registration of media types for the ECMAScript and JavaScript programming languages and conformance requirements for implementations of these types. This document obsoletes RFC 4329 ("Scripting Media Types)", replacing the previous registrations with information and requirements aligned with common usage and implementation experiences.</t>
    </abstract>

    <note title="IESG Note">
<t>This document records the relationship between the work of Ecma 
International's Technical Committee 39 and the media types used to 
identify relevant payloads.</t>
<t>That relationship was developed outside of the IETF and as a result is 
unfortunately not aligned with the best practices of BCP 13.  
Consequently, consensus exists in the IETF to document the relationship 
and update the relevant IANA registrations for those media types, but 
this is not an IETF endorsement of the media types chosen for this work.</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>This memo describes media types for the JavaScript and ECMAScript programming languages.  Refer to the sections "Introduction" and "Overview" in <xref target="ECMA-262" format="default"/> for background information on these languages.  This document updates the descriptions and registrations for these media types to reflect existing usage on the Internet, and it provides up-to-date security considerations.</t>
      <t>This document replaces the media type registrations in <xref target="RFC4329" format="default"/> and updates the requirements for implementations using those media types defined in <xref target="RFC4329" format="default"/> based on current existing practices. As a consequence, this document obsoletes <xref target="RFC4329" format="default"/>.</t>
      <section anchor="terminology" numbered="true" toc="default">
        <name>Terminology</name>
<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
"<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
"<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
"<bcp14>SHOULD NOT</bcp14>",
"<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
are to be interpreted as described in BCP&nbsp;14
<xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
when, they appear in all capitals, as shown here.</t>
      </section>
    </section>
    <section anchor="compatibility" numbered="true" toc="default">
      <name>Compatibility</name>
      <t>This document defines equivalent processing requirements for the 
various script media types.  The most widely supported media type in use is text/javascript; all others are considered historical and obsolete aliases of text/javascript.</t>
      <t>The types defined in this document are applicable to scripts written in <xref target="ECMA-262" format="default"/>. New editions of <xref target="ECMA-262" format="default"/> are subjected to strong obligations of backward compatibility, imposed by the standardization process of Ecma International's Technical Committee 39 (TC39). As a result, JavaScript code based on an earlier edition is generally compatible with a JavaScript engine adhering to a later edition. The few exceptions to this are documented in <xref target="ECMA-262" format="default"/> in the section "Additions and Changes That Introduce Incompatibilities with Prior Editions". JavaScript developers commonly use feature detection to ensure that modern JavaScript features are only used when available in the current environment. Later editions of <xref target="ECMA-262" format="default"/> are not directly addressed in this document, although it is expected that implementations will behave as if applicability were extended to them. This document does not address other extensions to <xref target="ECMA-262" format="default"/> or scripts written in other languages.</t>
      <t>This document may be updated to take other content into account.  Updates of this document may introduce new optional parameters; implementations must consider the impact of such an update.</t>
      <t>This document does not define how fragment identifiers in resource identifiers <xref target="RFC3986" format="default"/> <xref target="RFC3987" format="default"/> for documents labeled with one of the media types defined in this document are resolved.  An update of this document may define processing of fragment identifiers.</t>
      <t>Note that this use of the "text" media type tree willfully does not align with its original intent per <xref target="RFC2045" format="default"/>. The reason for this is historical. <xref target="RFC4329" format="default"/> registered both the text/* and application/* types, marking the text/* types obsolete. This was done to encourage people toward application/*, matching the guidance in <xref target="RFC4288" format="default"/>, the predecessor to <xref target="RFC6838" format="default"/>. Since then, however, the industry widely adopted text/* anyway. The definitions in this document reflect the current state of implementation across the JavaScript ecosystem, in web browsers and other environments such as Node.js alike, in order to guarantee backward compatibility with existing applications as much as possible. Future registrations should not view this as a repeatable precedent.</t>
    </section>
    <section anchor="modules" numbered="true" toc="default">
      <name>Modules</name>
      <t>In order to formalize support for modular programs, <xref target="ECMA-262" format="default"/> (starting with the 6th Edition) defines two top-level goal symbols (or roots to the abstract syntax tree) for the ECMAScript grammar: Module and Script.  The Script goal represents the original structure where the code executes in the global scope, while the Module goal represents the module system built into ECMAScript starting with the 6th Edition.  See the section "ECMAScript Language: Scripts and Modules" in <xref target="ECMA-262" format="default"/> for details.</t>
      <t>This separation means that (in the absence of additional information) there are two possible interpretations for any given ECMAScript source text.</t>
      <t>Ecma International's Technical Committee 39 (TC39), the standards body in charge of ECMAScript, has determined that media types are outside of their scope of work <xref target="TC39-MIME-ISSUE" format="default"/>.</t>
      <t>It is not possible to fully determine if a source text of ECMAScript is meant to be parsed using the Module or Script grammar goals based upon content or media type alone. Therefore, as permitted by the media types in this document, scripting environments use out-of-band information in order to determine what goal should be used. Some scripting environments have chosen to adopt the file extension of .mjs for this purpose.</t>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>Refer to <xref target="RFC6365" format="default"/> for a discussion of terminology used in this section.  Source text (as defined in the section "Source Text" in <xref target="ECMA-262" format="default"/>) can be binary source text.  Binary source text is a textual data object that represents source text encoded using a character encoding scheme.  A textual data object is a whole text protocol message or a whole text document, or a part of it, that is treated separately for purposes of external storage and retrieval.  An implementation's internal representation of source text is not considered binary source text.</t>
      <t>Implementations need to determine a character encoding scheme in order to decode binary source text to source text.  The media types defined in this document allow an optional charset parameter to explicitly specify the character encoding scheme used to encode the source text.</t>
      <t>In order to ensure interoperability and align with widespread implementation practices, the charset parameter is optional rather than required, despite the recommendation in <xref target="RFC6838" format="default">BCP 13</xref> for text/* types.</t>
      <t>How implementations determine the character encoding scheme can be subject to processing rules that are out of the scope of this document.  For example, transport protocols can require that a specific character encoding scheme is to be assumed if the optional charset parameter is not specified, or they can require that the charset parameter is used in certain cases.  Such requirements are not defined by this document.</t>
      <t>Implementations that support binary source text <bcp14>MUST</bcp14> support binary source text encoded using the UTF-8 <xref target="RFC3629" format="default"/> character encoding scheme.  Module goal sources <bcp14>MUST</bcp14> be encoded as UTF-8; all other encodings will fail.  Source goal sources <bcp14>SHOULD</bcp14> be encoded as UTF-8; other character encoding schemes <bcp14>MAY</bcp14> be supported but are discouraged.  Whether U+FEFF is processed as a Byte Order Mark (BOM) signature or not depends on the host environment and is not defined by this document.</t>
      <section anchor="charset-parameter" numbered="true" toc="default">
        <name>Charset Parameter</name>
        <t>The charset parameter provides a means to specify the character encoding scheme of binary source text.  If present, the value of the charset parameter <bcp14>MUST</bcp14> be a registered charset <xref target="CHARSETS" format="default"/> and is considered valid if it matches the mime-charset production defined in <xref target="RFC2978" sectionFormat="of" section="2.3"/>.</t>
        <t>The charset parameter is only used when processing a Script goal source; Module goal sources <bcp14>MUST</bcp14> always be processed as UTF-8.</t>
      </section>
      <section anchor="character-encoding-scheme-detection" numbered="true" toc="default">
        <name>Character Encoding Scheme Detection</name>
        <t>It is possible that implementations cannot interoperably determine a single character encoding scheme simply by complying with all requirements of the applicable specifications.  To foster interoperability in such cases, the following algorithm is defined.  Implementations apply this algorithm until a single character encoding scheme is determined.</t>
        <ol spacing="normal" type="1"><li>
            <t>If the binary source text is not already determined to be using a Module goal and starts with a Unicode encoding form signature, the signature determines the encoding.  The following octet sequences, at the very beginning of the binary source text, are considered with their corresponding character encoding schemes:  </t>
<table align="left" anchor="tab">
  <name></name>
  <thead>
    <tr>
      <th>Leading sequence</th>
      <th>Encoding</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>EF BB BF</td>
      <td>UTF-8</td>
    </tr>
    <tr>
      <td>FF FE</td>
      <td>UTF-16LE</td>
    </tr>
    <tr>
      <td>FE FF</td>
      <td>UTF-16BE</td>
    </tr>
  </tbody>
</table>
            <t>
Implementations of this step <bcp14>MUST</bcp14> use these octet sequences to determine the character encoding scheme, even if the determined scheme is not supported.  If this step determines the character encoding scheme, the octet sequence representing the Unicode encoding form signature <bcp14>MUST</bcp14> be ignored when decoding the binary source text.</t>
          </li>
          <li>Else, if a charset parameter is specified and its value is valid and supported by the implementation, the value determines the character encoding scheme.</li>
          <li>Else, the character encoding scheme is assumed to be UTF-8.</li>
        </ol>
        <t>If the character encoding scheme is determined to be UTF-8 through any means other than step 1 as defined above and the binary source text starts with the octet sequence EF BB BF, the octet sequence is ignored when decoding the binary source text.</t>
      </section>
      <section anchor="character-encoding-scheme-error-handling" numbered="true" toc="default">
        <name>Character Encoding Scheme Error Handling</name>
        <t>Binary source text that is not properly encoded for the determined character encoding can pose a security risk, as discussed in <xref target="security-considerations"/>.  That said, because of the varied and complex environments scripts are executed in, most of the error handling specifics are left to the processors.  The following are broad guidelines that processors follow.</t>
        <t>If binary source text is determined to have been encoded using a certain character encoding scheme that the implementation is unable to process, implementations can consider the resource unsupported (i.e., do not decode the binary source text using a different character encoding scheme).</t>
        <t>Binary source text can be determined to have been encoded using a certain character encoding scheme but contain octet sequences that are not valid according to that scheme.  Implementations can substitute those invalid sequences with the replacement character U+FFFD (properly encoded for the scheme) or stop processing altogether.</t>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>Refer to <xref target="RFC3552" format="default"/> for a discussion of terminology used in this section.  Examples in this section and discussions of interactions of host environments with scripts, modules, and extensions to <xref target="ECMA-262" format="default"/> are to be understood as non-exhaustive and of a purely illustrative nature.</t>
      <t>The programming language defined in <xref target="ECMA-262" format="default"/> is not intended to be computationally self-sufficient; rather, it is expected that the computational environment provides facilities to programs to enable specific functionality.  Such facilities constitute unknown factors and are thus not defined by this document.</t>
      <t>Derived programming languages are permitted to include additional functionality that is not described in <xref target="ECMA-262" format="default"/>; such functionality constitutes an unknown factor and is thus not defined by this document.  In particular, extensions to <xref target="ECMA-262" format="default"/> defined for the JavaScript programming language are not discussed in this document.</t>
      <t>Uncontrolled execution of scripts can be exceedingly dangerous. Implementations that execute scripts <bcp14>MUST</bcp14> give consideration to their application's threat models and those of the individual features they implement; in particular, they <bcp14>MUST</bcp14> ensure that untrusted content is not executed in an unprotected environment.</t>
      <t>Module scripts in ECMAScript can request the fetching and processing of additional scripts; this is called "importing". Implementations that support modules need to process imported sources in the same way as scripts. See the section "ECMAScript Language: Scripts and Modules" in <xref target="ECMA-262" format="default"/> for details. Further, there may be additional privacy and security concerns, depending on the location(s) the original script and its imported modules are obtained from. For instance, a script obtained from "host-a.example" could request to import a script from "host-b.example", which could expose information about the executing environment (e.g., IP address) to "host-b.example".</t>
      <t>Specifications for host environment facilities and for derived programming languages should include security considerations.  If an implementation supports such facilities, the respective security considerations apply.  In particular, if scripts can be referenced from or included in specific document formats, the considerations for the embedding or referencing document format apply.</t>
      <t>For example, scripts embedded in application/xhtml+xml <xref target="RFC3236" format="default"/> documents could be enabled through the host environment to manipulate the document instance, which could cause the retrieval of remote resources; security considerations regarding retrieval of remote resources of the embedding document would apply in this case.</t>
      <t>This circumstance can further be used to make information that is normally only available to the script also available to a web server by encoding the information in the resource identifier of the resource, which can further enable eavesdropping attacks.  Implementation of such facilities is subject to the security considerations of the host environment, as discussed above.</t>
      <t>The programming language defined in <xref target="ECMA-262" format="default"/> does include facilities to loop, cause computationally complex operations, or consume large amounts of memory; this includes, but is not limited to, facilities that allow dynamically generated source text to be executed (e.g., the eval() function); uncontrolled execution of such features can cause denial of service, which implementations <bcp14>MUST</bcp14> protect against.</t>
      <t>With the addition of SharedArrayBuffer objects in ECMAScript version 8, it could be possible to implement a high-resolution timer, which could lead to certain types of timing and side-channel attacks (e.g., <xref target="SPECTRE" format="default"/>).  Implementations can take steps to mitigate this concern, such as disabling or removing support for SharedArrayBuffer objects, or can take additional steps to ensure that this shared memory is only accessible between execution contexts that have some form of mutual trust.</t>
      <t>A host environment can provide facilities to access external input. Scripts that pass such input to the eval() function or similar language features can be vulnerable to code injection attacks. Scripts are expected to protect against such attacks.</t>
      <t>A host environment can provide facilities to output computed results in a user-visible manner.  For example, host environments supporting a graphical user interface can provide facilities that enable scripts to present certain messages to the user.  Implementations <bcp14>MUST</bcp14> take steps to avoid confusion of the origin of such messages.  In general, the security considerations for the host environment apply in such a case as discussed above.</t>
      <t>Implementations are required to support the UTF-8 character encoding scheme; the security considerations of <xref target="RFC3629" format="default"/> apply.  Additional character encoding schemes may be supported; support for such schemes is subject to the security considerations of those schemes.</t>
      <t>Source text is expected to be in Unicode Normalization Form C. Scripts and implementations <bcp14>MUST</bcp14> consider security implications of unnormalized source text and data.  For a detailed discussion of such implications, refer to the security considerations in <xref target="RFC3629" format="default"/>.</t>
      <t>Scripts can be executed in an environment that is vulnerable to code injection attacks.  For example, a Common Gateway Interface (CGI) script <xref target="RFC3875" format="default"/> echoing user input could allow the inclusion of untrusted scripts that could be executed in an otherwise trusted environment.  This threat scenario is subject to security considerations that are out of the scope of this document.</t>
      <t>The "data" resource identifier scheme <xref target="RFC2397" format="default"/>, in combination with the types defined in this document, could be used to cause execution of untrusted scripts through the inclusion of untrusted resource identifiers in otherwise trusted content.  Security considerations of <xref target="RFC2397" format="default"/> apply.</t>
      <t>Implementations can fail to implement a specific security model or other means to prevent possibly dangerous operations.  Such failure could possibly be exploited to gain unauthorized access to a system or sensitive information; such failure constitutes an unknown factor and is thus not defined by this document.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>The media type registrations herein are divided into two major categories: (1)&nbsp;the sole media type "text/javascript", which is now in common usage and (2)&nbsp;all of the media types that are obsolete (i.e., "application/ecmascript", "application/javascript", "application/x-ecmascript", "application/x-javascript", "text/ecmascript", "text/javascript1.0", "text/javascript1.1", "text/javascript1.2", "text/javascript1.3", "text/javascript1.4", "text/javascript1.5", "text/jscript", "text/livescript", and "text/x-ecmascript").</t>
      <t>For both categories, the "Published specification" entry for the media types is updated to reference <xref target="ECMA-262" format="default"/>. In addition, a new file extension of .mjs has been added to the list of file extensions with the restriction that contents should be parsed using the Module goal. Finally, the <xref target="HTML" format="default"/> specification uses "text/javascript" as the default media type of ECMAScript when preparing script tags; therefore, "text/javascript" intended usage has been moved from OBSOLETE to COMMON.</t>
      <t>These changes have been reflected in the IANA "Media Types" registry in accordance with <xref target="RFC6838" format="default"/>. All registrations will point to this document as the reference. The outdated note stating that the "text/javascript" media type has been "OBSOLETED in favor of application/javascript" has been removed. The outdated note stating that the "text/ecmascript" media type has been "OBSOLETED in favor of application/ecmascript" has been removed. IANA has added the note "OBSOLETED in favor of text/javascript" to all registrations except "text/javascript"; that is, this note has been added to the "text/ecmascript", "application/javascript", and "application/ecmascript" registrations.</t>
      <t>Four of the legacy media types in this document have a subtype starting with the "x-" prefix:</t>
      <ul spacing="normal">
        <li>application/x-ecmascript</li>
        <li>application/x-javascript</li>
        <li>text/x-ecmascript</li>
        <li>text/x-javascript</li>
      </ul>
      <t>Note that these are grandfathered media types registered as per <xref target="RFC6838" sectionFormat="of" section="A"/>. These registrations predate <xref target="RFC6648" format="default">BCP 178</xref>, which they violate, and are only included in this document for backward compatibility.</t>
      <section anchor="common-javascript-media-types" numbered="true" toc="default">
        <name>Common JavaScript Media Types</name>
        <section anchor="textjavascript" numbered="true" toc="default">
          <name>text/javascript</name>
          <dl newline="false" spacing ="normal">
            <dt>
Type name:  </dt>
            <dd>
              text
            </dd>
            <dt>
Subtype name:  </dt>
            <dd>
              javascript
            </dd>
            <dt>
Required parameters:  </dt>
            <dd>
              N/A
            </dd>
            <dt>
Optional parameters:  </dt>
            <dd>
              charset. See <xref target="charset-parameter"/> of RFC 9239.
            </dd>
            <dt>
Encoding considerations:  </dt>
            <dd>
              Binary
            </dd>
            <dt>
Security considerations:  </dt>
            <dd>
              See <xref target="security-considerations"/> of RFC 9239.
            </dd>
            <dt>
Interoperability considerations:  </dt>
            <dd>
              It is expected that implementations will behave as if this registration applies to later editions of <xref target="ECMA-262" format="default"/>, and its published specification references may be updated accordingly from time to time. Although this expectation is unusual among media type registrations, it matches widespread industry conventions. See <xref target="compatibility"/> of RFC 9239.
            </dd>
            <dt>
Published specification:  </dt>
            <dd>
              <xref target="ECMA-262" format="default"/>
            </dd>
            <dt>
Applications that use this media type:  </dt>
            <dd>
              Script interpreters as discussed in RFC 9239.
            </dd>
          </dl>
          <dl newline="true" spacing="normal">
          <dt>Additional information:</dt>
          <dd>
            <dl newline="false" spacing="compact">
            <dt>
Deprecated alias names for this type:  </dt>
            <dd>
              application/javascript, application/x-javascript, text/javascript1.0, text/javascript1.1, text/javascript1.2, text/javascript1.3, text/javascript1.4, text/javascript1.5, text/jscript, text/livescript
            </dd>
                <dt>
Magic number(s):      </dt>
                <dd>
                  N/A
                </dd>
                <dt>
File extension(s):      </dt>
                <dd>
                  .js, .mjs
                </dd>
                <dt>
Macintosh File Type Code(s):      </dt>
                <dd>
                  TEXT
                </dd>
	    </dl>
           </dd>
	  </dl>
          <dl newline="false" spacing="normal">
            <dt>
Person &amp; email address to contact for further information:  </dt>
            <dd>
              See the Authors' Addresses sections of RFC 9239 and <xref target="RFC4329" format="default"/>.
            </dd>
            <dt>
Intended usage:  </dt>
            <dd>
              COMMON
            </dd>
            <dt>
Restrictions on usage:  </dt>
            <dd>
              The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262" format="default"/>.
            </dd>
            <dt>
Author:  </dt>
            <dd>
              See the Authors' Addresses sections of RFC 9239 and <xref target="RFC4329" format="default"/>.
            </dd>
            <dt>
Change controller:  </dt>
            <dd>
              IESG &lt;iesg@ietf.org&gt;
            </dd>
          </dl>
        </section>
      </section>
      <section anchor="historic-javascript-media-types" numbered="true" toc="default">
        <name>Historic JavaScript Media Types</name>
        <t>The following media types and legacy aliases are added or updated for historical purposes. All herein have an intended usage of OBSOLETE and are not expected to be in use with modern implementations.</t>
        <section anchor="textecmascript" numbered="true" toc="default">
          <name>text/ecmascript</name>
          <dl>
            <dt>
Type name:  </dt>
            <dd>
              text
            </dd>
            <dt>
Subtype name:  </dt>
            <dd>
              ecmascript
            </dd>
            <dt>
Required parameters:  </dt>
            <dd>
              N/A
            </dd>
            <dt>
Optional parameters:  </dt>
            <dd>
              charset. See <xref target="charset-parameter"/> of RFC 9239.
            </dd>
            <dt>
Encoding considerations:  </dt>
            <dd>
              Binary
            </dd>
            <dt>
Security considerations:  </dt>
            <dd>
              See <xref target="security-considerations"/> of RFC 9239.
            </dd>
            <dt>
Interoperability considerations:  </dt>
            <dd>
              It is expected that implementations will behave as if this registration applies to later editions of <xref target="ECMA-262" format="default"/>, and its published specification references may be updated accordingly from time to time. Although this expectation is unusual among media type registrations, it matches widespread industry conventions. See <xref target="compatibility"/> of RFC 9239.
            </dd>
            <dt>
Published specification:  </dt>
            <dd>
              <xref target="ECMA-262" format="default"/>
            </dd>
            <dt>
Applications that use this media type:  </dt>
            <dd>
              Script interpreters as discussed in RFC 9239.
            </dd>
          </dl>
          <dl newline="true" spacing="normal">
          <dt>Additional information:</dt>
          <dd>
          <dl newline="false" spacing="compact">
            <dt>
Deprecated alias names for this type:  </dt>
            <dd>
              application/ecmascript, application/x-ecmascript, text/x-ecmascript
            </dd>
            <dt>
Magic number(s):  </dt>
            <dd>
              N/A
            </dd>
            <dt>
File extension(s):  </dt>
            <dd>
              .es, .mjs
            </dd>
            <dt>
Macintosh File Type Code(s):  </dt>
            <dd>
              TEXT
            </dd>
           </dl>
           </dd>
           </dl>
          <dl newline="false" spacing="normal">
            <dt>
Person &amp; email address to contact for further information:  </dt>
            <dd>
              See the Authors' Addresses sections of RFC 9239 and <xref target="RFC4329" format="default"/>.
            </dd>
            <dt>
Intended usage:  </dt>
            <dd>
              OBSOLETE
            </dd>
            <dt>
Restrictions on usage:  </dt>
            <dd>
              This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262" format="default"/>.
            </dd>
            <dt>
Author:  </dt>
            <dd>
              See the Authors' Addresses sections of RFC 9239 and <xref target="RFC4329" format="default"/>.
            </dd>
            <dt>
Change controller:  </dt>
            <dd>
              IESG &lt;iesg@ietf.org&gt;
            </dd>
          </dl>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2045.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2397.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2978.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4288.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4329.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6365.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6648.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6838.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

        <reference anchor="CHARSETS" target="https://www.iana.org/assignments/character-sets">
          <front>
            <title>Character Sets</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ECMA-262" target="https://262.ecma-international.org/12.0/">
          <front>
            <title>ECMA-262 12th Edition, June 2021.  ECMAScript 2021 language specification</title>
            <author>
              <organization>Ecma International</organization>
            </author>
            <date year="2021" month="June"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3236.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3875.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3987.xml"/>

        <reference anchor="HTML" target="https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script">
          <front>
            <title>HTML Living Standard</title>
            <author>
              <organization>WHATWG</organization>
            </author>
            <date year="2022" month="May"/>
          </front>
        </reference>

        <reference anchor="SPECTRE" target="https://arxiv.org/abs/1801.01203">
          <front>
            <title>Spectre Attacks: Exploiting Speculative Execution</title>
            <author initials="P." surname="Kocher" fullname="Paul Kocher">
              <organization/>
            </author>
            <author initials="D." surname="Genkin" fullname="Daniel Genkin">
              <organization/>
            </author>
            <author initials="D." surname="Gruss" fullname="Daniel Gruss">
              <organization/>
            </author>
            <author initials="W." surname="Haas" fullname="Werner Haas">
              <organization/>
            </author>
            <author initials="M." surname="Hamburg" fullname="Mike Hamburg">
              <organization/>
            </author>
            <author initials="M." surname="Lipp" fullname="Moritz Lipp">
              <organization/>
            </author>
            <author initials="S." surname="Mangard" fullname="Stefan Mangard">
              <organization/>
            </author>
            <author initials="T." surname="Prescher" fullname="Thomas Prescher">
              <organization/>
            </author>
            <author initials="M." surname="Schwarz" fullname="Michael Schwarz">
              <organization/>
            </author>
            <author initials="Y." surname="Yarom" fullname="Yuval Yarom">
              <organization/>
            </author>
            <date year="2018" month="January"/>
          </front>
         <seriesInfo name="DOI" value="10.48550/arXiv.1801.01203"/>
        </reference>

        <reference anchor="TC39-MIME-ISSUE" target="https://web.archive.org/web/20170814193912/https://github.com/tc39/ecma262/issues/322">
          <front>
            <title>Add 'application/javascript+module' mime to remove ambiguity</title>
            <author>
              <organization>TC39</organization>
            </author>
            <date year="2017" month="August"/>
          </front>
         <refcontent>Wayback Machine archive</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="changes-from-rfc-4329" numbered="true" toc="default">
      <name>Changes from RFC 4329</name>
      <ul spacing="normal">
        <li>Added a section discussing ECMAScript modules and the impact on processing.</li>
        <li>Updated the Security Considerations section to discuss concerns associated with ECMAScript modules and SharedArrayBuffers.</li>
        <li>Updated the character encoding scheme detection to remove normative guidance on its use, to better reflect operational reality.</li>
        <li>Changed the intended usage of the media type "text/javascript" from OBSOLETE to COMMON.</li>
        <li>Changed the intended usage for all other script media types to obsolete.</li>
        <li>Updated various references where the original has been obsoleted.</li>
        <li>Updated references to ECMA-262 to match the version at the time of publication.</li>
      </ul>
    </section>
    <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>This work builds upon its antecedent document, authored by <contact fullname="Björn Höhrmann"/>.  The authors would like to thank
<contact fullname="Adam Roach"/>,
<contact fullname="Alexey Melnikov"/>,
<contact fullname="Allen Wirfs-Brock"/>,
<contact fullname="Anne van Kesteren"/>,
<contact fullname="Ben Campbell"/>,
<contact fullname="Benjamin Kaduk"/>,
<contact fullname="Éric Vyncke"/>,
<contact fullname="Francesca Palombini"/>,
<contact fullname="James Snell"/>,
<contact fullname="Kirsty Paine"/>,
<contact fullname="Mark Nottingham"/>,
<contact fullname="Murray Kucherawy"/>,
<contact fullname="Ned Freed"/>,
<contact fullname="Robert Sparks"/>, and
<contact fullname="Suresh Krishnan"/>
for their guidance and feedback throughout this process.</t>
    </section>
  </back>
</rfc>
