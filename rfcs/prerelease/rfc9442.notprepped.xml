<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-lpwan-schc-over-sigfox-23" number="9442" submissionType="IETF" category="std" consensus="true" obsoletes="" updates="" xml:lang="en" symRefs="true" sortRefs="true" tocInclude="true" version="3">

  <!-- xml2rfc v2v3 conversion 3.16.0 -->
  <front>
    <title abbrev="SCHC over Sigfox LPWAN">
     Static Context Header Compression (SCHC) over Sigfox Low-Power Wide Area Network (LPWAN)
    </title>
    <seriesInfo name="RFC" value="9442"/>
    <author fullname="Juan Carlos Zúñiga" initials="JC." surname="Zúñiga">
      <address>
        <postal>
          <street/>
          <city>Montreal</city>
          <region>QC</region>
          <country>Canada</country>
        </postal>
        <email>j.c.zuniga@ieee.org</email>
      </address>
    </author>
    <author initials="C." surname="Gomez" fullname="Carles Gomez">
      <organization>Universitat Politècnica de Catalunya</organization>
      <address>
        <postal>
          <street>C/Esteve Terradas, 7</street>
          <city>Castelldefels</city>
          <code>08860</code>
          <country>Spain</country>
        </postal>
        <email>carles.gomez@upc.edu</email>
      </address>
    </author>
    <author initials="S." surname="Aguilar" fullname="Sergio Aguilar">
      <organization>Universitat Politècnica de Catalunya</organization>
      <address>
        <postal>
          <street>C/Esteve Terradas, 7</street>
          <city>Castelldefels</city>
          <code>08860</code>
          <country>Spain</country>
        </postal>
        <email>sergio.aguilar.romero@upc.edu</email>
      </address>
    </author>
    <author initials="L." surname="Toutain" fullname="Laurent Toutain">
      <organization>IMT-Atlantique</organization>
      <address>
        <postal>
          <street>2 rue de la Chataigneraie</street>
          <extaddr>CS 17607</extaddr>
          <city>Cesson-Sevigne Cedex</city>
          <code>35576</code>
          <country>France</country>
        </postal>
        <email>Laurent.Toutain@imt-atlantique.fr</email>
      </address>
    </author>
    <author initials="S." surname="Céspedes" fullname="Sandra Céspedes">
      <organization>Concordia University</organization>
      <address>
        <postal>
          <street>1455 De Maisonneuve Blvd. W.</street>
          <city>Montreal</city>
          <region>QC</region>
          <code>H3G 1M8</code>
          <country>Canada</country>
        </postal>
        <email>sandra.cespedes@concordia.ca</email>
      </address>
    </author>
    <author initials="D." surname="Wistuba" fullname="Diego Wistuba">
      <organization>NIC Labs, Universidad de Chile</organization>
      <address>
        <postal>
          <street>Av. Almte. Blanco Encalada 1975</street>
          <city>Santiago</city>
          <country>Chile</country>
        </postal>
        <email>research@witu.cl</email>
      </address>
    </author>
    <author fullname="Julien Boite" initials="J." surname="Boite">
      <organization>Unabiz (Sigfox)</organization>
      <address>
        <postal>
          <street/>
          <city>Labege</city>
          <country>France</country>
        </postal>
        <email>juboite@free.fr</email>
        <uri>https://www.sigfox.com/</uri>
      </address>
    </author>
    <date year="2023" month="July"/>
    <area>int</area>
    <workgroup>lpwan</workgroup>
    <keyword>IoT</keyword>
    <keyword>Sigfox</keyword>
    <keyword>SCHC</keyword>
    <keyword>LPWAN</keyword>
    <keyword>fragmentation</keyword>
    <keyword>Reliable Delivery</keyword>
    <keyword>Link Layer Protocols</keyword>
    <keyword>Cross-Layer Protocols</keyword>
    <keyword>Adaptation Layer</keyword>
    <abstract>
        <t>The Static Context Header Compression (SCHC) and fragmentation specification (RFC 8724) describes a generic framework for application header compression and fragmentation modes designed for Low-Power Wide Area Network (LPWAN) technologies.
        This document defines a profile of SCHC over Sigfox LPWAN and provides optimal parameter values and modes of operation.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="Introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>The Generic Framework for Static Context Header Compression (SCHC) and Fragmentation specification <xref target="RFC8724" format="default"/> can be used in conjunction with any of the four LPWAN technologies
described in <xref target="RFC8376" format="default"/>. These LPWANs have similar characteristics, such as star-oriented
topologies, network architecture, connected devices with built-in applications, etc. 
</t>
      <t>SCHC offers a considerable degree of flexibility to accommodate all these LPWAN technologies. Even though there are a great number of similarities between
them, some differences exist with respect to the transmission characteristics, payload sizes, etc. Hence, there are optimal parameters and modes of operation 
that can be used when SCHC is used in conjunction with a specific LPWAN technology.
</t>
      <t>
    Sigfox is an LPWAN technology that offers energy-efficient connectivity for devices at a very low cost.
    Complete Sigfox documentation can be found in <xref target="sigfox-docs" format="default"/>.
    Sigfox aims to provide a very wide area network composed of Base Stations that receive short Uplink messages (up to 12 bytes in size) sent by devices over the long-range Sigfox radio protocol, as described in <xref target="RFC8376" format="default"/>.
    Base Stations then forward messages to the Sigfox Cloud infrastructure for further processing (e.g., to offer geolocation services) and final delivery to the customer.
        Base Stations also relay Downlink messages (with a fixed 8-byte size) sent by the Sigfox Cloud to the devices,  i.e., Downlink messages are being generated when devices explicitly request these messages with a flag in an Uplink message.
    With SCHC functionalities, the Sigfox network offers more reliable communications (including recovery of lost messages) and is able to convey extended-size payloads (allowing for fragmentation/reassembly of
messages) <xref target="sigfox-spec" format="default"/>.
</t>
      <t>This document describes the parameters, settings, and modes of operation to be used when SCHC is implemented over a Sigfox LPWAN. The set of parameters forms a "SCHC over Sigfox Profile".
    The SCHC over Sigfox Profile is applicable to the Sigfox Radio specification versions up to v1.6/March
2022 <xref target="sigfox-spec" format="default"/>  (support for future versions would have to be assessed).

</t>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
              <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      <t>It is assumed that the reader is familiar with the terms and mechanisms defined in <xref target="RFC8376" format="default"/> and <xref target="RFC8724" format="default"/>. Also, it is assumed that the reader is familiar with Sigfox terminology <xref target="sigfox-spec" format="default"/>.
</t>
    </section>
    <section anchor="schc-over-sigfox" numbered="true" toc="default">
      <name>SCHC over Sigfox</name>
      <t>The Generic SCHC Framework described in <xref target="RFC8724" format="default"/> takes advantage of previous knowledge of traffic flows existing in LPWAN applications to avoid context synchronization.</t>
      <t>Contexts need to be stored and pre-configured on both ends.
    This can be done either by using a provisioning protocol, by out-of-band means, or by
    pre-provisioning them (e.g., at manufacturing time).
    For example, the context exchange can be done by using the Network Configuration Protocol (NETCONF) <xref target="RFC6241" format="default"/> with Secure Shell (SSH), RESTCONF <xref target="RFC8040" format="default"/> with secure HTTP methods, and CoAP Management Interface (CORECONF) <xref target="I-D.ietf-core-comi" format="default"/> with the Constrained Application Protocol (CoAP) <xref target="RFC7252" format="default"/> as provisioning protocols. The contexts can be encoded in XML under NETCONF, in JSON <xref target="RFC8259" format="default"/> under RESTCONF, and in Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> under CORECONF.
    The way contexts are configured and stored on both ends is out of the scope of this document.</t>
      <section anchor="network-arch" numbered="true" toc="default">
        <name>Network Architecture</name>

        <t><xref target="Fig-archi" format="default"/> represents the architecture for Compression/Decompression (C/D) and Fragmentation/Reassembly (F/R) based
on the terminology defined in <xref target="RFC8376" format="default"/>, where the Radio Gateway (RGW) is a Sigfox Base Station and the Network Gateway (NGW) is the
Sigfox cloud-based Network. </t>
        <figure anchor="Fig-archi">
          <name>Network Architecture</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
  Sigfox Device                                           Application
+----------------+                                     +--------------+
| APP1 APP2 APP3 |                                     |APP1 APP2 APP3|
+----------------+                                     +--------------+
|   UDP  |       |                                     |     |  UDP   | 
|  IPv6  |       |                                     |     | IPv6   |   
+--------+       |                                     |     +--------+  
| SCHC C/D & F/R |                                     |              |  
|                |                                     |              | 
+-------+--------+                                     +--------+-----+ 
        $                                                       .
        $   +---------+     +--------------+     +---------+    .
        $   |         |     |   Network    |     | Network |    .
        +~~ |Sigfox BS|     |   Gateway    |     |  SCHC   |    .
            |  (RGW)  | === |    (NGW)     | ... |C/D & F/R|.....
            |         |     | Sigfox Cloud |     |         |   IP-based
            +---------+     +--------------+     +---------+   Network
------- Uplink message ------>
                                       <------- Downlink message ------
Legend:
$, ~ : Radio link
= : Internal Sigfox Network
. : External IP-based Network
]]></artwork>
        </figure>
        <t>In the case of the global Sigfox network, RGWs (or Base Stations) are distributed over multiple countries wherever the Sigfox LPWAN service is provided.
The NGW (or cloud-based Sigfox Core Network) is a single entity that connects to all RGWs (Sigfox Base Stations) in the world, hence providing a global single star Network topology.</t>
        <t>The Sigfox Device sends application packets that are compressed and/or fragmented by a SCHC C/D + F/R to reduce header size and/or fragment the packet.
The resulting SCHC message is sent over a layer two (L2) Sigfox frame to the Sigfox Base Stations, which then forward the SCHC message to the NGW.
The NGW then delivers the SCHC message and associated gathered metadata to the Network SCHC C/D + F/R.</t>
        <t>The Sigfox cloud-based Network communicates with the Network SCHC C/D + F/R for compression/decompression and/or for fragmentation/reassembly. The Network SCHC C/D + F/R shares the same set of Rules 
as the device SCHC C/D + F/R. The Network SCHC C/D + F/R can be collocated with the NGW or it could be located in a different place, as long as a tunnel or secured communication is established between
the NGW and the SCHC C/D + F/R functions. After decompression and/or reassembly, the packet can be forwarded over the Internet to one (or several) LPWAN Application Server(s) (App(s)).</t>
        <t>The SCHC C/D + F/R processes are bidirectional, so the same principles are applicable on both Uplink (UL) and Downlink (DL).</t>
      </section>
      <section anchor="uplink" numbered="true" toc="default">
        <name>Uplink</name>
        <t>Uplink Sigfox transmissions occur in repetitions over different times and frequencies. 
Besides time and frequency diversities, the Sigfox network also provides spatial diversity, as potentially an Uplink message will be received by several Base Stations. The Uplink message application payload size can be up to 12 bytes.</t>
        <t>Since all messages are self-contained and Base Stations forward all these messages back to the same Sigfox network, multiple input copies can be 
combined at the NGW, providing for extra reliability based on the triple diversity (i.e., time, space, and frequency). 
</t>
        <t>
A detailed description of the Sigfox radio protocol can be found in <xref target="sigfox-spec" format="default"/>.
</t>
        <t>Messages sent from the device to the Network are delivered by the Sigfox cloud-based Network to the Network SCHC C/D + F/R through a  callback/API with the following information:</t>
        <ul spacing="normal">
          <li>Device ID</li>
          <li>Message Sequence Number</li>
          <li>Message Payload</li>
          <li>Message Timestamp</li>
          <li>Device Geolocation (optional)</li>
          <li>Received Signal Strength Indicator (RSSI) (optional)</li>
          <li>Device Temperature (optional)</li>
          <li>Device Battery Voltage (optional)</li>
         </ul>
        <t>The Device ID is a globally unique identifier assigned to the device, which is included in the Sigfox header of every message. The Message Sequence Number is a monotonically 
increasing number identifying the specific transmission of this Uplink message, and it is also part of the Sigfox header. The Message Payload corresponds to the payload that the
device has sent in the Uplink transmission.
	Battery Voltage, Device Temperature, and RSSI values are sent in the confirmation control message, which is mandatorily sent by the device after the successful reception of a Downlink message (see <xref target="sigfox-callbacks" format="default"/>, Section 5.2).</t>
        <t>The Message Timestamp, Device Geolocation, RSSI, Device Temperature, and Device Battery Voltage are metadata parameters provided by the Network.</t>
        <t>A detailed description of the Sigfox callbacks/APIs can be found in <xref target="sigfox-callbacks" format="default"/>.</t>
        <t>Only messages that have passed the L2 Cyclic Redundancy Check (CRC) at Network reception are delivered by the Sigfox network to the Network SCHC C/D + F/R.</t>
        <t>The L2 Word size used by Sigfox is 1 byte (8 bits). </t>
        <t><xref target="SCHC-Message" format="default"/> shows a SCHC message sent over Sigfox, where the SCHC message could be a full SCHC Packet (e.g., compressed)
or a SCHC Fragment (e.g., a piece of a bigger SCHC Packet).</t>
        <figure anchor="SCHC-Message">
          <name>SCHC Message in Sigfox</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
| Sigfox Header | Sigfox Payload  |
+---------------+---------------- +
                |   SCHC Message  |
]]></artwork>
        </figure>
      </section>
      <section anchor="downlink" numbered="true" toc="default">
        <name>Downlink</name>
        <t>
   Downlink transmissions are device-driven and can only take place
   following an Uplink communication that indicates Downlink communication can be performed. Hence, a Sigfox Device explicitly indicates its intention to receive a Downlink message (with a size of 8 bytes)
using a Downlink request flag when sending the preceding Uplink message to the Network. The Downlink request flag is part of the Sigfox protocol headers. After completing the Uplink transmission, the device opens a fixed window for Downlink reception.
The delay and duration of the reception opportunity window have fixed values. If there is a Downlink message to be sent for this given device (e.g., either
a response to the Uplink message or queued information waiting to be transmitted), the Network transmits this message to the device during the reception window. If no message is received by the device after
the reception opportunity window has elapsed, the device closes the reception window opportunity and gets back to the normal mode (e.g., continue Uplink transmissions, sleep, standby, etc.).
</t>
        <t>When a Downlink message is sent to a device, a reception acknowledgement is generated by the device, sent back to the Network through the Sigfox radio protocol, and reported in the Sigfox network backend.</t>
        <t>
A detailed description of the Sigfox radio protocol can be found in <xref target="sigfox-spec" format="default"/>, and a detailed description of the Sigfox callbacks/APIs can be found in <xref target="sigfox-callbacks" format="default"/>. A Downlink request flag can be included in the information exchange between the Sigfox network and Network SCHC.
</t>
        <section anchor="dl_ack" numbered="true" toc="default">
          <name>SCHC ACK on Downlink</name>
          <t>
As explained previously, Downlink transmissions are driven by devices and can only take place following a specific Uplink transmission that indicates and allows a following Downlink opportunity.
For this reason, when SCHC bidirectional services are used (e.g., ACK-on-Error fragmentation mode), the SCHC protocol implementation needs to consider the times when a Downlink message
(e.g., SCHC Acknowledgement (ACK)) can be sent and/or received.
</t>
          <t>
For the Uplink ACK-on-Error fragmentation mode, a Downlink opportunity <bcp14>MUST</bcp14> be indicated by the last fragment of every window, which is signalled by a specific value of the Fragment Compressed Number (FCN) value, i.e., FCN = All-0 or FCN = All-1. The FCN is the tile index in a specific window. The combination of the FCN and the window number uniquely identifies a SCHC Fragment, as explained in <xref target="RFC8724" format="default"/>.
    The device sends the fragments in sequence and, after
transmitting FCN = All-0 or FCN = All-1, it opens up a reception opportunity. The Network SCHC can then decide to respond at that opportunity (or wait for a further one) with a SCHC ACK, indicating that there are missing fragments from the current or previous windows. If there is no SCHC ACK to be sent, or if the Network decides to wait for a further Downlink transmission opportunity, then no
Downlink transmission takes place at that opportunity and the Uplink transmissions continue after a timeout.
   Intermediate SCHC Fragments with FCNs that are different from All-0 or All-1 <bcp14>MUST NOT</bcp14> use the Downlink request flag to request a SCHC ACK.
</t>
        </section>
      </section>
      <section anchor="schc-rules" numbered="true" toc="default">
        <name>SCHC Rules</name>
        <t>
The RuleID <bcp14>MUST</bcp14> be included in the SCHC header. The total number of Rules to be used directly affects the RuleID field size, and therefore
the total size of the fragmentation header. For this reason, it is <bcp14>RECOMMENDED</bcp14> to keep the number of Rules that are defined for a specific device to the minimum possible.
    Large RuleID sizes (and thus larger fragmentation headers) are acceptable for devices without significant energy constraints (e.g., a sensor that is powered by the electricity grid).
</t>
        <t>
RuleIDs can be used to differentiate data traffic classes (e.g.,  QoS, control vs. data, etc.) and data sessions.
They can also be used to interleave simultaneous fragmentation sessions between a device and the Network.
</t>
      </section>
      <section anchor="Frag" numbered="true" toc="default">
        <name>Fragmentation</name>
        <t>
The SCHC specification <xref target="RFC8724" format="default"/> defines a generic fragmentation functionality that
allows sending data packets or files larger than the maximum size of a Sigfox payload. The functionality also defines a mechanism to reliably send multiple messages by allowing to selectively resend any lost fragments.</t>
        <t>
The SCHC fragmentation supports several modes of operation. These modes have different advantages and disadvantages, depending 
on the specifics of the underlying LPWAN technology and application use case. This section describes how the SCHC fragmentation functionality 
should optimally be implemented when used over a Sigfox LPWAN for the most typical use case applications.</t>
        <t>As described in <xref target="RFC8724" format="default" sectionFormat="of" section="8.2.3"/>, the integrity of the fragmentation-reassembly process of a SCHC Packet <bcp14>MUST</bcp14> be 
checked at the receiver end. Since only Uplink/Downlink messages/fragments that have passed the Sigfox CRC-check are delivered to the Network/Sigfox Device SCHC C/D + F/R,
integrity can be guaranteed when no consecutive messages are missing from the sequence and all FCN bitmaps are complete.  With this functionality
in mind, and in order to save protocol and processing overhead, the use of a Reassembly Check Sequence (RCS), as described in 
<xref target="all-1-behaviour" format="default"/>, <bcp14>MUST</bcp14> be used.

</t>
<section anchor="uplink-fragmentation" numbered="true" toc="default">
          <name>Uplink Fragmentation</name>
          <t>Sigfox Uplink transmissions are completely asynchronous and take place in any random frequency of the allowed Uplink bandwidth allocation.
In addition, devices may go to deep sleep mode and then wake up and transmit whenever there is a need to send information to the Network, as there is no need to perform any Network attachment, synchronization, or other procedures before transmitting a data packet.
	  </t>
          <t>Since Uplink transmissions are asynchronous, a SCHC Fragment can be transmitted at any given time by the device. Sigfox Uplink messages
are fixed in size, and as described in <xref target="RFC8376" format="default"/>, they can carry a payload of 0-12 bytes (0-96 bits). Hence, a single SCHC Tile size, per fragmentation 
mode, can be defined so that every Sigfox message always carries one SCHC Tile.</t>
          <t>When the ACK-on-Error mode is used for Uplink fragmentation, the SCHC Compound ACK defined in <xref target="RFC9441" format="default"/> <bcp14>MUST</bcp14> be used in the Downlink responses.</t>
          <section anchor="schc_sender_abort" numbered="true" toc="default">
            <name>SCHC Sender-Abort</name>
            <t>As defined in <xref target="RFC8724" format="default"/>, a SCHC Sender-Abort can be triggered when the number of SCHC ACK REQ attempts is greater than or equal to MAX_ACK_REQUESTS.
In the case of SCHC over Sigfox, a SCHC Sender-Abort <bcp14>MUST</bcp14> be sent if the number of repeated All-1s sent in sequence, without a Compound ACK reception in between, is greater than or equal to MAX_ACK_REQUESTS.
</t>
</section>
          <section anchor="schc_receiver_abort" numbered="true" toc="default">
            <name>SCHC Receiver-Abort</name>
            <t>As defined in <xref target="RFC8724" format="default"/>, a SCHC Receiver-Abort is triggered when the receiver has no RuleID and DTag pairs available for a new session.
In the case of this profile, a SCHC Receiver-Abort <bcp14>MUST</bcp14> be sent if, for a single device, all the RuleIDs are being processed by the receiver (i.e., have an active session)
at a certain time and a new one is requested or if the RuleID of the fragment is not valid.</t>
            <t>A SCHC Receiver-Abort <bcp14>MUST</bcp14> be triggered when the Inactivity Timer expires. </t>
            <t>MAX_ACK_REQUESTS can be increased when facing high error rates. </t>
<t>Although a SCHC Receiver-Abort can be triggered at any point in time, a SCHC Receiver-Abort Downlink message <bcp14>MUST</bcp14> only be sent when there is a Downlink transmission opportunity.</t>
          </section>
          <section anchor="single-byte-schc-header" numbered="true" toc="default">
            <name>Single-Byte SCHC Header for Uplink Fragmentation</name>
            <section anchor="no-ack-mode" numbered="true" toc="default">
              <name>Uplink No-ACK Mode: Single-Byte SCHC Header</name>
              <t>Single-byte SCHC Header No-ACK mode <bcp14>MUST</bcp14> be used for transmitting short, non-critical packets that require fragmentation and do not require full reliability.
This mode can be used by Uplink-only devices that do not support Downlink communications or by bidirectional devices when they send non-critical
data.
Note that sending non-critical data by using a reliable fragmentation mode (which is only possible for bidirectional devices) may incur unnecessary overhead. </t>
              <t>Since there are no multiple windows in the No-ACK mode, the W bit is not present.
    However, it <bcp14>MUST</bcp14> use the FCN field to indicate the
size of the data packet. In this sense, the data packet would need to be split into X fragments and, similarly to the other fragmentation modes,
the first transmitted fragment would need to be marked with FCN = X-1. Consecutive fragments <bcp14>MUST</bcp14> be marked with decreasing FCN values, having the 
last fragment marked with FCN = (All-1). Hence, even though the No-ACK mode does not allow recovering missing fragments, it allows implicitly indicating 
the size of the expected packet to the Network and hence detects whether all fragments have been received or not at the receiver side.
In case the FCN field is not used to indicate the size of the data packet, the Network can detect whether all fragments have been received or not by using the integrity check.
	      </t>
              <t>When using the Single-byte SCHC Header for Uplink fragmentation, the
	      fragmentation header <bcp14>MUST</bcp14> be 8 bits in size and is composed as follows:</t>
              <ul spacing="normal">
                <li>RuleID size: 3 bits</li>
                <li>DTag size (T): 0 bits</li>
                <li>Fragment Compressed Number (FCN) size (N): 5 bits</li>
              </ul>
              <t>Other F/R parameters <bcp14>MUST</bcp14> be configured as follows:</t>
              <ul spacing="normal">
                <li>As per <xref target="RFC8724" format="default"/>, in the No-ACK mode, the W (window) field is not present. </li>
                <li>Regular tile size: 11 bytes</li>
                <li>All-1 tile size: 0 to 10 bytes</li>
                <li>Inactivity Timer: Application-dependent. The default value is 12 hours.</li>
                <li>RCS size: 5 bits </li>
              </ul>
              <t>The maximum SCHC Packet size is 340 bytes.</t>
              <t><xref target="UL-NoACK-single-byte" format="default"/> presents SCHC Fragment format examples, and <xref target="no-ack-examples" format="default"/> provides fragmentation examples, using Single-byte SCHC Header No-ACK mode.</t>
            </section>
            <section anchor="ack-on-error-mode-1" numbered="true" toc="default">
              <name>Uplink ACK-on-Error Mode: Single-Byte SCHC Header</name>
              <t>ACK-on-Error with a single-byte header <bcp14>MUST</bcp14> be used for short- to medium-sized packets that need to be sent
   reliably. ACK-on-Error is optimal for reliable SCHC Packet transmission over Sigfox transmissions, since it leads to a reduced number of ACKs
   in the lower-capacity Downlink channel. Also, Downlink messages can be sent asynchronously and opportunistically.
    In contrast, ACK-Always would not minimize the number of ACKs, and No-ACK would not allow reliable transmission.
</t>
              <t>Allowing transmission of packets/files up to 300 bytes long, the SCHC Uplink fragmentation header size is 8 bits in size and is composed as follows:
</t>
<ul spacing="normal">
                <li>RuleID size: 3 bits</li>
                <li>DTag size (T): 0 bits</li>
                <li>Window index (W) size (M): 2 bits </li>
                <li>Fragment Compressed Number (FCN) size (N): 3 bits</li>
              </ul>
              <t>Other F/R parameters <bcp14>MUST</bcp14> be configured as follows:</t>
              <ul spacing="normal">
                <li>MAX_ACK_REQUESTS: 5</li>
                <li>WINDOW_SIZE: 7 (i.e., the maximum FCN value is 0b110)</li>
                <li>Regular tile size: 11 bytes</li>
                <li>All-1 tile size: 0 to 10 bytes</li>
                <li>Retransmission Timer: Application-dependent. The default value is 12 hours.</li>
                <li>Inactivity Timer: Application-dependent. The default value is 12 hours.</li>
                <li>RCS size: 3 bits</li>
              </ul>
              <t><xref target="UL-ACKoE-single-byte" format="default"/> presents SCHC Fragment format examples, and <xref target="ack-on-error-examples-1B-header" format="default"/> provides fragmentation examples, using ACK-on-Error with a single-byte header.</t>
            </section>
          </section>
          <section anchor="two-byte-schc-header" numbered="true" toc="default">
            <name>Two-Byte SCHC Header for Uplink Fragmentation</name>
            <t>ACK-on-Error with a two-byte header <bcp14>MUST</bcp14> be used for medium- to large-sized packets that need to be sent
   reliably.  ACK-on-Error is optimal for reliable SCHC Packet transmission over Sigfox, since it
   leads to a reduced number of ACKs in the lower-capacity Downlink
   channel. Also, Downlink messages can be sent asynchronously and
   opportunistically. In contrast, ACK-Always would not minimize the number of ACKs, and No-ACK would not allow reliable transmission.
</t>
            <section anchor="ack-on-error-mode-2" numbered="true" toc="default">
              <name>Uplink ACK-on-Error Mode: Two-Byte SCHC Header Option 1</name>
              <t>In order to allow transmission of medium to large packets/files up to 480 bytes long, the SCHC Uplink fragmentation header size is 16 bits in size and is composed as follows:</t>
              <ul spacing="normal">
                <li>RuleID size: 6 bits</li>
                <li>DTag size (T): 0 bits</li>
                <li>Window index (W) size (M): 2 bits </li>
                <li>Fragment Compressed Number (FCN) size (N): 4 bits</li>
                <li>RCS size: 4 bits</li>
              </ul>
              <t>Other F/R parameters <bcp14>MUST</bcp14> be configured as follows:</t>
              <ul spacing="normal">
                <li>MAX_ACK_REQUESTS: 5</li>
                <li>WINDOW_SIZE: 12 (with a maximum value of FCN=0b1011)</li>
                <li>Regular tile size: 10 bytes</li>
                <li>All-1 tile size: 1 to 10 bytes</li>
                <li>Retransmission Timer: Application-dependent. The default value is 12 hours.</li>
                <li>Inactivity Timer: Application-dependent. The default value is 12 hours.</li>
              </ul>
              <t>Note that WINDOW_SIZE is limited to 12. This is because 4 windows (M = 2) with bitmaps of size 12 can be fitted in a
single SCHC Compound ACK.</t>
              <t><xref target="UL-ACKoE-two-byte-opt-1" format="default"/> presents SCHC Fragment format examples, using ACK-on-Error with two-byte header Option 1.</t>
            </section>
            <section anchor="ack-on-error-mode-3" numbered="true" toc="default">
              <name>Uplink ACK-on-Error Mode: Two-Byte SCHC Header Option 2</name>
              <t>In order to allow transmission of very large packets/files up to 2400 bytes long, the SCHC Uplink fragmentation header size is 16 bits in size and is composed as follows:</t>
              <ul spacing="normal">
                <li>RuleID size: 8 bits</li>
                <li>DTag size (T): 0 bits</li>
                <li>Window index (W) size (M): 3 bits </li>
                <li>Fragment Compressed Number (FCN) size (N): 5 bits</li>
                <li>RCS size: 5 bits</li>
              </ul>
              <t>Other F/R parameters <bcp14>MUST</bcp14> be configured as follows:</t>
              <ul spacing="normal">
                <li>MAX_ACK_REQUESTS: 5</li>
                <li>WINDOW_SIZE: 31 (with a maximum value of FCN=0b11110)</li>
                <li>Regular tile size: 10 bytes</li>
                <li>All-1 tile size: 0 to 9 bytes</li>
                <li>Retransmission Timer: Application-dependent. The default value is 12 hours.</li>
                <li>Inactivity Timer: Application-dependent. The default value is 12 hours.</li>
              </ul>
              <t><xref target="UL-ACKoE-two-byte" format="default"/> presents SCHC Fragment format examples, using ACK-on-Error with two-byte header Option 2.</t>
            </section>
          </section>
          <section anchor="all-1-behaviour" numbered="true" toc="default">
            <name>All-1 SCHC Fragment and RCS Behavior</name>
            <t>For ACK-on-Error, as defined in <xref target="RFC8724" format="default"/>, it is expected that the last SCHC Fragment of the last window will always be delivered 
with an All-1 FCN. Since this last window may not be full (i.e., it may be composed of fewer than WINDOW_SIZE fragments), an All-1 fragment
may follow a value of FCN higher than 1 (0b01). In this case, the receiver cannot determine from the FCN values alone
whether there are or are not any missing fragments right before the All-1 fragment.
</t>
            <t>For Rules where the number of fragments in the last window is unknown, an RCS field <bcp14>MUST</bcp14> be used, indicating the number of fragments 
in the last window, including the All-1. With this RCS value, the receiver can detect if there are missing fragments before the All-1 and hence
construct the corresponding SCHC ACK Bitmap accordingly and send it in response to the All-1. 
</t>
          </section>
        </section>
        <section anchor="downlink-fragmentation" numbered="true" toc="default">
          <name>Downlink Fragmentation</name>
          <t>In some LPWAN technologies, as part of energy-saving techniques, Downlink transmission is only possible immediately after an Uplink
transmission. This allows the device to go in a very deep sleep mode and preserve battery without the need to listen to any information 
from the Network. This is the case for Sigfox-enabled devices, which can only listen to Downlink communications after performing an
Uplink transmission and requesting a Downlink.</t>
          <t>When there are fragments to be transmitted in the Downlink, an Uplink message is required to trigger the Downlink communication.
In order to avoid a potentially high delay for fragmented datagram transmission in the Downlink, the fragment receiver <bcp14>MAY</bcp14> perform an
Uplink transmission as soon as possible after reception of a Downlink fragment that is not the last one. Such an Uplink transmission
<bcp14>MAY</bcp14> be triggered by sending a SCHC message, such as a SCHC ACK. However, other data messages can equally be used to trigger Downlink
communications.
The fragment receiver <bcp14>MUST</bcp14> send an Uplink transmission (e.g., empty message) and request a Downlink every 24 hours when no SCHC session is started. Whether this Uplink transmission is used (and the transmission rate, if used) depends on application-specific requirements.
</t>
          <t>Sigfox Downlink messages are fixed in size, and as described in <xref target="RFC8376" format="default"/> they can carry a payload of 0-8 bytes (0-64 bits). Hence, a
single SCHC Tile size per mode can be defined so that every Sigfox message always carries one SCHC Tile. 
</t>
          <t>For reliable Downlink fragment transmission, the ACK-Always mode <bcp14>SHOULD</bcp14> be used.
Note that ACK-on-Error does not guarantee Uplink feedback (since no SCHC ACK will be sent when no errors occur in a window), and No-ACK would not allow reliable transmission.</t>
          <t>The SCHC Downlink fragmentation header size is 8 bits in size and is composed as follows:</t>
          <ul spacing="normal">
            <li>RuleID size: 3 bits</li>
            <li>DTag size (T): 0 bits</li>
            <li>Window index (W) size (M): 0 bits </li>
            <li>Fragment Compressed Number (FCN) size (N): 5 bits</li>
          </ul>
          <t>Other F/R parameters <bcp14>MUST</bcp14> be configured as follows:</t>
          <ul spacing="normal">
            <li>MAX_ACK_REQUESTS: 5</li>
            <li>WINDOW_SIZE: 31 (with a maximum value of FCN=0b11110)</li>
            <li>Regular tile size: 7 bytes</li>
            <li>All-1 tile size: 0 to 6 bytes</li>
            <li>Retransmission Timer: Application-dependent. The default value is 12 hours.</li>
            <li>Inactivity Timer: Application-dependent. The default value is 12 hours.</li>
            <li>RCS size: 5 bits </li>
          </ul>
</section>
      </section>
      <section anchor="schc-sigfox-message-formats" numbered="true" toc="default">
        <name>SCHC over Sigfox F/R Message Formats</name>
        <t>This section depicts the different formats of SCHC Fragment, SCHC ACK (including the SCHC Compound ACK 
defined in <xref target="RFC9441" format="default"/>), and SCHC Abort used in SCHC over Sigfox.</t>
        <section anchor="UL-NoACK-single-byte" numbered="true" toc="default">
          <name>Uplink No-ACK Mode: Single-Byte SCHC Header</name>
          <section anchor="no-ack-regular-1byte-schc-fragment" numbered="true" toc="default">
            <name>Regular SCHC Fragment</name>
            <t><xref target="no-ack-reg-1byte-frag" format="default"/> shows an example of a Regular SCHC Fragment for all fragments except the last one.
	    As tiles are 11 bytes in size, padding <bcp14>MUST NOT</bcp14> be added.
The penultimate tile of a SCHC Packet is of regular size.</t>
            <figure anchor="no-ack-reg-1byte-frag">
              <name>Regular SCHC Fragment Format for All Fragments except the Last One</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|- SCHC Fragment Header -|
+------------------------+---------+
|   RuleID   |    FCN    | Payload |
+------------+-----------+---------+
|   3 bits   |  5 bits   | 88 bits |
]]></artwork>
            </figure>
          </section>
          <section anchor="no-ack-all-1-1byte-schc-fragment" numbered="true" toc="default">
            <name>All-1 SCHC Fragment</name>
            <t><xref target="no-ack-all-1-1byte" format="default"/> shows an example of the All-1 message.
The All-1 message <bcp14>MAY</bcp14> contain the last tile of the SCHC Packet.
  Padding <bcp14>MUST NOT</bcp14> be
  added, as the resulting size is a multiple of an L2 Word.</t>
            <t>
   The All-1 messages Fragment Header includes a 5-bit RCS, and 3 bits are added as padding to complete 2 bytes.
    The payload size of the All-1 message ranges from 0 to 80 bits.
</t>
            <figure anchor="no-ack-all-1-1byte">
              <name>All-1 SCHC Message Format with the Last Tile</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|--------  SCHC Fragment Header -------|
+--------------------------------------+--------------+
| RuleID | FCN=ALL-1 |  RCS   |  b'000 |   Payload    |
+--------+-----------+--------+--------+--------------+
| 3 bits |  5 bits   | 5 bits | 3 bits | 0 to 80 bits |
]]></artwork>
            </figure>
            <t>As per <xref target="RFC8724" format="default"/>, the All-1 must be distinguishable from a SCHC Sender-Abort message (with the same RuleID and N values).
The All-1 <bcp14>MAY</bcp14> have the last tile of the SCHC Packet.
The SCHC Sender-Abort message header size is 1 byte with no padding bits.</t>
            <t>For the All-1 message to be distinguishable from the Sender-Abort message, the Sender-Abort message <bcp14>MUST</bcp14> be 1 byte (only header with no padding).
This way, the minimum size of the All-1 is 2 bytes, and the Sender-Abort message is 1 byte.</t>
          </section>
          <section anchor="no-ack-snd-abort-msg-format" numbered="true" toc="default">
            <name>SCHC Sender-Abort Message Format</name>
            <figure anchor="no-ack-snd-abort-msg">
              <name>SCHC Sender-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
     Sender-Abort
|------ Header ------|
+--------------------+
| RuleID | FCN=ALL-1 |
+--------+-----------+
| 3 bits |  5 bits   |
]]></artwork>
            </figure>
          </section>
        </section>
        <section anchor="UL-ACKoE-single-byte" numbered="true" toc="default">
          <name>Uplink ACK-on-Error Mode: Single-Byte SCHC Header</name>
          <section anchor="regular-1byte-schc-fragment" numbered="true" toc="default">
            <name>Regular SCHC Fragment</name>
            <t><xref target="reg-1byte-frag" format="default"/> shows an example of a Regular SCHC Fragment for all fragments except the last one. 
As tiles are 11 bytes in size, padding <bcp14>MUST NOT</bcp14> be added.</t>
            <figure anchor="reg-1byte-frag">
              <name>Regular SCHC Fragment Format for All Fragments except the Last One</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|-- SCHC Fragment Header --|
+--------------------------+---------+
| RuleID |   W    |  FCN   | Payload |
+--------+--------+--------+---------+
| 3 bits | 2 bits | 3 bits | 88 bits |
]]></artwork>
            </figure>
            <t>The SCHC ACK REQ <bcp14>MUST NOT</bcp14> be used, instead the All-1 SCHC Fragment <bcp14>MUST</bcp14> be used to request a SCHC ACK from the receiver (Network SCHC).
As per <xref target="RFC8724" format="default"/>, the All-0 message is distinguishable from the SCHC ACK REQ (All-1 message). 
The penultimate tile of a SCHC Packet is of regular size.</t>
          </section>
          <section anchor="all-1-1byte-schc-fragment" numbered="true" toc="default">
            <name>All-1 SCHC Fragment</name>
            <t><xref target="all-1-1byte" format="default"/> shows an example of the All-1 message. 
The All-1 message <bcp14>MAY</bcp14> contain the last tile of the SCHC Packet.
Padding <bcp14>MUST NOT</bcp14> be added, as the resulting size is L2-word-multiple.</t>
            <figure anchor="all-1-1byte">
              <name>All-1 SCHC Message Format with the Last Tile</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|-------------  SCHC Fragment Header -----------|
+-----------------------------------------------+--------------+
| RuleID |   W    | FCN=ALL-1 |  RCS   |b'00000 |   Payload    |
+--------+--------+-----------+--------+--------+--------------+
| 3 bits | 2 bits |  3 bits   | 3 bits | 5 bits | 0 to 80 bits |
]]></artwork>
            </figure>
            <t>As per <xref target="RFC8724" format="default"/>, the All-1 must be distinguishable from a SCHC Sender-Abort message (with same RuleID, M, and N values).
The All-1 <bcp14>MAY</bcp14> have the last tile of the SCHC Packet.
The SCHC Sender-Abort message header size is 1 byte with no padding bits.</t>
            <t>For the All-1 message to be distinguishable from the Sender-Abort message, the Sender-Abort message <bcp14>MUST</bcp14> be 1 byte (only header with no padding).
This way, the minimum size of the All-1 is 2 bytes, and the Sender-Abort message is 1 byte.</t>
          </section>
          <section anchor="schc-ack-format-1B" numbered="true" toc="default">
            <name>SCHC ACK Format</name>
            <t><xref target="success-ack-1byte" format="default"/> shows the SCHC ACK format when all fragments have been correctly received (C=1). 
Padding <bcp14>MUST</bcp14> be added to complete the 64-bit Sigfox Downlink frame payload size.</t>
            <figure anchor="success-ack-1byte">
              <name>SCHC Success ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- SCHC ACK Header ----|
+-------------------------+---------+
| RuleID |    W   | C=b'1 | b'0-pad |
+--------+--------+-------+---------+
| 3 bits | 2 bits | 1 bit | 58 bits |
]]></artwork>
            </figure>
            <t>In case SCHC Fragment losses are found in any of the windows of the SCHC Packet (C=0), the SCHC Compound ACK defined in <xref target="RFC9441" format="default"/> <bcp14>MUST</bcp14> be used.
The SCHC Compound ACK message format is shown in <xref target="compound-ack-1byte" format="default"/>.
</t>
            <figure anchor="compound-ack-1byte">
              <name>SCHC Compound ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|--- SCHC ACK Header ---|- W=w1 -|...|----- W=wi ------|
+------+--------+-------+--------+...+--------+--------+------+-------+
|RuleID| W=b'w1 | C=b'0 | Bitmap |...| W=b'wi | Bitmap | b'00 |b'0-pad|
+------+--------+-------+--------+...+--------+--------+------+-------+
|3 bits| 2 bits | 1 bit | 7 bits |...| 2 bits | 7 bits |2 bits|
]]></artwork>
            </figure>	      
	      <t>Losses are found in windows W = w1,...,wi, where w1 &lt; w2 &lt;...&lt; wi.</t>
          </section>
          <section anchor="snd-abort-msg-format" numbered="true" toc="default">
            <name>SCHC Sender-Abort Message Format</name>
            <figure anchor="snd-abort-msg">
              <name>SCHC Sender-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- Sender-Abort Header ----|
+-----------------------------+
| RuleID | W=b'11 | FCN=ALL-1 |
+--------+--------+-----------+
| 3 bits | 2 bits |  3 bits   |
		]]></artwork>
            </figure>
          </section>
          <section anchor="rcv-abort-msg-format" numbered="true" toc="default">
            <name>SCHC Receiver-Abort Message Format</name>
            <figure anchor="rcv-abort-msg">
              <name>SCHC Receiver-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|- Receiver-Abort Header -|
+---------------------------------+-----------------+---------+
| RuleID | W=b'11 | C=b'1 |  b'11 |  0xFF (all 1's) | b'0-pad |
+--------+--------+-------+-------+-----------------+---------+
| 3 bits | 2 bits | 1 bit | 2 bit |  8 bit          | 48 bits |
          next L2 Word boundary ->| <-- L2 Word --> |	
]]></artwork>
            </figure>
          </section>
        </section>
        <section anchor="UL-ACKoE-two-byte-opt-1" numbered="true" toc="default">
          <name>Uplink ACK-on-Error Mode: Two-Byte SCHC Header Option 1</name>
          <section anchor="opt-1-regular-2byte-schc-fragment" numbered="true" toc="default">
            <name>Regular SCHC Fragment</name>
            <t><xref target="opt-1-reg-2byte-frag" format="default"/> shows an example of a Regular SCHC Fragment for all fragments except the last one.
The penultimate tile of a SCHC Packet is of the regular size.</t>
            <figure anchor="opt-1-reg-2byte-frag">
              <name>Regular SCHC Fragment Format for All Fragments except the Last One</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|------- SCHC Fragment Header ------|
+-----------------------------------+---------+
| RuleID |    W   |  FCN   | b'0000 | Payload |
+--------+--------+--------+--------+---------+
| 6 bits | 2 bits | 4 bits | 4 bits | 80 bits |
]]></artwork>
            </figure>
            <t>The SCHC ACK REQ <bcp14>MUST NOT</bcp14> be used, instead the All-1 SCHC Fragment <bcp14>MUST</bcp14> be used to request a SCHC ACK from the receiver (Network SCHC).
As per <xref target="RFC8724" format="default"/>, the All-0 message is distinguishable from the SCHC ACK REQ (All-1 message).</t>
          </section>
          <section anchor="opt-1-all-1-2B-schc-fragment" numbered="true" toc="default">
            <name>All-1 SCHC Fragment</name>
            <t><xref target="opt-1-all-1-2B" format="default"/> shows an example of the All-1 message.
The All-1 message <bcp14>MUST</bcp14> contain the last tile of the SCHC Packet.</t>
            <t>The All-1 message Fragment Header contains an RCS of 4 bits to complete the two-byte size.
   The size of the last tile ranges from 8 to 80 bits.</t>
            <figure anchor="opt-1-all-1-2B">
              <name>All-1 SCHC Message Format with the Last Tile</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|--------- SCHC Fragment Header -------|
+--------------------------------------+--------------+
| RuleID |    W   | FCN=ALL-1 |  RCS   |    Payload   |
+--------+--------+-----------+--------+--------------+
| 6 bits | 2 bits |  4 bits   | 4 bits | 8 to 80 bits |
]]></artwork>
            </figure>
            <t>As per <xref target="RFC8724" format="default"/>, the All-1 must be distinguishable from the SCHC Sender-Abort message (with same RuleID, M, and N values).
The All-1 <bcp14>MUST</bcp14> have the last tile of the SCHC Packet that <bcp14>MUST</bcp14> be at least 1 byte.
The SCHC Sender-Abort message header size is 2 bytes with no padding bits.</t>
            <t>For the All-1 message to be distinguishable from the Sender-Abort message, the Sender-Abort message <bcp14>MUST</bcp14> be 2 bytes (only header with no padding).
This way, the minimum size of the All-1 is 3 bytes, and the Sender-Abort message is 2 bytes.</t>
          </section>
          <section anchor="opt-1-schc-ack-format-2B" numbered="true" toc="default">
            <name>SCHC ACK Format</name>
            <t> <xref target="opt-1-success-ack-2B" format="default"/> shows the SCHC ACK format when all fragments have been correctly received (C=1).
Padding <bcp14>MUST</bcp14> be added to complete the 64-bit Sigfox Downlink frame payload size.</t>
            <figure anchor="opt-1-success-ack-2B">
              <name>SCHC Success ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- SCHC ACK Header ----|
+-------------------------+---------+
| RuleID |    W   | C=b'1 | b'0-pad |
+--------+--------+-------+---------+
| 6 bits | 2 bits | 1 bit | 55 bits |
]]></artwork>
            </figure>
            <t>The SCHC Compound ACK message <bcp14>MUST</bcp14> be used in case SCHC Fragment losses are found in any window of the SCHC Packet (C=0).
The SCHC Compound ACK message format is shown in <xref target="opt-1-schc-compound-ack-2B" format="default"/>.
The SCHC Compound ACK can report up to 4 windows with losses, as shown in <xref target="opt-1-schc-compound-ack-2B-example-losses-all-windows" format="default"/>.</t>
            <t>When sent in the Downlink, the SCHC Compound ACK <bcp14>MUST</bcp14> be 0 padded (padding bits must be 0) to complement the 64 bits required by the Sigfox payload.</t>
            <figure anchor="opt-1-schc-compound-ack-2B">
              <name>SCHC Compound ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|--- SCHC ACK Header ---|- W=w1 -|...|---- W=wi -----|
+--------+------+-------+--------+...+------+--------+------+-------+
| RuleID |W=b'w1| C=b'0 | Bitmap |...|W=b'wi| Bitmap | b'00 |b'0-pad|
+--------+------+-------+--------+...+------+--------+------+-------+
| 6 bits |2 bits| 1 bit | 12 bits|...|2 bits| 12 bits|2 bits|
]]></artwork>
            </figure>
	    <t>Losses are found in windows W = w1,...,wi, where w1 &lt; w2 &lt;...&lt; wi.</t>
            <figure anchor="opt-1-schc-compound-ack-2B-example-losses-all-windows">
              <name>SCHC Compound ACK Message Format Example with Losses in All Windows</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|- SCHC ACK Header -|- W=0 -|      |- W=1 -|...
+------+------+-----+-------+------+-------+...
|RuleID|W=b'00|C=b'0|Bitmap |W=b'01|Bitmap |...
+------+------+-----+-------+------+-------+...
|6 bits|2 bits|1 bit|12 bits|2 bits|12 bits|...

            ...       |- W=2 -|      |- W=3 -|
            ...+------+-------+------+-------+---+
            ...|W=b'10|Bitmap |W=b'11|Bitmap |b'0|
            ...+------+-------+------+-------+---+
            ...|2 bits|12 bits|2 bits|12 bits|
]]></artwork>
            </figure>
<t>Losses are found in windows W = w1,...,wi, where w1 &lt; w2 &lt;...&lt; wi.</t>
          </section>
          <section anchor="opt-1-snd-abort-msg-2B" numbered="true" toc="default">
            <name>SCHC Sender-Abort Message Format</name>
            <figure anchor="opt-1-snd-abort-msg-format-2B">
              <name>SCHC Sender-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- Sender-Abort Header ----|
+-----------------------------+
| RuleID |   W    | FCN=ALL-1 |
+--------+--------+-----------+
| 6 bits | 2 bits |  4 bits   |
]]></artwork>
            </figure>
          </section>
          <section anchor="opt-1-rcv-abort-msg-2B" numbered="true" toc="default">
            <name>SCHC Receiver-Abort Message Format</name>
            <figure anchor="opt-1-rcv-abort-msg-format-2B">
              <name>SCHC Receiver-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|- Receiver-Abort Header -|
+---------------------------------+-----------------+---------+
| RuleID | W=b'11 | C=b'1 |  0x7F |  0xFF (all 1's) | b'0-pad |
+--------+--------+-------+-------+-----------------+---------+
| 6 bits | 2 bits | 1 bit | 7 bit |  8 bit          | 40 bits |
          next L2 Word boundary ->| <-- L2 Word --> |
]]></artwork>
            </figure>
          </section>
        </section>
        <section anchor="UL-ACKoE-two-byte" numbered="true" toc="default">
          <name>Uplink ACK-on-Error Mode: Two-Byte SCHC Header Option 2</name>
          <section anchor="opt-2regular-2byte-schc-fragment" numbered="true" toc="default">
            <name>Regular SCHC Fragment</name>
            <t><xref target="opt-2-reg-2byte-frag" format="default"/> shows an example of a Regular SCHC Fragment for all fragments except the last one.
The penultimate tile of a SCHC Packet is of the regular size.</t>
            <figure anchor="opt-2-reg-2byte-frag">
              <name>Regular SCHC Fragment Format for All Fragments except the Last One</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|-- SCHC Fragment Header --|
+--------------------------+---------+
| RuleID |   W    | FCN    | Payload |
+--------+--------+--------+---------+
| 8 bits | 3 bits | 5 bits | 80 bits |
]]></artwork>
            </figure>
            <t>The SCHC ACK REQ <bcp14>MUST NOT</bcp14> be used, instead the All-1 SCHC Fragment <bcp14>MUST</bcp14> be used to request a SCHC ACK from the receiver (Network SCHC).
As per <xref target="RFC8724" format="default"/>, the All-0 message is distinguishable from the SCHC ACK REQ (All-1 message).</t>
          </section>
          <section anchor="opt-2-all-1-2B-schc-fragment" numbered="true" toc="default">
            <name>All-1 SCHC Fragment</name>
            <t><xref target="opt-2-all-1-2B" format="default"/> shows an example of the All-1 message.
The All-1 message <bcp14>MAY</bcp14> contain the last tile of the SCHC Packet.</t>
            <t>The All-1 message Fragment Header contains an RCS of 5 bits and 3 padding bits to complete a 3-byte Fragment Header.
   The size of the last tile, if present, ranges from 8 to 72 bits.</t>
            <figure anchor="opt-2-all-1-2B">
              <name>All-1 SCHC Message Format with the Last Tile</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|-------------- SCHC Fragment Header -----------|
+-----------------------------------------------+--------------+
| RuleID |    W   | FCN=ALL-1 |  RCS   | b'000  |    Payload   |
+--------+--------+-----------+--------+--------+--------------+
| 8 bits | 3 bits |  5 bits   | 5 bits | 3 bits | 8 to 72 bits |
]]></artwork>
            </figure>
            <t>As per <xref target="RFC8724" format="default"/>, the All-1 must be distinguishable from the SCHC Sender-Abort message (with same RuleID, M, and N values).
The SCHC Sender-Abort message header size is 2 bytes with no padding bits.</t>
            <t>For the All-1 message to be distinguishable from the Sender-Abort message, the Sender-Abort message <bcp14>MUST</bcp14> be 2 bytes (only header with no padding).
This way, the minimum size of the All-1 is 3 bytes, and the Sender-Abort message is 2 bytes.</t>
          </section>
          <section anchor="opt-2-schc-ack-format-2B" numbered="true" toc="default">
            <name>SCHC ACK Format</name>
            <t> <xref target="opt-2-success-ack-2B" format="default"/> shows the SCHC ACK format when all fragments have been correctly received (C=1).
Padding <bcp14>MUST</bcp14> be added to complete the 64-bit Sigfox Downlink frame payload size.</t>
            <figure anchor="opt-2-success-ack-2B">
              <name>SCHC Success ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- SCHC ACK Header ----|
+-------------------------+---------+
| RuleID |    W   | C=b'1 | b'0-pad |
+--------+--------+-------+---------+
| 8 bits | 3 bits | 1 bit | 52 bits |
]]></artwork>
            </figure>
            <t>The SCHC Compound ACK message <bcp14>MUST</bcp14> be used in case SCHC Fragment losses are found in any window of the SCHC Packet (C=0).
The SCHC Compound ACK message format is shown in <xref target="opt-2-schc-compound-ack-2B" format="default"/>.
The SCHC Compound ACK can report up to 3 windows with losses.</t>
            <t>When sent in the Downlink, the SCHC Compound ACK <bcp14>MUST</bcp14> be 0 padded (padding bits must be 0) to complement the 64 bits required by
the Sigfox payload.</t>
            <figure anchor="opt-2-schc-compound-ack-2B">
              <name>SCHC Compound ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|-- SCHC ACK Header --|- W=w1 -|...|---- W=wi -----|
+------+------+-------+--------+...+------+--------+------+-------+
|RuleID|W=b'w1| C=b'0 | Bitmap |...|W=b'wi| Bitmap | 000  |b'0-pad|
+------+------+-------+--------+...+------+--------+------+-------+
|8 bits|3 bits| 1 bit | 31 bits|...|3 bits| 31 bits|3 bits|
]]></artwork>
            </figure>
	    <t>Losses are found in windows W = w1,...,wi, where w1 &lt; w2 &lt;...&lt; wi.</t>
          </section>
          <section anchor="snd-abort-msg-2B" numbered="true" toc="default">
            <name>SCHC Sender-Abort Message Format</name>
            <figure anchor="snd-abort-msg-format-2B">
              <name>SCHC Sender-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- Sender-Abort Header ----|
+-----------------------------+
| RuleID |   W    | FCN=ALL-1 |
+--------+--------+-----------+
| 8 bits | 3 bits |  5 bits   |
]]></artwork>
            </figure>
          </section>
          <section anchor="rcv-abort-msg-2B" numbered="true" toc="default">
            <name>SCHC Receiver-Abort Message Format</name>
            <figure anchor="rcv-abort-msg-format-2B">
              <name>SCHC Receiver-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|-- Receiver-Abort Header -|
+-----------------------------------+-----------------+---------+
| RuleID | W=b'111 | C=b'1 | b'1111 |  0xFF (all 1's) | b'0-pad |
+--------+---------+-------+--------+-----------------+---------+
| 8 bits |  3 bits | 1 bit | 4 bit  |  8 bit          | 40 bits |
            next L2 Word boundary ->| <-- L2 Word --> |
]]></artwork>
            </figure>
          </section>
        </section>
        <section anchor="DL-ACK-Always" numbered="true" toc="default">
          <name>Downlink ACK-Always Mode: Single-Byte SCHC Header</name>
          <section anchor="DL-ACK-Always-1byte-schc-fragment" numbered="true" toc="default">
            <name>Regular SCHC Fragment</name>
            <t><xref target="DL-ACK-Always-1byte-frag" format="default"/> shows an example of a Regular SCHC Fragment for all fragments except the last one.
The penultimate tile of a SCHC Packet is of the regular size.</t>
            <figure anchor="DL-ACK-Always-1byte-frag">
              <name>Regular SCHC Fragment Format for All Fragments except the Last One</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
   SCHC Fragment
|--    Header   --|
+-----------------+---------+
| RuleID |  FCN   | Payload |
+--------+--------+---------+
| 3 bits | 5 bits | 56 bits |
]]></artwork>
            </figure>
            <t>The SCHC ACK <bcp14>MUST NOT</bcp14> be used, instead the All-1 SCHC Fragment <bcp14>MUST</bcp14> be used to request a SCHC ACK from the receiver.
As per <xref target="RFC8724" format="default"/>, the All-0 message is distinguishable from the SCHC ACK REQ (All-1 message).</t>
          </section>
          <section anchor="DL-ACK-Always-1B-all-1-schc-fragment" numbered="true" toc="default">
            <name>All-1 SCHC Fragment</name>
            <t><xref target="DL-ACK-Always-1B-all-1" format="default"/> shows an example of the All-1 message.
The All-1 message <bcp14>MAY</bcp14> contain the last tile of the SCHC Packet.</t>
            <t>The All-1 message Fragment Header contains an RCS of 5 bits and 3 padding bits to complete a 2-byte Fragment Header.
   The size of the last tile, if present, ranges from 8 to 48 bits.</t>
            <figure anchor="DL-ACK-Always-1B-all-1">
              <name>All-1 SCHC Message Format with the Last Tile</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|--------- SCHC Fragment Header -------|
+--------------------------------------+--------------+
| RuleID | FCN=ALL-1 |  RCS   | b'000  |    Payload   |
+--------+-----------+--------+--------+--------------+
| 3 bits |  5 bits   | 5 bits | 3 bits | 0 to 48 bits |
]]></artwork>
            </figure>
            <t>As per <xref target="RFC8724" format="default"/>, the All-1 must be distinguishable from the SCHC Sender-Abort message (with same RuleID and N values).
The SCHC Sender-Abort message header size is 1 byte with no padding bits.</t>
            <t>For the All-1 message to be distinguishable from the Sender-Abort message, the Sender-Abort message <bcp14>MUST</bcp14> be 1 byte (only header with no padding).
This way, the minimum size of the All-1 is 2 bytes, and the Sender-Abort message is 1 bytes.</t>
          </section>
          <section anchor="DL-ACK-Always-1B-schc-ack-format" numbered="true" toc="default">
            <name>SCHC ACK Format</name>
            <t> <xref target="DL-ACK-Always-1B-success-ack" format="default"/> shows the SCHC ACK format when all fragments have been correctly received (C=1).
Padding <bcp14>MUST</bcp14> be added to complete 2 bytes.</t>
            <figure anchor="DL-ACK-Always-1B-success-ack">
              <name>SCHC Success ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
     SCHC ACK
|--   Header   --|
+----------------+---------+
| RuleID | C=b'1 | b'0-pad |
+--------+-------+---------+
| 3 bits | 1 bit |  4 bits |
]]></artwork>
            </figure>
            <t>
The SCHC ACK message format is shown in <xref target="DL-ACK-Always-1B-schc-compound-ack" format="default"/>.
</t>
            <figure anchor="DL-ACK-Always-1B-schc-compound-ack">
              <name>SCHC Compound ACK Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
|---- SCHC ACK Header ----|
+--------+-------+--------+---------+
| RuleID | C=b'0 | Bitmap | b'0-pad |
+--------+-------+--------+---------+
| 3 bits | 1 bit | 31 bits|  5 bits |
]]></artwork>
            </figure>
</section>
          <section anchor="DL-ACK-Always-1B-snd-abort-msg" numbered="true" toc="default">
            <name>SCHC Sender-Abort Message Format</name>
            <figure anchor="DL-ACK-Always-1B-snd-abort-msg-format">
              <name>SCHC Sender-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
     Sender-Abort
|----   Header   ----|
+--------------------+
| RuleID | FCN=ALL-1 |
+--------+-----------+
| 3 bits |  5 bits   |
]]></artwork>
            </figure>
</section>
          <section anchor="DL-ACK-Always-1B-rcv-abort-msg" numbered="true" toc="default">
            <name>SCHC Receiver-Abort Message Format</name>
            <figure anchor="DL-ACK-Always-1B-rcv-abort-msg-format">
              <name>SCHC Receiver-Abort Message Format</name>
              <artwork name="" type="" align="center" alt=""><![CDATA[
  Receiver-Abort
|---  Header  ---|
+----------------+--------+-----------------+
| RuleID | C=b'1 | b'1111 |  0xFF (all 1's) |
+--------+-------+--------+-----------------+
| 3 bits | 1 bit | 4 bit  |  8 bit          |
]]></artwork>
            </figure>
</section>
</section>
</section>
<section anchor="padding" numbered="true" toc="default">
        <name>Padding</name>
        <t>The Sigfox payload fields have different characteristics in Uplink and Downlink.</t>
        <t>Uplink messages can contain a payload size from 0 to 12 bytes. The Sigfox radio protocol allows sending zero bits,
one single bit of information for binary applications (e.g., status), or an integer number of bytes.
Therefore, for 2 or more bits of payload, it is required to add padding to the next integer number of bytes. The reason for this 
flexibility is to optimize transmission time and hence save battery consumption at the device.</t>
        <t>On the other hand, Downlink frames have a fixed length. The payload length <bcp14>MUST</bcp14> be 64 bits (i.e., 8 bytes). Hence, if less
information bits are to be transmitted, padding <bcp14>MUST</bcp14> be used with bits equal to 0.
    The receiver <bcp14>MUST</bcp14> remove the added padding bits before the SCHC reassembly process.</t>
      </section>
    </section>
    <section anchor="fragmentation-rules-examples" numbered="true" toc="default">
      <name>Fragmentation Rules Examples</name>
      <t>This section provides an example of RuleID configuration for interoperability between the F/R modes presented in this document.
    Note that the RuleID space for Uplink F/R is different than the one for Downlink F/R; therefore, this section is divided in two subsections: Rules for Uplink fragmentation and Rules for Downlink fragmentation.
</t>
      <t>For Uplink F/R, multiple header lengths were described in <xref target="Frag" format="default"/>.
    All of them are part of the SCHC over Sigfox Profile and offer not only low protocol overhead for small payloads (single byte header) but also extensibility to transport larger payloads with more overhead (2-byte header, Options 1 and 2).
    The usage of the RuleID space for each header length is an implementation choice, but we provide an example of it in the following section.
    This illustrates implementation choices made in order to 1) identify the different header length and 2) finally parse the RuleID field to identify the RuleID value and execute the associated treatment.
</t>
      <section anchor="uplink-fragmentation-rules-examples" numbered="true" toc="default">
        <name>Uplink Fragmentation Rules Examples</name>
        <t>
      The RuleID field for Uplink F/R modes has different sizes depending on the header length.
In order to identify the header length and then the value of the RuleID, the RuleID field
 is interpreted as follows:
        </t>
        <ul spacing="normal">
          <li>The RuleID field is the first one to be parsed in the SCHC header, starting from the leftmost bits.</li>
          <li><t>For Single-byte SCHC Header F/R modes, a RuleID field of 3 bits is expected:</t>
            <ul spacing="normal">
              <li>If the first 3 leftmost bits have a value different than 0b'111, then it signals a Single-byte SCHC Header F/R mode.</li>
              <li>If their value is 0b'111, then it signals a Two-byte SCHC Header F/R mode.
              </li>
            </ul>
          </li>
          <li><t>For Single-byte SCHC Header F/R modes:</t>
            <ul spacing="normal">
              <li>There are 7 RuleIDs available (with values from 0b'000-0b'110); the RuleID with value 0b'111 is reserved to indicate a Two-byte SCHC Header.</li>
              <li>This set of Rules is called "standard rules", and it is used to implement Single-byte SCHC Header modes.</li>
              <li>Each RuleID is associated with a set of properties defining if Uplink F/R is used and which Uplink F/R mode is used. As an example, the RuleID 0b'000 is mapped onto Uplink No-ACK Mode: Single-byte SCHC Header, and the RuleIDs 0b'001 and 0b'002 are mapped onto Uplink ACK-on-Error mode: Single-byte SCHC Header (2 RuleIDs to allow for SCHC Packet interleaving).</li>
            </ul>
          </li>
          <li><t>For Two-byte SCHC Header F/R modes, at least 6 bits for the RuleID field are expected:</t>
            <ul spacing="normal">
              <li><t>The 3 first leftmost bits are always 0b'111.</t>
                <ul spacing="normal">
                  <li>If the following 3 bits have a different value than 0b'111, then it signals the Two-byte SCHC Header Option 1.</li>
                  <li>If the following 3 bits are 0b'111, then it signals the Two-byte SCHC Header Option 2.</li>
                </ul>
              </li>
              <li>For the Two-byte SCHC Header Option 1, there are 7 RuleIDs available (0b'111000-0b'111110), 0b'111111 being reserved to indicate the Two-byte SCHC Header Option 2. This set of Rules is called "extended rules", and it is used to implement the Uplink ACK-on-Error mode: Two-byte SCHC Header Option 1.</li>
              <li>For the Two-byte SCHC Header Option 2, there are 2 additional bits to parse as the RuleID, so 4 RuleIDs are available (0b'11111100-0b'11111111). This set of Rules is used to cover specific cases that previous RuleIDs do not cover. As an example, RuleID 0b'00111111 is used to transport uncompressed IPv6 packets using the Uplink ACK-on-Error mode: Two-byte SCHC Header Option 2.</li>
            </ul>
          </li>
        </ul>
      </section>
      <section anchor="downlink-fragmentation-rules-examples" numbered="true" toc="default">
        <name>Downlink Fragmentation Rules Example</name>
        <t>For the Downlink ACK-Always Mode: Single-byte SCHC Header, RuleIDs can get values in ranges from 0b'000 to 0b'111.</t>
      </section>
    </section>
    <section anchor="sequence-examples" numbered="true" toc="default">
      <name>Fragmentation Sequence Examples</name>
      <t>In this section, some sequence diagrams depict message exchanges for different fragmentation modes and use cases are shown. 
In the examples, 'Seq' indicates the Sigfox Sequence Number of the frame carrying a fragment.</t>
      <section anchor="no-ack-examples" numbered="true" toc="default">
        <name>Uplink No-ACK Examples</name>
        <t>The FCN field indicates the size of the data packet. 
The first fragment is marked with FCN = X-1, where X is the number of fragments the message is split into.
All fragments are marked with decreasing FCN values.
	The last packet fragment is marked with FCN = All-1 (1111). </t>
        <t><strong>Case No Losses - All fragments are sent and received successfully.</strong></t>
        <figure anchor="UL-No-ACK-NL">
          <name>Uplink No-ACK No-Losses</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
Sender                     Receiver
  |-------FCN=6,Seq=1-------->|
  |-------FCN=5,Seq=2-------->|
  |-------FCN=4,Seq=3-------->|
  |-------FCN=3,Seq=4-------->|
  |-------FCN=2,Seq=5-------->|
  |-------FCN=1,Seq=6-------->|
  |-------FCN=15,Seq=7------->| All fragments received
(End)
]]></artwork>
        </figure>
        <t>When the first SCHC Fragment is received, the receiver can calculate the 
total number of SCHC Fragments that the SCHC Packet is composed of.
For example, if the first fragment is numbered with FCN=6, the receiver can 
expect six more messages/fragments (i.e., with FCN going from 5 downwards and the last fragment with an
FCN equal to 15).</t>
        <t><strong>Case Losses on Any Fragment except the First</strong></t>
        <figure anchor="UL-No-ACK-L-1">
          <name>Uplink No-ACK Losses (Scenario 1)</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
Sender                     Receiver
  |-------FCN=6,Seq=1-------->|
  |-------FCN=5,Seq=2----X    |
  |-------FCN=4,Seq=3-------->|
  |-------FCN=3,Seq=4-------->|
  |-------FCN=2,Seq=5-------->|
  |-------FCN=1,Seq=6-------->|
  |-------FCN=15,Seq=7------->| Missing Fragment Unable to reassemble
(End)
]]></artwork>
        </figure>
      </section>
      <section anchor="ack-on-error-examples-1B-header" numbered="true" toc="default">
        <name>Uplink ACK-on-Error Examples: Single-Byte SCHC Header</name>
        <t>The Single-byte SCHC Header ACK-on-Error mode allows sending up to 28 fragments and packet sizes up to
300 bytes. The SCHC Fragments may be delivered asynchronously, and Downlink ACK can be sent opportunistically. </t>
        <t><strong>Case No Losses</strong></t>
        <t>The Downlink flag must be enabled in the sender Uplink message to allow a Downlink message from the receiver.
The Downlink Enable in the figures shows where the sender <bcp14>MUST</bcp14> enable the Downlink and
	wait for an ACK.</t>

        <figure anchor="UL-ACKoE-NL">
          <name>Uplink ACK-on-Error No-Losses</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2----->|
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4----->|
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->|
DL Enable |-----W=0,FCN=0,Seq=7----->|
      (no ACK)
          |-----W=1,FCN=6,Seq=8----->|
          |-----W=1,FCN=5,Seq=9----->|
          |-----W=1,FCN=4,Seq=10---->|
DL Enable |-----W=1,FCN=7,Seq=11---->| All fragments received
          |<- Compound ACK,W=1,C=1 --| C=1
        (End)
]]></artwork>
        </figure>
        <t><strong>Case Fragment Losses in the First Window</strong></t>
        <t>In this case, fragments are lost in the first window (W=0). 
After the first All-0 message arrives, the receiver
leverages the opportunity and sends a SCHC ACK with the corresponding bitmap and C=0.</t>
        <t>After the loss fragments from the first window (W=0) are resent, the sender continues 
transmitting the fragments of the following window (W=1) without opening a reception opportunity.
Finally, the All-1 fragment is sent, the Downlink is enabled, and the SCHC ACK is received with C=1.
	Note that the SCHC Compound ACK also uses a Sequence Number. </t>
        <figure anchor="UL-ACKoE-LW1">
          <name>Uplink ACK-on-Error Losses in the First Window</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2--X   |
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4----->|
          |-----W=0,FCN=2,Seq=5--X   |                    __
          |-----W=0,FCN=1,Seq=6----->|                   | W=0
DL Enable |-----W=0,FCN=0,Seq=7----->| Missing Fragments<- FCN=5,Seq=2
          |<- Compound ACK,W=0,C=0 --| Bitmap:1011011    | FCN=2,Seq=5
          |-----W=0,FCN=5,Seq=9----->|                    --
          |-----W=0,FCN=2,Seq=10---->|
          |-----W=1,FCN=6,Seq=11---->|
          |-----W=1,FCN=5,Seq=12---->|
          |-----W=1,FCN=4,Seq=13---->|
DL Enable |-----W=1,FCN=7,Seq=14---->| All fragments received
          |<-Compound ACK,W=1,C=1 ---| C=1
        (End)
]]></artwork>
        </figure>
        <t><strong>Case Fragment All-0 Lost in the First Window (W=0)</strong></t>
        <t>In this example, the All-0 of the first window (W=0) is lost. Therefore, 
the receiver waits for the next All-0 message of intermediate windows or All-1 message of last window to generate 
the corresponding SCHC ACK, which indicates that the All-0 of window 0 is absent.</t>
        <t>The sender resends the missing All-0 messages (with any other missing 
fragment from window 0) without opening a reception opportunity.</t>
        <figure anchor="UL-ACKoE-LA0W1">
          <name>Uplink ACK-on-Error All-0 Lost in the First Window</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2----->|
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4----->|
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->| DL Enable
	  |-----W=0,FCN=0,Seq=7--X   |
      (no ACK)
          |-----W=1,FCN=6,Seq=8----->|
          |-----W=1,FCN=5,Seq=9----->|                    __
          |-----W=1,FCN=4,Seq=10---->|                   |W=0
DL Enable |-----W=1,FCN=7,Seq=11---->| Missing Fragment<- FCN=0,Seq=7
          |<-Compound ACK,W=0,C=0 ---| Bitmap:1111110    |__
          |-----W=0,FCN=0,Seq=13---->| All fragments received
DL Enable |-----W=1,FCN=7,Seq=14---->|
          |<-Compound ACK,W=1,C=1 ---| C=1
        (End)
]]></artwork>
        </figure>
        <t>In the following diagram, besides the All-0, there are other fragment losses in the first window (W=0).</t>
        <figure anchor="UL-ACKoE-LA0FW1">
          <name>Uplink ACK-on-Error All-0 and Other Fragments Lost in the First Window</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2--X   |
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4--X   |
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->|
DL Enable |-----W=0,FCN=0,Seq=7--X   |
      (no ACK)
          |-----W=1,FCN=6,Seq=8----->|
          |-----W=1,FCN=5,Seq=9----->|                    __
          |-----W=1,FCN=4,Seq=10---->|                   |W=0
DL Enable |-----W=1,FCN=7,Seq=11---->| Missing Fragment<- FCN=5,Seq=2
          |<--Compound ACK,W=0,C=0 --| Bitmap:1010110    |FCN=3,Seq=4
          |-----W=0,FCN=5,Seq=13---->|                   |FCN=0,Seq=7
          |-----W=0,FCN=3,Seq=14---->|                    --
          |-----W=0,FCN=0,Seq=15---->| All fragments received
DL Enable |-----W=1,FCN=7,Seq=16---->|
          |<-Compound ACK,W=1,C=1 ---| C=1
        (End)
]]></artwork>
        </figure>
        <t>In the next examples, there are fragment losses in both the first (W=0) and second (W=1) windows.
The retransmission cycles after the All-1 is sent (i.e., not in intermediate windows) <bcp14>MUST</bcp14>
always finish with an All-1, as it serves as an ACK Request message to confirm the correct reception
of the retransmitted fragments. </t>
        <figure anchor="UL-ACKoE-LFW12-1">
          <name>Uplink ACK-on-Error All-0 and Other Fragments Lost in the First and Second Windows (1)</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2--X   |
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4--X   |                    __
          |-----W=0,FCN=2,Seq=5----->|                   |W=0
          |-----W=0,FCN=1,Seq=6----->|                   |FCN=5,Seq=2
DL Enable |-----W=0,FCN=0,Seq=7--X   |                   |FCN=3,Seq=4
     (no ACK)                                            |FCN=0,Seq=7
          |-----W=1,FCN=6,Seq=8--X   |                   |W=1
          |-----W=1,FCN=5,Seq=9----->|                   |FCN=6,Seq=8
          |-----W=1,FCN=4,Seq=10-X   |                   |FCN=4,Seq=10
DL Enable |-----W=1,FCN=7,Seq=11---->| Missing Fragment<-|__
          |<-Compound ACK,W=0,1,C=0--| Bitmap W=0:1010110
          |-----W=0,FCN=5,Seq=13---->|        W=1:0100001
          |-----W=0,FCN=3,Seq=14---->|
          |-----W=0,FCN=0,Seq=15---->|
          |-----W=1,FCN=6,Seq=16---->|
          |-----W=1,FCN=4,Seq=17---->| All fragments received
DL Enable |-----W=1,FCN=7,Seq=18---->|
          |<-Compound ACK,W=1,C=1----| C=1
        (End)
]]></artwork>
        </figure>
        <t>The figure below is a similar case as above but with fewer fragments in the second window (W=1).</t>
        <figure anchor="UL-ACKoE-LFW12-2">
          <name>Uplink ACK-on-Error All-0 and Other Fragments Lost in the First and Second Windows (2)</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2--X   |
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4--X   |
          |-----W=0,FCN=2,Seq=5----->|                     __
          |-----W=0,FCN=1,Seq=6----->|                    |W=0
DL Enable |-----W=0,FCN=0,Seq=7--X   |                    |FCN=5,Seq=2
       (no ACK)                                           |FCN=3,Seq=4
          |-----W=1,FCN=6,Seq=8--X   |                    |FCN=0,Seq=7
DL Enable |-----W=1,FCN=7,Seq=9----->| Missing Fragment--> W=1
          |<-Compound ACK,W=0,1, C=0-| Bitmap W=0:1010110,|FCN=6,Seq=8
          |-----W=0,FCN=5,Seq=11---->|        W=1:0000001 |__
          |-----W=0,FCN=3,Seq=12---->|
          |-----W=0,FCN=0,Seq=13---->|
          |-----W=1,FCN=6,Seq=14---->| All fragments received
DL Enable |-----W=1,FCN=7,Seq=15---->|
          |<-Compound ACK, W=1,C=1---| C=1
        (End)
]]></artwork>
        </figure>
        <t><strong>Case SCHC ACK is Lost</strong></t>
        <t>SCHC over Sigfox does not implement the SCHC ACK REQ message. Instead, it uses the SCHC All-1 message to request a SCHC ACK when required.</t>
        <figure anchor="UL-ACKoE-ACKL">
          <name>Uplink ACK-on-Error ACK Lost</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
       Sender                     Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2----->|
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4----->|
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->|
DL Enable |-----W=0,FCN=0,Seq=7----->|
      (no ACK)
          |-----W=1,FCN=6,Seq=8----->|
          |-----W=1,FCN=5,Seq=9----->|
          |-----W=1,FCN=4,Seq=10---->|
DL Enable |-----W=1,FCN=7,Seq=11---->| All fragments received
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |-----W=1,FCN=7,Seq=13---->| RESEND ACK
          |<-Compound ACK,W=1,C=1 ---| C=1
        (End)
]]></artwork>
        </figure>
        <t><strong>Case SCHC Compound ACK at the End</strong></t>
        <t>In this example, SCHC Fragment losses are found in both windows 0 and 1. However, the sender does not send a
SCHC Compound ACK after the All-0 of window 0. Instead, it sends a SCHC Compound ACK indicating fragment losses on both windows.
</t>
        <figure anchor="UL-ACKoE-LFW12-3">
          <name>Uplink ACK-on-Error Fragments Lost in the First and Second Windows with One Compound ACK</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2--X   |
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4--X   |
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->|                     __
DL Enable |-----W=0,FCN=0,Seq=7----->| Waits for          |W=0
       (no ACK)                       next DL opportunity |FCN=5,Seq=2
          |-----W=1,FCN=6,Seq=8--X   |                    |FCN=3,Seq=4
DL Enable |-----W=1,FCN=7,Seq=9----->| Missing Fragment<-- W=1
          |<-Compound ACK,W=0,1, C=0-| Bitmap W=0:1010110 |FCN=6,Seq=8
          |-----W=0,FCN=5,Seq=11---->|        W=1:0000001  --
          |-----W=0,FCN=3,Seq=12---->|
          |-----W=1,FCN=6,Seq=13---->| All fragments received
DL Enable |-----W=1,FCN=7,Seq=14---->|
          |<-Compound ACK, W=1, C=1 -| C=1
        (End)
]]></artwork>
        </figure>
        <t>The number of times the same SCHC ACK message will be retransmitted is determined by the
 MAX_ACK_REQUESTS.</t>
      </section>
      <section anchor="abort-examples" numbered="true" toc="default">
        <name>SCHC Abort Examples</name>
        <t><strong>Case SCHC Sender-Abort</strong></t>
        <t>The sender may need to send a Sender-Abort to stop the current communication. For example, this may happen if the All-1 has been sent MAX_ACK_REQUESTS times.</t>
        <figure anchor="UL-ACKoE-SndAbt">
          <name>Uplink ACK-on-Error Sender-Abort</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2----->|
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4----->|
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->|
DL Enable |-----W=0,FCN=0,Seq=7----->|
      (no ACK)
          |-----W=1,FCN=6,Seq=8----->|
          |-----W=1,FCN=5,Seq=9----->|
          |-----W=1,FCN=4,Seq=10---->|
DL Enable |-----W=1,FCN=7,Seq=11---->| All fragments received
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |-----W=1,FCN=7,Seq=13---->| RESEND ACK  (1)
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |-----W=1,FCN=7,Seq=15---->| RESEND ACK  (2)
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |-----W=1,FCN=7,Seq=17---->| RESEND ACK  (3)
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |-----W=1,FCN=7,Seq=18---->| RESEND ACK  (4)
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |-----W=1,FCN=7,Seq=19---->| RESEND ACK  (5)
          | X--Compound ACK,W=1,C=1 -| C=1
DL Enable |----Sender-Abort,Seq=20-->| exit with error condition
        (End)
]]></artwork>
        </figure>
        <t><strong>Case Receiver-Abort</strong></t>
        <t>The receiver may need to send a Receiver-Abort to stop the current communication.
This message can only be sent after a Downlink Enable.</t>
        <figure anchor="UL-ACKoE-RcvAbt">
          <name>Uplink ACK-on-Error Receiver-Abort</name>
          <artwork name="" type="" align="center" alt=""><![CDATA[
        Sender                    Receiver
          |-----W=0,FCN=6,Seq=1----->|
          |-----W=0,FCN=5,Seq=2----->|
          |-----W=0,FCN=4,Seq=3----->|
          |-----W=0,FCN=3,Seq=4----->|
          |-----W=0,FCN=2,Seq=5----->|
          |-----W=0,FCN=1,Seq=6----->|
DL Enable |-----W=0,FCN=0,Seq=7----->|
          |<------  RECV ABORT ------| under-resourced
       (Error)
]]></artwork>
        </figure>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The radio protocol authenticates and ensures the integrity of each message.
    This is achieved by using a unique Device ID and an AES-128-based message authentication code,
ensuring that the message has been generated and sent by the device (see <xref target="sigfox-spec" format="default"/>, Section 3.8)  or Network (see <xref target="sigfox-spec" format="default"/>, Section 4.3) with the ID claimed in the message <xref target="sigfox-spec" format="default"/>.</t>
      <t>Application data may or may  not  be encrypted at the application layer, depending on the criticality of the use case.
This flexibility allows a balance between cost and effort versus risk.
AES-128 in counter mode is used for encryption.  Cryptographic keys are independent for each device. These keys are associated with the Device ID, and separate integrity and 
encryption keys are pre-provisioned.
    An encryption key is only provisioned if confidentiality is to be used (see <xref target="sigfox-spec" format="default"/>, Section 5.3; note that further documentation is available at Sigfox upon request).</t>
      <t>The radio protocol has protections against replay attacks, and the cloud-based core Network provides firewall protection against undesired incoming communications <xref target="sigfox-spec" format="default"/>.</t>
      <t>The previously described security mechanisms do not guarantee end-to-end security between the device SCHC C/D + F/R and the Network SCHC C/D + F/R; potential security threats described in <xref target="RFC8724" format="default"/> are applicable to the profile specified in this document.</t>
      <t>In some circumstances, sending device location information is
privacy sensitive. The Device Geolocation parameter provided by the
Network
   is optional; therefore, it can be omitted to protect this aspect of
the device privacy.</t>
</section>
    <section anchor="ianaconsiderations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>

<displayreference target="I-D.ietf-core-comi" to="CORE-COMI"/>	

   <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8724.xml"/>

<reference anchor='RFC9441' target='https://www.rfc-editor.org/info/rfc9441'>
<front>
<title>Static Context Header Compression (SCHC) Compound Acknowledgement (ACK)</title>
<author initials="JC." surname="Zúñiga" fullname="Juan-Carlos Zúñiga">
<organization>Cisco</organization>
</author>
<author initials="C." surname="Gomez" fullname="Carles Gomez">
<organization>Universitat Politecnica de Catalunya</organization>
</author>
<author initials="S." surname="Aguilar" fullname="Sergio Aguilar">
<organization>Universitat Politecnica de Catalunya</organization>
</author>
<author initials="L." surname="Toutain" fullname="Laurent Toutain">
<organization>IMT-Atlantique</organization>
</author>
<author initials="S." surname="Céspedes" fullname="Sandra Céspedes">
<organization>Concordia University</organization>
</author>
<author initials="D." surname="Wistuba" fullname="Diego S. Wistuba La Torre">
<organization>NIC Labs, Universidad de Chile</organization>
</author>
<date month="July" year="2023"/>
</front>
<seriesInfo name="RFC" value="9441"/>
<seriesInfo name="DOI" value="10.17487/RFC9441"/>
</reference>

        <reference anchor="sigfox-spec" target="https://build.sigfox.com/sigfox-device-radio-specifications">
          <front>
            <title>Sigfox Device Radio Specifications</title>
            <author>
              <organization>Sigfox</organization>
            </author>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8376.xml"/>

        <reference anchor="sigfox-docs" target="https://support.sigfox.com/docs">
          <front>
            <title>Sigfox Documentation</title>
            <author>
              <organization>Sigfox</organization>
            </author>
          </front>
        </reference>

        <reference anchor="sigfox-callbacks" target="https://support.sigfox.com/docs/callbacks-documentation">
          <front>
            <title>Sigfox Callbacks</title>
            <author>
              <organization>Sigfox</organization>
            </author>
          </front>
        </reference>

<reference anchor="I-D.ietf-core-comi" target="https://datatracker.ietf.org/doc/html/draft-ietf-core-comi-12">
<front>
<title>CoAP Management Interface (CORECONF)</title>
<author initials="M." surname="Veillette" fullname="Michel Veillette" role="editor">
<organization>Trilliant Networks Inc.</organization>
</author>
<author initials="P." surname="van der Stok" fullname="Peter van der Stok" role="editor">
<organization>consultant</organization>
</author>
<author initials="A." surname="Pelov" fullname="Alexander Pelov">
<organization>Acklio</organization>
</author>
<author initials="A." surname="Bierman" fullname="Andy Bierman">
<organization>YumaWorks</organization>
</author>
<author initials="C." surname="Bormann" fullname="Carsten Bormann" role="editor">
<organization>Universität Bremen TZI</organization>
</author>
<date month="March" day="13" year="2023"/>
</front>
<seriesInfo name="Internet-Draft" value="draft-ietf-core-comi-12"/>
</reference>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7252.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8949.xml"/>
      </references>
    </references>
    <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t><contact fullname="Carles Gomez"/> has been funded in part by the Spanish Government
   through the TEC2016-79988-P grant and the PID2019-106808RA-I00 grant
   (funded by MCIN / AEI / 10.13039/501100011033) and by Secretaria
   d'Universitats i Recerca del Departament d'Empresa i Coneixement de
   la Generalitat de Catalunya through 2017 grant SGR 376 and 2021 grant SGR 00330.</t>
      <t><contact fullname="Sergio Aguilar"/> has been funded by the ERDF and the Spanish Government through project TEC2016-79988-P and project PID2019-106808RA-I00, AEI/FEDER, EU (funded by MCIN / AEI / 10.13039/501100011033).</t>
      <t><contact fullname="Sandra Cespedes"/> has been funded in part by the ANID Chile Project FONDECYT Regular 1201893 and Basal Project FB0008.</t>
      <t><contact fullname="Diego Wistuba"/> has been funded by the ANID Chile Project FONDECYT Regular 1201893.</t>
      <t>The authors would like to thank <contact fullname="Ana Minaburo"/>, <contact fullname="Clement Mannequin"/>, <contact fullname="Rafael Vidal"/>, <contact fullname="Julien Boite"/>, <contact fullname="Renaud Marty"/>, and <contact fullname="Antonis Platis"/> for their useful comments and implementation design considerations.</t>
    </section>    
  </back>
</rfc>
