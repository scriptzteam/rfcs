<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-pauly-dprive-oblivious-doh-11" number="9230" submissionType="independent" category="exp" tocInclude="true" sortRefs="true" symRefs="true" updates="" obsoletes=""
xml:lang="en" version="3">

  <!-- xml2rfc v2v3 conversion 3.12.2 -->
  <front>
    <title abbrev="Oblivious DoH">Oblivious DNS over HTTPS</title>
    <seriesInfo name="RFC" value="9230"/>
    <author initials="E." surname="Kinnear" fullname="Eric Kinnear">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
	  <region>California</region>
	   <code>95014</code>
          <country>United States of America</country>
        </postal>
        <email>ekinnear@apple.com</email>
      </address>
    </author>
    <author initials="P." surname="McManus" fullname="Patrick McManus">
      <organization>Fastly</organization>
      <address>
        <email>mcmanus@ducksong.com</email>
      </address>
    </author>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
	  <region>California</region>
	  <code>95014</code>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="T." surname="Verma" fullname="Tanya Verma">
      <organization>Cloudflare</organization>
      <address>
        <postal>
          <street>101 Townsend St</street>
          <city>San Francisco</city>
	  <region>California</region>
          <code>94107</code>
          <country>United States of America</country>
        </postal>
        <email>vermatanyax@gmail.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Cloudflare</organization>
      <address>
        <postal>
          <street>101 Townsend St</street>
          <city>San Francisco</city>
	  <region>California</region>
          <code>94107</code>
          <country>United States of America</country>
        </postal>
        <email>caw@heapingbits.net</email>
      </address>
    </author>
    <date year="2022" month="June"/>

<keyword>Privacy</keyword>
<keyword>DNS Privacy</keyword>
<keyword>DoH</keyword>
<keyword>ODoH</keyword>
<keyword>HPKE</keyword>

    <abstract>
      <t>This document describes a protocol that allows clients to hide their IP addresses from DNS resolvers
via proxying encrypted DNS over HTTPS (DoH) messages. This improves privacy of
DNS operations by not allowing any one server entity to be aware of both the client IP
address and the content of DNS queries and answers.</t>
      <t>This experimental protocol has been developed outside the IETF and is published here to
guide implementation, ensure interoperability among implementations, and enable
wide-scale experimentation.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>DNS over HTTPS (DoH) <xref target="RFC8484"/> defines a mechanism to allow DNS messages to be
transmitted in HTTP messages protected with TLS. This provides improved confidentiality
and authentication for DNS interactions in various circumstances.</t>
      <t>While DoH can prevent eavesdroppers from directly reading the contents of DNS exchanges,
clients cannot send DNS queries to and receive answers from servers without revealing
their local IP address (and thus information about the identity or location of the client)
to the server.</t>
      <t>Proposals such as Oblivious DNS <xref target="I-D.annee-dprive-oblivious-dns"/> increase privacy
by ensuring that no single DNS server is aware of both the client IP address and the message
contents.</t>
      <t>This document defines Oblivious DoH, an experimental protocol built on DoH that permits proxied
resolution, in which DNS messages are encrypted so that no server can independently read
both the client IP address and the DNS message contents.</t>
      <t>As with DoH, DNS messages exchanged over Oblivious DoH are fully formed DNS messages.
Clients that want to receive answers that are relevant to the network they are on without
revealing their exact IP address can thus use the EDNS0 Client Subnet option (<xref section="7.1.2" sectionFormat="comma" target="RFC7871"/>)
to provide a hint to the resolver using Oblivious DoH.</t>
      <t>This mechanism is intended to be used as one mechanism for resolving privacy-sensitive
content in the broader context of DNS privacy.</t>
      <t>This experimental protocol has been developed outside the IETF and is published here to
guide implementation, ensure interoperability among implementations, and enable
wide-scale experimentation. See <xref target="experiment"/> for more details about the experiment.</t>
      <section anchor="specification-of-requirements">
        <name>Specification of Requirements</name>
       <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
       "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
       "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
       "<bcp14>SHOULD NOT</bcp14>",
       "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
       "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
       are to be interpreted as described in BCP&nbsp;14
       <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
       when, they appear in all capitals, as shown here.</t>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>This document defines the following terms:</t>
      <dl>
        <dt>
Oblivious Client:  </dt>
        <dd>
          <t>A client that sends DNS queries to an Oblivious Target, through an Oblivious Proxy. The Client is responsible for selecting the combination of Proxy and Target to use for a given query.</t>
        </dd>
        <dt>
Oblivious Proxy:  </dt>
        <dd>
          <t>An HTTP server that proxies encrypted DNS queries and responses between an Oblivious Client and an
Oblivious Target and is identified by a URI Template <xref target="RFC6570"/> (see <xref target="oblivious-request"/>).
Note that this Oblivious Proxy is not acting as a full HTTP proxy but is instead a specialized
server used to forward Oblivious DNS messages.</t>
        </dd>
        <dt>
Oblivious Target:  </dt>
        <dd>
          <t>An HTTP server that receives and decrypts encrypted Oblivious Client DNS queries from an Oblivious Proxy
and returns encrypted DNS responses via that same Proxy. In order to provide DNS responses, the Target
can be a DNS resolver, be co-located with a resolver, or forward to a resolver.</t>
        </dd>
      </dl>
      <t>Throughout the rest of this document, we use the terms "Client", "Proxy", and "Target" to refer to an Oblivious Client, 
Oblivious Proxy, and Oblivious Target, respectively.</t>
    </section>
    <section anchor="deployment-requirements">
      <name>Deployment Requirements</name>
      <t>Oblivious DoH requires, at a minimum:</t>
      <ul spacing="normal">
        <li>An Oblivious Proxy server, identified by a URI Template.</li>
        <li>An Oblivious Target server. The Target and Proxy are expected to be non-colluding (see 
<xref target="security-considerations"/>).</li>
        <li>One or more Target public keys for encrypting DNS queries sent to a Target via a Proxy
(<xref target="publickey"/>). These keys guarantee that only the intended Target can decrypt Client queries.</li>
      </ul>
      <t>The mechanism for discovering and provisioning the Proxy URI Template and Target public keys
is out of scope for this document.</t>
    </section>
    <section anchor="http-exchange">
      <name>HTTP Exchange</name>
      <t>Unlike direct resolution, oblivious hostname resolution over DoH involves three parties:</t>
      <ol spacing="normal" type="1"><li>The Client, which generates queries.</li>
        <li>The Proxy, which receives encrypted queries from the Client and passes them on to a Target.</li>
        <li>The Target, which receives proxied queries from the Client via the Proxy and produces proxied
answers.</li>
      </ol>
      <figure anchor="fig-doh-exchange">
        <name>Oblivious DoH Exchange</name>
        <artwork><![CDATA[
     --- [ Request encrypted with Target public key ] -->
+---------+             +-----------+             +-----------+
| Client  +-------------> Oblivious +-------------> Oblivious |
|         <-------------+   Proxy   <-------------+  Target   |
+---------+             +-----------+             +-----------+
    <-- [   Response encrypted with symmetric key   ] ---
]]></artwork>
      </figure>
      <section anchor="oblivious-request">
        <name>HTTP Request</name>
        <t>Oblivious DoH queries are created by the Client and are sent to the Proxy as HTTP
requests using the POST method. Clients are configured with a Proxy URI Template
<xref target="RFC6570"/> and the Target URI. The scheme for both the Proxy URI Template and
the Target URI <bcp14>MUST</bcp14> be "https". The Proxy URI Template uses the Level 3 encoding
defined in
<xref target="RFC6570" sectionFormat="of" section="1.2"/> and contains two variables: "targethost",
which indicates the hostname of the Target server; and "targetpath",
which indicates the path on which the Target is accessible. Examples of
Proxy URI Templates are shown below:</t>
        <artwork><![CDATA[
https://dnsproxy.example/dns-query{?targethost,targetpath}
https://dnsproxy.example/{targethost}/{targetpath}
]]></artwork>
        <t>The URI Template <bcp14>MUST</bcp14> contain both the "targethost" and "targetpath" variables exactly
once and <bcp14>MUST NOT</bcp14> contain any other variables. The variables <bcp14>MUST</bcp14> be within the path
or query components of the URI. Clients <bcp14>MUST</bcp14> ignore configurations that do not conform
to this template. See <xref target="request-example"/> for an example request.</t>
        <t>Oblivious DoH messages have no cache value, since both requests and responses are
encrypted using ephemeral key material. Requests and responses <bcp14>MUST NOT</bcp14> be cached.</t>
        <t>Clients <bcp14>MUST</bcp14> set the HTTP Content-Type header to "application/oblivious-dns-message"
to indicate that this request is an Oblivious DoH query intended for proxying. Clients
also <bcp14>SHOULD</bcp14> set this same value for the HTTP Accept header.</t>
        <t>A correctly encoded request has the HTTP Content-Type header "application/oblivious-dns-message",
uses the HTTP POST method, and contains "targethost" and "targetpath" variables. If the Proxy
fails to match the "targethost" and "targetpath" variables from the path, it <bcp14>MUST</bcp14> treat the
request as malformed. The Proxy constructs the URI of the Target with the "https" scheme, 
using the value of "targethost" as the URI host and the percent-decoded value of "targetpath" as the
URI path. Proxies <bcp14>MUST</bcp14> check that Client requests are correctly encoded and <bcp14>MUST</bcp14> return a
4xx (Client Error) if the check fails, along with the Proxy-Status response header
with an "error" parameter of type "http_request_error" <xref target="RFC9209"/>.</t>
        <t>Proxies <bcp14>MAY</bcp14> choose to not forward connections to non-standard ports. In such cases, Proxies
can indicate the error with a 403 response status code, along with a Proxy-Status response
header with an "error" parameter of type "http_request_denied" and with an appropriate
explanation in "details".</t>
        <t>If the Proxy cannot establish a connection to the Target, it can indicate the error with a 
502 response status code, along with a Proxy-Status response header with an "error" parameter
whose type indicates the reason. For example, if DNS resolution fails, the error type might be
"dns_timeout", whereas if the TLS connection fails, the error type might be "tls_protocol_error".</t>
        <t>Upon receipt of requests from a Proxy, Targets <bcp14>MUST</bcp14> validate that the request has the HTTP
Content-Type header "application/oblivious-dns-message" and uses the HTTP POST method.
Targets can respond with a 4xx response status code if this check fails.</t>
      </section>
      <section anchor="request-example">
        <name>HTTP Request Example</name>
        <t>The following example shows how a Client requests that a Proxy, "dnsproxy.example",
forward an encrypted message to "dnstarget.example". The URI Template for the
Proxy is "https://dnsproxy.example/dns-query{?targethost,targetpath}". The URI for
the Target is "https://dnstarget.example/dns-query".</t>
        <sourcecode name="" type="http-message"><![CDATA[
:method = POST
:scheme = https
:authority = dnsproxy.example
:path = /dns-query?targethost=dnstarget.example&targetpath=/dns-query
accept = application/oblivious-dns-message
content-type = application/oblivious-dns-message
content-length = 106

<Bytes containing an encrypted Oblivious DNS query>
]]></sourcecode>

        <t>The Proxy then sends the following request on to the Target:</t>
        <sourcecode name="" type="http-message"><![CDATA[
:method = POST
:scheme = https
:authority = dnstarget.example
:path = /dns-query
accept = application/oblivious-dns-message
content-type = application/oblivious-dns-message
content-length = 106

<Bytes containing an encrypted Oblivious DNS query>
]]></sourcecode>
      </section>
      <section anchor="oblivious-response">
        <name>HTTP Response</name>
        <t>The response to an Oblivious DoH query is generated by the Target. It <bcp14>MUST</bcp14> set the
Content-Type HTTP header to "application/oblivious-dns-message" for all successful responses.
The body of the response contains an encrypted DNS message; see <xref target="encryption"/>.</t>
        <t>The response from a Target <bcp14>MUST</bcp14> set the Content-Type HTTP header to "application/oblivious-dns-message", and that same type
<bcp14>MUST</bcp14> be used on all successful responses sent by the Proxy to the Client. A Client <bcp14>MUST</bcp14> only consider a response that contains the
Content-Type header before processing the payload. A response without the appropriate header <bcp14>MUST</bcp14> be
treated as an error and be handled appropriately. All other aspects of the HTTP response and error handling are
inherited from standard DoH.</t>
        <t>Proxies forward responses from the Target to the Client, without any modifications to the body or status code.
The Proxy also <bcp14>SHOULD</bcp14> add a Proxy-Status response header with a "received-status" parameter indicating
that the status code was generated by the Target.</t>
        <t>Note that if a Client receives a 3xx status code and chooses to follow a redirect, the subsequent request
<bcp14>MUST</bcp14> also be performed through a Proxy in order to avoid directly exposing requests to the Target.</t>
        <t>Requests that cannot be processed by the Target result in 4xx (Client Error) responses. If the Target
and Client keys do not match, it is an authorization failure (HTTP status code 401; see <xref target="RFC9110" sectionFormat="of" section="15.5.2"/>). Otherwise, if the Client's request is invalid, such as in the case of decryption
failure, wrong message type, or deserialization failure, this is a bad request (HTTP status code 400; see <xref target="RFC9110" sectionFormat="of" section="15.5.1"/>).</t>
        <t>Even in the case of DNS responses indicating failure, such as SERVFAIL or NXDOMAIN, a successful HTTP response
with a 2xx status code is used as long as the DNS response is valid. This is identical to how DoH <xref target="RFC8484"/>
handles HTTP response codes.</t>
      </section>
      <section anchor="http-response-example">
        <name>HTTP Response Example</name>
        <t>The following example shows a 2xx (Successful) response that can be sent from a Target to
a Client via a Proxy.</t>
        <sourcecode name="" type="http-message"><![CDATA[
:status = 200
content-type = application/oblivious-dns-message
content-length = 154

<Bytes containing an encrypted Oblivious DNS response>
]]></sourcecode>
      </section>
      <section anchor="http-metadata">
        <name>HTTP Metadata</name>
        <t>Proxies forward requests and responses between Clients and Targets as specified in <xref target="oblivious-request"/>.
Metadata sent with these messages could inadvertently weaken or remove Oblivious DoH privacy properties.
Proxies <bcp14>MUST NOT</bcp14> send any Client-identifying information about Clients to Targets, such as
"Forwarded" HTTP headers <xref target="RFC7239"/>. Additionally, Clients <bcp14>MUST NOT</bcp14> include any private state in
requests to Proxies, such as HTTP cookies. See <xref target="authentication"/> for related discussion about
Client authentication information.</t>
      </section>
    </section>
    <section anchor="publickey">
      <name>Configuration and Public Key Format</name>
      <t>In order to send a message to a Target, the Client needs to know a public key to use
for encrypting its queries. The mechanism for discovering this configuration is
out of scope for this document.</t>
      <t>Servers ought to rotate public keys regularly. It is <bcp14>RECOMMENDED</bcp14> that servers rotate keys
every day. Shorter rotation windows reduce the anonymity set of Clients that might use
the public key, whereas longer rotation windows widen the time frame of possible compromise.</t>
      <t>An Oblivious DNS public key configuration is a structure encoded, using TLS-style
encoding <xref target="RFC8446"/>, as follows:</t>
        <sourcecode name="" type="tls-presentation"><![CDATA[
struct {
   uint16 kem_id;
   uint16 kdf_id;
   uint16 aead_id;
   opaque public_key<1..2^16-1>;
} ObliviousDoHConfigContents;

struct {
   uint16 version;
   uint16 length;
   select (ObliviousDoHConfig.version) {
      case 0x0001: ObliviousDoHConfigContents contents;
   }
} ObliviousDoHConfig;

ObliviousDoHConfig ObliviousDoHConfigs<1..2^16-1>;
]]></sourcecode>
      <t>The <tt>ObliviousDoHConfigs</tt> structure contains one or more <tt>ObliviousDoHConfig</tt> structures in decreasing order of
preference. This allows a server to support multiple versions of Oblivious DoH and multiple sets of Oblivious DoH
parameters.</t>
      <t>An <tt>ObliviousDoHConfig</tt> structure contains a versioned representation of an Oblivious DoH configuration,
with the following fields.</t>
      <dl>
        <dt>
version:  </dt>
        <dd>
          <t>The version of Oblivious DoH for which this configuration is used. Clients <bcp14>MUST</bcp14> ignore any
<tt>ObliviousDoHConfig</tt> structure with a version they do not support. The version of Oblivious DoH
specified in this document is <tt>0x0001</tt>.</t>
        </dd>
        <dt>
length:  </dt>
        <dd>
          <t>The length, in bytes, of the next field.</t>
        </dd>
        <dt>
contents:  </dt>
        <dd>
          <t>An opaque byte string whose contents depend on the version. For this
specification, the contents are an <tt>ObliviousDoHConfigContents</tt> structure.</t>
        </dd>
      </dl>
      <t>An <tt>ObliviousDoHConfigContents</tt> structure contains the information needed to encrypt a message under
<tt>ObliviousDoHConfigContents.public_key</tt> such that only the owner of the corresponding private
key can decrypt the message. The values for <tt>ObliviousDoHConfigContents.kem_id</tt>,
<tt>ObliviousDoHConfigContents.kdf_id</tt>, and <tt>ObliviousDoHConfigContents.aead_id</tt>
are described in <xref target="RFC9180" sectionFormat="of" section="7"/>. The fields in this structure
are as follows:</t>
      <dl>
        <dt>
kem_id:  </dt>
        <dd>
          <t>The hybrid public key encryption (HPKE) key encapsulation mechanism (KEM) identifier corresponding to <tt>public_key</tt>. Clients <bcp14>MUST</bcp14> ignore any
<tt>ObliviousDoHConfig</tt> structure with a key using a KEM they do not support.</t>
        </dd>
        <dt>
kdf_id:  </dt>
        <dd>
          <t>The HPKE key derivation function (KDF) identifier corresponding to <tt>public_key</tt>. Clients <bcp14>MUST</bcp14> ignore any
<tt>ObliviousDoHConfig</tt> structure with a key using a KDF they do not support.</t>
        </dd>
        <dt>
aead_id:  </dt>
        <dd>
          <t>The HPKE authenticated encryption with associated data (AEAD) identifier corresponding to <tt>public_key</tt>. Clients <bcp14>MUST</bcp14> ignore any
<tt>ObliviousDoHConfig</tt> structure with a key using an AEAD they do not support.</t>
        </dd>
        <dt>
public_key:  </dt>
        <dd>
          <t>The HPKE public key used by the Client to encrypt Oblivious DoH queries.</t>
        </dd>
      </dl>
    </section>
    <section anchor="encryption">
      <name>Protocol Encoding</name>
      <t>This section includes encoding and wire format details for Oblivious DoH, as well
as routines for encrypting and decrypting encoded values.</t>
      <section anchor="encoding">
        <name>Message Format</name>
        <t>There are two types of Oblivious DoH messages: Queries (0x01) and Responses (0x02).
Both messages carry the following information:</t>
        <ol spacing="normal" type="1"><li>A DNS message, which is either a Query or Response, depending on context.</li>
          <li>Padding of arbitrary length, which <bcp14>MUST</bcp14> contain all zeros.</li>
        </ol>
        <t>They are encoded using the following structure:</t>
        <sourcecode name="" type="tls-presentation"><![CDATA[
struct {
   opaque dns_message<1..2^16-1>;
   opaque padding<0..2^16-1>;
} ObliviousDoHMessagePlaintext;
]]></sourcecode>
        <t>Both Query and Response messages use the <tt>ObliviousDoHMessagePlaintext</tt> format.</t>
        <sourcecode name="" type="tls-presentation"><![CDATA[
ObliviousDoHMessagePlaintext ObliviousDoHQuery;
ObliviousDoHMessagePlaintext ObliviousDoHResponse;
]]></sourcecode>
        <t>An encrypted <tt>ObliviousDoHMessagePlaintext</tt> parameter is carried in an <tt>ObliviousDoHMessage</tt>
message, encoded as follows:</t>
        <sourcecode name="" type="tls-presentation"><![CDATA[
struct {
   uint8  message_type;
   opaque key_id<0..2^16-1>;
   opaque encrypted_message<1..2^16-1>;
} ObliviousDoHMessage;
]]></sourcecode>
        <t>The <tt>ObliviousDoHMessage</tt> structure contains the following fields:</t>
        <dl>
          <dt>
message_type:  </dt>
          <dd>
            <t>A one-byte identifier for the type of message. Query messages use <tt>message_type</tt> 0x01, and Response
messages use <tt>message_type</tt> 0x02.</t>
          </dd>
          <dt>
key_id:  </dt>
          <dd>
            <t>The identifier of the corresponding <tt>ObliviousDoHConfigContents</tt> key. This is computed as
<tt>Expand(Extract("", config), "odoh key id", Nh)</tt>, where <tt>config</tt> is the <tt>ObliviousDoHConfigContents</tt> structure
and <tt>Extract</tt>, <tt>Expand</tt>, and <tt>Nh</tt> are as specified by the HPKE cipher suite KDF corresponding to
<tt>config.kdf_id</tt>.</t>
          </dd>
          <dt>
encrypted_message:  </dt>
          <dd>
            <t>An encrypted message for the Oblivious Target (for Query messages) or Client (for Response messages).
Implementations <bcp14>MAY</bcp14> enforce limits on the size of this field, depending on the size of plaintext DNS
messages. (DNS queries, for example, will not reach the size limit of 2^16-1 in practice.)</t>
          </dd>
        </dl>
        <t>The contents of <tt>ObliviousDoHMessage.encrypted_message</tt> depend on <tt>ObliviousDoHMessage.message_type</tt>.
In particular, <tt>ObliviousDoHMessage.encrypted_message</tt> is an encryption of an <tt>ObliviousDoHQuery</tt> message
if the message is a Query and an encryption of <tt>ObliviousDoHResponse</tt> if the message is a Response.</t>
      </section>
      <section anchor="encryption-and-decryption-routines">
        <name>Encryption and Decryption Routines</name>
        <t>Clients use the following utility functions for encrypting a Query and decrypting
a Response as described in <xref target="odoh-Client"/>.</t>
        <ul spacing="normal">
        <li>encrypt_query_body: Encrypt an Oblivious DoH query.</li>
	</ul>
        <sourcecode name="" type="pseudocode"><![CDATA[
def encrypt_query_body(pkR, key_id, Q_plain):
  enc, context = SetupBaseS(pkR, "odoh query")
  aad = 0x01 || len(key_id) || key_id
  ct = context.Seal(aad, Q_plain)
  Q_encrypted = enc || ct
  return Q_encrypted
]]></sourcecode>
        <ul spacing="normal">
        <li>decrypt_response_body: Decrypt an Oblivious DoH response.</li>
	</ul>
        <sourcecode name="" type="pseudocode"><![CDATA[
def decrypt_response_body(context, Q_plain, R_encrypted, resp_nonce):
  aead_key, aead_nonce = derive_secrets(context, Q_plain, resp_nonce)
  aad = 0x02 || len(resp_nonce) || resp_nonce
  R_plain, error = Open(key, nonce, aad, R_encrypted)
  return R_plain, error
]]></sourcecode>
        <t>The <tt>derive_secrets</tt> function is described below.</t>
        <t>Targets use the following utility functions in processing queries and producing
responses as described in <xref target="odoh-target"/>.</t>
        <ul spacing="normal">
        <li>setup_query_context: Set up an HPKE context used for decrypting an Oblivious DoH query.</li>
	</ul>
        <sourcecode name="" type="pseudocode"><![CDATA[
def setup_query_context(skR, key_id, Q_encrypted):
  enc || ct = Q_encrypted
  context = SetupBaseR(enc, skR, "odoh query")
  return context
]]></sourcecode>
        <ul spacing="normal">
        <li>decrypt_query_body: Decrypt an Oblivious DoH query.</li>
	</ul>
        <sourcecode name="" type="pseudocode"><![CDATA[
def decrypt_query_body(context, key_id, Q_encrypted):
  aad = 0x01 || len(key_id) || key_id
  enc || ct = Q_encrypted
  Q_plain, error = context.Open(aad, ct)
  return Q_plain, error
]]></sourcecode>
        <ul spacing="normal">
        <li>derive_secrets: Derive keying material used for encrypting an Oblivious DoH response.</li>
	</ul>
        <sourcecode name="" type="pseudocode"><![CDATA[
def derive_secrets(context, Q_plain, resp_nonce):
  secret = context.Export("odoh response", Nk)
  salt = Q_plain || len(resp_nonce) || resp_nonce
  prk = Extract(salt, secret)
  key = Expand(odoh_prk, "odoh key", Nk)
  nonce = Expand(odoh_prk, "odoh nonce", Nn)
  return key, nonce
]]></sourcecode>
        <t>The <tt>random(N)</tt> function returns <tt>N</tt> cryptographically secure random bytes
from a good source of entropy <xref target="RFC4086"/>. The <tt>max(A, B)</tt> function returns
<tt>A</tt> if <tt>A &gt; B</tt>, and <tt>B</tt> otherwise.</t>
        <ul spacing="normal">
        <li>encrypt_response_body: Encrypt an Oblivious DoH response.</li>
	</ul>
        <sourcecode name="" type="pseudocode"><![CDATA[
def encrypt_response_body(R_plain, aead_key, aead_nonce, resp_nonce):
  aad = 0x02 || len(resp_nonce) || resp_nonce
  R_encrypted = Seal(aead_key, aead_nonce, aad, R_plain)
  return R_encrypted
]]></sourcecode>
      </section>
    </section>
    <section anchor="odoh-Client">
      <name>Oblivious Client Behavior</name>
      <t>Let <tt>M</tt> be a DNS message (query) a Client wishes to protect with Oblivious DoH.
When sending an Oblivious DoH Query for resolving <tt>M</tt> to an Oblivious Target with
<tt>ObliviousDoHConfigContents</tt> <tt>config</tt>, a Client does the following:</t>
      <ol spacing="normal" type="1"><li>Creates an <tt>ObliviousDoHQuery</tt> structure, carrying the message M and padding, to produce Q_plain.</li>
        <li>Deserializes <tt>config.public_key</tt> to produce a public key pkR of type <tt>config.kem_id</tt>.</li>
        <li>Computes the encrypted message as <tt>Q_encrypted = encrypt_query_body(pkR, key_id, Q_plain)</tt>,
where <tt>key_id</tt> is as computed in <xref target="encryption"/>. Note also that <tt>len(key_id)</tt> outputs the length of <tt>key_id</tt>
as a two-byte unsigned integer.</li>
        <li>Outputs an <tt>ObliviousDoHMessage</tt> message <tt>Q</tt>, where <tt>Q.message_type = 0x01</tt>, <tt>Q.key_id</tt> carries <tt>key_id</tt>,
and <tt>Q.encrypted_message = Q_encrypted</tt>.</li>
      </ol>
      <t>The Client then sends <tt>Q</tt> to the Proxy according to <xref target="oblivious-request"/>.
Once the Client receives a response <tt>R</tt>, encrypted as specified in <xref target="odoh-target"/>,
it uses <tt>decrypt_response_body</tt> to decrypt <tt>R.encrypted_message</tt> (using <tt>R.key_id</tt> as
a nonce) and produce R_plain. Clients <bcp14>MUST</bcp14> validate <tt>R_plain.padding</tt> (as all zeros)
before using <tt>R_plain.dns_message</tt>.</t>
    </section>
    <section anchor="odoh-target">
      <name>Oblivious Target Behavior</name>
      <t>Targets that receive a Query message Q decrypt and process it as follows:</t>
      <ol spacing="normal" type="1"><li>Look up the <tt>ObliviousDoHConfigContents</tt> information according to <tt>Q.key_id</tt>. If no such key exists,
the Target <bcp14>MAY</bcp14> discard the query, and if so, it <bcp14>MUST</bcp14> return a 401 (Unauthorized) response
to the Proxy. Otherwise, let <tt>skR</tt> be the private key corresponding to this public key,
or one chosen for trial decryption.</li>
        <li>Compute <tt>context = setup_query_context(skR, Q.key_id, Q.encrypted_message)</tt>.</li>
        <li>Compute <tt>Q_plain, error = decrypt_query_body(context, Q.key_id, Q.encrypted_message)</tt>.</li>
        <li>If no error was returned and <tt>Q_plain.padding</tt> is valid (all zeros), resolve
<tt>Q_plain.dns_message</tt> as needed, yielding a DNS message M. Otherwise, if an error
was returned or the padding was invalid, return a 400 (Client Error) response to the Proxy.</li>
        <li>Create an <tt>ObliviousDoHResponseBody</tt> structure, carrying the message <tt>M</tt> and padding,
to produce <tt>R_plain</tt>.</li>
        <li>Create a fresh nonce <tt>resp_nonce = random(max(Nn, Nk))</tt>.</li>
        <li>Compute <tt>aead_key, aead_nonce = derive_secrets(context, Q_plain, resp_nonce)</tt>.</li>
        <li>Compute <tt>R_encrypted = encrypt_response_body(R_plain, aead_key, aead_nonce, resp_nonce)</tt>.
The <tt>key_id</tt> field used for encryption carries <tt>resp_nonce</tt> in order for Clients to
derive the same secrets. Also, the <tt>Seal</tt> function is the function that is associated with the
HPKE AEAD.</li>
        <li>Output an <tt>ObliviousDoHMessage</tt> message <tt>R</tt>, where <tt>R.message_type = 0x02</tt>,
<tt>R.key_id = resp_nonce</tt>, and <tt>R.encrypted_message = R_encrypted</tt>.</li>
      </ol>
      <t>The Target then sends <tt>R</tt> in a 2xx (Successful) response to the Proxy; see <xref target="oblivious-response"/>.
The Proxy forwards the message <tt>R</tt> without modification back to the Client as the HTTP response
to the Client's original HTTP request. In the event of an error (non-2xx status code), the
Proxy forwards the Target error to the Client; see <xref target="oblivious-response"/>.</t>
    </section>
    <section anchor="compliance">
      <name>Compliance Requirements</name>
      <t>Oblivious DoH uses HPKE for public key encryption <xref target="RFC9180"/>.
In the absence of an application profile standard specifying otherwise, a compliant
Oblivious DoH implementation <bcp14>MUST</bcp14> support the following HPKE cipher suite:</t>
      <dl spacing="normal">
        <dt>KEM:</dt><dd>DHKEM(X25519, HKDF-SHA256) (see <xref target="RFC9180" sectionFormat="comma" section="7.1"/>)</dd>
        <dt>KDF:</dt><dd>HKDF-SHA256 (see <xref target="RFC9180" sectionFormat="comma" section="7.2"/>)</dd>
        <dt>AEAD:</dt><dd>AES-128-GCM (see <xref target="RFC9180" sectionFormat="comma" section="7.3"/>)</dd>
      </dl>
    </section>
    <section anchor="experiment">
      <name>Experiment Overview</name>
      <t>This document describes an experimental protocol built on DoH. The purpose of this
experiment is to assess deployment configuration viability and related performance
impacts on DNS resolution by measuring key performance indicators such as resolution
latency. Experiment participants will test various parameters affecting service operation
and performance, including mechanisms for discovery and configuration of DoH Proxies
and Targets, as well as performance implications of connection reuse and pools where
appropriate. The results of this experiment will be used to influence future protocol
design and deployment efforts related to Oblivious DoH, such as Oblivious HTTP
<xref target="I-D.ietf-ohai-ohttp"/>. Implementations of DoH that are not involved in the
experiment will not recognize this protocol and will not participate in the experiment.
It is anticipated that the use of Oblivious DoH will be widespread and that this experiment will be of long duration.</t>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>Oblivious DoH aims to keep knowledge of the true query origin and its contents known only to Clients.
As a simplified model, consider a case where there exist two Clients C1 and C2, one Proxy P, and
one Target T. Oblivious DoH assumes an extended Dolev-Yao style attacker <xref target="Dolev-Yao"/> that can observe all
network activity and can adaptively compromise either P or T, but not C1 or C2. Note that compromising
both P and T is equivalent to collusion between these two parties in practice. Once compromised,
the attacker has access to all session information and private key material. (This generalizes to
arbitrarily many Clients, Proxies, and Targets, with the constraints that (1)&nbsp;not all Targets and Proxies
are simultaneously compromised and (2)&nbsp;at least two Clients are left uncompromised.) The attacker is
prohibited from sending Client-identifying information, such as IP addresses, to Targets. (This would
allow the attacker to trivially link a query to the corresponding Client.)</t>
      <t>In this model, both C1 and C2 send Oblivious DoH queries Q1 and Q2, respectively, through P to T,
and T provides answers A1 and A2. The attacker aims to link C1 to (Q1, A1) and C2 to (Q2, A2), respectively.
The attacker succeeds if this linkability is possible without any additional interaction. (For example,
if T is compromised, it could return a DNS answer corresponding to an entity it controls and then observe
the subsequent connection from a Client, learning its identity in the process. Such attacks are out of
scope for this model.)</t>
      <t>Oblivious DoH security prevents such linkability. Informally, this means:</t>
      <ol spacing="normal" type="1"><li>Queries and answers are known only to Clients and Targets in possession of the corresponding
response key and HPKE keying material. In particular, Proxies know the origin and destination
of an oblivious query, yet do not know the plaintext query. Likewise, Targets know only the oblivious
query origin, i.e., the Proxy, and the plaintext query. Only the Client knows both the plaintext
query contents and destination.</li>
        <li>Target resolvers cannot link queries from the same Client in the absence of unique per-Client
keys.</li>
      </ol>
      <t>Traffic analysis mitigations are outside the scope of this document. In particular, this document
does not prescribe padding lengths for <tt>ObliviousDoHQuery</tt> and <tt>ObliviousDoHResponse</tt> messages.
Implementations <bcp14>SHOULD</bcp14> follow the guidance in <xref target="RFC8467"/> for choosing padding length.</t>
      <t>Oblivious DoH security does not depend on Proxy and Target indistinguishability. Specifically, an
on-path attacker could determine whether a connection to a specific endpoint is used for oblivious or
direct DoH queries. However, this has no effect on the confidentiality goals listed above.</t>
      <section anchor="denial-of-service">
        <name>Denial of Service</name>
        <t>Malicious Clients (or Proxies) can send bogus Oblivious DoH queries to Targets as a Denial-of-Service
(DoS) attack. Target servers can throttle processing requests if such an event occurs. Additionally,
since Targets provide explicit errors upon decryption failure, i.e., if ciphertext decryption fails
or if the plaintext DNS message is malformed, Proxies can throttle specific Clients in response to
these errors. In general, however, Targets trust Proxies to not overwhelm the Target, and it is
expected that Proxies implement either some form of rate limiting or client authentication to limit
abuse; see <xref target="authentication"/>.</t>
        <t>Malicious Targets or Proxies can send bogus answers in response to Oblivious DoH queries. Response
decryption failure is a signal that either the Proxy or Target is misbehaving. Clients can choose to
stop using one or both of these servers in the event of such failure. However, as noted above, malicious
Targets and Proxies are out of scope for the threat model.</t>
      </section>
      <section anchor="proxy-policies">
        <name>Proxy Policies</name>
        <t>Proxies are free to enforce any forwarding policy they desire for Clients. For example, they can choose
to only forward requests to known or otherwise trusted Targets.</t>
        <t>Proxies that do not reuse connections to Targets for many Clients may allow Targets to link individual
queries to unknown Targets. To mitigate this linkability vector, it is <bcp14>RECOMMENDED</bcp14> that Proxies pool
and reuse connections to Targets. Note that this benefits performance as well as privacy, since
queries do not incur any delay that might otherwise result from Proxy-to-Target connection establishment.</t>
      </section>
      <section anchor="authentication">
        <name>Authentication</name>
        <t>Depending on the deployment scenario, Proxies and Targets might require authentication before use.
Regardless of the authentication mechanism in place, Proxies <bcp14>MUST NOT</bcp14> reveal any Client
authentication information to Targets. This is required so Targets cannot uniquely identify
individual Clients.</t>
        <t>Note that if Targets require Proxies to authenticate at the HTTP or  application layer before use,
this ought to be done before attempting to forward any Client query to the Target. This will allow
Proxies to distinguish 401 (Unauthorized) response codes due to authentication failure from
401 response codes due to Client key mismatch; see <xref target="oblivious-response"/>.</t>
      </section>
    </section>
    <section anchor="iana">
      <name>IANA Considerations</name>
      <t>This document makes changes to the "Media Types" registry.
The changes are described in the following subsection.</t>
      <section anchor="oblivious-doh-message-media-type">
        <name>Oblivious DoH Message Media Type</name>
        <t>This document registers a new media type, "application/oblivious-dns-message".</t>
    <dl spacing="normal">
        <dt>Type name:</dt><dd>application</dd>
        <dt>Subtype name:</dt><dd>oblivious-dns-message</dd>
        <dt>Required parameters:</dt><dd>N/A</dd>
        <dt>Optional parameters:</dt><dd>N/A</dd>
        <dt>Encoding considerations:</dt><dd>This is a binary format, containing encrypted DNS
requests and responses encoded as <tt>ObliviousDoHMessage</tt> values, as defined
in <xref target="encoding"/>.</dd>
        <dt>Security considerations:</dt><dd>See this document. The content is an encrypted DNS
message, and not executable code.</dd>
        <dt>Interoperability considerations:</dt><dd>This document specifies the format of
conforming messages and the interpretation thereof; see <xref target="encoding"/>.</dd>
        <dt>Published specification:</dt><dd>This document</dd>
        <dt>Applications that use this media type:</dt><dd>This media type is intended
to be used by Clients wishing to hide their DNS queries when
using DNS over HTTPS.</dd>
        <dt>Additional information:</dt><dd>N/A</dd>
        <dt>Person and email address to contact for further information:</dt><dd>See the
Authors' Addresses section.</dd>
        <dt>Intended usage:</dt><dd>COMMON</dd>
        <dt>Restrictions on usage:</dt><dd>N/A</dd>
        <dt>Author:</dt><dd>Tommy Pauly (tpauly@apple.com)</dd>
        <dt>Change controller:</dt><dd>IETF</dd>
        <dt>Provisional registration? (standards tree only):</dt><dd>No</dd>
    </dl>
      </section>
    </section>
  </middle>
  <back>

    <displayreference target="RFC9180" to="HPKE"/>
    <displayreference target="RFC9110" to="HTTP"/>
    <displayreference target="I-D.annee-dprive-oblivious-dns" to="OBLIVIOUS-DNS"/>
    <displayreference target="I-D.ietf-ohai-ohttp" to="OHTP"/>
    
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8484.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6570.xml"/>

<!-- draft-ietf-httpbis-proxy-status (AUTH48) (RFC 9209) -->
<reference anchor='RFC9209' target="https://www.rfc-editor.org/info/rfc9209">
<front>
<title>The Proxy-Status HTTP Response Header Field</title>
<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
<organization />
</author>
<author initials='P' surname='Sikora' fullname='Piotr Sikora'>
<organization />
</author>
<date year='2022' month='June'/>
</front>
<seriesInfo name="RFC" value="9209"/>
<seriesInfo name="DOI" value="10.17487/RFC9209"/>
</reference>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9110.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>

<!-- draft-irtf-cfrg-hpke (Published / RFC 9180) -->
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9180.xml"/>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8467.xml"/>

      </references>
      <references>
        <name>Informative References</name>

<!-- draft-annee-dprive-oblivious-dns (Expired) -->
<xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.annee-dprive-oblivious-dns.xml"/>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7871.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7239.xml"/>

<!-- draft-ietf-ohai-ohttp (I-D Exists) (Used full xml entry to fix author initials) -->
<reference anchor="I-D.ietf-ohai-ohttp">
   <front>
      <title>Oblivious HTTP</title>
      <author fullname="Martin Thomson">
	 <organization>Mozilla</organization>
      </author>
      <author fullname="Christopher A. Wood" surname="Wood" initials="C.A.">
	 <organization>Cloudflare</organization>
      </author>
      <date month="February" day="15" year="2022" />
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-ohai-ohttp-01" />
</reference>
<reference anchor="Dolev-Yao" target="https://www.cs.huji.ac.il/~dolev/pubs/dolev-yao-ieee-01056650.pdf">
  <front>
    <title>On the Security of Public Key Protocols</title>
    <author fullname="Danny Dolev" surname="Dolev" initials="D">
     <organization/>
    </author>
    <author fullname="Andrew C. Yao" surname="Yao" initials="A. C.">
     <organization/>
    </author>
    <date month="March" year="1983"/>
  </front>
  <seriesInfo name="DOI" value="10.1109/TIT.1983.1056650"/>
  <refcontent>IEEE Transactions on Information Theory, Vol. IT-29, No. 2</refcontent>
</reference>
      </references>
    </references>
    <section anchor="use-of-generic-proxy-services">
      <name>Use of Generic Proxy Services</name>
      <t>Using DoH over anonymizing proxy services such as Tor can also achieve the desired goal of separating
query origins from their contents. However, there are several reasons why such systems are undesirable
as contrasted with Oblivious DoH:</t>
      <ol spacing="normal" type="1"><li>Tor is meant to be a generic connection-level anonymity system, and it incurs higher latency costs
and protocol complexity for the purpose of proxying individual DNS queries. In contrast, Oblivious DoH
is a lightweight protocol built on DoH, implemented as an application-layer proxy, that can be enabled
as a default mode for users that need increased privacy.</li>
        <li>As a one-hop proxy, Oblivious DoH encourages connectionless proxies to mitigate Client query correlation
with few round trips. In contrast, multi-hop systems such as Tor often run secure connections (TLS) end to end,
which means that DoH servers could track queries over the same connection. Using a fresh DoH connection
per query would incur a non-negligible penalty in connection setup time.</li>
      </ol>
    </section>
    <section anchor="acknowledgments" numbered="false">
      <name>Acknowledgments</name>
      <t>This work is inspired by Oblivious DNS <xref target="I-D.annee-dprive-oblivious-dns"/>. Thanks to all of the
authors of that document. Thanks to
<contact fullname="Nafeez Ahamed"/>,
<contact fullname="Elliot Briggs"/>,
<contact fullname="Marwan Fayed"/>,
<contact fullname="Jonathan Hoyland"/>,
<contact fullname="Frederic Jacobs"/>,
<contact fullname="Tommy Jensen"/>,
<contact fullname="Erik Nygren"/>,
<contact fullname="Paul Schmitt"/>,
<contact fullname="Brian Swander"/>, and
<contact fullname="Peter Wu"/>
for their feedback and input.</t>
    </section>
  </back>
</rfc>
