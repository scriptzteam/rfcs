<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-cbor-cddl-more-control-08" number="9741" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true" version="3" xml:lang="en" updates="" obsoletes="">

  <front>
    <title abbrev="CDDL: More Control Operators for Text">Concise Data Definition Language (CDDL): Additional Control Operators for the Conversion and Processing of Text</title>
    <seriesInfo name="RFC" value="9741"/>
    <author initials="C." surname="Bormann" fullname="Carsten Bormann">
      <organization>Universit√§t Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63921</phone>
        <email>cabo@tzi.org</email>
      </address>
    </author>
    <date year="2025" month="March"/>

    <area>ART</area>
    <workgroup>cbor</workgroup>

    <keyword>Concise Data Definition Language</keyword>
    <keyword>Control Operator</keyword>

    <abstract>
<t>The Concise Data Definition Language (CDDL), standardized in RFC 8610,
provides "control operators" as its main language extension point.
RFCs have added to this extension point in both an
application-specific and a more general way.</t>
      <t>The present document defines a number of additional generally
applicable control operators for text conversion (bytes, integers,
printf-style formatting, and JSON) and for an operation on text.</t>

    </abstract>

  </front>
  <middle>

<section anchor="intro">
      <name>Introduction</name>
      <t>The Concise Data Definition Language (CDDL), standardized in <xref target="RFC8610"/>,
provides "control operators" as its main language extension point
(<xref section="3.8" sectionFormat="of" target="RFC8610"/>).
RFCs have added to this extension point in both an
application-specific <xref target="RFC9090"/> and a more general <xref target="RFC9165"/> way.</t>


<t>The present document defines a number of additional generally
applicable control operators. In <xref target="tbl-new"/>, the column marked t is for "target type"
 (left-hand side), and the column marked c is for "controller type" (right-hand side).</t>
      <table anchor="tbl-new">
        <name>Summary of New Control Operators in This Document</name>
        <thead>
          <tr>
            <th align="left">Name</th>
            <th align="left">t</th>
            <th align="left">c</th>
            <th align="left">Purpose</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">
              <tt>.b64u</tt>, <tt>.b64c</tt></td>
            <td align="left">text</td>
            <td align="left">bytes</td>
            <td align="left">Base64 representation of byte strings</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b64u-sloppy</tt>, <tt>.b64c-sloppy</tt></td>
            <td align="left">text</td>
            <td align="left">bytes</td>
            <td align="left">Sloppy-tolerant variants of the above</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.hex</tt>, <tt>.hexlc</tt>, <tt>.hexuc</tt></td>
            <td align="left">text</td>
            <td align="left">bytes</td>
            <td align="left">Base16 representation of byte strings</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b32</tt>, <tt>.h32</tt></td>
            <td align="left">text</td>
            <td align="left">bytes</td>
            <td align="left">Base32 representation of byte strings</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b45</tt></td>
            <td align="left">text</td>
            <td align="left">bytes</td>
            <td align="left">Base45 representation of byte strings</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.base10</tt></td>
            <td align="left">text</td>
            <td align="left">int</td>
            <td align="left">Text representation of integer numbers</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.printf</tt></td>
            <td align="left">text</td>
            <td align="left">array</td>
            <td align="left">Printf-formatted text representation of data items</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.json</tt></td>
            <td align="left">text</td>
            <td align="left">any</td>
            <td align="left">Text representation of JSON values</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.join</tt></td>
            <td align="left">text or bytes</td>
            <td align="left">array</td>
            <td align="left">Build text or byte string from array of components</td>
          </tr>
        </tbody>
      </table>

      <section anchor="terminology">
        <name>Terminology</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>

	<t>Regular expressions mentioned in the text are as defined in <xref target="RFC9485"/>.</t>
        <t>This specification uses terminology from <xref target="RFC8610"/>.
In particular, with respect to control operators, "target" refers to
the left-hand-side operand and "controller" to the right-hand-side operand.
"Tool" refers to tools along the lines of that described in <xref section="F" sectionFormat="of" target="RFC8610"/>.
Note also that the data model underlying CDDL provides for text
strings as well as byte strings as two separate types, which are
	then collectively referred to as "strings".</t>
	<t> The term "opinionated" is used in this document to explain that
	the selection of operators included is somewhat frugal, based on
	opinions about what the preferred (and likely) usage scenarios will
	be.  Specifically, not including a potential choice doesn't by itself
	intend to express that the choice is unacceptable; it might still be
	added in a future registration if these opinions evolve.
	</t>
      </section>
    </section>
    <section anchor="text-conversion">
      <name>Text Conversion</name>
      <section anchor="base">
        <name>Byte Strings: Base 16 (Hex), Base 32, Base 45, and Base 64</name>
        <t>A CDDL model often defines data that are byte strings in essence but
need to be transported in various encoded forms, such as base64 or
hex.
This section defines a number of control operators to model these
conversions.</t>
        <t>The control operators generally are of a form that could be used like
this:</t>
        <sourcecode type="cddl" name="example-b64u.cddl"><![CDATA[
signature-for-json = text .b64u signature
signature = bytes .cbor COSE_Sign1
]]></sourcecode>


	<t>The specification of these control operators cannot provide full
	coverage of the large number of transformations in use; it focuses on
	<xref target="RFC4648"/> and additionally <xref target="RFC9285"/>, as shown in <xref target="tbl-text-conv"/>.
	For the representations defined in <xref target="RFC4648"/>, this
	specification uses names as inspired by Section <xref target="RFC8949"
	section="8" sectionFormat="bare"/> of RFC 8949 <xref target="STD94"/>:
	</t>

        <table anchor="tbl-text-conv">
          <name>Control Operators for Text Conversion of Byte Strings</name>
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Meaning</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">
                <tt>.b64u</tt></td>
              <td align="left">Base64url, no padding</td>
              <td align="left">
                <xref section="5" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.b64u-sloppy</tt></td>
              <td align="left">Base64url, no padding, sloppy</td>
              <td align="left">
                <xref section="5" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.b64c</tt></td>
              <td align="left">Base64 classic, padding</td>
              <td align="left">
                <xref section="4" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.b64c-sloppy</tt></td>
              <td align="left">Base64 classic, padding, sloppy</td>
              <td align="left">
                <xref section="4" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.b32</tt></td>
              <td align="left">Base32, no padding</td>
              <td align="left">
                <xref section="6" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.h32</tt></td>
              <td align="left">Base32 with "Extended Hex" alphabet, no padding</td>
              <td align="left">
                <xref section="7" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.hex</tt></td>
              <td align="left">Base16 (hex), either case</td>
              <td align="left">
                <xref section="8" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.hexlc</tt></td>
              <td align="left">Base16 (hex), lower case</td>
              <td align="left">
                <xref section="8" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.hexuc</tt></td>
              <td align="left">Base16 (hex), upper case</td>
              <td align="left">
                <xref section="8" sectionFormat="of" target="RFC4648"/></td>
            </tr>
            <tr>
              <td align="left">
                <tt>.b45</tt></td>
              <td align="left">Base45</td>
              <td align="left">
                <xref target="RFC9285"/></td>
            </tr>
          </tbody>
        </table>

<t>Note that this specification is somewhat opinionated here: It does not
provide base64url or base32(hex) encoding with padding or
base64 classic without padding.  Experience indicates that these
combinations only ever occur in error, so the usability of CDDL is
increased by not providing them in the first place.  Also, adding "c"
makes sure that any decision for classic base64 is actively taken.</t>
        <t>These control operators are "strict" in their matching, i.e., they
only match base encodings that conform to the mandates of their
defining documents.
Note that this also means that <tt>.b64u</tt> and <tt>.b64c</tt> only match text
strings composed of the set of characters defined for each of them,
respectively.
(This is perhaps worth pointing out explicitly as it contrasts
with the "b64" literal prefix that can be used to notate byte strings
in CDDL source code, which simply accepts characters from either alphabet.
This behavior is different from the matching behavior of the four
base64 control operators defined here.)</t>

<t>The additional designation "sloppy" indicates that the text string is
not validated for any additional bits being zero, in variance to what
is specified in the paragraph that follows Table 1 in <xref section="4" sectionFormat="of" target="RFC4648"/>.
Note that the present specification is opinionated again in not
specifying a sloppy variant of base32 or base32hex, as no legacy use
of sloppy base32(hex) was known at the time of writing.
Base45 <xref target="RFC9285"/> is known to be suboptimal for use in environments with limited
data transparency (such as URLs) but is included because of its close
relationship to QR codes and its wide use in health informatics (note
that base45 is strongly specified not to allow sloppy forms
of encoding).</t>
      </section>
      <section anchor="numerals">
        <name>Numerals</name>


	<table anchor="tbl-num">
          <name>Control Operator for Text Conversion of Integers</name>
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Meaning</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">
                <tt>.base10</tt></td>
              <td align="left">Base-ten (decimal) integer</td>
              <td align="left">---</td>
            </tr>
          </tbody>
        </table>


        <t>The control operator <tt>.base10</tt> allows the modeling of text strings
that carry an integer number in decimal form (as a text string with
digits in the usual base-ten positional numeral system), such as in the uint64/int64 formats of
YANG-JSON <xref target="RFC7951"/>.</t>
        <sourcecode type="cddl" name="example-base10.cddl"><![CDATA[
yang-json-sid = text .base10 (0..9223372036854775807)
]]></sourcecode>

	<t>Again, the specification is opinionated by only providing for integer numbers
represented without leading zeros, i.e., the decimal integer
numerals match the regular
expression <tt>0|-?[1-9][0-9]*</tt> (of course, this is further restricted by the
control type).
See <xref target="printf-style-formatting"/> for more flexibility and for other numeric bases
such as octal, hexadecimal,
or binary conversions.</t>

<t>Note that this control operator governs text representations of
integers and should not be confused with the control operators
governing text representations of byte strings (such as <tt>.b64u</tt>).
This contrast is somewhat reinforced by spelling out "base" in the
name <tt>.base10</tt> as opposed to those of the byte string operators.</t>
      </section>
      <section anchor="printf-style-formatting">
        <name>Printf-Style Formatting</name>
        <table anchor="tbl-printf">
          <name>Control Operator for Printf-Style Formatting of Data Item(s)</name>
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Meaning</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">
                <tt>.printf</tt></td>
              <td align="left">Printf-style formatting of data item(s)</td>
              <td align="left">---</td>
            </tr>
          </tbody>
        </table>

	
        <t>The control operator <tt>.printf</tt> allows the modeling of text strings that carry various formatted
information, as long as the format can be represented in printf-style
formatting strings as they are used in the C language (see Section
7.23.6.1 of <xref target="C"/>; note that the "C23" standard includes %b and %B for formatting into binary digits).</t>
        <t>The controller (right-hand side) of the <tt>.printf</tt> control is an array
of one printf-style format string and zero or more data items that fit
the individual conversion specifications in the format string.


 The construct matches a text string representing the textual output of an
 equivalent C-language <tt>printf</tt> function call that receives as
 arguments the format string and the data items following it in the array.
	</t>


<t>Out of the functionality described for printf formatting in Section 7.23.6.1 of the C language specification <xref target="C"/>, length modifiers (paragraph 7)
are not used and <bcp14>MUST NOT</bcp14> be included in the format string.
The "s" conversion specifier (paragraph 8) is used to
interpolate a text string in UTF-8 form.
The "c" conversion specifier (paragraph 8) represents a single Unicode
scalar value as a UTF-8 character.
The "p" and "n" conversion specifiers (paragraph 8) are not used and
<bcp14>MUST NOT</bcp14> be included in the format string.</t>
        <t>In the following example, <tt>my_alg_19</tt> matches the text string <tt>"0x0013"</tt>:</t>
        <sourcecode type="cddl" name="example-printf.cddl"><![CDATA[
my_alg_19 = hexlabel<19>
hexlabel<K> = text .printf (["0x%04x", K])
]]></sourcecode>
        <t>The data items in the controller array do not need to be literals, as in the following 
example:</t>
        <sourcecode type="cddl" name="example-printf-uint.cddl"><![CDATA[
any_alg = hexlabel<1..20>
hexlabel<K> = text .printf (["0x%04x", K])
]]></sourcecode>
        <t>Here, <tt>any_alg</tt> matches the text strings <tt>"0x0013"</tt> or <tt>"0x0001"</tt> but
not <tt>"0x1234"</tt>.</t>
      </section>
      <section anchor="json-values">
        <name>JSON Values</name>


        <t>Some applications store complete JSON texts <xref target="STD90"/> into text strings. The
JSON value of these can easily be defined in CDDL by using the default
JSON-to-CBOR conversion rules provided in Section <xref target="RFC8949" section="6.2" sectionFormat="bare"/> of RFC 8949 <xref target="STD94"/>.
This is supported by a control operator similar to <tt>.cbor</tt> as defined in <xref section="3.8.4" sectionFormat="of" target="RFC8610"/>.</t>
        <table anchor="tbl-json">
          <name>Control Operator for Text Conversion of JSON Values</name>
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Meaning</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">
                <tt>.json</tt></td>
              <td align="left">JSON</td>
              <td align="left">
                <xref target="STD90"/></td>
            </tr>
          </tbody>
        </table>
        <sourcecode type="cddl" name="example-json.cddl"><![CDATA[
embedded-claims = text .json claims
claims = {iss: text, exp: text}
]]></sourcecode>
        <t>Notes:</t>
        <ul spacing="normal">
          <li>
            <t>JSON has known interoperability problems <xref
            target="RFC7493"/>.  While <xref section="4" sectionFormat="of"
            target="RFC7493"/> probably is not relevant to this specification,
            <xref section="2" sectionFormat="of" target="RFC7493"/> provides
            requirements that need to be followed to make use of the generic
            data model underlying CDDL.  Note that the intention of <xref
            section="2.2" sectionFormat="of" target="RFC7493"/> is directly
            supported by Section <xref target="RFC8949" section="6.2"
            sectionFormat="bare"/> of RFC 8949 <xref target="STD94"/>.  The
            recommendation to use text strings for representing numbers
            outside JSON's interoperable range is a requirement on the
            application data model and therefore needs to be reflected on the
            right-hand side of the <tt>.json</tt> control operator.</t>
          </li>
          <li>
            <t>This control operator provides no way to constrain the use of
            blank space or other serialization variants in the JSON
            representation of the data items; restrictions on the
            serialization to specific variants (e.g., not providing for the
            addition of any insignificant blank space and prescribing an order in
            which map entries are serialized) could be defined in future
            control operators.</t>
          </li>
          <li>

	    <t>A <tt>.jsonseq</tt> is not provided in this document for JSON text sequences <xref
            target="RFC7464"/>, as no use case for inclusion in CDDL is known
            at the time of writing; again, future control operators could
            address this use case.</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="text-processing">
      <name>Text Processing</name>
      <section anchor="join">
        <name>Join</name>
        <t>Often, text strings need to be constructed out of parts that can best
be modeled as an array.</t>
        <table anchor="tbl-join">
          <name>Control Operator for Text Generation from Arrays</name>
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Meaning</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">
                <tt>.join</tt></td>
              <td align="left">Concatenate elements of an array</td>
              <td align="left">---</td>
            </tr>
          </tbody>
        </table>
        <t>For example, an IPv4 address in dotted-decimal might be modeled as in
<xref target="fig-join-example"/>.</t>
        <figure anchor="fig-join-example">
          <name>Using the .join Operator to Build Dotted-Decimal IPv4 Addresses</name>
          <sourcecode type="cddl" name="example-join.cddl"><![CDATA[
legacy-ip-address = text .join legacy-ip-address-elements
legacy-ip-address-elements = [bytetext, ".", bytetext, ".",
                              bytetext, ".", bytetext]
bytetext = text .base10 byte
byte = 0..255
]]></sourcecode>
        </figure>

	<t>The elements of the controller array need to be strings (text or byte
strings).
The control operator matches a data item if that data item is also a
string, built by concatenating the strings in the array.
The result of this concatenation is of the same kind of string (text
or bytes) as the first element of the array.
(If there is no element in the array, the <tt>.join</tt> construct matches
either kind of empty string, obviously further constrained by the
control operator target.)
The concatenation is performed on the sequences of bytes in the
strings.
If the result of the concatenation is a text string, the resulting
sequence of bytes only matches the target data item if that result is
a valid text string (i.e., valid UTF-8). Note that in contrast to the
algorithm used in Section <xref target="RFC8949" section="3.2.3" sectionFormat="bare"/> of RFC 8949 <xref target="STD94"/>, there is no need
for all individual byte sequences going into the concatenation to
constitute valid text strings.</t>
        <t>Note that this control operator is hard to validate in the most
general case, as this would require full parser functionality.
Simple implementation strategies will use array elements with constant
values as guideposts ("markers", such as the <tt>"."</tt> in <xref target="fig-join-example"/>)
for isolating the variable elements that need further validation at
the CDDL data model level.
Therefore, it is recommended to limit the use of <tt>.join</tt> to simple
arrangements where the array elements are laid out explicitly and
there are no adjacent variable elements without intervening constant
values, and where these constant values do not occur within the text
described by the variable elements.
If more complex parsing functionality is required, the ABNF control
operators (see <xref section="3" sectionFormat="of" target="RFC9165"/>) may be useful; however, these
cannot reach back into CDDL-specified elements like <tt>.join</tt> can.</t>


<aside>
          <t>Implementation note: A validator implementation can use the marker
elements to scan the text and isolate the variable elements.
It also can build a parsing regexp from the elements of the controller array, with capture
groups for each element, and validate the captures against the
elements of the array. (For more about parsing regexps, see <xref section="6" sectionFormat="of" target="RFC9485"/>; see also
<xref section="8" sectionFormat="of" target="RFC9485"/> for security considerations related to
regexps.)
In the most general case, these implementation strategies can exhibit
false negatives, where the implementation cannot find the structure
that would be successfully validated using the controller; it is
<bcp14>RECOMMENDED</bcp14> that implementations provide full coverage at least for
the marker-based subset outlined in the previous paragraph.</t>
        </aside>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>

      <t>IANA has registered the contents of <xref target="tbl-iana-reqs"/> into
      the "CDDL Control Operators" registry of <xref target="IANA.cddl"/>:
      </t>
      <table anchor="tbl-iana-reqs">
        <name>New Control Operators</name>
        <thead>
          <tr>
            <th align="left">Name</th>
            <th align="left">Reference</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">
              <tt>.b64u</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b64u-sloppy</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b64c</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b64c-sloppy</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b45</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.b32</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.h32</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.hex</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.hexlc</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.hexuc</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.base10</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.printf</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.json</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
          <tr>
            <td align="left">
              <tt>.join</tt></td>
            <td align="left">RFC 9741</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section anchor="security-considerations">
      <name>Security Considerations</name>


      <t>The security considerations in <xref section="5" sectionFormat="of"
      target="RFC8610"/> apply. In addition, for the control operators defined
      in <xref target="base"/>, the security considerations in <xref section="12"
      sectionFormat="of" target="RFC4648"/> apply.</t>
    </section>
  </middle>
  <back>
    <references anchor="sec-combined-references">
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml9/reference.STD.94.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml9/reference.STD.90.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8610.xml"/>

        <reference anchor="IANA.cddl" target="https://www.iana.org/assignments/cddl">
          <front>
            <title>Concise Data Definition Language (CDDL)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9165.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9285.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9485.xml"/>

        <reference anchor="C" target="https://www.iso.org/standard/82075.html">
          <front>
            <title>Information technology - Programming languages - C</title>
            <author>
              <organization>International Organization for Standardization</organization>
            </author>
            <date year="2024" month="October"/>
          </front>
          <seriesInfo name="ISO/IEC" value="9899:2024"/>
          <annotation>Technically equivalent specification text is available at <eref target="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3220.pdf" brackets="angle"/>.</annotation>
          <refcontent>Fourth Edition</refcontent>
        </reference>

          <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
          <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7464.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7493.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9090.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7951.xml"/>
      </references>
    </references>



    
<section numbered="false" anchor="list-of-figures">
      <name>List of Figures</name>

          <t><xref target="fig-join-example"/>: <xref target="fig-join-example"                     
format="title"></xref></t>

    </section>
    <section numbered="false" anchor="list-of-tables">
      <name>List of Tables</name>

          <t><xref target="tbl-new"></xref>: <xref target="tbl-new" format="title"></xref></t>

          <t><xref target="tbl-text-conv"></xref>: <xref target="tbl-text-conv"                     
format="title"></xref></t>

          <t><xref target="tbl-num"></xref>: <xref target="tbl-num" format="title"></xref></t>

          <t><xref target="tbl-printf"></xref>: <xref target="tbl-printf"                           
format="title"></xref></t>

          <t><xref target="tbl-json"></xref>: <xref target="tbl-json" format="title"></xref></t>

          <t><xref target="tbl-join"></xref>: <xref target="tbl-join" format="title"></xref></t>

          <t><xref target="tbl-iana-reqs"></xref>: <xref target="tbl-iana-reqs"                     
format="title"></xref></t>

    </section>

    <section numbered="false" anchor="acknowledgements">
      <name>Acknowledgements</name>
      <t><contact fullname="Henk Birkholz"/> suggested the need for many of
      the control operators defined here.  The author would like to thank
      <contact fullname="Laurence Lundblade"/> and <contact fullname="Jeremy
      O'Donoghue"/> for sharpening some of the mandates, <contact
      fullname="Mikolai G√ºtschow"/> for improvements to some examples,
      <contact fullname="A.J. Stein"/> for serving as shepherd for this
      document and for his shepherd review, the IESG and Directorate reviewers
      (notably <contact fullname="Ari Ker√§nen"/>, <contact fullname="Darrel
      Miller"/>, and <contact fullname="√âric Vyncke"/>), and <contact
      fullname="Orie Steele"/> for serving as responsible AD and for providing
      a detailed AD review.</t>
    </section>
  </back>

</rfc>
