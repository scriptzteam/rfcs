<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc [
 <!ENTITY nbsp    "&#160;">
 <!ENTITY zwsp   "&#8203;">
 <!ENTITY nbhy   "&#8209;">
 <!ENTITY wj     "&#8288;">
]> 

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-tls-external-psk-importer-08" number="9258" submissionType="IETF" category="std" consensus="true" obsoletes="" updates="" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">

  <front>
    <title abbrev="Importing External PSKs for TLS 1.3">Importing External Pre-Shared Keys (PSKs) for TLS 1.3</title>
    <seriesInfo name="RFC" value="9258"/>
    <author initials="D." surname="Benjamin" fullname="David Benjamin">
      <organization>Google, LLC.</organization>
      <address>
        <email>davidben@google.com</email>
      </address>
    </author>
    <author initials="C. A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Cloudflare</organization>
      <address>
        <email>caw@heapingbits.net</email>
      </address>
    </author>
    <date year="2022" month="July"/>

    <area>sec</area>
    <workgroup>tls</workgroup>
    <abstract>
      <t>This document describes an interface for importing external Pre-Shared Keys (PSKs) into TLS 1.3.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      
      <t>TLS 1.3 <xref target="RFC8446" format="default"/> supports Pre-Shared Key (PSK) authentication, wherein PSKs
can be established via session tickets from prior connections or via some external, out-of-band
mechanism. The protocol mandates that each PSK only be used with a single hash function.
This was done to simplify protocol analysis. TLS 1.2 <xref target="RFC5246" format="default"/>, in contrast,
has no such requirement, as a PSK may be used with any hash algorithm and the
TLS 1.2 pseudorandom function (PRF). While there is no known way in which the same
external PSK might produce related output in TLS 1.3 and prior versions, only limited
analysis has been done.  Applications <bcp14>SHOULD</bcp14> provision separate PSKs for (D)TLS 1.3 and
prior versions. In cases where this is not possible (e.g., there are already-deployed
external PSKs or provisioning is otherwise limited), reusing external PSKs across different
versions of TLS may produce related outputs, which may, in turn, lead to security problems;
see <xref target="RFC8446" sectionFormat="of" section="E.7"/>.</t>
      <t>To mitigate such problems, this document specifies a PSK importer
interface by which external PSKs may be imported and subsequently bound to a specific
key derivation function (KDF) and hash function for use in TLS 1.3 <xref target="RFC8446" format="default"/>
and DTLS 1.3 <xref target="RFC9147" format="default"/>. In particular, it describes a
mechanism for importing PSKs derived from external PSKs by including the target KDF,
(D)TLS protocol version, and an optional context string to ensure uniqueness. This process yields a set of candidate
PSKs, each of which are bound to a target KDF and protocol, that are separate from those
used in (D)TLS 1.2 and prior versions. This expands what would normally have been a single
PSK and identity into a set of PSKs and identities.</t>
    </section>
    <section anchor="conventions-and-definitions" numbered="true" toc="default">
      <name>Conventions and Definitions</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The following terms are used throughout this document:</t>
      <dl newline="false" spacing="normal">
        <dt>External PSK (EPSK):</dt>
	<dd>A PSK established or provisioned out of band (i.e., not
from a TLS connection) that is a tuple of (Base Key, External Identity, Hash).</dd>
        <dt>Base Key:</dt>
	<dd>The secret value of an EPSK.</dd>
        <dt>External Identity:</dt>
	<dd>A sequence of bytes used to identify an EPSK.</dd>
        <dt>Target protocol:</dt>
	<dd>The protocol for which a PSK is imported for use.</dd>
        <dt>Target KDF:</dt>
	<dd>The KDF for which a PSK is imported for use.</dd>
        <dt>Imported PSK (IPSK):</dt>
	<dd>A TLS PSK derived from an EPSK, optional context string,
	target protocol, and target KDF.</dd>	
        <dt>Non-imported PSK:</dt>
	<dd>An EPSK that is used directly as a TLS PSK without being imported.</dd>
        <dt>Imported Identity:</dt>
	<dd>A sequence of bytes used to identify an IPSK.</dd>
      </dl>
      <t>This document uses presentation language from <xref target="RFC8446" sectionFormat="of" section="3"/>.</t>
    </section>
    <section anchor="overview" numbered="true" toc="default">
      <name>Overview</name>
      <t>The PSK importer interface mirrors that of the TLS exporter interface (see <xref target="RFC8446" format="default"/>)
in that it diversifies a key based on some contextual information. In contrast to the exporter
interface, wherein output uniqueness is achieved via an explicit label and context string,
the PSK importer interface defined herein takes an external PSK and identity and "imports" it into
TLS, creating a set of "derived" PSKs and identities that are each unique. Each of these
derived PSKs are bound to a target protocol, KDF identifier, and optional context string.
Additionally, the resulting PSK binder keys are modified with a new derivation label
to prevent confusion with non-imported PSKs. Through this interface, importing external
PSKs with different identities yields distinct PSK binder keys.</t>
      <t>Imported keys do not require negotiation for use since a client and server will not agree upon
identities if imported incorrectly. Endpoints may incrementally deploy PSK importer support
by offering non-imported PSKs for TLS versions prior to TLS 1.3.
Non-imported and imported PSKs
are not equivalent since their identities are different. See <xref target="rollout" format="default"/> for more details.</t>
      <t>Endpoints that import external keys <bcp14>MUST NOT</bcp14> use the keys that are input to the
import process for any purpose other than the importer, and they <bcp14>MUST NOT</bcp14> use the derived
keys for any purpose other than TLS PSKs. Moreover, each external PSK fed to the
importer process <bcp14>MUST</bcp14> be associated with one hash function at most.  This
is analogous to the rules in <xref target="RFC8446" sectionFormat="of" section="4.2.11"/>. See <xref target="security-considerations" format="default"/> for
more discussion.</t>
    </section>
    <section anchor="psk-import" numbered="true" toc="default">
      <name>PSK Importer</name>
      <t>This section describes the PSK importer interface and its underlying diversification
mechanism and binder key computation modification.</t>
      <section anchor="external-psk-diversification" numbered="true" toc="default">
        <name>External PSK Diversification</name>
	
        <t>As input, the PSK importer interface takes an EPSK with External Identity <tt>external_identity</tt> and base key <tt>epsk</tt>
(as defined in <xref target="terminology" format="default"/>) along with an optional context. It then transforms the input into a set of PSKs
and imported identities for use in a connection based on target protocols and KDFs.
In particular, for each supported target protocol <tt>target_protocol</tt> and KDF <tt>target_kdf</tt>,
	the importer constructs an ImportedIdentity structure as follows:</t>
	
<sourcecode name="" type="">
struct {
   opaque external_identity&lt;1...2^16-1&gt;;
   opaque context&lt;0..2^16-1&gt;;
   uint16 target_protocol;
   uint16 target_kdf;
} ImportedIdentity;
</sourcecode>
        <t>The list of ImportedIdentity.target_kdf values is maintained by IANA as described in <xref target="IANA" format="default"/>.
External PSKs <bcp14>MUST NOT</bcp14> be imported for (D)TLS 1.2 or prior versions. See <xref target="rollout" format="default"/> for
discussion on how imported PSKs for TLS 1.3 and non-imported PSKs for earlier versions
coexist for incremental deployment.</t>
        <t>ImportedIdentity.context <bcp14>MUST</bcp14> include the context used to determine the EPSK, if any exists.
For example, ImportedIdentity.context may include information about peer roles or identities
to mitigate Selfie-style reflection attacks <xref target="Selfie" format="default"/>. See <xref target="mitigate-selfie" format="default"/> for more details.
Since the EPSK is a key derived from an external protocol or sequence of protocols,
ImportedIdentity.context <bcp14>MUST</bcp14> include a channel binding for the deriving protocols
<xref target="RFC5056" format="default"/>. The details of this binding are protocol specific and out of scope for
this document.</t>
        <t>ImportedIdentity.target_protocol <bcp14>MUST</bcp14> be the (D)TLS protocol version for which the
PSK is being imported. For example, TLS 1.3 <xref target="RFC8446" format="default"/> uses 0x0304, which will
therefore also be used by QUICv1 <xref target="RFC9000" format="default"/>. Note that this means the number
of PSKs derived from an EPSK is a function of the number of target protocols.</t>
        <t>Given an ImportedIdentity and corresponding EPSK with base key <tt>epsk</tt>, an imported PSK
IPSK with base key <tt>ipskx</tt> is computed as follows:</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
   epskx = HKDF-Extract(0, epsk)
   ipskx = HKDF-Expand-Label(epskx, "derived psk",
                             Hash(ImportedIdentity), L)
]]></artwork>
        <t>L corresponds to the KDF output length of ImportedIdentity.target_kdf as defined in <xref target="IANA" format="default"/>.	
For hash-based KDFs, such as HKDF_SHA256 (0x0001), this is the length of the hash function
output, e.g., 32 octets for SHA256. This is required for the IPSK to be of length suitable
for supported ciphersuites. Internally, HKDF-Expand-Label uses a label corresponding to
ImportedIdentity.target_protocol (e.g., "tls13" for TLS 1.3, as per <xref target="RFC8446" sectionFormat="of" section="7.1"/>
or "dtls13" for DTLS 1.3, as per <xref target="RFC9147" sectionFormat="of" section="5.10"/>).</t>
        <t>The identity of <tt>ipskx</tt> as sent on the wire is ImportedIdentity, i.e., the serialized content
of ImportedIdentity is used as the content of PskIdentity.identity in the PSK extension.
The corresponding PSK input for the TLS 1.3 key schedule is "ipskx".</t>
        <t>As the maximum size of the PSK extension is 2<sup>16</sup> - 1 octets, an Imported Identity that exceeds
this size is likely to cause a decoding error. Therefore, the PSK importer interface <bcp14>SHOULD</bcp14> reject
any ImportedIdentity that exceeds this size.</t>
        <t>The hash function used for HMAC-based Key Derivation Function (HKDF) <xref target="RFC5869" format="default"/> is that which is associated with the EPSK.
It is not the hash function associated with ImportedIdentity.target_kdf. If the EPSK
does not have such an associated hash function, SHA-256 <xref target="SHA2" format="default"/> <bcp14>SHOULD</bcp14> be used.
Diversifying EPSK by ImportedIdentity.target_kdf ensures
that an IPSK is only used as input keying material to one KDF at most, thus satisfying
the requirements in <xref target="RFC8446" format="default"/>. See <xref target="security-considerations" format="default"/> for more details.</t>
        <t>Endpoints <bcp14>SHOULD</bcp14> generate a compatible <tt>ipskx</tt> for each target ciphersuite they offer.
For example, importing a key for TLS_AES_128_GCM_SHA256 and TLS_AES_256_GCM_SHA384 would
yield two PSKs: one for HKDF-SHA256 and another for HKDF-SHA384. In contrast, if
TLS_AES_128_GCM_SHA256 and TLS_CHACHA20_POLY1305_SHA256 are supported, only one
derived key is necessary. Each ciphersuite uniquely identifies the target KDF.
Future specifications that change the way the KDF is negotiated will need to update this
specification to make clear how target KDFs are determined for the import process.</t>
        <t>EPSKs <bcp14>MAY</bcp14> be imported before the start of a connection if the target KDFs, protocols, and
context string(s) are known a priori. EPSKs <bcp14>MAY</bcp14> also be imported for early data use
if they are bound to the protocol settings and configuration that are required for
sending early data. Minimally, this means that the Application-Layer Protocol Negotiation (ALPN) value
<xref target="RFC7301" format="default"/>, QUIC transport parameters (if used for QUIC), and any other relevant
parameters that are negotiated for early data <bcp14>MUST</bcp14> be provisioned alongside these EPSKs.</t>
      </section>
      <section anchor="schedule" numbered="true" toc="default">
        <name>Binder Key Derivation</name>
        <t>To prevent confusion between imported and non-imported PSKs, imported PSKs change
the PSK binder key derivation label. In particular, the standard TLS 1.3 PSK binder
key computation is defined as follows:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
           0
           |
           v
 PSK ->  HKDF-Extract = Early Secret
           |
           +-----> Derive-Secret(., "ext binder" | "res binder", "")
           |                     = binder_key
           V
]]></artwork>
        <t>Imported PSKs use the string "imp binder" rather than "ext binder" or "res binder"
when deriving <tt>binder_key</tt>.
This means the binder key is computed as follows:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
           0
           |
           v
 PSK ->  HKDF-Extract = Early Secret
           |
           +-----> Derive-Secret(., "ext binder"
           |                      | "res binder"
           |                      | "imp binder", "")
           |                     = binder_key
           V
]]></artwork>
        <t>This new label ensures a client and server will negotiate use of an external PSK if
and only if (a) both endpoints import the PSK or (b) neither endpoint imports the
PSK. As <tt>binder_key</tt> is a leaf key, changing its computation does not affect any
other key.</t>
      </section>
    </section>
    <section anchor="deprecating-hash-functions" numbered="true" toc="default">
      <name>Deprecating Hash Functions</name>
      <t>If a client or server wishes to deprecate a hash function and no longer use it for TLS 1.3,
it removes the corresponding KDF from the set of target KDFs used for importing keys.
This does not affect the KDF operation used to derive imported PSKs.</t>
    </section>
    <section anchor="rollout" numbered="true" toc="default">
      <name>Incremental Deployment</name>
      <t>In deployments that already have PSKs provisioned and in use with TLS 1.2, attempting
to incrementally deploy the importer mechanism would result in concurrent use of
the already-provisioned PSK directly as both a TLS 1.2 PSK and an EPSK, which, in turn, could mean that the same KDF and key would be used in two different protocol contexts.
This is not a recommended configuration; see <xref target="security-considerations" format="default"/> for more details.
However, the benefits of using TLS 1.3 and PSK importers may prove sufficiently
compelling that existing deployments choose to enable this noncompliant configuration for
a brief transition period while new software (using TLS 1.3 and importers) is deployed.
Operators are advised to make any such transition period as short as possible.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The PSK importer security goals can be roughly stated as follows: avoid PSK reuse across
      KDFs while properly authenticating endpoints. When modeled as computational extractors, KDFs
assume that input keying material (IKM) is sampled from some "source" probability distribution
and that any two IKM values are chosen independently of each other <xref target="Kraw10" format="default"/>. This source-independence requirement implies that the same IKM value cannot be used for two different
KDFs.</t>
      <t>PSK-based authentication is functionally equivalent to session resumption in that a connection
uses existing key material to authenticate both endpoints. Following the work of
<xref target="BAA15" format="default"/>, this is a form of compound authentication. Loosely
speaking, compound authentication is the property that an execution of multiple authentication
protocols, wherein at least one is uncompromised, jointly authenticates all protocols. Therefore, authenticating with an externally provisioned PSK should ideally authenticate both
the TLS connection and the external provisioning process. Typically, the external provisioning process
produces a PSK and corresponding context from which the PSK was derived and in which it should
be used. If available, this is used as the ImportedIdentity.context value. We refer to an
external PSK without such context as "context-free".</t>
      <t>Thus, in considering the source-independence and compound authentication requirements, the PSK
importer interface described in this document aims to achieve the following goals:</t>
      <ol spacing="normal" type="1">
        <li>Externally provisioned PSKs imported into a TLS connection achieve compound authentication
of the provisioning process and connection.</li>
        <li>Context-free PSKs only achieve authentication within the context of a single connection.</li>
        <li>Imported PSKs are not used as IKM for two different KDFs.</li>
        <li>Imported PSKs do not collide with future protocol versions and KDFs.</li>
      </ol>
      <t>There are no known related outputs or security issues caused from the process
for computing imported PSKs from an external PSK and the processing of existing
external PSKs used in (D)TLS 1.2 and below, as noted in <xref target="rollout" format="default"/>. However,
only limited analysis has been done, which is an additional reason why applications
<bcp14>SHOULD</bcp14> provision separate PSKs for (D)TLS 1.3 and prior versions, even when the
importer interface is used in (D)TLS 1.3.</t>
      <t>The PSK importer does not prevent applications from constructing non-importer PSK identities
that collide with imported PSK identities.</t>
    </section>
    <section anchor="privacy-considerations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>External PSK identities are commonly static by design so that endpoints may use them to
look up keying material. As a result, for some systems and use cases, this identity
may become a persistent tracking identifier.</t>
      <t>Note also that ImportedIdentity.context is visible in cleartext on the wire as part of
the PSK identity. Unless otherwise protected by a mechanism such as TLS Encrypted
ClientHello <xref target="I-D.ietf-tls-esni" format="default"/>, applications <bcp14>SHOULD NOT</bcp14> put sensitive information
in this field.</t>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>IANA has created the "TLS KDF Identifiers" registry under the existing "Transport Layer Security (TLS) Parameters" registry.</t>
      <t>The entries in the registry are as follows:</t>
      <table anchor="kdf-registry" align="center">
        <name>TLS KDF Identifiers Registry</name>
        <thead>
          <tr>
            <th align="left">Value</th>
	    <th align="left">KDF Description</th>
            <th align="left">Reference</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">0x0000</td>
	    <td align="left">Reserved</td>
            <td align="left">RFC 9258</td>
          </tr>
          <tr>
	    <td align="left">0x0001</td>
            <td align="left">HKDF_SHA256</td>
            <td align="left"><xref target="RFC5869" format="default"/></td>
          </tr>
          <tr>
            <td align="left">0x0002</td>
	    <td align="left">HKDF_SHA384</td>
            <td align="left"><xref target="RFC5869" format="default"/></td>
          </tr>
        </tbody>
      </table>
      <t>New target KDF values are allocated according to the following process:</t>
      <ul spacing="normal">
        <li>Values in the range 0x0000-0xfeff are assigned via Specification Required <xref target="RFC8126" format="default"/>.</li>
        <li>Values in the range 0xff00-0xffff are reserved for Private Use <xref target="RFC8126" format="default"/>.</li>
      </ul>
      <t>The procedures for requesting values in the Specification Required space are specified in <xref target="RFC8447" sectionFormat="of" section="17"/>.</t>
    </section>
  </middle>
  <back>

    <displayreference target="I-D.ietf-tls-esni" to="ECH"/>
    <displayreference target="RFC9000" to="QUIC"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8447.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>

<!-- [I-D.ietf-tls-dtls13] Published as RFC 9147. -->
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9147.xml"/>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5056.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5869.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>

      </references>
      <references>
        <name>Informative References</name>

<reference anchor="SHA2" target="https://doi.org/10.6028/NIST.FIPS.180-4">
        <front>
          <title>Secure Hash Standard (SHS)</title>
          <author>
            <organization showOnFrontPage="true">National Institute of Standards and Technology</organization>
          </author>
          <date year="2015" month="August"/>
        </front>
        <seriesInfo name="FIPS PUB" value="180-4"/>
        <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
      </reference>

        <reference anchor="Selfie" target="https://eprint.iacr.org/2019/347.pdf">
	  <front>
	    <title>Selfie: reflections on TLS 1.3 with PSK</title>
          <author initials="N" surname="Drucker" fullname="Nir Drucker">
            <organization />
          </author>
          <author initials="S" surname="Gueron" fullname="Shay Gueron">
            <organization />
          </author>
          <date month="May" year="2021"/>
        </front>
          <seriesInfo name="DOI" value="10.1007/s00145-021-09387-y"/>
        </reference>

        <reference anchor="Kraw10" target="https://eprint.iacr.org/2010/264">
          <front>
            <title>Cryptographic Extraction and Key Derivation: The HKDF Scheme</title>
            <author initials="H" surname="Krawczyk" fullname="Hugo Krawczyk">
              <organization/>
            </author>
	    <date month="May" year="2010"/>
          </front>
	  <refcontent>Proceedings of Crypto 2010</refcontent>
        </reference>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7301.xml"/>


        <reference anchor="BAA15" target='https://doi.org/10.14722/ndss.2015.23277'>
          <front>
            <title>Verified Contributive Channel Bindings for Compound Authentication</title>
            <author initials="K" surname="Bhargavan" fullname="Karthikeyan Bhargavan">
              <organization/>
            </author>
            <author initials="A" surname="Delignat-Lavaud" fullname="Antoine Delignat-Lavaud">
              <organization/>
            </author>
            <author initials="A" surname="Pironti" fullname="Alfredo Pironti">
              <organization/>
            </author>
            <date month="February" year="2015"/>
          </front>
          <refcontent>Proceedings 2015 Network and Distributed System Security</refcontent>
          <seriesInfo name="DOI" value="10.14722/ndss.2015.23277"/>
        </reference>

<!-- [ECH] [I-D.ietf-tls-esni] IESG state I-D Exists -->
<xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-tls-esni.xml"/>
   
      </references>
    </references>
    <section anchor="mitigate-selfie" numbered="true" toc="default">
      <name>Addressing Selfie</name>
      <t>The Selfie attack <xref target="Selfie" format="default"/> relies on a misuse of the PSK interface.
The PSK interface makes the implicit assumption that each PSK
is known only to one client and one server. If multiple clients or
multiple servers with distinct roles share a PSK, TLS only
authenticates the entire group. A node successfully authenticates
its peer as being in the group whether the peer is another node
or itself. Note that this case can also occur when there are two
      nodes sharing a PSK without predetermined roles.</t>
      
      <t>Applications that require authenticating finer-grained roles while still
configuring a single shared PSK across all nodes can resolve this
mismatch either by exchanging roles over the TLS connection after
the handshake or by incorporating the roles of both the client and the server
into the IPSK context string. For instance, if an application
identifies each node by the Media Access Control (MAC) address, it could use the following
context string.</t>
 <sourcecode name="" type="">
  struct {
    opaque client_mac&lt;0..2^8-1&gt;;
    opaque server_mac&lt;0..2^8-1&gt;;
  } Context;
</sourcecode>
      <t>If an attacker then redirects a ClientHello intended for one node to a different
node, including the node that generated the ClientHello, the receiver will
compute a different context string and the handshake will not complete.</t>
      <t>Note that, in this scenario, there is still a single shared PSK across all nodes,
so each node must be trusted not to impersonate another node's role.</t>
    </section>
    <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>The authors thank <contact fullname="Eric Rescorla"/> and <contact fullname="Martin Thomson"/> for discussions that led to the
production of this document, as well as <contact fullname="Christian Huitema"/> for input regarding privacy
considerations of external PSKs. <contact fullname="John Preuß Mattsson"/> provided input regarding PSK importer
deployment considerations. <contact fullname="Hugo Krawczyk"/> provided guidance for the security considerations.
<contact fullname="Martin Thomson"/>, <contact fullname="Jonathan Hoyland"/>, <contact fullname="Scott Hollenbeck"/>, <contact fullname="Benjamin Kaduk"/>, and others all
provided reviews, feedback, and suggestions for improving the document.</t>
    </section>
  </back>
</rfc>
