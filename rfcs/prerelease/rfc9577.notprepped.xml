<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-privacypass-auth-scheme-15" number="9577" submissionType="IETF" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true" updates="" obsoletes="" xml:lang="en" version="3">

  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="Privacy Pass Authentication">The Privacy Pass HTTP Authentication Scheme</title>
    <seriesInfo name="RFC" value="9577"/>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
	  <region>California</region>
	  <code>95014</code>
	  <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="S." surname="Valdez" fullname="Steven Valdez">
      <organization>Google LLC</organization>
      <address>
        <email>svaldez@chromium.org</email>
      </address>
    </author>
    <author initials="C. A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Cloudflare</organization>
      <address>
        <email>caw@heapingbits.net</email>
      </address>
    </author>
    <date year="2024" month="June"/>
    <area>sec</area>
    <workgroup>privacypass</workgroup>
    <keyword>anonymous</keyword>
    <keyword>authorization</keyword>
    <keyword>crypto</keyword>
    <abstract>
      <t>This document defines an HTTP authentication scheme for Privacy Pass,
a privacy-preserving authentication mechanism used for authorization.
The authentication scheme specified in this document can be used by Clients
to redeem Privacy Pass tokens with an Origin. It can also be used by
Origins to challenge Clients to present Privacy Pass tokens.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Privacy Pass tokens are unlinkable authenticators that can be used to
anonymously authorize a Client (see
<xref target="RFC9576"/>).
Tokens are generated by token Issuers, on the basis of authentication,
attestation, or some previous action such as solving a CAPTCHA. A Client
possessing such a token is able to prove that it was able to get a token
issued, without allowing the relying party redeeming the Client's token
(the Origin) to link it with the issuance flow.</t>
      <t>Different types of authenticators, using different token issuance protocols,
can be used as Privacy Pass tokens.</t>
      <t>This document defines a common HTTP authentication scheme
(<xref section="11" sectionFormat="comma" target="RFC9110"/>), "PrivateToken", that allows Clients to redeem various
kinds of Privacy Pass tokens.</t>
      <t>Clients and relying parties (Origins) interact using this scheme to perform the
token challenge and token redemption flow. In particular, Origins challenge
Clients for a token with an HTTP authentication challenge (using the
<tt>WWW-Authenticate</tt> response header field). Clients can then react to that
challenge by issuing a new request with a corresponding token (using the <tt>Authorization</tt>
request header field). Clients generate tokens that match the Origin's token
challenge by running one of the token issuance protocols defined in
<xref target="RFC9578"/>. The act of presenting a token in an
<tt>Authorization</tt> request header field is referred to as "token redemption". This
interaction between the Client and Origin is shown below.</t>

      <figure anchor="fig-overview">
        <name>Challenge and Redemption Protocol Flow</name>
        <artset>
          <artwork type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="456" viewBox="0 0 456 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
              <path d="M 8,32 L 8,64" fill="none" stroke="black"/>
              <path d="M 40,64 L 40,176" fill="none" stroke="black"/>
              <path d="M 80,32 L 80,64" fill="none" stroke="black"/>
              <path d="M 328,32 L 328,64" fill="none" stroke="black"/>
              <path d="M 360,64 L 360,112" fill="none" stroke="black"/>
              <path d="M 360,144 L 360,176" fill="none" stroke="black"/>
              <path d="M 400,32 L 400,64" fill="none" stroke="black"/>
              <path d="M 8,32 L 80,32" fill="none" stroke="black"/>
              <path d="M 328,32 L 400,32" fill="none" stroke="black"/>
              <path d="M 8,64 L 80,64" fill="none" stroke="black"/>
              <path d="M 328,64 L 400,64" fill="none" stroke="black"/>
              <path d="M 40,96 L 56,96" fill="none" stroke="black"/>
              <path d="M 336,96 L 352,96" fill="none" stroke="black"/>
              <path d="M 48,160 L 96,160" fill="none" stroke="black"/>
              <path d="M 280,160 L 360,160" fill="none" stroke="black"/>
              <polygon class="arrowhead" points="360,96 348,90.4 348,101.6" fill="black" transform="rotate(0,352,96)"/>
              <polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
              <g class="text">
                <text x="44" y="52">Origin</text>
                <text x="364" y="52">Client</text>
                <text x="136" y="100">WWW-Authenticate:</text>
                <text x="268" y="100">TokenChallenge</text>
                <text x="284" y="132">(Run</text>
                <text x="340" y="132">issuance</text>
                <text x="416" y="132">protocol)</text>
                <text x="164" y="164">Authorization:</text>
                <text x="248" y="164">token</text>
              </g>
            </svg>
          </artwork>
          <artwork type="ascii-art"><![CDATA[
+--------+                              +--------+
| Origin |                              | Client |
+---+----+                              +---+----+
    |                                       |
    +-- WWW-Authenticate: TokenChallenge -->|
    |                                       |
    |                            (Run issuance protocol)
    |                                       |
    |<------ Authorization: token ----------+
    |                                       |
]]></artwork>
        </artset>
      </figure>
      <t>In addition to working with different token issuance protocols, this scheme
optionally supports the use of tokens that are associated with Origin-chosen
contexts and specific Origin names. Relying parties that request and redeem
tokens can choose a specific kind of token, as appropriate for its use case.
These options (1) allow for different deployment models to prevent double-spending and (2) allow for both interactive (online challenges) and non-interactive (pre-fetched) tokens.</t>
      <section anchor="terminology">
        <name>Terminology</name>
         <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
         "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
         "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
         "<bcp14>SHOULD NOT</bcp14>",
         "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
         "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
         are to be interpreted as described in BCP&nbsp;14
         <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
         when, they appear in all capitals, as shown here.</t>
        <t>Unless otherwise specified, this document encodes protocol messages in TLS
notation from
<xref target="RFC8446" sectionFormat="comma" section="3"/>.</t>
        <t>This document uses the terms "Client", "Origin", "Issuer", "issuance protocol",
and "Token" as defined in <xref target="RFC9576"/>. It additionally
uses the following terms in more specific ways:</t>
        <dl spacing="normal">
          <dt>Issuer key:</dt><dd>Keying material that can be used with an issuance protocol
to create a signed token.</dd>
          <dt>Token challenge:</dt><dd>A request for tokens sent from an Origin to a Client, using
the <tt>WWW-Authenticate</tt> HTTP header field. This challenge identifies a specific
token Issuer and issuance protocol. Token challenges optionally include
one or both of the following: a redemption context (see <xref target="context-construction"/>) and
a list of associated Origins. These optional values can then
be bound to the token that is issued.</dd>
          <dt>Token redemption:</dt><dd>An action by which a Client presents a token to an Origin
in an HTTP request, using the <tt>Authorization</tt> HTTP header field.</dd>
        </dl>
      </section>
    </section>
    <section anchor="challenge-redemption">
      <name>HTTP Authentication Scheme</name>
      <t>Token redemption is performed using HTTP authentication
(<xref section="11" sectionFormat="comma" target="RFC9110"/>), with the scheme "PrivateToken". Origins challenge
Clients to present a token from a specific Issuer (<xref target="challenge"/>). Once a
Client has received a token from that Issuer or already has a valid token
available, it presents the token to the Origin (<xref target="redemption"/>). The process of
presenting a token as authentication to an Origin is also referred to
as "spending" a token.</t>
      <t>In order to prevent linkability across different transactions, Clients
will often present a particular "PrivateToken" only once. Origins can link multiple
transactions to the same Client if that Client spends the same token value more
than once. As such, Origins ought to expect at most one unique token
value, carried in one request, for each challenge.</t>
      <t>The rest of this section describes the token challenge and redemption interactions
in more detail.</t>
      <section anchor="challenge">
        <name>Token Challenge</name>
        <t>Origins send a token challenge to Clients in a <tt>WWW-Authenticate</tt> header field
with the "PrivateToken" scheme. This authentication scheme has two mandatory parameters:
one containing a token challenge and another containing the <tt>token-key</tt> used for
producing (and verifying) a corresponding token.</t>
        <t>Origins that support the "PrivateToken" authentication scheme need to handle
the following tasks in constructing the <tt>WWW-Authenticate</tt> header field:</t>
        <ol spacing="normal" type="1"><li>Select which Issuer to use, and configure the Issuer name and <tt>token-key</tt> to
include in <tt>WWW-Authenticate</tt> token challenges. The Issuer name is included in
the token challenge, and the Issuer <tt>token-key</tt> is used to populate the
<tt>WWW-Authenticate</tt> header parameter.</li>
          <li>Determine a redemption context construction to include in the
token challenge, as discussed in <xref target="context-construction"/>.</li>
          <li>Select the Origin information to include in the token challenge. This can
be empty to allow fully cross-Origin tokens, a single Origin name that
matches the Origin itself for per-Origin tokens, or a list of Origin names
containing the Origin itself. See <xref section="3.4" sectionFormat="of" target="RFC9576"/> for more
information about the difference between cross-Origin and per-Origin tokens.</li>
        </ol>
        <t>Once these decisions are made, Origins construct the <tt>WWW-Authenticate</tt> header
by first constructing the token challenge as described in <xref target="challenge-structure"/>.
Origins send challenges as described in <xref target="send-challenge"/>, and Clients process
them as described in Sections&nbsp;<xref target="process-challenge" format="counter"/> and <xref target="caching" format="counter"/>.</t>
        <section anchor="challenge-structure">
          <name>Token Challenge Structure</name>

          <t>This document defines the default challenge structure that can be used across
token types, although future token types <bcp14>MAY</bcp14> extend or modify the structure
of the challenge; see <xref target="token-types"/> for the registry information
that establishes and defines the relationship between <tt>token_type</tt> and the
contents of the TokenChallenge message.</t>
          <t>All token challenges <bcp14>MUST</bcp14> begin with a 2-octet integer that defines the
token type, in network byte order. This type indicates the issuance protocol
used to generate the token and determines the structure and semantics of the rest of
the structure. Values are registered in an IANA registry; see <xref target="token-types"/>. Clients <bcp14>MUST</bcp14>
ignore challenges with token types they do not support.</t>
          <t>Even when a given token type uses the default challenge structure,
the requirements on the presence or interpretation of the fields can differ
across token types. For example, some token types might require that <tt>origin_info</tt>
is non-empty, while others allow it to be empty.</t>
          <t>The default TokenChallenge message has the following structure:</t>
          <artwork><![CDATA[
struct {
    uint16_t token_type;
    opaque issuer_name<1..2^16-1>;
    opaque redemption_context<0..32>;
    opaque origin_info<0..2^16-1>;
} TokenChallenge;
]]></artwork>
          <t>The structure fields are defined as follows:</t>
          <ul spacing="normal">
            <li><tt>token_type</tt> is a 2-octet integer, in network byte order, as described
above.</li>
            <li><tt>issuer_name</tt> is an ASCII string that identifies the Issuer, using the format of a
server name as defined in <xref target="server-name"/>. This name identifies the Issuer that is allowed to
issue tokens that can be redeemed by this Origin. The field that stores this string in the challenge
is prefixed with a 2-octet integer indicating the length, in network byte order.</li>
            <li><tt>redemption_context</tt> is a field that is either 0 or 32 bytes, prefixed with a single
octet indicating the length (either 0 or 32). If the value is non-empty, it is a 32-byte value
generated by the Origin that allows the Origin to require that Clients fetch tokens
bound to a specific context, as opposed to reusing tokens that were fetched for other
contexts. See <xref target="context-construction"/> for example contexts that might be useful in
practice. Challenges with <tt>redemption_context</tt> values of invalid lengths <bcp14>MUST</bcp14> be ignored.</li>
            <li><tt>origin_info</tt> is an ASCII string that either is empty or contains one or more
Origin names that allow a token to be scoped to a specific set of Origins. Each
Origin name uses the format of a server name as defined in <xref target="server-name"/>. The string
is prefixed with a 2-octet integer indicating the length, in network byte order.
If empty, any non-Origin-specific token can be redeemed. If the string contains
multiple Origin names, they are delimited with commas (",") without any whitespace.
If this field is not empty, the Origin <bcp14>MUST</bcp14> include its own name as one of the
names in the list.</li>
          </ul>
          <t>If <tt>origin_info</tt> contains multiple Origin names, this means the challenge is valid
for any of the Origins in the list, including the Origin that issued the challenge
(which must always be present in the list if it is non-empty; see <xref target="process-challenge"/>).
This can be useful in settings where Clients pre-fetch and cache tokens for a particular
challenge -- including the <tt>origin_info</tt> field -- and then later redeem these tokens
with one of the Origins in the list. See <xref target="caching"/> for more discussion about
token caching.</t>
          <section anchor="server-name">
            <name>Server Name Encoding</name>
            <t>Server names contained in a token challenge are ASCII strings that contain a hostname
and optional port, where the port is implied to be "443" if missing. The names use the
format of the authority portion of a URI as defined in <xref section="3.2" sectionFormat="of" target="RFC3986"/>.
The names <bcp14>MUST NOT</bcp14> include a "userinfo" portion of an authority. For example, a valid
server name might be "issuer.example.com" or "issuer.example.com:8443",
but not "issuer@example.com".</t>
          </section>
          <section anchor="context-construction">
            <name>Redemption Context Construction</name>
            <t>The TokenChallenge redemption context allows the Origin to determine the
context in which a given token can be redeemed. This value can be a unique
per-request nonce, constructed from 32 freshly generated random bytes. It
can also represent state or properties of the Client session. Some example
properties and methods for constructing the corresponding context are below.
This list is not exhaustive.</t>
            <dl spacing="normal">
              <dt>Context bound to a given time window:</dt><dd>Construct the redemption context as
F(current time window), where F is a pseudorandom function.</dd>
              <dt>Context bound to a Client network based on Autonomous System Number (ASN):</dt><dd>Construct the redemption context as
F(Client ASN), where F is a pseudorandom function.</dd>
              <dt>Context bound to a given time window and Client network:</dt><dd>Construct the redemption
context as F(current time window, Client ASN), where F is a pseudorandom function.</dd>
            </dl>
            <t>Preventing double-spending on tokens requires the Origin to keep state
associated with the redemption context. An empty redemption context is not
bound to any property of the Client request, so state to prevent double-spending
needs to be stored and shared across all Origin servers that can accept tokens until
<tt>token-key</tt> expiration or rotation. For a non-empty redemption context, the
double-spend state only needs to be stored across the set of Origin servers that will
accept tokens with that redemption context.</t>
            <t>Origins that share redemption contexts, i.e., by using the same redemption
context, choosing the same Issuer, and providing the same <tt>origin_info</tt> field in
the TokenChallenge, must necessarily share state required to enforce
double-spend prevention. Origins should consider the operational complexity of this
shared state before choosing to share redemption contexts. Failure to
successfully synchronize this state and use it for double-spend prevention can
allow Clients to redeem tokens to one Origin that were issued after an
interaction with another Origin that shares the context.</t>
          </section>
        </section>
        <section anchor="send-challenge">
          <name>Sending Token Challenges</name>
          <t>When used in an authentication challenge, the "PrivateToken" scheme uses the
following parameters:</t>
          <ul spacing="normal">
            <li><tt>challenge</tt>, which contains a base64url TokenChallenge value, encoded per <xref target="RFC4648"/>. This document follows the default padding behavior described in
<xref section="3.2" sectionFormat="of" target="RFC4648"/>, so the base64url value <bcp14>MUST</bcp14> include padding.
As an authentication parameter (<tt>auth-param</tt> from <xref section="11.2" sectionFormat="comma" target="RFC9110"/>),
the value can be either a token or a quoted-string and might be required to
be a quoted-string if the base64url string includes "=" characters. This
parameter is required for all challenges.</li>
            <li><tt>token-key</tt>, which contains a base64url encoding of the public key for
use with the issuance protocol indicated by the challenge. See <xref target="RFC9578"/>
for more information about how this public key is used by the issuance protocols
described in that specification. The encoding of
the public key is determined by the token type; see <xref target="token-types"/>.
As with <tt>challenge</tt>, the base64url value <bcp14>MUST</bcp14> include padding. As an
authentication parameter (<tt>auth-param</tt> from <xref section="11.2" sectionFormat="comma" target="RFC9110"/>), the
value can be either a token or a quoted-string and might be required to be a
quoted-string if the base64url string includes "=" characters. This parameter
<bcp14>MAY</bcp14> be omitted in deployments where Clients are able to retrieve the Issuer key
using an out-of-band mechanism.</li>
            <li><tt>max-age</tt>, which is an optional parameter that consists of the number of seconds for
which the challenge will be accepted by the Origin.</li>
          </ul>
          <t>The header field <bcp14>MAY</bcp14> also include the standard <tt>realm</tt> parameter, if desired.
Issuance protocols <bcp14>MAY</bcp14> define other parameters, some of which might be required.
Clients <bcp14>MUST</bcp14> ignore parameters in challenges that are not defined for the issuance
protocol corresponding to the token type in the challenge.</t>
          <t>As an example, the <tt>WWW-Authenticate</tt> header field could look like this:</t>
          <artwork><![CDATA[
WWW-Authenticate:
  PrivateToken challenge="abc...", token-key="123..."
]]></artwork>
          <section anchor="sending-multiple-token-challenges">
            <name>Sending Multiple Token Challenges</name>
            <t>It is possible for the <tt>WWW-Authenticate</tt> header field to include multiple
challenges (<xref section="11.6.1" sectionFormat="comma" target="RFC9110"/>). This allows the Origin to indicate
support for different token types or different Issuers, or to include multiple redemption
contexts. For example, the <tt>WWW-Authenticate</tt> header field could look like this:</t>
            <artwork><![CDATA[
WWW-Authenticate:
  PrivateToken challenge="abc...", token-key="123...",
  PrivateToken challenge="def...", token-key="234..."
]]></artwork>
            <t>Origins should only include challenges for different types of issuance
protocols with functionally equivalent properties. For instance, both issuance
protocols in <xref target="RFC9578"/> have the same functional properties, albeit with
different mechanisms for verifying the resulting tokens during redemption.
Since Clients are free to choose which challenge they want to consume when
presented with options, mixing multiple challenges with different functional
properties for one use case is nonsensical. If the Origin has a preference
for one challenge over another (for example, if one uses a token type
that is faster to verify), it can sort it to be first in the list
of challenges as a hint to the Client.</t>
          </section>
        </section>
        <section anchor="process-challenge">
          <name>Processing Token Challenges</name>
          <t>Upon receipt of a challenge, a Client validates the TokenChallenge structure
before taking any action, such as fetching a new token or redeeming a token
in a new request. Validation requirements are as follows:</t>
          <ul spacing="normal">
            <li>The <tt>token_type</tt> is recognized and supported by the Client;</li>
            <li>The TokenChallenge structure is well-formed; and</li>
            <li>If the <tt>origin_info</tt> field is non-empty, the name of the Origin that issued the
authentication challenge is included in the list of Origin names. Comparison
of the Origin name that issued the authentication challenge against elements
in the <tt>origin_info</tt> list is done via case-insensitive equality checks.</li>
          </ul>
          <t>If validation fails, the Client <bcp14>MUST NOT</bcp14> fetch or redeem a token based on the
challenge. Clients <bcp14>MAY</bcp14> have further restrictions and requirements around
validating when a challenge is considered acceptable or valid. For example,
Clients can choose to ignore challenges that list Origin names for which the
current connection is not authoritative (according to the TLS certificate).</t>
          <t>Caching and pre-fetching of tokens are discussed in <xref target="caching"/>.</t>
        </section>
        <section anchor="caching">
          <name>Token Caching</name>
          <t>Clients can generate multiple tokens from a single TokenChallenge and cache
them for future use. This improves privacy by separating the time of token
issuance from the time of token redemption, and also allows Clients to avoid
the overhead of receiving new tokens via the issuance protocol.</t>
          <t>Cached tokens can only be redeemed when they match all of the fields in the
TokenChallenge: <tt>token_type</tt>, <tt>issuer_name</tt>, <tt>redemption_context</tt>, and <tt>origin_info</tt>.
Clients ought to store cached tokens based on all of these fields, to
avoid trying to redeem a token that does not match. Note that each token
has a unique Client nonce, which is sent in token redemption (<xref target="redemption"/>).</t>
          <t>If a Client fetches a batch of multiple tokens for future use that are bound
to a specific redemption context (the <tt>redemption_context</tt> in the TokenChallenge
was not empty), Clients <bcp14>SHOULD</bcp14> discard these tokens upon flushing state such as
HTTP cookies <xref target="I-D.ietf-httpbis-rfc6265bis"/>, or if there is a network
change and the Client does not have any Origin-specific state like HTTP cookies.
Using these tokens in a context that otherwise would not be linkable to the
original context could allow the Origin to recognize a Client.</t>
        </section>
      </section>
      <section anchor="redemption">
        <name>Token Redemption</name>
        <t>The output of the issuance protocol is a token that corresponds to the Origin's
challenge (see <xref target="challenge"/>).</t>
        <section anchor="token-structure">
          <name>Token Structure</name>
          <t>A token is a structure that begins with a 2-octet field that indicates a token
type, which <bcp14>MUST</bcp14> match the <tt>token_type</tt> in the TokenChallenge structure. This value
determines the structure and semantics of the rest of the token structure.</t>
          <t>This document defines the default token structure that can be used across
token types, although future token types <bcp14>MAY</bcp14> extend or modify the structure
of the token; see <xref target="token-types"/> for the registry information that
establishes and defines the relationship between <tt>token_type</tt> and the contents
of the token structure.</t>
          <t>The default token message has the following structure:</t>
          <artwork><![CDATA[
struct {
    uint16_t token_type;
    uint8_t nonce[32];
    uint8_t challenge_digest[32];
    uint8_t token_key_id[Nid];
    uint8_t authenticator[Nk];
} Token;
]]></artwork>
          <t>The structure fields are defined as follows:</t>
          <ul spacing="normal">
            <li><tt>token_type</tt> is a 2-octet integer, in network byte order, as described
above.</li>
            <li><tt>nonce</tt> is a 32-octet value containing a Client-generated random nonce.</li>
            <li><tt>challenge_digest</tt> is a 32-octet value containing the hash of the
original TokenChallenge, SHA-256(TokenChallenge), where SHA-256 is as defined
in <xref target="SHS"/>. Changing the hash function to something
other than SHA-256 would require defining a new token type and token structure
(since the contents of <tt>challenge_digest</tt> would be computed differently),
which can be done in a future specification.</li>
            <li><tt>token_key_id</tt> is a Nid-octet identifier for the token authentication
key. The value of this field is defined by the <tt>token_type</tt> and corresponding
issuance protocol.</li>
            <li><tt>authenticator</tt> is a Nk-octet authenticator that is cryptographically bound
to the preceding fields in the token; see <xref target="verification"/> for more information
about how this field is used in verifying a token. The <tt>token_type</tt> and corresponding
issuance protocol determine the value of the <tt>authenticator</tt> field and how it is computed.
The value of constant Nk depends on <tt>token_type</tt>, as defined in <xref target="token-types"/>.</li>
          </ul>
          <t>The <tt>authenticator</tt> value in the token structure is computed over the <tt>token_type</tt>,
<tt>nonce</tt>, <tt>challenge_digest</tt>, and <tt>token_key_id</tt> fields. A token is considered valid
if token verification succeeds; see <xref target="verification"/> for details about
verifying the token and its <tt>authenticator</tt> value.</t>
        </section>
        <section anchor="sending-tokens">
          <name>Sending Tokens</name>
          <t>When used for Client authorization, the "PrivateToken" authentication
scheme defines one parameter, <tt>token</tt>, which contains the base64url-encoded
token structure. As with the challenge parameters (<xref target="challenge"/>), the base64url
value <bcp14>MUST</bcp14> include padding. As an authentication parameter (<tt>auth-param</tt> from
<xref section="11.2" sectionFormat="comma" target="RFC9110"/>), the value can be either a token or a
quoted-string and might be required to be a quoted-string if the base64url
string includes "=" characters. All unknown or unsupported parameters to
"PrivateToken" authentication credentials <bcp14>MUST</bcp14> be ignored.</t>
          <t>Clients present this token structure to Origins in a new HTTP request using
the <tt>Authorization</tt> header field as follows:</t>
          <artwork><![CDATA[
Authorization: PrivateToken token="abc..."
]]></artwork>
          <t>For context-bound tokens, Origins store or reconstruct the contexts of previous
TokenChallenge structures in order to validate the token. A TokenChallenge can
be bound to a specific TLS session with a Client, but Origins can also accept
tokens for valid challenges in new sessions. Origins <bcp14>SHOULD</bcp14> implement some form
of double-spend prevention that prevents a token with the same nonce from being
redeemed twice. Double-spend prevention ensures that Clients cannot replay tokens
for previous challenges. See <xref target="replay-attacks"/> for more information about replay
attacks. For context-bound tokens, this double-spend prevention can require no state
or minimal state, since the context can be used to verify token uniqueness.</t>
        </section>
        <section anchor="verification">
          <name>Token Verification</name>
          <t>A token consists of some input cryptographically bound to an <tt>authenticator</tt>
value, such as a digital signature. Verifying a token consists of checking that
the <tt>authenticator</tt> value is correct.</t>
          <t>The <tt>authenticator</tt> value is as computed when running and finalizing the issuance
protocol corresponding to the token type with the following values as the input:</t>
          <artwork><![CDATA[
struct {
    uint16_t token_type;
    uint8_t nonce[32];
    uint8_t challenge_digest[32];
    uint8_t token_key_id[Nid];
} AuthenticatorInput;
]]></artwork>
          <t>The values of these fields are as described in <xref target="token-structure"/>. The cryptographic
verification check depends on the token type; see
Sections&nbsp;<xref target="RFC9578" section="5.4" sectionFormat="bare"/> and <xref target="RFC9578" section="6.4" sectionFormat="bare"/> of <xref target="RFC9578"/> for verification instructions for the issuance
protocols described in that specification. As such, the security properties of the
token, e.g., the probability that one can forge an <tt>authenticator</tt> value without
invoking the issuance protocol, depend on the cryptographic algorithm used by
the issuance protocol as determined by the token type.</t>
        </section>
      </section>
    </section>
    <section anchor="client-behavior">
      <name>Client Behavior</name>
      <t>When a Client receives one or more token challenges in response to a request,
the Client has a set of choices to make:</t>
      <ul spacing="normal">
        <li>Whether or not to redeem a token via a new request to the Origin.</li>
        <li>Whether to redeem a previously issued and cached token or redeem a token freshly issued from the issuance protocol.</li>
        <li>If multiple challenges were sent, which challenge to use for redeeming a
token on a subsequent request.</li>
      </ul>
      <t>The approach to these choices depends on the use case of the application, as
well as the deployment model (see <xref section="4" sectionFormat="of" target="RFC9576"/> for discussion
of the different deployment models).</t>
      <section anchor="choosing-to-redeem-tokens">
        <name>Choosing to Redeem Tokens</name>
        <t>Some applications of tokens might require Clients to always present a token
as authentication in order to successfully make requests. For example, a restricted
service that wants to only allow access to valid users but wants to do so without learning
specific user credential information could use tokens that are based on attesting user
credentials. In these kinds of use cases, Clients will need to always redeem a
token in order to successfully make a request.</t>
        <t>Many other use cases for Privacy Pass tokens involve open services that must work
with any Client, including those that either cannot redeem tokens or can only sometimes redeem
tokens. For example, a service can use tokens as a way to reduce the incidence of
presenting CAPTCHAs to users. In such use cases, services will regularly encounter
Clients that cannot redeem a token or choose not to. In order to mitigate the risk
of these services relying on always receiving tokens, Clients that are capable of
redeeming tokens can ignore token challenges (and instead behave as if they were a Client
that either doesn't support redeeming tokens or is unable to generate a new token, by not
sending a new request that contains a token to redeem) with some
non-trivial probability. See <xref section="5.1" sectionFormat="of" target="RFC9576"/> for further considerations
regarding avoiding discriminatory behavior across Clients when using Privacy Pass tokens.</t>
        <t>Clients might also choose to not redeem tokens in subsequent requests when the
token challenges indicate erroneous or malicious behavior on the part of the
challenging Origin. For example, if a Client's ability to generate tokens via an
Attester and Issuer is limited to a certain rate, a malicious Origin could send
an excessive number of token challenges with unique redemption contexts
in order to (1)&nbsp;cause the Client to exhaust its ability to generate new tokens or (2)&nbsp;overwhelm issuance servers. Based on the specific deployment, the limits here will vary, but Clients <bcp14>SHOULD</bcp14> have some implementation-specific policy to minimize the number of tokens that can be retrieved by Origins.</t>
      </section>
      <section anchor="choosing-between-multiple-challenges">
        <name>Choosing between Multiple Challenges</name>
        <t>A single response from an Origin can include multiple token challenges.
For example, a set of challenges could include different token types
and Issuers, to allow Clients to choose a preferred Issuer or type.</t>
        <t>If Clients choose to respond, Clients should satisfy exactly one of
the challenges presented. The choice of which challenge to use for redeeming
tokens is up to Client policy. This can involve which token types are
supported or preferred, which Issuers are supported or preferred, or whether
or not the Client is able to use cached tokens based on the redemption context
or Origin information in the challenge. See <xref target="caching"/> for more discussion
on token caching. Regardless of how the choice is made, it <bcp14>SHOULD</bcp14> be done in a
consistent manner to ensure that the choice does not reveal information about the
specific Client; see <xref section="6.2" sectionFormat="of" target="RFC9576"/> for more details on the privacy
implications of issuance consistency.</t>
      </section>
    </section>
    <section anchor="origin-behavior">
      <name>Origin Behavior</name>
      <t>Origins choose what token challenges to send to Clients; these token challenges will vary,
depending on the use case and deployment model. The Origin chooses
which token types, Issuers, redemption contexts, and Origin information to include
in challenges. If an Origin sends multiple challenges, each challenge <bcp14>SHOULD</bcp14>
be equivalent in terms of acceptability for token redemption, since Clients
are free to choose to generate tokens based on any of the challenges.</t>
      <t>Origins ought to consider the time involved in token issuance. Particularly,
a challenge that includes a unique redemption context will prevent a Client
from using cached tokens and thus can add more delay before the Client
is able to redeem a token.</t>
      <t>Origins <bcp14>SHOULD</bcp14> minimize the number of challenges sent to a particular Client
context (referred to as the "redemption context" in
<xref section="3.3" sectionFormat="of" target="RFC9576"/>), to avoid overwhelming Clients and Issuers
with token requests that might cause Clients to hit rate limits.</t>
      <section anchor="greasing">
        <name>Greasing</name>
        <t>In order to prevent Clients from becoming incompatible with new token challenges,
Origins <bcp14>SHOULD</bcp14> include random token types, from the reserved list of "greased"
types (defined in <xref target="token-types"/>), with some non-trivial probability.</t>
        <t>Additionally, for deployments where tokens are not required (such as when tokens
are used as a way to avoid showing CAPTCHAs), Origins <bcp14>SHOULD</bcp14> randomly
choose to not challenge Clients for tokens with some non-trivial probability.
This helps Origins ensure that their behavior for handling Clients that cannot
redeem tokens is maintained and exercised consistently.</t>
      </section>
    </section>
    <section anchor="sec-considerations">
      <name>Security Considerations</name>
      <t>This section contains security considerations for the "PrivateToken" authentication
scheme described in this document.</t>
      <section anchor="randomness-requirements">
        <name>Randomness Requirements</name>
        <t>All random values in the challenge and token <bcp14>MUST</bcp14> be
generated using a cryptographically secure source of randomness <xref target="RFC4086"/>.</t>
      </section>
      <section anchor="replay-attacks">
        <name>Replay Attacks</name>
        <t>Applications <bcp14>SHOULD</bcp14> constrain tokens to a single Origin unless the use case can
accommodate replay attacks. Replaying tokens is not necessarily a security
or privacy problem. As an example, it is reasonable for Clients to replay tokens
in contexts where token redemption does not induce side effects and in which
Client requests are already linkable. One possible setting where this applies
is where tokens are sent as part of 0-RTT data.</t>
        <t>If successful token redemption produces side effects, Origins <bcp14>SHOULD</bcp14> implement an
anti-replay mechanism to mitigate the harm of such replays. See <xref section="8" sectionFormat="comma" target="RFC8446"/>
and <xref section="9.2" sectionFormat="comma" target="RFC9001"/> for details about anti-replay mechanisms, as well as
<xref section="3" sectionFormat="comma" target="RFC8470"/> for discussion about safety considerations for 0-RTT
HTTP data.</t>
      </section>
      <section anchor="reflection-attacks">
        <name>Reflection Attacks</name>
        <t>The security properties of token challenges vary, depending on whether the
challenge contains a redemption context or not, as well as whether the
challenge is a per-Origin challenge or not. For example, cross-Origin tokens with empty
contexts can be reflected from one party by another, as shown below.</t>
        <figure anchor="fig-replay">
          <name>Reflection Attack Example</name>
          <artset>
            <artwork type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="176" width="488" viewBox="0 0 488 176" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                <path d="M 8,32 L 8,64" fill="none" stroke="black"/>
                <path d="M 40,64 L 40,160" fill="none" stroke="black"/>
                <path d="M 80,32 L 80,64" fill="none" stroke="black"/>
                <path d="M 184,32 L 184,64" fill="none" stroke="black"/>
                <path d="M 224,64 L 224,160" fill="none" stroke="black"/>
                <path d="M 272,32 L 272,64" fill="none" stroke="black"/>
                <path d="M 408,32 L 408,64" fill="none" stroke="black"/>
                <path d="M 440,64 L 440,160" fill="none" stroke="black"/>
                <path d="M 480,32 L 480,64" fill="none" stroke="black"/>
                <path d="M 8,32 L 80,32" fill="none" stroke="black"/>
                <path d="M 184,32 L 272,32" fill="none" stroke="black"/>
                <path d="M 408,32 L 480,32" fill="none" stroke="black"/>
                <path d="M 8,64 L 80,64" fill="none" stroke="black"/>
                <path d="M 184,64 L 272,64" fill="none" stroke="black"/>
                <path d="M 408,64 L 480,64" fill="none" stroke="black"/>
                <path d="M 40,96 L 64,96" fill="none" stroke="black"/>
                <path d="M 200,96 L 216,96" fill="none" stroke="black"/>
                <path d="M 224,112 L 240,112" fill="none" stroke="black"/>
                <path d="M 416,112 L 432,112" fill="none" stroke="black"/>
                <path d="M 232,128 L 296,128" fill="none" stroke="black"/>
                <path d="M 360,128 L 440,128" fill="none" stroke="black"/>
                <path d="M 48,144 L 64,144" fill="none" stroke="black"/>
                <path d="M 208,144 L 224,144" fill="none" stroke="black"/>
                <polygon class="arrowhead" points="440,112 428,106.4 428,117.6" fill="black" transform="rotate(0,432,112)"/>
                <polygon class="arrowhead" points="240,128 228,122.4 228,133.6" fill="black" transform="rotate(180,232,128)"/>
                <polygon class="arrowhead" points="224,96 212,90.4 212,101.6" fill="black" transform="rotate(0,216,96)"/>
                <polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
                <g class="text">
                  <text x="44" y="52">Origin</text>
                  <text x="228" y="52">Attacker</text>
                  <text x="444" y="52">Client</text>
                  <text x="132" y="100">TokenChallenge</text>
                  <text x="284" y="116">(reflect</text>
                  <text x="364" y="116">challenge)</text>
                  <text x="328" y="132">Token</text>
                  <text x="108" y="148">(reflect</text>
                  <text x="172" y="148">token)</text>
                </g>
              </svg>
            </artwork>
            <artwork type="ascii-art"><![CDATA[
+--------+            +----------+                +--------+
| Origin |            | Attacker |                | Client |
+---+----+            +----+-----+                +---+----+
    |                      |                          |
    +--- TokenChallenge -->|                          |
    |                      +-- (reflect challenge) -->|
    |                      |<-------- Token ----------+
    |<-- (reflect token) --+                          |
    |                      |                          |
]]></artwork>
          </artset>
        </figure>
      </section>
      <section anchor="token-exhaustion-attacks">
        <name>Token Exhaustion Attacks</name>
        <t>When a Client holds cross-Origin tokens with empty contexts, it
is possible for any Origin in the cross-Origin set to deplete that Client's
set of tokens. To prevent this from happening, tokens can be scoped to single
Origins (with non-empty <tt>origin_info</tt>) such that they can only be redeemed for
a single Origin. Alternatively, if tokens are cross-Origin tokens, Clients can use
alternate methods to prevent many tokens from being redeemed at once. For
example, if the Origin requests an excess of tokens, the Client could choose to
not present any tokens for verification if a redemption had already
occurred in a given time window.</t>
        <t>Token challenges that include non-empty <tt>origin_info</tt> bind tokens to one or more
specific Origins. As described in <xref target="process-challenge"/>, Clients only accept such
challenges from Origin names listed in the <tt>origin_info</tt> string if it is non-empty. Even if multiple
Origins are listed, a token can only be redeemed for an Origin if the challenge
has a match for the <tt>origin_info</tt>. For example, if "a.example.com" issues
a challenge with an <tt>origin_info</tt> string of "a.example.com,b.example.com", a
Client could redeem a token fetched for this challenge if and only if
"b.example.com" also included an <tt>origin_info</tt> string of
"a.example.com,b.example.com". On the other hand, if "b.example.com" had an
<tt>origin_info</tt> string of "b.example.com", "b.example.com,a.example.com", or
"a.example.com,b.example.com,c.example.com", the string would not match, and the
Client would need to use a different token.</t>
      </section>
      <section anchor="timing-correlation-attacks">
        <name>Timing Correlation Attacks</name>
        <t>Context-bound token challenges require Clients to obtain matching tokens when
challenged, rather than presenting a token that was obtained from a different
context in the past. This can make it more likely that issuance and redemption
events will occur at approximately the same time. For example, if a Client is
challenged for a token with a unique context at time T1 and then subsequently
obtains a token at time T2, a colluding Issuer and Origin can link this to the
same Client if T2 is unique to the Client. This linkability is less feasible as
the number of issuance events at time T2 increases. Depending on the <tt>max-age</tt>
token challenge parameter, Clients <bcp14>MAY</bcp14> try to add delay to the time between
being challenged and redeeming a token to make this sort of linkability more
difficult. For more discussion on correlation risks between token issuance and
redemption, see <xref section="6.3" sectionFormat="of" target="RFC9576"/>.</t>
      </section>
      <section anchor="cross-context-linkability-attacks">
        <name>Cross-Context Linkability Attacks</name>
        <t>As discussed in <xref target="challenge"/>, Clients <bcp14>SHOULD</bcp14> discard any context-bound tokens
upon flushing cookies or changing networks, to prevent an Origin from using the
redemption context state as a cookie to recognize Clients.</t>
      </section>
    </section>
    <section anchor="iana">
      <name>IANA Considerations</name>

      <section anchor="authentication-scheme">
        <name>Authentication Scheme</name>
        <t>IANA has registered the "PrivateToken" authentication scheme in the
"HTTP Authentication Schemes" subregistry of the "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry" as defined
in <xref section="16.4" sectionFormat="comma" target="RFC9110"/>.</t>
        <dl>
          <dt>Authentication Scheme Name:</dt>
          <dd>PrivateToken</dd>
          <dt>Reference:</dt>
          <dd>RFC 9577, <xref target="challenge-redemption"/></dd>
        </dl>
      </section>
      <section anchor="token-types">
        <name>Privacy Pass Token Types Registry</name>
        <t>IANA has created a new "Privacy Pass Token Types" registry in a new
"Privacy Pass" page to list identifiers for issuance protocols
defined for use with the Privacy Pass token authentication scheme. These
identifiers are 2-byte values, so the maximum possible value is
0xFFFF = 65535.</t>
        <t>New registrations need to list the following attributes:</t>
        <dl spacing="compact">
          <dt>Value:</dt>
          <dd>
            The 2-byte identifier for the algorithm.</dd>
          <dt>Name:</dt>
          <dd>Name of the issuance protocol.</dd>
          <dt>Token Structure:</dt>
          <dd>The contents of the token structure; see <xref target="redemption"/>.</dd>
          <dt>Token Key Encoding:</dt>
          <dd>The encoding of the <tt>token-key</tt> parameter; see <xref target="send-challenge"/>.</dd>
          <dt>TokenChallenge Structure:</dt>
          <dd>The contents of the TokenChallenge structure; see <xref target="challenge"/>.</dd>
          <dt>Publicly Verifiable:</dt>
          <dd>A Y/N value indicating if the output tokens have the
public verifiability property; see <xref section="3.5" sectionFormat="of" target="RFC9576"/>
for more details about this property.</dd>
          <dt>Public Metadata:</dt>
          <dd>A Y/N value indicating if the output tokens can contain
public metadata; see <xref section="3.5" sectionFormat="of" target="RFC9576"/>
for more details about this property.</dd>
          <dt>Private Metadata:</dt>
          <dd>A Y/N value indicating if the output tokens can contain
private metadata; see <xref section="3.5" sectionFormat="of" target="RFC9576"/>
for more details about this property.</dd>
          <dt>Nk:</dt>
          <dd>The length in bytes of an output authenticator.</dd>
          <dt>Nid:</dt>
          <dd>The length of the token key identifier.</dd>
          <dt>Change Controller:</dt><dd>The entity that is responsible for the definition of the registration.</dd>
          <dt>Reference:</dt>
          <dd>Where this algorithm is defined.</dd>
          <dt>Notes:</dt>
          <dd>Any notes associated with the entry.</dd>
        </dl>
        <t>New entries in this registry are subject to the Specification Required
registration policy (<xref section="4.6" sectionFormat="comma" target="RFC8126"/>). Designated experts need to
ensure that the token type is defined to be used for both token issuance and
redemption. Additionally, the experts can reject registrations on the basis
that they do not meet the security and privacy requirements for issuance
protocols defined in <xref section="3.2" sectionFormat="of" target="RFC9576"/>.</t>
        <t><xref target="RFC9578"/> defines entries for this registry.</t>
        <section anchor="reserved-values">
          <name>Reserved Values</name>
          <t>This document defines several reserved values, which can be used by Clients
and servers to send "greased" values in token challenges and redemptions to
ensure that implementations remain able to handle unknown token types
gracefully (this technique is inspired by <xref target="RFC8701"/>). Implementations <bcp14>SHOULD</bcp14>
select reserved values at random when including them in greased messages.
Servers can include these in TokenChallenge structures, either as the only
challenge when no real token type is desired or as one challenge in a list of
challenges that include real values. Clients can include these in token
structures when they are not able to present a real token. The
contents of the token structure <bcp14>SHOULD</bcp14> be filled with random bytes when
using greased values.</t>
          <t>The initial contents of this registry consist of multiple reserved values,
with the following attributes, which are repeated for each registration:</t>
          <dl spacing="compact">
            <dt>Value:</dt>
            <dd>0x0000, 0x02AA, 0x1132, 0x2E96, 0x3CD3, 0x4473, 0x5A63, 0x6D32, 0x7F3F,
0x8D07, 0x916B, 0xA6A4, 0xBEAB, 0xC3F3, 0xDA42, 0xE944, 0xF057</dd>
            <dt>Name:</dt>
            <dd>RESERVED</dd>
            <dt>Token Structure:</dt>
            <dd>Random bytes</dd>
            <dt>Token Key Encoding:</dt>
            <dd>Random bytes</dd>
            <dt>TokenChallenge Structure:</dt>
            <dd>Random bytes</dd>
            <dt>Publicly Verifiable:</dt>
            <dd>N/A</dd>
            <dt>Public Metadata:</dt>
            <dd>N/A</dd>
            <dt>Private Metadata:</dt>
            <dd>N/A</dd>
            <dt>Nk:</dt>
            <dd>N/A</dd>
            <dt>Nid:</dt>
            <dd>N/A</dd>
            <dt>Change Controller:</dt>
            <dd>IETF</dd>
            <dt>Reference:</dt>
            <dd>RFC 9577</dd>
            <dt>Notes:</dt>
            <dd>None</dd>
          </dl>
        </section>
      </section>
    </section>
  </middle>
  <back>

    <displayreference target="RFC9576" to="ARCHITECTURE"/>
    <displayreference target="RFC8446" to="TLS13"/>
    <displayreference target="RFC3986" to="URI"/>
    <displayreference target="RFC9578" to="ISSUANCE"/>
    <displayreference target="RFC9110" to="HTTP"/>
    <displayreference target="I-D.ietf-httpbis-rfc6265bis" to="COOKIES"/>
    
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

<!-- draft-ietf-privacypass-architecture (RFC 9576) -->
<reference anchor="RFC9576" target="https://www.rfc-editor.org/info/rfc9576">
<front>
<title>The Privacy Pass Architecture</title>
<author initials='A' surname='Davidson' fullname='Alex Davidson'>
<organization />
</author>
<author initials='J' surname='Iyengar' fullname='Jana Iyengar'>
<organization />
</author>
<author initials='C. A.' surname='Wood' fullname='Christopher A. Wood'>
<organization />
</author>
<date year='2024' month='June'/>
</front>
<seriesInfo name="RFC" value="9576"/>
<seriesInfo name="DOI" value="10.17487/RFC9576"/>
</reference>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9110.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>

        <reference anchor="SHS" target="https://doi.org/10.6028/nist.fips.180-4">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author>
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date month="August" year="2015"/>
          </front>
          <seriesInfo name="NIST FIPS Publication" value="180-4"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
        </reference>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>

      </references>
      <references>
        <name>Informative References</name>

<!-- draft-ietf-privacypass-protocol (RFC 9578) -->
<reference anchor="RFC9578" target="https://www.rfc-editor.org/info/rfc9578">
   <front>
      <title>Privacy Pass Issuance Protocols</title>
      <author initials="S." surname="Celi" fullname="Sofia Celi">
         <organization>Brave Software</organization>
      </author>
      <author initials="A." surname="Davidson" fullname="Alex Davidson">
         <organization>Brave Software</organization>
      </author>
      <author initials="S." surname="Valdez" fullname="Steven Valdez">
         <organization>Google LLC</organization>
      </author>
      <author initials="C. A." surname="Wood" fullname="Christopher A. Wood">
         <organization>Cloudflare</organization>
      </author>
      <date month="June" year="2024"/>
   </front>
<seriesInfo name="RFC" value="9578"/>
<seriesInfo name="DOI" value="10.17487/RFC9578"/>
</reference>

<!-- draft-ietf-httpbis-rfc6265bis (WG Last Call)
   "Long way" to include editor designations -->
<reference anchor="I-D.ietf-httpbis-rfc6265bis">
  <front>
    <title>Cookies: HTTP State Management Mechanism</title>
    <author fullname="Steven Bingler" initials="S." surname="Bingler" role="editor">
      <organization>Google LLC</organization>
    </author>
    <author fullname="Mike West" initials="M." surname="West" role="editor">
      <organization>Google LLC</organization>
    </author>
    <author fullname="John Wilander" initials="J." surname="Wilander" role="editor">
      <organization>Apple, Inc</organization>
    </author>
    <date day="2" month="May" year="2024"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-rfc6265bis-14"/>
</reference>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9001.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8470.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8701.xml"/>

      </references>
    </references>
    <section anchor="test-vectors">
      <name>Test Vectors</name>
      <t>This section includes test vectors for the HTTP authentication scheme specified
in this document. It consists of the following types of test vectors:</t>
      <ol spacing="normal" type="1"><li>Test vectors for the challenge and redemption protocols. Implementations can
use these test vectors for verifying code that builds and encodes
TokenChallenge structures, as well as code that produces a well-formed token
bound to a TokenChallenge.</li>
        <li>Test vectors for the HTTP headers used for authentication. Implementations
can use these test vectors for validating whether they parse HTTP
authentication headers correctly to produce TokenChallenge structures and the
other associated parameters, such as the <tt>token-key</tt> and <tt>max-age</tt> values.</li>
      </ol>
      <section anchor="challenge-and-redemption-structure-test-vectors">
        <name>Challenge and Redemption Structure Test Vectors</name>
        <t>This section includes test vectors for the challenge and redemption
functionalities described in Sections&nbsp;<xref target="challenge" format="counter"/> and <xref target="redemption" format="counter"/>. Each test vector
lists the following values:</t>
        <dl spacing="normal">
          <dt><tt>token_type</tt>:</dt><dd>The type of token issuance protocol -- a value from
<xref target="token-types"/>. For these test vectors, <tt>token_type</tt> is <tt>0x0002</tt>, corresponding
to the issuance protocol discussed in Section <xref target="RFC9578" sectionFormat="bare" section="6">"Issuance Protocol for Publicly Verifiable Tokens"</xref> of <xref target="RFC9578"/>.</dd>
          <dt><tt>issuer_name</tt>:</dt><dd> The name of the Issuer in the TokenChallenge structure,
represented as a hexadecimal string.</dd>
          <dt><tt>redemption_context</tt>:</dt><dd>The redemption context in the TokenChallenge structure,
represented as a hexadecimal string.</dd>
          <dt><tt>origin_info</tt>:</dt><dd> The Origin information in the TokenChallenge structure, represented as
a hexadecimal string.</dd>
          <dt><tt>nonce</tt>:</dt><dd>The nonce in the token structure, represented as a hexadecimal string.</dd>
	  <dt><tt>token_key_id</tt>:</dt><dd>The public token key, encoded based on the corresponding token
type, represented as a hexadecimal string.</dd>
          <dt><tt>token_authenticator_input</tt>:</dt><dd>The values in the token structure used to compute
the token authenticator value, represented as a hexadecimal string.</dd>
        </dl>
        <t>Test vectors are provided for each of the following TokenChallenge
configurations:</t>
        <ol spacing="normal" type="1"><li>TokenChallenge with a single Origin and a non-empty redemption context.</li>
          <li>TokenChallenge with a single Origin and empty redemption context.</li>
          <li>TokenChallenge with an empty Origin and redemption context.</li>
          <li>TokenChallenge with an empty Origin and a non-empty redemption context.</li>
          <li>TokenChallenge with multiple Origins and a non-empty redemption context.</li>
          <li>TokenChallenge for greasing.</li>
        </ol>
        <t>These test vectors are below.</t>
        <artwork><![CDATA[
// Test vector 1:
//   token_type(0002), issuer_name(issuer.example),
//   origin_info(origin.example), redemption_context(non-empty)
token_type: 0002
issuer_name: 6973737565722e6578616d706c65
redemption_context:
476ac2c935f458e9b2d7af32dacfbd22dd6023ef5887a789f1abe004e79bb5bb
origin_info: 6f726967696e2e6578616d706c65
nonce:
e01978182c469e5e026d66558ee186568614f235e41ef7e2378e6f202688abab
token_key_id:
ca572f8982a9ca248a3056186322d93ca147266121ddeb5632c07f1f71cd2708
token_authenticator_input: 0002e01978182c469e5e026d66558ee1865686
14f235e41ef7e2378e6f202688abab8e1d5518ec82964255526efd8f9db88205a
8ddd3ffb1db298fcc3ad36c42388fca572f8982a9ca248a3056186322d93ca147
266121ddeb5632c07f1f71cd2708

// Test vector 2:
//   token_type(0002), issuer_name(issuer.example),
//   origin_info(origin.example), redemption_context(empty)
token_type: 0002
issuer_name: 6973737565722e6578616d706c65
redemption_context:
origin_info: 6f726967696e2e6578616d706c65
nonce:
e01978182c469e5e026d66558ee186568614f235e41ef7e2378e6f202688abab
token_key_id:
ca572f8982a9ca248a3056186322d93ca147266121ddeb5632c07f1f71cd2708
token_authenticator_input: 0002e01978182c469e5e026d66558ee1865686
14f235e41ef7e2378e6f202688abab11e15c91a7c2ad02abd66645802373db1d8
23bea80f08d452541fb2b62b5898bca572f8982a9ca248a3056186322d93ca147
266121ddeb5632c07f1f71cd2708

// Test vector 3:
//   token_type(0002), issuer_name(issuer.example),
//   origin_info(), redemption_context(empty)
token_type: 0002
issuer_name: 6973737565722e6578616d706c65
redemption_context:
origin_info:
nonce:
e01978182c469e5e026d66558ee186568614f235e41ef7e2378e6f202688abab
token_key_id:
ca572f8982a9ca248a3056186322d93ca147266121ddeb5632c07f1f71cd2708
token_authenticator_input: 0002e01978182c469e5e026d66558ee1865686
14f235e41ef7e2378e6f202688ababb741ec1b6fd05f1e95f8982906aec161289
6d9ca97d53eef94ad3c9fe023f7a4ca572f8982a9ca248a3056186322d93ca147
266121ddeb5632c07f1f71cd2708

// Test vector 4:
//   token_type(0002), issuer_name(issuer.example),
//   origin_info(), redemption_context(non-empty)
token_type: 0002
issuer_name: 6973737565722e6578616d706c65
redemption_context:
476ac2c935f458e9b2d7af32dacfbd22dd6023ef5887a789f1abe004e79bb5bb
origin_info:
nonce:
e01978182c469e5e026d66558ee186568614f235e41ef7e2378e6f202688abab
token_key_id:
ca572f8982a9ca248a3056186322d93ca147266121ddeb5632c07f1f71cd2708
token_authenticator_input: 0002e01978182c469e5e026d66558ee1865686
14f235e41ef7e2378e6f202688ababb85fb5bc06edeb0e8e8bdb5b3bea8c4fa40
837c82e8bcaf5882c81e14817ea18ca572f8982a9ca248a3056186322d93ca147
266121ddeb5632c07f1f71cd2708

// Test vector 5:
//   token_type(0002), issuer_name(issuer.example),
//   origin_info(foo.example,bar.example),
//   redemption_context(non-empty)
token_type: 0002
issuer_name: 6973737565722e6578616d706c65
redemption_context:
476ac2c935f458e9b2d7af32dacfbd22dd6023ef5887a789f1abe004e79bb5bb
origin_info: 666f6f2e6578616d706c652c6261722e6578616d706c65
nonce:
e01978182c469e5e026d66558ee186568614f235e41ef7e2378e6f202688abab
token_key_id:
ca572f8982a9ca248a3056186322d93ca147266121ddeb5632c07f1f71cd2708
token_authenticator_input: 0002e01978182c469e5e026d66558ee1865686
14f235e41ef7e2378e6f202688ababa2a775866b6ae0f98944910c8f48728d8a2
735b9157762ddbf803f70e2e8ba3eca572f8982a9ca248a3056186322d93ca147
266121ddeb5632c07f1f71cd2708

// Test vector 6:
//   token_type(0000), structure(random_bytes)
token_type: 0000
token_authenticator_input: 000058405ad31e286e874cb42d0ef9d50461ae
703bb71a21178beb429c43c0effe587456d856f0f2bdfc216ef93d5c225e2a93e
84cb686e63919788087f7ab1054aa817f09dcb919a0ed6f90fe887e8b08cd1eee
44d5be8d813eda9f2656db61c932db8d73f8690604ded0120157923bbd19d5549
e639e4de07530aee1d370f5187b678685715bd878dde24346751eb532a87b71ea
40bbe5a13218658e303c648eb03817453690bfcbe8255081bf27ff0891cd02ee2
483e48a2c494bdef696f943fa992a65303292c25d0d3f62da86a70d0b020f0ff5
b90d0ff0f6abdb097d321fde04f3a1994e63bcd35a88c21236c7dc67600482223
f54b25e39a250439f27ecb5ae9eb8ed548a3ec1f1d6f510d08281929c8fe08834
2959e35ea9b3b6f6a96fc1a8edba4ed297f4cf02d0e4482b79a11f671745d7b7d
b120eddd8a4c2b6501bbc895b2160b8071615d9c1b18f32e056bfee29deac6a7d
6cf7b522a5badd63b9cb
]]></artwork>
      </section>
      <section anchor="http-header-test-vectors">
        <name>HTTP Header Test Vectors</name>
        <t>This section includes test vectors for the contents of the HTTP authentication
headers. Each test vector consists of one or more challenges that comprise
a <tt>WWW-Authenticate</tt> header; see
<xref  target="choosing-between-multiple-challenges"/>.
For each challenge, the token-type, <tt>token-key</tt>, <tt>max-age</tt>, and <tt>token-challenge</tt>
parameters are listed. Each challenge also includes an unknown (unspecified)
parameter that implementations are meant to ignore.</t>
        <t>The parameters for each challenge are indexed by their position
in the <tt>WWW-Authenticate</tt> challenge list. For example, <tt>token-key-0</tt> denotes
the <tt>token-key</tt> parameter for the first challenge in the list, whereas
<tt>token-key-1</tt> denotes the <tt>token-key</tt> for the second challenge in the list.</t>
        <t>The resulting wire-encoded <tt>WWW-Authenticate</tt> header based on this
list of challenges is then listed at the end. Line folding is only
used to fit the document-formatting constraints and is not supported
in actual requests.</t>
        <t>The last challenge in this list includes Basic authentication, a grease
challenge, and a valid challenge for token type <tt>0x0001</tt>. Correct Client
implementations will ignore the Basic and grease challenges.</t>
        <artwork><![CDATA[
token-type-0: 0x0002
token-key-0: 30820152303d06092a864886f70d01010a3030a00d300b060960864
8016503040202a11a301806092a864886f70d010108300b060960864801650304020
2a2030201300382010f003082010a0282010100cb1aed6b6a95f5b1ce013a4cfcab2
5b94b2e64a23034e4250a7eab43c0df3a8c12993af12b111908d4b471bec31d4b6c9
ad9cdda90612a2ee903523e6de5a224d6b02f09e5c374d0cfe01d8f529c500a78a2f
67908fa682b5a2b430c81eaf1af72d7b5e794fc98a3139276879757ce453b526ef9b
f6ceb99979b8423b90f4461a22af37aab0cf5733f7597abe44d31c732db68a181c6c
bbe607d8c0e52e0655fd9996dc584eca0be87afbcd78a337d17b1dba9e828bbd81e2
91317144e7ff89f55619709b096cbb9ea474cead264c2073fe49740c01f00e109106
066983d21e5f83f086e2e823c879cd43cef700d2a352a9babd612d03cad02db134b7
e225a5f0203010001
max-age-0: 10
token-challenge-0: 0002000e6973737565722e6578616d706c65208a3e83a33d9
8005d2f30bef419fa6bf4cd5c6005e36b1285bbb4ccd40fa4b383000e6f726967696
e2e6578616d706c65

WWW-Authenticate: PrivateToken challenge="AAIADmlzc3Vlci5leGFtcGxlII
o-g6M9mABdLzC-9Bn6a_TNXGAF42sShbu0zNQPpLODAA5vcmlnaW4uZXhhbXBsZQ==",
 token-key="MIIBUjA9BgkqhkiG9w0BAQowMKANMAsGCWCGSAFlAwQCAqEaMBgGCSqG
SIb3DQEBCDALBglghkgBZQMEAgKiAwIBMAOCAQ8AMIIBCgKCAQEAyxrta2qV9bHOATpM
_KsluUsuZKIwNOQlCn6rQ8DfOowSmTrxKxEZCNS0cb7DHUtsmtnN2pBhKi7pA1I-beWi
JNawLwnlw3TQz-Adj1KcUAp4ovZ5CPpoK1orQwyB6vGvcte155T8mKMTknaHl1fORTtS
bvm_bOuZl5uEI7kPRGGiKvN6qwz1cz91l6vkTTHHMttooYHGy75gfYwOUuBlX9mZbcWE
7KC-h6-814ozfRex26noKLvYHikTFxROf_ifVWGXCbCWy7nqR0zq0mTCBz_kl0DAHwDh
CRBgZpg9IeX4PwhuLoI8h5zUPO9wDSo1Kpur1hLQPK0C2xNLfiJaXwIDAQAB",unknow
nChallengeAttribute="ignore-me", max-age="10"

token-type-0: 0x0002
token-key-0: 30820152303d06092a864886f70d01010a3030a00d300b060960864
8016503040202a11a301806092a864886f70d010108300b060960864801650304020
2a2030201300382010f003082010a0282010100cb1aed6b6a95f5b1ce013a4cfcab2
5b94b2e64a23034e4250a7eab43c0df3a8c12993af12b111908d4b471bec31d4b6c9
ad9cdda90612a2ee903523e6de5a224d6b02f09e5c374d0cfe01d8f529c500a78a2f
67908fa682b5a2b430c81eaf1af72d7b5e794fc98a3139276879757ce453b526ef9b
f6ceb99979b8423b90f4461a22af37aab0cf5733f7597abe44d31c732db68a181c6c
bbe607d8c0e52e0655fd9996dc584eca0be87afbcd78a337d17b1dba9e828bbd81e2
91317144e7ff89f55619709b096cbb9ea474cead264c2073fe49740c01f00e109106
066983d21e5f83f086e2e823c879cd43cef700d2a352a9babd612d03cad02db134b7
e225a5f0203010001
max-age-0: 10
token-challenge-0: 0002000e6973737565722e6578616d706c65208a3e83a33d9
8005d2f30bef419fa6bf4cd5c6005e36b1285bbb4ccd40fa4b383000e6f726967696
e2e6578616d706c65
token-type-1: 0x0001
token-key-1: ebb1fed338310361c08d0c7576969671296e05e99a17d7926dfc28a
53fabd489fac0f82bca86249a668f3a5bfab374c9
max-age-1: 10
token-challenge-1: 0001000e6973737565722e6578616d706c65208a3e83a33d9
8005d2f30bef419fa6bf4cd5c6005e36b1285bbb4ccd40fa4b383000e6f726967696
e2e6578616d706c65

WWW-Authenticate: PrivateToken challenge="AAIADmlzc3Vlci5leGFtcGxlII
o-g6M9mABdLzC-9Bn6a_TNXGAF42sShbu0zNQPpLODAA5vcmlnaW4uZXhhbXBsZQ==",
 token-key="MIIBUjA9BgkqhkiG9w0BAQowMKANMAsGCWCGSAFlAwQCAqEaMBgGCSqG
SIb3DQEBCDALBglghkgBZQMEAgKiAwIBMAOCAQ8AMIIBCgKCAQEAyxrta2qV9bHOATpM
_KsluUsuZKIwNOQlCn6rQ8DfOowSmTrxKxEZCNS0cb7DHUtsmtnN2pBhKi7pA1I-beWi
JNawLwnlw3TQz-Adj1KcUAp4ovZ5CPpoK1orQwyB6vGvcte155T8mKMTknaHl1fORTtS
bvm_bOuZl5uEI7kPRGGiKvN6qwz1cz91l6vkTTHHMttooYHGy75gfYwOUuBlX9mZbcWE
7KC-h6-814ozfRex26noKLvYHikTFxROf_ifVWGXCbCWy7nqR0zq0mTCBz_kl0DAHwDh
CRBgZpg9IeX4PwhuLoI8h5zUPO9wDSo1Kpur1hLQPK0C2xNLfiJaXwIDAQAB",unknow
nChallengeAttribute="ignore-me", max-age="10", PrivateToken challeng
e="AAEADmlzc3Vlci5leGFtcGxlIIo-g6M9mABdLzC-9Bn6a_TNXGAF42sShbu0zNQPp
LODAA5vcmlnaW4uZXhhbXBsZQ==", token-key="67H-0zgxA2HAjQx1dpaWcSluBem
aF9eSbfwopT-r1In6wPgryoYkmmaPOlv6s3TJ",unknownChallengeAttribute="ig
nore-me", max-age="10"

token-type-0: 0x0000
token-key-0: 856de3c710b892e7cca1ae5eb121af42ca8e779137a11224228c9b9
9b0729bf84d5057d030000309b8f0d06ccffa17561f9eacd4c312e985a6bc60ffbea
0610264dcb1726255313da81d665692686a1d8644f1516bf612cea009e6dff6d9a9a
959fb538e1b5b2343c092992942382bdde22d5b324b1e4618ed21d7806286c2ce
token-challenge-0: 0000acc3b25795c636fd9dd8b12982394abba8777d35978e8
77fc8848892a217233045ac25a3d55c07c54efe6372973fee0073e77fc61bf19ab88
0f20edf5d627502
token-type-1: 0x0001
token-key-1: ebb1fed338310361c08d0c7576969671296e05e99a17d7926dfc28a
53fabd489fac0f82bca86249a668f3a5bfab374c9
max-age-1: 10
token-challenge-1: 0001000e6973737565722e6578616d706c65208a3e83a33d9
8005d2f30bef419fa6bf4cd5c6005e36b1285bbb4ccd40fa4b383000e6f726967696
e2e6578616d706c65

WWW-Authenticate: Basic realm="grease", PrivateToken challenge="AACs
w7JXlcY2_Z3YsSmCOUq7qHd9NZeOh3_IhIiSohcjMEWsJaPVXAfFTv5jcpc_7gBz53_G
G_GauIDyDt9dYnUC", token-key="hW3jxxC4kufMoa5esSGvQsqOd5E3oRIkIoybmbB
ym_hNUFfQMAADCbjw0GzP-hdWH56s1MMS6YWmvGD_vqBhAmTcsXJiVTE9qB1mVpJoah2
GRPFRa_YSzqAJ5t_22ampWftTjhtbI0PAkpkpQjgr3eItWzJLHkYY7SHXgGKGws4=",
PrivateToken challenge="AAEADmlzc3Vlci5leGFtcGxlIIo-g6M9mABdLzC-9Bn6
a_TNXGAF42sShbu0zNQPpLODAA5vcmlnaW4uZXhhbXBsZQ==", token-key="67H-0z
gxA2HAjQx1dpaWcSluBemaF9eSbfwopT-r1In6wPgryoYkmmaPOlv6s3TJ",unknownC
hallengeAttribute="ignore-me", max-age="10"
]]></artwork>
      </section>
    </section>
  </back>
</rfc>
