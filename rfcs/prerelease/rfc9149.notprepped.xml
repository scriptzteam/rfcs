<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE rfc [
 <!ENTITY nbsp    "&#160;">
 <!ENTITY zwsp   "&#8203;">
 <!ENTITY nbhy   "&#8209;">
 <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" docName="draft-ietf-tls-ticketrequests-07" number="9149" submissionType="IETF" category="std" consensus="true" ipr="trust200902" obsoletes="" updates="" xml:lang="en" symRefs="true" sortRefs="true" tocInclude="true"
version="3">

	<front>
    <title>TLS Ticket Requests</title>
<seriesInfo name="RFC" value="9149"/>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
	  <region>CA</region>
	  <code>95014</code>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="D." surname="Schinazi" fullname="David Schinazi">
      <organization>Google LLC</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
	  <region>CA</region>
	  <code>94043</code>
          <country>United States of America</country>
        </postal>
        <email>dschinazi.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Cloudflare</organization>
      <address>
        <postal>
          <street>101 Townsend St</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94107</code>
          <country>United States of America</country>
        </postal>
        <email>caw@heapingbits.net</email>
      </address>
    </author>
    <date year="2022" month="April"/>

<keyword>TLS</keyword>
<keyword>Tickets</keyword>

    <abstract>
      <t>
   TLS session tickets enable stateless connection resumption for
   clients without server-side, per-client state.  Servers vend an
   arbitrary number of session tickets to clients, at their discretion,
   upon connection establishment.  Clients store and use tickets when
   resuming future connections.  This document describes a mechanism by
   which clients can specify the desired number of tickets needed for
   future connections.  This extension aims to provide a means for
   servers to determine the number of tickets to generate in order to
   reduce ticket waste while simultaneously priming clients for future
   connection attempts.</t>
    </abstract>

  </front>
  <middle>
    <section anchor="sect-1" numbered="true" toc="default">
      <name>Introduction</name>

      <t>
   As described in <xref target="RFC8446" format="default"/>, TLS servers
   vend clients an arbitrary number of session tickets at their own discretion
   in NewSessionTicket messages.  There are at least three limitations with
   this design.</t>
      <t>
   First, servers vend some (often hard-coded) number of tickets per
   connection.  Some server implementations return a different default number
   of tickets for session resumption than for the initial connection that
   created the session.  No static choice, whether fixed or dependent upon
   resumption, is ideal for all situations.</t>
      <t>
   Second, clients do not have a way of expressing their desired number of
   tickets, which can impact future connection establishment.  For example,
   clients can open parallel TLS connections to the same server for HTTP, or
   they can race TLS connections across different network interfaces.  The
   latter is especially useful in transport systems that implement Happy
   Eyeballs <xref target="RFC8305" format="default"/>.  Since clients control
   connection concurrency and resumption, a standard mechanism for requesting
   more than one ticket is desirable for avoiding ticket reuse.  See <xref
   target="RFC8446" sectionFormat="of" section="C.4" format="default"/> for
   discussion of ticket reuse risks.</t>
      <t>
   Third, all tickets in the client's possession ultimately derive from
   some initial connection.  Especially when the client was initially
   authenticated with a client certificate, that session may need to be
   refreshed from time to time.  Consequently, a server may periodically
   force a new connection even when the client presents a valid ticket.
   When that happens, it is possible that any other tickets derived from
   the same original session are equally invalid.  A client avoids a
   full handshake on subsequent connections if it replaces all stored
   tickets with new ones obtained from the just-performed full
   handshake.  The number of tickets the server should vend for a new
   connection may therefore need to be larger than the number for
   routine resumption.</t>
      <t>
   This document specifies a new TLS extension, "ticket_request", that
   clients can use to express their desired number of session tickets.
   Servers can use this extension as a hint for the number of NewSessionTicket
   messages to vend.  This extension is only applicable to TLS 1.3 <xref target="RFC8446" format="default"/>, DTLS 1.3 <xref target="RFC9147" format="default"/>, and
   future versions of (D)TLS.</t>
      <section anchor="sect-1.1" numbered="true" toc="default">
        <name>Requirements Language</name>




        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>


      </section>
    </section>
    <section anchor="sect-2" numbered="true" toc="default">
      <name>Use Cases</name>
      <t>
   The ability to request one or more tickets is useful for a variety of
   purposes:</t>



<dl>

<dt>Parallel HTTP connections:
</dt>
<dd>To improve performance, a client may open parallel connections. To avoid
ticket reuse, the client may use distinct tickets on each connection. Clients
must therefore bound the number of parallel connections they initiate by the
number of tickets in their possession or risk ticket reuse.
</dd>

<dt>Connection racing:
</dt>

<dd>Happy Eyeballs V2 <xref target="RFC8305" format="default"/> describes
techniques for performing connection racing.  The Transport Services
Implementation document <xref target="I-D.ietf-taps-impl" format="default"/>
also describes how connections can race across interfaces and address
families.  In such cases, clients may use more than one ticket while racing
connection attempts in order to establish one successful connection.  Having
multiple tickets equips clients with enough tickets to initiate connection
racing while avoiding ticket reuse and ensuring that their cache of tickets
does not empty during such races.  Moreover, as some servers may implement
single-use tickets, distinct tickets prevent premature ticket invalidation by
racing.
</dd>

<dt>Less ticket waste:
</dt>
<dd>Currently, TLS servers use application-specific, and often
implementation-specific, logic to determine how many tickets to issue.  By
moving the burden of ticket count to clients, servers do not generate wasteful
tickets.  As an example, clients might only request one ticket during
resumption.  Moreover, as ticket generation might involve expensive
computation, e.g., public key cryptographic operations, avoiding waste is
desirable.
</dd>

<dt>Decline resumption:</dt>
<dd>Clients can indicate they do not intend to resume a connection by sending
a ticket request with count of zero.
</dd>

</dl>


    </section>
    <section anchor="sect-3" numbered="true" toc="default">
      <name>Ticket Requests</name>
      <t>
   As discussed in <xref target="sect-1" format="default"/>, clients may want different numbers of
   tickets for new or resumed connections.  Clients may indicate to
   servers their desired number of tickets to receive on a single
   connection, in the case of a new or resumed connection, via the
   following "ticket_request" extension:</t>



     <sourcecode type="tls-presentation"><![CDATA[
enum {
    ticket_request(58), (65535)
} ExtensionType;
]]></sourcecode>
      <t>
   Clients <bcp14>MAY</bcp14> send this extension in ClientHello.  It contains the
   following structure:</t>
      <sourcecode type="tls-presentation"><![CDATA[
struct {
    uint8 new_session_count;
    uint8 resumption_count;
} ClientTicketRequest;
]]></sourcecode>
      <dl newline="false" spacing="normal" indent="3">
        <dt>new_session_count:</dt>
        <dd>
	The number of tickets desired by the client if the server chooses to
	negotiate a new connection.
	</dd>
        <dt>resumption_count:</dt>
        <dd>
	The number of tickets desired by the client if the server is willing
	to resume using a ticket presented in this ClientHello.
	</dd>
      </dl>
      <t>
   A client starting a new connection <bcp14>SHOULD</bcp14> set new_session_count to
   the desired number of session tickets and resumption_count to 0.
   Once a client's ticket cache is primed, a resumption_count of 1 is a
   good choice that allows the server to replace each ticket with a new
   ticket without over-provisioning the client with excess tickets.
   However, clients that race multiple connections and place a separate
   ticket in each will ultimately end up with just the tickets from a
   single resumed session.  In that case, clients can send a
   resumption_count equal to the number of connections they are
   attempting in parallel.  (Clients that send a resumption_count less
   than the number of parallel connection attempts might end up with
   zero tickets.)</t>
      <t>
   When a client presenting a previously obtained ticket finds that the
   server nevertheless negotiates a new connection, the client <bcp14>SHOULD</bcp14>
   assume that any other tickets associated with the same session as the
   presented ticket are also no longer valid for resumption.  This
   includes tickets obtained during the initial (new) connection and all
   tickets subsequently obtained as part of subsequent resumptions.
   Requesting more than one ticket when servers complete a new
   connection helps keep the session cache primed.</t>
      <t>
   Servers <bcp14>SHOULD NOT</bcp14> send more tickets than requested for the
   connection type selected by the server (new or resumed connection).
   Moreover, servers <bcp14>SHOULD</bcp14> place a limit on the number of tickets they
   are willing to send, whether for new or resumed connections, to save
   resources.  Therefore, the number of NewSessionTicket messages sent
   will typically be the minimum of the server's self-imposed limit and
   the number requested.  Servers <bcp14>MAY</bcp14> send additional tickets, typically
   using the same limit, if the tickets that are originally sent are
   somehow invalidated.</t>
      <t>
   A server that supports and uses a client "ticket_request" extension
   <bcp14>MUST</bcp14> also send the "ticket_request" extension in the
   EncryptedExtensions message.  It contains the following structure:</t>
<sourcecode type="tls-presentation">
<![CDATA[struct {
    uint8 expected_count;
} ServerTicketRequestHint;
]]></sourcecode>
      <dl newline="false" spacing="normal" indent="3">
        <dt>expected_count:</dt>
        <dd>
	The number of tickets the server expects to send in this connection.
	</dd>
      </dl>
      <t>
   Servers <bcp14>MUST NOT</bcp14> send the "ticket_request" extension in any handshake
   message, including ServerHello or HelloRetryRequest messages.  A
   client <bcp14>MUST</bcp14> abort the connection with an "illegal_parameter" alert if
   the "ticket_request" extension is present in any server handshake
   message.</t>
      <t>
   If a client receives a HelloRetryRequest, the presence (or absence)
   of the "ticket_request" extension <bcp14>MUST</bcp14> be maintained in the second
   ClientHello message.  Moreover, if this extension is present, a
   client <bcp14>MUST NOT</bcp14> change the value of ClientTicketRequest in the second
   ClientHello message.</t>
    </section>
    <section anchor="sect-4" numbered="true" toc="default">
      <name>IANA Considerations</name>

      <t>
   IANA has added the following entry to the "TLS ExtensionType Values"
   registry <xref target="RFC8446" format="default"/> <xref target="RFC8447"
   format="default"/>:</t>

<table anchor="iana_table">
  <name>Addition to TLS ExtensionType Values Registry</name>    
  <thead>
    <tr>
      <th>Value</th>   
      <th>Extension Name</th>   
      <th>TLS 1.3</th>
      <th>DTLS-Only</th>
      <th>Recommended</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>58</td>
      <td>ticket_request</td>
      <td>CH, EE</td>
      <td>N</td>
      <td>Y</td>
    </tr>
  </tbody>
</table>

    </section>
    <section anchor="sect-5" numbered="true" toc="default">
      <name>Performance Considerations</name>
      <t>
   Servers can send tickets in NewSessionTicket messages any time after
   the server Finished message (see <xref target="RFC8446" section="4.6.1" sectionFormat="of" format="default"/>).  A server
   that chooses to send a large number of tickets to a client can
   potentially harm application performance if the tickets are sent
   before application data.  For example, if the transport connection
   has a constrained congestion window, ticket messages could delay
   sending application data.  To avoid this, servers should prioritize
   sending application data over tickets when possible.</t>
    </section>
    <section anchor="sect-6" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
   Ticket reuse is a security and privacy concern.  Moreover, clients must
   take care when pooling tickets as a means of avoiding or amortizing
   handshake costs.  If servers do not rotate session ticket encryption keys
   frequently, clients may be encouraged to obtain and use tickets beyond
   common lifetime windows of, e.g., 24 hours.  Despite ticket lifetime hints
   provided by servers, clients <bcp14>SHOULD</bcp14> dispose of cached
   tickets after some reasonable amount of time that mimics the session ticket
   encryption key rotation period.  Specifically, as specified in <xref
   target="RFC8446" sectionFormat="of" section="4.6.1" format="default"/>,
   clients <bcp14>MUST NOT</bcp14> cache tickets for longer than 7 days.</t>

      <t>
   In some cases, a server may send NewSessionTicket messages immediately upon
   sending the server Finished message rather than waiting for the client
   Finished message.  If the server has not verified the client's ownership of its IP
   address, e.g., with the TLS cookie extension (see <xref target="RFC8446"
   sectionFormat="of" section="4.2.2" format="default"/>), an attacker may
   take advantage of this behavior to create an amplification attack
   proportional to the count value toward a target by performing a (DTLS) key
   exchange over UDP with spoofed packets.  Servers <bcp14>SHOULD</bcp14>
   limit the number of NewSessionTicket messages they send until they have
   verified the client's ownership of its IP address.</t>
      <t>
   Servers that do not enforce a limit on the number of NewSessionTicket
   messages sent in response to a "ticket_request" extension could leave
   themselves open to DoS attacks, especially if ticket creation is
   expensive.</t>
    </section>

  </middle>
  <back>

<displayreference target="I-D.ietf-taps-impl" to="TAPS"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8447.xml"/>
	        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9147.xml"/>
      </references>

      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8305.xml"/>






	
<reference anchor='I-D.ietf-taps-impl'>
<front>
<title>Implementing Interfaces to Transport Services</title>
<author initials='A' surname='Brunstrom' fullname='Anna Brunstrom' role="editor">
    <organization />
</author>
<author initials='T' surname='Pauly' fullname='Tommy Pauly' role="editor">
    <organization />
</author>
<author initials='T' surname='Enghardt' fullname='Theresa Enghardt'>
    <organization />
</author>

<author initials='P' surname='Tiesel' fullname='Philipp Tiesel'>
    <organization />
</author>

<author initials='M' surname='Welzl' fullname='Michael Welzl'>
    <organization />
</author>
<date month='March' day='7' year='2022' />
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-taps-impl-12' />
</reference>




      </references>
    </references>

    <section anchor="sect-7" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>
   The authors would like to thank <contact fullname="David Benjamin"/>,
   <contact fullname="Eric Rescorla"/>, <contact fullname="Nick Sullivan"/>,
   <contact fullname="Martin Thomson"/>, <contact fullname="Hubert Kario"/>,
   and other members of the TLS Working Group for discussions on earlier draft
   versions of this document.  <contact fullname="Viktor Dukhovni"/>
   contributed text allowing clients to send multiple counts in a ticket
   request.</t>
    </section>

  </back>
</rfc>
