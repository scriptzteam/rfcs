<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-tpm-based-network-device-attest-14" number="9683" submissionType="IETF" category="info" consensus="true" obsoletes="" updates="" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">
 
  <front>
    <title abbrev="Network Device RIV">Remote Integrity Verification of Network Devices Containing Trusted Platform Modules</title>
    <seriesInfo name="RFC" value="9683"/>
    <author initials="G. C." surname="Fedorkow" fullname="Guy C. Fedorkow" role="editor">
      <organization>Juniper Networks, Inc.</organization>
      <address>
        <postal>
          <street>10 Technology Park Drive</street>
          <city>Westford</city>
          <region>Massachusetts</region>
          <code>01886</code>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>gfedorkow@juniper.net</email>
      </address>
    </author>
    <author initials="E." surname="Voit" fullname="Eric Voit">
      <organization abbrev="Cisco">Cisco Systems</organization>
      <address>
        <email>evoit@cisco.com</email>
      </address>
    </author>
    <author initials="J." surname="Fitzgerald-McKay" fullname="Jessica Fitzgerald-McKay">
      <organization>National Security Agency</organization>
      <address>
        <postal>
          <street>9800 Savage Road</street>
          <city>Ft. Meade</city>
          <region>Maryland</region>
          <code>20755</code>
          <country>US</country>
        </postal>
        <email>jmfitz2@nsa.gov</email>
      </address>
    </author>
    <date year="2024" month="December"/>
    <area>sec</area>
    <workgroup>rats</workgroup>    
    
    <keyword>Attestation</keyword>
    <keyword>TPM</keyword>
    
    <abstract>
      <t>This document describes a workflow for remote attestation of the integrity of firmware and software installed on network devices that contain Trusted Platform Modules (TPMs), as defined by 
the Trusted Computing Group (TCG), or equivalent hardware implementations that include the protected capabilities, as provided by TPMs.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>There are many aspects to consider in fielding a trusted computing device,
from operating systems to applications.  Mechanisms to prove that
a device installed at a customer's site is authentic (i.e., not counterfeit) and has
been configured with authorized software, all as part of a trusted supply chain, are just a few of the many aspects that need to be considered concurrently to have confidence that a device is truly trustworthy.</t>
      <t>A generic architecture for remote attestation has been defined in <xref target="RFC9334" format="default"/>.  Additionally, use cases for remotely attesting networking devices are discussed within <xref target="I-D.richardson-rats-usecases" sectionFormat="of" section="5"/>.  However, these documents do not provide sufficient guidance for network equipment vendors and operators to design, build, and deploy interoperable devices.</t>
      <t>The intent of this document is to provide such guidance. It does this by outlining the Remote Integrity Verification (RIV) problem and then by identifying the necessary elements to get the complete, scalable attestation procedure working with commercial networking products such as routers, switches, and firewalls.   An underlying assumption is the availability within the device of a cryptoprocessor that is compatible with the Trusted Platform Module specifications <xref target="TPM-1.2" format="default"/> <xref target="TPM-2.0" format="default"/> to enable the trustworthy, remote assessment of the device's software and hardware.</t>
      <section anchor="requirements-notation" numbered="true" toc="default">
        <name>Requirements Notation</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
      </section>
      <section anchor="terminology" numbered="true" toc="default">
        <name>Terminology</name>
        <t>A number of terms are reused from <xref target="RFC9334" format="default"/>.  These include Appraisal Policy for Evidence, Attestation Result, Attester, Evidence, Reference Value, Relying Party, Verifier, and Verifier Owner.</t>
        <t>Additionally, this document defines the following term:</t>
        <dl>
          <dt>Attestation:</dt> 
          <dd>The process of generating, conveying, and appraising
claims, backed by evidence, about device trustworthiness characteristics, including supply chain trust,
identity, device provenance, software configuration, device
composition, compliance to test suites, functional and assurance evaluations, etc.</dd>
        </dl>
        <t>The goal of attestation is simply to assure an administrator or auditor that the device's configuration and software
were authentic and unmodified when the device started.
The determination of software authenticity is not prescribed in this document, but it's typically taken to mean
a software image generated by an authority trusted by the administrator, such as the device manufacturer.</t>
        <t>Within the context of the Trusted Computing Group (TCG), the scope of attestation is typically narrowed to describe the process by
which an independent Verifier can obtain cryptographic proof as to the identity
of the device in question, evidence of the integrity of the device's software that was loaded upon
startup, and verification that the current configuration matches the 
intended configuration.  For network equipment, a Verifier capability can
be embedded in a Network Management Station, a posture collection server,
or other network analytics tool (such as a software asset management solution,
or a threat detection and mitigation tool, etc.). 
This document focuses on a specific subset of attestation tasks, defined here as Remote
Integrity Verification (RIV), and informally referred to as attestation.  RIV in this document takes a network-equipment-centric perspective
that includes a set of protocols and procedures for determining whether a
particular device was launched with authentic software, starting from Roots
of Trust.  While there are many ways to accomplish attestation, RIV sets
out a specific set of protocols and tools that work in environments commonly
found in network equipment.  RIV does not cover other device characteristics
that could be attested (e.g., geographic location or connectivity; 
see <xref target="I-D.richardson-rats-usecases" format="default"/>), although it does provide evidence of a secure infrastructure
to increase the level of trust in other device characteristics attested
by other means (e.g., by Entity Attestation Tokens <xref target="I-D.ietf-rats-eat" format="default"/>).</t>
        <t>In line with definitions found in <xref target="RFC9334" format="default"/>, this document uses the term Endorser to refer to the 
role that signs identity and attestation certificates used by the Attester, while Reference Values are signed 
by a Reference Value Provider.  Typically, the manufacturer of a network device would be accepted as 
both the Endorser and Reference Value Provider, although the choice is ultimately up to the Verifier Owner.</t>
      </section>
      <section anchor="document-organization" numbered="true" toc="default">
        <name>Document Organization</name>
        <t>The remainder of this document is organized into several sections:</t>
        <ul spacing="normal">
          <li>The remainder of this section covers goals and requirements, plus a top-level description of RIV.</li>
          <li>The Solution Overview section (<xref target="solution-overview" format="default"/>) outlines how RIV works.</li>
          <li>The Standards Components section (<xref target="standards-components" format="default"/>) links components of RIV to normative standards.</li>
          <li>The Privacy and Security Considerations sections (Sections <xref target="privacy-considerations" format="counter"/> and <xref target="security-cons" format="counter"/>) shows how specific features of RIV contribute to the trustworthiness of the Attestation Result.</li>
          <li>Supporting material is in an appendix (<xref target="appendix" format="default"/>).</li>
        </ul>
      </section>
      <section anchor="goals" numbered="true" toc="default">
        <name>Goals</name>
        <t>Network operators benefit from a trustworthy attestation mechanism that provides
assurance that their network comprises authentic equipment and has loaded software
free of known vulnerabilities and unauthorized tampering.  In line with the overall goal of assuring integrity, attestation can be used to assist in asset management, vulnerability and compliance
assessment, plus configuration management.</t>
        <t>The RIV attestation workflow outlined in this document is intended to meet the following high-level goals:</t>
        <ul spacing="normal">
          <li>Provable Device Identity - This specification requires that an Attester (i.e., the attesting device) includes
a cryptographic identifier unique to each device.  Effectively, this means that the device's TPM
must be provisioned with this during the manufacturing cycle.</li>
          <li>Software Inventory - Key goals are to identify the software release(s) installed
on the Attester and to provide evidence that the software stored within hasn't
been altered without authorization.</li>
          <li>Verifiability - Verification of the device's software and configuration shows
that the software that the administrator authorized for use was actually launched.</li>
        </ul>
        <t>In addition, RIV is designed to operate either in a centralized environment, such as with a central authority that manages and configures a number of network devices, or "peer-to-peer", where network devices independently verify one another to establish a trust relationship. (See <xref target="peer-to-peer" format="default"/>.)</t>
      </section>
      <section anchor="RIV-desc" numbered="true" toc="default">
        <name>Description of Remote Integrity Verification (RIV)</name>
        <t>Attestation requires two interlocking mechanisms between the Attester network device and the Verifier:</t>
        <ul spacing="normal">
          <li>Device Identity is the mechanism that provides trusted identity, which can reassure network
managers that the specific devices they ordered from authorized manufacturers for
attachment to their network are those that were installed and that they continue to
be present in their network. As part of the mechanism for Device Identity,
cryptographic proof of the manufacturer's identity is also provided.</li>
          <li>Software Measurement is the mechanism that reports the state of mutable software components
on the device and that can assure administrators that they have known, authentic
software configured to run in their network.</li>
        </ul>
        <t>By using these two interlocking mechanisms, RIV, which is a component in a chain of procedures, can assure a network operator that the equipment in
their network can be reliably identified and that authentic software of
a known version is installed on each device.  Equipment in the network includes
devices that make up the network itself, such as routers, switches, and firewalls.</t>
        <t>Software used to boot a device can be identified by a chain
of measurements, anchored at the start by a Root of Trust for Measurement (RTM) (see <xref target="root-of-trust" format="default"/>). An attestation function embedded in each stage, verified by the previous stage, measures the next stage
and records the result in tamper-resistant storage. 
A measurement signifies the identity, integrity, and version of each
software component registered with an Attester's TPM <xref target="TPM-1.2" format="default"/> <xref target="TPM-2.0" format="default"/> so that a
subsequent verification stage can determine if the software
installed is authentic, up-to-date, and free of tampering.</t>
        <t>RIV includes several major processes, which are split between the Attester and Verifier:</t>
        <ol spacing="normal" type="1"><li>Generation of Evidence is the process whereby an Attester generates cryptographic
proof (Evidence) of claims about device properties. In particular, the
device identity and its software configuration are both of critical importance.</li>
          <li>Device Identification refers to the mechanism assuring the
Relying Party (ultimately, a network administrator) of the identities of devices, and the identities of their manufacturers, that make up their network.</li>
          <li>Conveyance of Evidence
 reliably transports the collected Evidence from the Attester to a Verifier to allow a management station to perform
 a meaningful appraisal in Step 4. The transport
 is typically carried out via a management network.
 Although not required for reliable attestation, an encrypted channel may be used to
 provide integrity, authenticity, or confidentiality once attestation is complete.
 It should be noted that critical attestation evidence from the TPM is signed by a key known only to TPM, and is not
 dependent on encryption carried out as part of a reliable transport.</li>
          <li>Finally, appraisal of evidence occurs.  This is the process of verifying the Evidence received by
  a Verifier from the Attester and using an Appraisal Policy to develop an
  Attestation Result, which is used to inform decision-making.  In practice, this means comparing
  the Attester's measurements reported as Evidence with the device configuration expected
  by the Verifier.  Subsequently, the Appraisal Policy for Evidence might
  match Evidence found against Reference Values (aka Golden Measurements), which represent 
  the intended configured state of the connected device.</li>
        </ol>
        <t>All implementations supporting this RIV specification require the support of the following three technologies:</t>
        <ol spacing="normal" type="1"><li>Identity: Device identity in RIV is based on Device Identity (DevID) defined by IEEE Std 802.1AR <xref target="IEEE-802-1AR" format="default"/>,
coupled with careful supply-chain management by the manufacturer.  The
Initial DevID (IDevID) certificate contains a statement by the manufacturer that establishes
the identity of the device as it left the factory.  Some applications with
a more complex post-manufacture supply chain (e.g., value added resellers),
or with different privacy concerns, may want to use alternative mechanisms for platform
authentication (for example, TCG Platform Certificates <xref target="PLATFORM-CERTS" format="default"/> or 
post-manufacture installation of Local DevID (LDevID)).</li>
          <li>Platform attestation provides evidence of configuration of software elements
present in the device.  This form of attestation can be implemented
with TPM Platform Configuration Registers (PCRs) and  Quote and Log mechanisms, which provide cryptographically authenticated evidence
to report what software was started on the device through the boot cycle.  Successful attestation requires an 
unbroken chain from a boot-time Root of Trust through all layers of software needed to bring the device to an 
operational state, in which each stage computes the hash of components of the next stage, then updates the attestation log and 
the TPM.  The TPM can then report the hashes of all the measured hashes as signed evidence called a 
Quote (see <xref target="using-tpm" format="default"/> for an overview of TPM operation or <xref target="TPM-1.2" format="default"/> and <xref target="TPM-2.0" format="default"/> for many more details).</li>
          <li>Signed Reference Values (aka reference integrity measurements) must be conveyed from the Reference Value Provider (the entity accepted as the software authority,
often the manufacturer of the network device) to the Verifier.</li>
        </ol>
      </section>
      <section anchor="solution-requirements" numbered="true" toc="default">
        <name>Solution Requirements</name>
        <t>RIV must address the "Lying Endpoint"
problem, in which malicious software on an endpoint may subvert the
intended function and also prevent the endpoint from reporting its compromised
status.  (See <xref target="security-cons" format="default"/> for further Security Considerations.)</t>
        <t>RIV attestation is designed to be simple
to deploy at scale. RIV should work "out of the box" as far as possible,
that is, with the fewest possible provisioning steps or configuration databases
needed at the end user's site.  Network equipment is often required to "self-configure",
to reliably reach out without manual intervention to prove its identity and
operating posture, then download its own configuration, a process which precludes pre-installation configuration. See <xref target="RFC8572" format="default"/> for an
example of Secure Zero Touch Provisioning (SZTP).</t>
      </section>
      <section anchor="scope" numbered="true" toc="default">
        <name>Scope</name>
        <t>The need for assurance of software integrity, addressed by Remote Attestation, is a very general problem that could apply to most network-connected computing devices.  However, this document includes several assumptions that limit the scope to network equipment (e.g., routers, switches, and firewalls):</t>
        <ul spacing="normal">
          <li>This solution is for use in non-privacy-preserving applications (for example,
networking or industrial Internet of Things (IoT) applications), which avoids the need for a Privacy Certification
Authority (also called an Attestation CA) for Attestation Keys (AKs) <xref target="AIK-ENROLL" format="default"/> or TCG Platform
Certificates <xref target="PLATFORM-CERTS" format="default"/>.</li>
          <li>This document assumes network protocols that are common in network equipment such as YANG <xref target="RFC7950" format="default"/> and Network Configuration Protocol (NETCONF) <xref target="RFC6241" format="default"/>,
but not generally used in other applications.</li>
          <li>The approach outlined in this document mandates the use of a TPM <xref target="TPM-1.2" format="default"/> <xref target="TPM-2.0" format="default"/> or a compatible cryptoprocessor.</li>
        </ul>
        <section anchor="out-of-scope" numbered="true" toc="default">
          <name>Out of Scope</name>
          <dl spacing="normal">
            <dt>Run-Time Attestation:</dt><dd>The Linux Integrity Measurement Architecture <xref target="IMA" format="default"/> attests each process launched
after a device is started (and is in scope for RIV in general), but continuous run-time attestation of Linux or 
other multi-threaded operating system processes after the OS has started considerably expands the scope of the problem.
Many researchers are working on that problem, but this document defers the problem of continuous, in-memory
run-time attestation.</dd>
            <dt>Multi-Vendor Embedded Systems:</dt><dd> Additional coordination would be needed for
devices that themselves comprise hardware and software from multiple vendors and are
integrated by the end user.  Although out of scope for this document, these
issues are accommodated in <xref target="RFC9334" format="default"/>.</dd>
            <dt>Processor Sleep Modes:</dt><dd>Network equipment typically does not "sleep", so
sleep and hibernate modes are not considered.  Although out of scope
for RIV in this document, TCG specifications do encompass sleep and hibernate
states, which could be incorporated into remote attestation for network equipment in the future, given a compelling need.</dd>
            <dt>Virtualization and Containerization:</dt><dd> In a non-virtualized system, the host OS is
responsible for measuring each user-space file or process throughout the operational lifetime
of the system.  For virtualized systems, the host OS must verify the hypervisor, 
but then the hypervisor must manage its own chain of trust through the virtual machine.  Virtualization 
and containerization technologies are increasingly used in network equipment, but 
are not considered in this document.</dd>
          </dl>
        </section>
      </section>
    </section>
    <section anchor="solution-overview" numbered="true" toc="default">
      <name>Solution Overview</name>
      <section anchor="riv-software-configuration-attestation-using-tpm" numbered="true" toc="default">
        <name>RIV Software Configuration Attestation Using TPM</name>
        <t>RIV Attestation is a process that can be used to determine the identity of software running
on a specifically identified device.  The Remote Attestation steps of <xref target="RIV-desc" format="default"/> are split into two
phases as shown in <xref target="RIV-Attestation-Model" format="default"/>:</t>
        <ul spacing="normal">
          <li>During system startup, or Boot Phase, each distinct software object is "measured" by the Attester.
The object's identity, hash (i.e., cryptographic digest), and version information are recorded in a log.
Hashes are also extended into the TPM (see <xref target="using-tpm" format="default"/> for more on extending hashes) in a way that can be used to validate the log entries.  The measurement process generally
follows the layered chain-of-trust model used in Measured Boot, where each stage
of the system measures the next one, and extends its measurement into the TPM,
before launching it.  See <xref target="RFC9334" sectionFormat="of" section="3.2"/>, "Layered Attestation Environments", for an architectural definition
of this model.</li>
          <li>Once the device is running and has operational network connectivity, verification can take place.  A separate
 Verifier, running in its own trusted environment, will interrogate the network
device to retrieve the logs and a copy of the digests collected by hashing
each software object, signed by an attestation private key secured by, but never released by,
the TPM.  The YANG model described in <xref target="RFC9684" format="default"/> facilitates this operation.</li>
        </ul>
        <t>The result is that the Verifier can verify the device's identity by checking
the subject <xref target="RFC5280" format="default"/> and signature of the certificate containing the TPM's attestation public key.
The Verifier can then verify the log's correctness by accumulating all the hashes in the log
and comparing that to the signed digests from the TPM.  From
there, the Verifier can validate the launched software by
comparing the digests in the log with Reference Values.</t>
        <t>It should be noted that attestation and identity are inextricably linked;
signed Evidence that a particular version of software was loaded is of little
value without cryptographic proof of the identity of the Attester producing
the Evidence.</t>
        <figure anchor="RIV-Attestation-Model">
          <name>Layered RIV Attestation Model</name>
          <artwork align="left" name="" type="" alt=""><![CDATA[
    +-------------------------------------------------------+
    | +---------+    +--------+   +--------+    +---------+ |
    | |UEFI BIOS|--->| Loader |-->| Kernel |--->|Userland | |
    | +---------+    +--------+   +--------+    +---------+ |
    |     |            |           |                        |
    |     |            |           |                        |
    |     +------------+-----------+-+                      |
    |                    Boot Phase  |                      |
    |                                V                      |
    |                            +--------+                 |
    |                            |  TPM   |                 |
    |                            +--------+                 |
    |   Router                       |                      |
    +--------------------------------|----------------------+
                                     |
                                     |  Verification Phase
                                     |    +-----------+
                                     +--->| Verifier  |
                                          +-----------+

    Reset---------------flow-of-time-during-boot...--------->
]]></artwork>
        </figure>
        <t>In the Boot Phase, measurements are "extended", or hashed, into the TPM as processes start, 
which result in the TPM containing hashes of all the measured hashes. Later, once the system is operational, signed 
digests are retrieved from the TPM during the Verification Phase for off-box analysis.</t>
        <section anchor="what-does-riv-attest" numbered="true" toc="default">
          <name>What Does RIV Attest?</name>
          <t>TPM attestation is focused on PCRs, but those registers are only vehicles for certifying 
accompanying Evidence conveyed in log entries.  It is the hashes in log entries that are extended into PCRs, where the final PCR values 
can be retrieved in the form of a structure called a Quote, which is signed by an AK known only to the TPM.  The use of multiple PCRs serves only to 
provide some independence between different classes of object so that one class of objects can be updated without changing the 
extended hash for other classes.  Although PCRs can be used for any purpose, this section outlines the objects within the 
scope of this document that may be extended into the TPM.</t>
          <t>In general, assignment of measurements to PCRs is a policy choice made by the device manufacturer, selected to independently attest three classes of object:</t>
          <dl>
            <dt>Code:</dt>
            <dd>Instructions to be executed by a CPU.</dd>
            <dt>Configuration:</dt>
            <dd>Many devices offer numerous options controlled by non-volatile configuration variables that can impact the device's security posture.  These settings may have vendor defaults, but often can be changed by administrators, who may want to verify via attestation that the operational state of the settings match their intended state.</dd>
            <dt>Credentials:</dt>
            <dd>Administrators may wish to verify via attestation that public keys and credentials outside the Root of Trust have not been subject to unauthorized tampering.  (By definition, keys protecting the Root of Trust can't be verified independently.)</dd>
          </dl>
          <t>The "TCG PC Client Specific Platform Firmware Profile Specification" <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/> details what is to be 
measured during the Boot Phase of platform startup using a Unified Extensible Firmware Interface (UEFI) BIOS (<eref target="www.uefi.org" brackets="angle"/>), but the goal is simply to measure every bit of 
code executed in the process of starting the device, along with any configuration information related to security posture, leaving 
no gap for unmeasured code to remain undetected and potentially subverting the chain.</t>
          <t>For devices using a UEFI BIOS, <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/> and <xref target="PC-CLIENT-EFI-TPM-1.2" format="default"/> give detailed normative requirements for PCR usage.  For other 
platform architectures, where TCG normative requirements currently do not exist, <xref target="Attested-Objects" format="default"/> gives non-normative guidance for PCR assignment that generalizes the specific 
details of <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/>.</t>
          <t>By convention, most PCRs are assigned in pairs, with the even-numbered PCR used to measure executable code and 
the odd-numbered PCR used to measure whatever data and configuration are associated with that code.  It is important 
to note that each PCR may contain results from dozens (or even thousands) of individual measurements.</t>
<table anchor="Attested-Objects">
    <name>Attested Objects</name>
	      <thead>
		<tr>
		  <th></th>
		<th rowspan="" colspan="2"> Assigned PCR #</th>
	      </tr>
	      <tr>
		<th>Function</th>
		<th>Code</th>
		<th>Configuration</th>
	      </tr>
	      </thead>
	      <tbody>
		<tr>
		  <td>Firmware Static Root of Trust (i.e., initial boot firmware and drivers)</td>
		  <td>0</td>
		  <td>1</td>
		</tr>
		<tr>
		  <td>Drivers and initialization for optional or add-in devices</td>
		  <td>2</td>
		  <td>3</td>
		</tr>
		<tr>
		  <td>OS loader code and configuration (i.e., the code launched by firmware) to load an  operating system kernel. These PCRs record each boot attempt, and an identifier for where the loader was found</td>
		  <td>4</td>
		  <td>5</td>
		</tr>
		<tr>
		  <td>Vendor-specific measurements during boot</td>
		  <td>6</td>
		  <td>6</td>
		</tr>
		<tr>
		  <td>Secure Boot Policy.  This PCR records keys and configuration used to validate the OS loader</td>
		  <td></td>
		  <td>7</td>
		</tr>
		<tr>
		  <td> Measurements made by the OS loader (e.g., GRUB2 for Linux)</td>
		  <td>8</td>
		  <td>9</td>
		</tr>
		<tr>
		  <td>Measurements made by OS (e.g., Linux IMA)</td>
		  <td>10</td>
		  <td>10</td>
		</tr>
	      </tbody>
	    </table>

        </section>
        <section anchor="notes-on-pcr-allocations" numbered="true" toc="default">
          <name>Notes on PCR Allocations</name>
          <t>It is important to recognize that PCR[0] is critical.  The first measurement into PCR[0] is taken by the Root of Trust for 
Measurement, which is code that, by definition, cannot be verified by measurement.  This measurement 
establishes the chain of trust for all subsequent measurements.  If the PCR[0] measurement cannot be trusted, the 
validity of the entire chain is called into question.</t>
          <t>Distinctions between PCR[0], PCR[2], PCR[4], and PCR[8] are summarized below:</t>
          <dl spacing="normal">
            <dt>PCR[0]</dt><dd>typically represents a consistent view of rarely changed boot components of the host platform, which allows Attestation policies to be defined using the less changeable components of the transitive trust chain. This PCR 
typically provides a consistent view of the platform regardless of user-selected options.</dd>
            <dt>PCR[2]</dt><dd>is intended to represent a "user-configurable" environment where the user has the ability to alter the 
components that are measured into PCR[2]. This is typically done by adding adapter cards, etc., into user-accessible 
Peripheral Component Interconnect (PCI) or other slots.  In UEFI systems, these devices may be configured by Option ROMs measured into PCR[2] and 
executed by the UEFI BIOS.</dd>
            <dt>PCR[4]</dt><dd>is intended to represent the software that manages the transition between the platform's pre-OS 
start and the state of a system with the OS present.  This PCR, along with PCR[5], identifies the initial 
OS loader (e.g., GRUB for Linux).</dd>
            <dt>PCR[8]</dt><dd>is used by the OS loader (e.g., GRUB) to record measurements of the various components of the operating system.</dd>
          </dl>
          <t>Although <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/> specifies the use of the first eight PCRs very carefully to ensure interoperability 
among multiple 
UEFI BIOS vendors, it should be noted that embedded software vendors may have considerably more flexibility.  Verifiers 
typically need to know which log entries are consequential and which are not (possibly controlled by local policies), but 
the Verifier may not need to know what each log entry means or why it was assigned to a particular PCR.   Designers must
recognize that some PCRs may cover log entries that a particular Verifier considers critical and other log entries that
are not considered important, so differing PCR values may not on their own constitute a check for authenticity.  For example, in a UEFI system, some administrators may consider booting an image from a removable drive, something recorded in a PCR, to be a security violation, while others might consider that operation to be an authorized recovery procedure.</t>
          <t>Designers may allocate particular events to specific PCRs in order to achieve a particular objective with local 
attestation (e.g., allowing a procedure to execute, or releasing a particular decryption key, only if a given PCR is in a given state).  It may also be important 
to designers to consider whether streaming notification of PCR updates is required (see <xref target="I-D.ietf-rats-network-device-subscription" format="default"/>).  Specific 
log entries can only be validated if the Verifier receives every log entry affecting the relevant PCR, so (for example) 
a designer might want to separate rare, high-value events, such as configuration changes, from high-volume, routine 
measurements such as IMA logs <xref target="IMA" format="default"/>.</t>
        </section>
      </section>
      <section anchor="riv-keying" numbered="true" toc="default">
        <name>RIV Keying</name>
        <t>RIV attestation relies on two credentials:</t>
        <ul spacing="normal">
          <li>An identity key pair and matching certificate is required to certify the identity of the Attester itself.
RIV specifies the use of an IEEE 802.1AR DevID <xref target="IEEE-802-1AR" format="default"/> that is
signed by the device manufacturer and contains the device serial number.  This requirement goes slightly
beyond 802.1AR; see <xref target="riv-simplify" format="default"/> for notes.</li>
          <li>An Attestation key pair and matching certificate is required to sign the Quote generated by the TPM to report evidence
of software configuration.</li>
        </ul>
        <t>In a TPM application, both the Attestation private key and the DevID private key <bcp14>MUST</bcp14> be protected by the TPM.
Depending on other TPM configuration procedures,
the two keys are likely to be different; some of the considerations are outlined in the
"TPM 2.0 Keys for Device Identity and Attestation" document <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/>.</t>
        <t>The "TPM 2.0 Keys for Device Identity and Attestation" document <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/> specifies further conventions for these keys:</t>
        <ul spacing="normal">
          <li>When separate Identity and Attestation keys are used, the 
AK and its X.509 certificate should parallel the DevID, with the same unique
device identification as the DevID certificate (that is, the same subject and subjectAltName (if present), even though the key pairs are different).  By examining the corresponding AK certificate, the Verifier 
can directly link a device's quote, which was signed by an 
AK, to the device that provided it.  If the
subject in the AK certificate doesn't match the corresponding DevID certificate, or 
if they're  signed by different authorities, the Verifier may signal the detection of an Asokan-style person-in-the-middle attack (see <xref target="pitm" format="default"/>).</li>
          <li>Network devices that are expected to use SZTP as
specified in <xref target="RFC8572" format="default"/>
<bcp14>MUST</bcp14> be shipped by the manufacturer with pre-provisioned keys (Initial DevID and Initial AK,
called IDevID and IAK, respectively).  IDevID and IAK certificates <bcp14>MUST</bcp14> both be signed by the Endorser 
(typically the device manufacturer).  Inclusion of an IDevID and IAK by a vendor does not
preclude a mechanism whereby an administrator can define LDevID and
Local Attestation Keys (LAK) if desired.</li>
        </ul>
      </section>
      <section anchor="RIV-flow" numbered="true" toc="default">
        <name>RIV Information Flow</name>
        <t>RIV workflow for network equipment is organized around a simple use case
where a network operator wishes to verify the integrity of software installed
in specific, fielded devices.  A normative taxonomy of terms is given in <xref target="RFC9334" format="default"/>, 
but as a reminder, this use case implies several roles and objects:</t>
        <dl spacing="normal">
          <dt>Attester:</dt>
          <dd>The device that the network operator wants to examine.</dd>
          <dt>Verifier:</dt>
          <dd>Which might be a Network Management Station and is somewhat separate
  from the Device that will retrieve the signed evidence and measurement logs, and analyze them to pass
  judgment on the security posture of the device.</dd>
          <dt>Relying Party:</dt>
          <dd>Can act on Attestation Results.  Interaction between the Relying Party and the
  Verifier is considered out of scope for RIV.</dd>
          <dt>Signed Reference Integrity Manifests (RIMs):</dt>
          <dd>Contains Reference Values. RIMs can
  either be created by the device manufacturer
  and shipped along with the device as part of its software image, or alternatively,
  could be obtained several other ways (direct to the Verifier from the
  manufacturer, from a third party, from the owner's concept 
  of a "known good system", etc.).  Retrieving RIMs from the device
  itself allows attestation to be done in systems that may not have access
  to the public Internet, or by other devices that are not management stations
  per se (e.g., a peer device; see <xref target="RIM-policy" format="default"/>).  If Reference Values are obtained from
  multiple sources, the Verifier may need to evaluate the relative level of
  trust to be placed in each source in case of a discrepancy.</dd>
        </dl>
        <t>These components are illustrated in <xref target="RIV-Reference-Configuration" format="default"/>.</t>
        <figure anchor="RIV-Reference-Configuration">
          <name>RIV Reference Configuration for Network Equipment</name>
          <artwork align="left" name="" type="" alt=""><![CDATA[
+----------------+        +-------------+        +---------+--------+
|Reference Value |        | Attester    | Step 1 | Verifier|        |
|Provider        |        | (Device     |<-------| (Network| Relying|
|(Device         |        | under       |------->| Mgmt    | Party  |
|Manufacturer    |        | attestation)| Step 2 | Station)|        |
|or other        |        |             |        |         |        |
|authority)      |        |             |        |         |        |
+----------------+        +-------------+        +---------+--------+
       |                                             /\
       |                  Step 0                      |
       -----------------------------------------------
]]></artwork>
        </figure>
        <ol spacing="normal" type="Step %d:" start="0"  indent="9">
          <li>The Reference Value Provider (the device manufacturer or other authority) makes 
one or more RIMs, which correspond to the software image expected to be found on the device and are signed by the Reference Value Provider, available to the Verifier.
(See <xref target="RIM-policy" format="default"/> for "in-band" and "out of band" ways to make this happen.)</li>
          <li>On behalf of a Relying Party, the Verifier (Network Management Station) requests DevID,
Measurement Values, and possibly RIMs from the Attester.</li>
          <li>The
Attester responds to the request by providing a DevID, quotes (measured values that are signed by the Attester),
and optionally RIMs.</li>
        </ol>
        <t>The use of the following standards components allows for interoperability:</t>
        <ol spacing="normal" type="1"><li>TPM keys <bcp14>MUST</bcp14> be configured according to <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/> or <xref target="PLATFORM-ID-TPM-1.2" format="default"/>.</li>
          <li>For devices using UEFI and Linux, measurements of firmware and bootable modules <bcp14>MUST</bcp14> be taken according to "TCG EFI Platform Specification" <xref target="PC-CLIENT-EFI-TPM-1.2" format="default"/> or "TCG PC Client Specific Platform Firmware Profile Specification" <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/>, and Linux IMA <xref target="IMA" format="default"/>.</li>
          <li>DevID <bcp14>MUST</bcp14> be managed as DevID certificates as specified in IEEE Std 802.1AR <xref target="IEEE-802-1AR" format="default"/>, with keys protected by TPMs.</li>
          <li>Attestation logs from Linux-based systems <bcp14>MUST</bcp14> be formatted according to the "Canonical Event Log Format" <xref target="CEL" format="default"/>.  UEFI-based systems <bcp14>MUST</bcp14> use the TCG UEFI BIOS event log <xref target="PC-CLIENT-EFI-TPM-1.2" format="default"/> for TPM 1.2 systems and the "TCG PC Client Specific Platform Firmware Profile" <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/> for TPM 2.0 systems.</li>
          <li>Quotes <bcp14>MUST</bcp14> be retrieved from the TPM according to the TCG Trusted Attestation Protocol Information Model (TAP IM) <xref target="TAP" format="default"/> and the Challenge-Response-based Remote Attestation (CHARRA) YANG model <xref target="RFC9684" format="default"/>.  While the TAP IM gives a protocol-independent description of the data elements involved, it's important to note that quotes from the TPM are signed inside the TPM and <bcp14>MUST</bcp14> be retrieved in a way that does not invalidate the signature, to preserve the trust model.  The CHARRA YANG model <xref target="RFC9684" format="default"/> is used for this purpose.  (See <xref target="security-cons" format="default"/>, Security Considerations).</li>
          <li>Reference Values <bcp14>MUST</bcp14> be encoded as defined in
  the TCG RIM document <xref target="RIM" format="default"/>, typically using Software Identification (SWID) tags <xref target="SWID" format="default"/> <xref target="NIST-IR-8060" format="default"/> or Concise SWID (CoSWID) tags <xref target="RFC9393" format="default"/>.</li>
        </ol>
      </section>
      <section anchor="riv-simplify" numbered="true" toc="default">
        <name>RIV Simplifying Assumptions</name>
        <t>This document makes the following simplifying assumptions to reduce complexity:</t>
        <ul spacing="normal">
          <li>The product to be attested <bcp14>MUST</bcp14> be shipped by the equipment vendor with both a DevID as specified by IEEE Std 802.1AR and an IAK, with certificates in place.  The IAK certificate must contain the same identity
information as the DevID (specifically, the same subject and subjectAltName (if used), signed by the manufacturer).  The IAK is a type of key that can be
used to sign a TPM Quote, but not other objects (i.e., it's marked as a TCG "Restricted" key; 
this convention is described in 
"TPM 2.0 Keys for Device Identity and Attestation" <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/>). For network equipment, which is generally not privacy sensitive, shipping
a device with both an IDevID and an IAK already provisioned substantially
simplifies initial startup.</li>
          <li>
            <t>IEEE Std 802.1AR does not require a product serial number as part of the subject, but RIV-compliant
devices <bcp14>MUST</bcp14> include their serial numbers in the DevID/IAK certificates to simplify tracking logistics 
for network equipment users.  All other optional
802.1AR fields remain optional in RIV.</t>
            <t>
It should be noted that the use of X.509 certificate fields as specified by IEEE Std 802.1AR 
is not identical to that described in <xref target="RFC9525" format="default"/> for representation of application service identity.</t>
          </li>
          <li>The product <bcp14>MUST</bcp14> be equipped with an RTM, a Root of Trust
for Storage, and a Root of Trust for Reporting (as defined in <xref target="SP800-155" format="default"/>), which together are
capable of conforming to the TCG TAP IM <xref target="TAP" format="default"/>.</li>
          <li>The authorized software supplier <bcp14>MUST</bcp14> make available Reference Values
in the form of signed SWID or CoSWID tags.</li>
        </ul>
        <section anchor="RIM-section" numbered="true" toc="default">
          <name>Reference Integrity Manifests (RIMs)</name>
          <t><xref target="RFC9684" format="default"/> focuses on collecting and transmitting evidence in
the form of PCR measurements and attestation logs.  But the critical part
of the process is enabling the Verifier to decide whether the measurements
are "the right ones" or not.</t>
          <t>While it must be up to network administrators to decide what they want on
their networks, the software supplier should supply the Reference Values, in 
signed RIMs, that
may be used by a Verifier to determine if evidence shows known good, known
bad, or unknown software configurations.</t>
          <t>In general, there are two kinds of reference measurements:</t>
          <ol spacing="normal" type="1"><li>Measurements of early system startup (e.g., BIOS, boot loader, OS kernel)
are essentially single threaded and executed exactly once, in a known sequence,
before any results can be reported.  In this case, while the method for
computing the hash and extending relevant PCRs may be complicated, the net
result is that the software (more likely, firmware) vendor will have one
known good PCR value that "should" be present in the relevant PCRs after the box has
booted.  In this case, the signed reference measurement could simply list the
expected hashes for the given version.  However, a RIM that contains the
intermediate hashes can be useful in debugging cases where the expected final hash
is not the one reported.</li>
            <li>Measurements taken later in operation of the system, once an OS has started
(for example, Linux IMA <xref target="IMA" format="default"/>), may be more complex, with unpredictable "final"
PCR values.  In this case, the Verifier must have enough information to reconstruct
the expected PCR values from logs and signed reference measurements from
a trusted authority.</li>
          </ol>
          <t>In both cases, the expected values can be expressed as signed SWID or CoSWID tags,
but the SWID structure in the second case is somewhat more complex, as reconstruction of the extended hash in a PCR may involve thousands of files and other objects.</t>
          <t>TCG has published an information model defining elements of RIMs
under the title "TCG Reference Integrity Manifest (RIM) Information Model" <xref target="RIM" format="default"/>.  This information model outlines how SWID tags should be structured to allow attestation, and it defines "bundles" of SWID tags that may be needed to describe a complete software release.  The RIM contains metadata relating to the software release it belongs to, plus hashes for each individual file or other object that could be attested.</t>
          <t>Many network equipment vendors use a UEFI BIOS to launch their network operating system.  These vendors may want to 
also use the "TCG PC Client Reference Integrity Manifest Specification" <xref target="PC-CLIENT-RIM" format="default"/>, which focuses specifically on a SWID-compatible format suitable for expressing measurement values expected from a UEFI BIOS.</t>
        </section>
        <section anchor="attestation-logs" numbered="true" toc="default">
          <name>Attestation Logs</name>
          <t>Quotes from a TPM can provide evidence of the state of a device up to the time
the evidence was recorded. However, to make sense of the quote in cases where several events are extended into one PCR, an
event log that identifies which software modules contributed which values to the quote
during startup must also be provided.  When required, the log <bcp14>MUST</bcp14> contain enough information
to demonstrate its integrity by allowing exact reconstruction of the digest
conveyed in the signed quote (that is, calculating the hash of all the hashes in the
log should produce the same values as contained in the PCRs; if they don't match, the log
may have been tampered with.  See <xref target="using-tpm" format="default"/>).</t>
          <t>There are multiple event log formats that may be supported as viable formats of Evidence between the Attester and Verifier;
however, to simplify interoperability, RIV focuses on just three:</t>
          <ol spacing="normal" type="1">
            <li>TCG UEFI BIOS event log for TPM 2.0 ("TCG PC Client Specific Platform Firmware Profile Specification") <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/></li>
            <li>TCG UEFI BIOS event log for TPM 1.2 ("TCG EFI Platform Specification" for TPM Family 1.1 or
1.2, Section 7) <xref target="PC-CLIENT-EFI-TPM-1.2" format="default"/></li>
            <li>TCG "Canonical Event Log Format" <xref target="CEL" format="default"/></li>
          </ol>
        </section>
      </section>
    </section>
    <section anchor="standards-components" numbered="true" toc="default">
      <name>Standards Components</name>
      <section anchor="prerequisites-for-riv" numbered="true" toc="default">
        <name>Prerequisites for RIV</name>
        <t>The Reference Interaction Model for Challenge-Response-based Remote Attestation (<xref target="I-D.ietf-rats-reference-interaction-models" format="default"/>)
is based on the standard roles defined in <xref target="RFC9334" format="default"/>.  However, additional prerequisites have been established to allow for interoperable implementations of RIV use cases.  These prerequisites are intended to provide sufficient context information so that the Verifier can acquire and evaluate measurements collected by the Attester.</t>
        <section anchor="unique-device-identity" numbered="true" toc="default">
          <name>Unique Device Identity</name>
          <t>A DevID in the form of a DevID certificate as specified by IEEE Std 802.1AR <xref target="IEEE-802-1AR" format="default"/> must be provisioned in the Attester's TPMs.</t>
        </section>
        <section anchor="keys" numbered="true" toc="default">
          <name>Keys</name>
          <t>The AK and certificate must also be provisioned on the Attester according to <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/> or <xref target="PLATFORM-ID-TPM-1.2" format="default"/>.</t>
          <t>It <bcp14>MUST</bcp14> be possible for the Verifier to determine that the Attester's AKs are resident in the same TPM as its DevID keys (see <xref target="riv-keying" format="default"/> and <xref target="security-cons" format="default"/>, Security Considerations).</t>
        </section>
        <section anchor="RIM-policy" numbered="true" toc="default">
          <name>Appraisal Policy for Evidence</name>
          <t>As noted in <xref target="RIV-flow" format="default"/>, the Verifier may obtain Reference Values from several sources.  In addition, administrators may make authorized, site-specific changes (e.g., keys in key databases) that could impact attestation results.  As such, there could be conflicts, omissions, or ambiguities between some Reference Values and collected Evidence.</t>
          <t>The Verifier <bcp14>MUST</bcp14> have an Appraisal Policy for Evidence to evaluate the significance of any discrepancies between different reference sources, or between Reference Values and evidence from logs and quotes.
While there must be an Appraisal Policy, this document does not specify the format or mechanism to convey the intended policy, nor does RIV specify mechanisms by which the results of applying the policy are communicated to the Relying Party.</t>
        </section>
      </section>
      <section anchor="reference-model-for-challenge-response" numbered="true" toc="default">
        <name>Reference Model for Challenge-Response</name>
        <t>Once the prerequisites for RIV are met, a Verifier is able to acquire Evidence from an Attester.  <xref target="IETF-Attestation-Information-Flow" format="default"/> illustrates a RIV information flow between a Verifier and an Attester, 
derived from <xref target="I-D.ietf-rats-reference-interaction-models" sectionFormat="of" section="7.1"/>.  In this diagram, each event with its
input and output parameters is shown as "Event(input-params)=&gt;(outputs)".
The event times shown correspond to the time types described within <xref target="RFC9334" section="A" sectionFormat="of" format="default"/>:</t>
        <figure anchor="IETF-Attestation-Information-Flow">
          <name>IETF Attestation Information Flow</name>
          <artwork align="left" name="" type="" alt=""><![CDATA[
.----------.                               .-----------------------.
| Attester |                              | Relying Party/Verifier |
'----------'                              '------------------------'
  time(VG)                                                      |
generateClaims(attestingEnvironment)                            |
   | => claims, eventLogs                                       |
   |                                                            |
   |                                                        time(NS)
   | <-- requestAttestation(handle, authSecIDs, claimSelection) |
   |                                                            |
 time(EG)                                                       |
collectClaims(claims, claimSelection)                           |
   | => collectedClaims                                         |
   |                                                            |
generateEvidence(handle, authSecIDs, collectedClaims)           |
   | => evidence                                                |
   |                                                    time(RG,RA)
   | evidence, eventLogs -------------------------------------> |
   |                                                            |
   |               appraiseEvidence(evidence, eventLogs, refValues)
   |                                       attestationResult <= |
   |                                                            |
   ~                                                            ~
   |                                                       time(RX)
]]></artwork>
        </figure>
        <dl spacing="normal">
          <dt>Step 1 (time(VG)):</dt><dd>One or more attesting network device PCRs are extended with measurements.  RIV provides no direct link between 
the time at which the event takes place and the time that it's attested, although streaming attestation as described in <xref target="I-D.ietf-rats-network-device-subscription" format="default"/> could.</dd>
          <dt>Step 2 (time(NS)):</dt><dd>The Verifier generates a unique random nonce ("number used once") and makes a request for one or more PCRs from an Attester.  For interoperability, this must be accomplished as specified in "A YANG Data Model for Challenge-Response-Based Remote Attestation (CHARRA) Procedures Using Trusted Platform Modules (TPMs)" <xref target="RFC9684" format="default"/>.  Both TPM 1.2 and TPM 2.0 allow nonces as large as the operative digest size (i.e., 20 or 32 bytes; see <xref target="TPM-1.2" format="default"/> Part 2, Section 5.5, and <xref target="TPM-2.0" format="default"/> Part 2, Section 10.4.4).</dd>
          <dt>Step 3 (time(EG)):</dt><dd>On the Attester, measured values are retrieved from the Attester's TPM. This requested PCR evidence
along with the Verifier's nonce is called a Quote and is signed by the AK associated with the DevID.  Quotes are retrieved according to the CHARRA YANG model <xref target="RFC9684" format="default"/>.  At the same time, the Attester collects log evidence showing the values have been extended into that PCR.  <xref target="using-tpm" format="default"/> gives more detail on how this works and includes references to the structure and contents of quotes in TPM documents.</dd>
          <dt>Step 4:</dt><dd>The collected Evidence is passed from the Attester to the Verifier.</dd>
  
            <dt>Step 5 (time(RG,RA)):</dt><dd><t>The Verifier reviews the Evidence and takes action as needed.  As the interaction between Relying Party and Verifier is out of scope for RIV, this can be described as one step.</t>
            <ul spacing="normal">
              <li>If the signature covering TPM Evidence is not correct, the device <bcp14>SHOULD NOT</bcp14> be trusted.</li>
              <li>If the nonce in the response doesn't match the Verifier's nonce, the response may be a replay, and the device <bcp14>SHOULD NOT</bcp14> be trusted.</li>
              <li>If the signed PCR values do not match the set of log entries that have extended a particular PCR, the device <bcp14>SHOULD NOT</bcp14> be trusted.</li>
              <li>If the log entries that the Verifier considers important do not match known good values, the device <bcp14>SHOULD NOT</bcp14> be trusted.  We note that the process of collecting and analyzing the log can be omitted if the value in the relevant PCR is already a known-good value.</li>
              <li>If the set of log entries are not seen as acceptable by the Appraisal Policy for Evidence, the device <bcp14>SHOULD NOT</bcp14> be trusted.</li>
              <li>If time(RG)-time(NS) is greater than the Appraisal Policy for Evidence's threshold for assessing freshness, the Evidence is considered stale and <bcp14>SHOULD NOT</bcp14> be trusted.</li>
	    </ul>
	  </dd>
        </dl>
        <section anchor="transport-and-encoding" numbered="true" toc="default">
          <name>Transport and Encoding</name>
          <t>Network Management systems may retrieve signed PCR-based Evidence using NETCONF or RESTCONF with <xref target="RFC9684" format="default"/>.
In either case, implementations must do so using a secure tunnel.</t>
          <t>Log Evidence <bcp14>MUST</bcp14> be retrieved via log interfaces specified in <xref target="RFC9684" format="default"/>.</t>
        </section>
      </section>
      <section anchor="peer-to-peer" numbered="true" toc="default">
        <name>Centralized vs. Peer-to-Peer</name>
        <t><xref target="IETF-Attestation-Information-Flow" format="default"/> assumes that the Verifier is trusted, while the Attester is not.  In a peer-to-peer application such as two routers negotiating a trust relationship, the two peers can each ask the other to prove software integrity.  In this application, the information flow is the same, but each side plays a role both as an Attester and a Verifier.  Each device issues a challenge, and each device responds to the other's challenge, as shown in <xref target="Peer-to-peer-Information-Flow" format="default"/>.  Peer-to-peer challenges, particularly if used to establish a trust relationship between routers, require devices to carry their own signed reference measurements (RIMs).  Devices may also have to carry an appraisal policy for evidence for each possible peer device so that each device has everything needed for remote attestation, without having to resort to a central authority.</t>
        <figure anchor="Peer-to-peer-Information-Flow">
          <name>Peer-to-Peer Attestation Information Flow</name>
          <artwork align="left" name="" type="" alt=""><![CDATA[
+---------------+                            +---------------+
| RefVal        |                            | RefVal        |
| Provider A    |                            | Provider B    |
| Firmware      |                            | Firmware      |
| Configuration |                            | Configuration |
| Authority     |                            | Authority     |
|               |                            |               |
+---------------+                            +---------------+
      |                                             |
      |                                             |Step 0B
      |       +------------+        +------------+  |
      |       |            | Step 1 |            |  |   \
      |       | Attester   |<------>| Verifier   |  |   |
      |       |            |<------>|            |  |   |  Router B
      +------>|            | Step 2 |            |  |   |- Challenges
       Step 0A|            |        |            |  |   |  Router A
              |            |------->|            |  |   |
              |- Router A -| Step 3 |- Router B -|  |   /
              |            |        |            |  |
              |            |        |            |  |
              |            | Step 1 |            |  |   \
              | Verifier   |<------>| Attester   |<-+   |  Router A
              |            |<------>|            |      |- Challenges
              |            | Step 2 |            |      |  Router B
              |            |        |            |      |
              |            |<-------|            |      |
              +------------+ Step 3 +------------+      /
]]></artwork>
        </figure>
        <t>In this application, each device may need to be equipped with signed RIMs to act as an Attester, and to allow each device to act as a Verifier, each may need to be equipped with an Appraisal Policy for Evidence and a selection of trusted X.509 root certificates also.   An existing link layer protocol such as 802.1X <xref target="IEEE-802.1X" format="default"/> or 802.1AE <xref target="IEEE-802.1AE" format="default"/>, with Evidence being enclosed over a variant of the Extensible Authentication Protocol (EAP) <xref target="RFC3748" format="default"/> or Link Layer Discovery Protocol (LLDP) <xref target="LLDP" format="default"/>, are suitable methods for such an exchange.
Details of peer-to-peer operation are out of scope for this document.</t>
      </section>
    </section>
    <section anchor="privacy-considerations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Network equipment, such as routers, switches, and firewalls, has a key role to play in guarding the privacy of individuals using the network.  Network equipment generally adheres to several rules to protect privacy:</t>
      <ul spacing="normal">
        <li>
          <t>Packets passing through the device must not be sent to unauthorized destinations.  For example:  </t>
          <ul spacing="normal">
            <li>Routers often act as Policy Enforcement Points, where individual subscribers may be checked for
authorization to access a network.  Subscriber login information must not be released to unauthorized parties.</li>
            <li>Network equipment is often called upon to block access to protected resources from unauthorized users.</li>
          </ul>
        </li>
        <li>Routing information, such as the identity of a router's peers, must not be leaked to unauthorized neighbors.</li>
        <li>If configured, encryption and decryption of traffic must be carried out reliably, while protecting keys and credentials.</li>
      </ul>
      <t>Functions that protect privacy are implemented as part of each layer of hardware and software that
makes up the networking device.
In light of these requirements for protecting the privacy of users of the network, the network equipment
must identify itself, and its boot configuration and measured device state (for example, PCR values),
to the equipment's administrator so there's no uncertainty about the device's function and
configuration. Attestation is a component that allows the administrator to ensure that the network
provides individual and peer privacy guarantees, even though the device itself may not have a 
right to keep its identity secret.</t>
      <t>See <xref target="NET-EQ" format="default"/> for more context on privacy in networking devices.</t>
      <t>While attestation information from network devices is not likely to contain privacy-sensitive content regarding 
network users, administrators may want to keep attestation records confidential to avoid disclosing versions of 
software loaded on the device, which is information that could facilitate attacks against known vulnerabilities.</t>
    </section>
    <section anchor="security-cons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>Specifications such as TLS <xref target="RFC8446" format="default"/> and YANG <xref target="RFC7950" format="default"/> contain considerable advice on keeping
network-connected systems secure.  This section outlines specific risks and mitigations related to attestation.</t>
      <t>Attestation Evidence obtained by the RIV procedure is subject to a number of attacks:</t>
      <ul spacing="normal">
        <li>Keys may be compromised.</li>
        <li>A counterfeit device may attempt to impersonate (spoof) a known authentic device.</li>
        <li>Person-in-the-middle attacks may be used by a compromised device to attempt to deliver
responses that originate in an authentic device.</li>
        <li>Replay attacks may be attempted by a compromised device.</li>
      </ul>
      <section anchor="keys-used-in-riv" numbered="true" toc="default">
        <name>Keys Used in RIV</name>
        <t>Trustworthiness of RIV attestation depends strongly on the validity of keys used for identity
and attestation reports.  RIV takes full advantage of TPM capabilities to ensure that evidence can be trusted.</t>
        <t>Two sets of key pairs are relevant to RIV attestation:</t>
        <ul spacing="normal">
          <li>A DevID key pair is used to certify the identity of the device in which the TPM is installed.</li>
          <li>An AK key pair is used to certify attestation Evidence (i.e., quotes) and 
to provide evidence for integrity of the device software.</li>
        </ul>
        <t>TPM practices usually require that these keys be different to ensure that a general-purpose
signing key cannot be used to spoof an attestation quote.</t>
        <t>In each case, the private half of the key is known only to the TPM and cannot be
retrieved externally, even by a trusted party.  To ensure that's the case,
specification-compliant private/public key pairs are generated inside the TPM, where they are never
exposed and cannot be extracted (see <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/>).</t>
        <t>Keeping keys safe is a critical enabler of trustworthiness, but it's just part of attestation security; knowing which keys are bound
to the device in question is just as important in an environment where private keys are never exposed.</t>
        <t>While there are many ways to manage keys in a TPM (see <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/>), RIV includes
support for "zero touch" provisioning (also known as zero touch onboarding) of fielded
devices (e.g., SZTP <xref target="RFC8572" format="default"/>), where keys that have predictable trust properties are
provisioned by the device vendor.</t>
        <t>Device identity in RIV is based on DevID defined by IEEE Std 802.1AR. This specification provides several elements:</t>
        <ul spacing="normal">
          <li>A DevID requires a unique key pair for each device, accompanied by an X.509 certificate.</li>
          <li>The private portion of the DevID key is to be stored in the device, in a manner that provides confidentiality (Section 6.2.5 of <xref target="IEEE-802-1AR" format="default"/>).</li>
        </ul>
        <t>The X.509 certificate contains several components:</t>
        <ul spacing="normal">
          <li>The public part of the unique DevID key assigned to that device allows a challenge of identity.</li>
          <li>An identifying string that's unique to the manufacturer of the device.  This is normally the
serial number of the unit, which might also be printed on a label on the device.</li>
          <li>The certificate must be signed by a key traceable to the manufacturer's root key.</li>
        </ul>
        <t>With these elements, the device's manufacturer and serial number can be identified by analyzing the
DevID certificate plus the chain of intermediate certificates leading back to the manufacturer's root
certificate.  As is conventional in TLS or SSH connections, a random nonce must be signed by the device
in response to a challenge,
proving possession of its DevID private key.</t>
        <t>RIV uses the DevID to validate a TLS or SSH connection to the device as the attestation session begins.  Security of
this process derives from TLS or SSH security, with the DevID, which contains a device serial number, providing proof that the session terminates on
the intended device. See <xref target="RFC8446" format="default"/> <xref target="RFC4253" format="default"/>.</t>
        <t>Evidence of software integrity is delivered in the form of a quote that is signed by the TPM
itself and accompanied by an IAK certificate containing the same identity information as the DevID.  Because the contents of the quote are signed inside the TPM, any external
modification (including reformatting to a different data format) after measurements have been taken will be detected
as tampering.  An unbroken chain of trust is essential for ensuring that blocks of code that are taking
measurements have been verified before execution (see <xref target="RIV-Attestation-Model" format="default"/>).</t>
        <t>Requiring measurements of the operating software to be signed by a key known only to the TPM also
removes the need to trust the device's operating software (beyond the first measurement in the RTM; see below). 
If malicious software makes any changes to a quote
in the device itself, or in the path back to the Verifier, the signature on the quote will
be invalidated.</t>
        <t>A critical feature of the YANG model described in <xref target="RFC9684" format="default"/> is the ability to carry TPM data structures in their TCG-defined format, without requiring any changes to the structures as they were signed and delivered by the TPM.  While alternate methods of conveying TPM quotes could reduce redundant information, or add another layer of signing using external keys, the implementation <bcp14>MUST</bcp14> preserve the TPM signing so that tampering anywhere in the path between the TPM itself and the Verifier can be detected.</t>
      </section>
      <section anchor="pitm" numbered="true" toc="default">
        <name>Prevention of Spoofing and Person-in-the-Middle Attacks</name>
        <t>Prevention of spoofing attacks against attestation systems is also important.  There are several cases to consider:</t>
        <ul spacing="normal">
          <li>The entire device could be spoofed. If the Verifier goes to appraise a specific Attester, it might be redirected to a different Attester.</li>
          <li>A compromised device could have a valid DevID, but substitute a quote from a known-good device instead of returning its own, as described in <xref target="RFC6813" format="default"/>.</li>
          <li>A device with a compromised OS could return a fabricated quote providing spoofed attestation Evidence.</li>
        </ul>
        <t>Use of the 802.1AR DevID in the TPM provides protection against the case of a spoofed device by ensuring that the Verifier's TLS or SSH session is in fact terminating on the right device.</t>
        <t>Protection against spoofed quotes from a device with valid identity is a bit more complex.
An identity key must be available to sign any kind of nonce or hash offered by the Verifier,
and consequently, could be used to sign a fabricated quote.  To block a spoofed Attestation
Result, the quote generated inside the TPM must be signed by
a key, known as an AK, that's different from the DevID.</t>
        <t>Given separate Attestation and DevID keys, the
binding between the AK and the same device must also be proven to
prevent a person-in-the-middle attack (e.g., the "Asokan Attack" <xref target="RFC6813" format="default"/>).</t>
        <t>This is accomplished in RIV through use of an AK certificate with the same elements as the DevID
(same manufacturer's serial number and signed by the same manufacturer's key), but containing
the device's unique AK public key instead of the DevID public key.
This binding between DevID and AK certificates is critical to reliable attestation.</t>
        <t>The TCG document "TPM 2.0 Keys for Device Identity and Attestation" <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/> specifies
OIDs for Attestation Certificates that allow the CA to mark a key as specifically known to be 
an AK.</t>
        <t>These two key pairs and certificates are used together:</t>
        <ul spacing="normal">
          <li>The DevID is used to validate a TLS connection terminating on the device with a known serial number.</li>
          <li>The AK is used to sign attestation quotes, which provides proof that the attestation
evidence comes from the same device.</li>
        </ul>
      </section>
      <section anchor="replay-attacks" numbered="true" toc="default">
        <name>Replay Attacks</name>
        <t>Replay attacks, where the results of a previous attestation are submitted in response to subsequent requests,
are usually prevented by the inclusion of a random nonce in the request to the TPM
for a quote.  Each request from the Verifier includes a new random number (a nonce). The resulting
quote signed by the TPM contains the same nonce, which allows the Verifier to determine
freshness (i.e., that the resulting quote was generated in response to the Verifier's specific request).
"Time-Based Uni-Directional Attestation" <xref target="I-D.birkholz-rats-tuda" format="default"/> provides an alternate mechanism
to verify freshness without requiring a request/response cycle.</t>
      </section>
      <section anchor="owner-signed-keys" numbered="true" toc="default">
        <name>Owner-Signed Keys</name>
        <t>Although device manufacturers must pre-provision devices with easily verified DevID and AK certificates
if SZTP such as described in <xref target="RFC8572" format="default"/> is to be supported,
use of those credentials is not mandatory.  IEEE Std 802.1AR incorporates the idea of an 
IDevID, which is provisioned by the manufacturer, and a LDevID, which is provisioned by the owner of
the device.  RIV and <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/> extend that concept by defining an IAK and 
LAK with the same properties.</t>
        <t>Device owners can use any method to provision the local credentials.</t>
        <ul spacing="normal">
          <li>The TCG document <xref target="PLATFORM-DEVID-TPM-2.0" format="default"/> shows how the IAKs
can be used to certify LDevID and LAK keys.  The use of the LDevID and LAK allows the device owner
to use a uniform identity structure across device types from multiple manufacturers (in the same way
that an "Asset Tag" is used by many enterprises to identify devices they own).  The TCG document
<xref target="PROV-TPM-2.0" format="default"/> also contains guidance on provisioning local identity keys in TPM 2.0.
Owners should follow the same practice of binding LDevID and LAK as the manufacturer would for IDevID and IAK.
See <xref target="riv-keying" format="default"/>.</li>
          <li>Device owners, however, can use any other mechanism they want, including physical inspection and programming in a secure location, to assure themselves that local identity
certificates are inserted into the intended device
if they prefer to avoid placing trust in the manufacturer-provided keys.</li>
        </ul>
        <t>Clearly, local keys can't be used for SZTP; installation of the local keys
can only be done by some process that runs before the device is installed for network operation, 
or by using procedures such as those outlined in Bootstrapping Remote Secure Key Infrastructure (BRSKI) <xref target="RFC8995" format="default"/>.</t>
        <t>On the other end of the device lifecycle, provision should be made to wipe local keys when a device
is decommissioned to indicate that the device is no longer owned by the enterprise.  The manufacturer's
initial identity keys must be preserved, as they contain no information that's not already printed on
the device's serial number plate.</t>
      </section>
      <section anchor="other-factors-for-trustworthy-operation" numbered="true" toc="default">
        <name>Other Factors for Trustworthy Operation</name>
        <t>In addition to the trustworthy provisioning of keys, RIV depends on a number of other factors for trustworthy operation.</t>
        <ul spacing="normal">
          <li>Secure identity depends on mechanisms to prevent per-device secret keys from being compromised.  The TPM
provides this capability as a Root of Trust for Storage.</li>
          <li>Attestation depends on an unbroken chain of measurements, starting from the very first 
measurement.  See <xref target="using-tpm" format="default"/> for background on TPM practices.</li>
          <li>That first measurement is made by code called the RTM, typically done by trusted
firmware stored in boot flash.  Mechanisms for maintaining the trustworthiness of the RTM are out of
scope for RIV, but could include immutable firmware, signed updates, or a vendor-specific hardware
verification technique.    See <xref target="root-of-trust" format="default"/> for background on Roots of Trust.</li>
          <li>The device owner <bcp14>SHOULD</bcp14> provide some level of physical defense for the device.  If a TPM that has already been programmed
with an authentic DevID is stolen and is inserted into a counterfeit device, attestation of that counterfeit
device may become indistinguishable from an authentic device.</li>
        </ul>
        <t>RIV also depends on reliable Reference Values, as expressed by the RIM <xref target="RIM" format="default"/>.  The definition of
trust procedures for RIMs is out of scope for RIV, and the device owner is free to use any policy to validate
a set of reference measurements.  It should also be noted that, while RIV can provide a reliable indication that a known software package is in use by the device and that the package has not been tampered with, it is the device owner's responsibility to determine that it's the correct package for the application.</t>
        <t>RIMs may be conveyed either out-of-band or in-band as part of the attestation
process (see <xref target="RIM-policy" format="default"/>).  However, for network devices, where software is usually shipped as a self-contained
package, RIMs signed by the manufacturer and delivered in-band may be more convenient for the device owner.</t>
        <t>The validity of RIV attestation results is also influenced by procedures used to create Reference Values:</t>
        <ul spacing="normal">
          <li>While the RIM itself is signed, supply chains <bcp14>SHOULD</bcp14> be carefully scrutinized to ensure that the values are 
not subject to unexpected manipulation prior to signing.  Insider attacks against code bases and build chains
are particularly hard to spot.</li>
          <li>Designers <bcp14>SHOULD</bcp14> guard against hash collision attacks.  RIMs often give hashes for large objects
of indeterminate size. If one of the measured objects can be replaced with an implant engineered to produce
the same hash, RIV will be unable to detect the substitution.  TPM 1.2 only uses SHA-1 hashes, which have been
shown to be susceptible to collision attack.  TPM 2.0 will produce quotes with SHA-256, which so far has resisted
such attacks.  Consequently, RIV implementations <bcp14>SHOULD</bcp14> use TPM 2.0.</li>
        </ul>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
    <section anchor="conclusion" numbered="true" toc="default">
      <name>Conclusion</name>
      <t>TCG technologies can play an important part in the implementation of RIV.
Standards for many of the components needed for
implementation of RIV already exist:</t>
      <ul spacing="normal">
        <li>Platform identity can be based on IEEE 802.1AR DevID, coupled with
careful supply-chain management by the manufacturer.</li>
        <li>Complex supply chains can be certified using TCG Platform Certificates <xref target="PLATFORM-CERTS" format="default"/>.</li>
        <li>The TCG TAP mechanism coupled with <xref target="RFC9684" format="default"/> can be used to retrieve attestation evidence.</li>
        <li>Reference Values must be conveyed from the software authority (e.g.,
the manufacturer) in RIMs to the system in which verification will take place.  IETF and TCG
SWID and CoSWID work (<xref target="RFC9393" format="default"/> <xref target="RIM" format="default"/>) forms the basis for this function.</li>
      </ul>
    </section>
 </middle>
  <back>

<displayreference target="I-D.ietf-rats-reference-interaction-models" to="RATS-INTERACTION-MODELS"/>
<displayreference target="I-D.richardson-rats-usecases" to="RATS-USECASES"/>
<displayreference target="I-D.birkholz-rats-tuda" to="RATS-TUDA"/>
<displayreference target="I-D.ietf-rats-network-device-subscription" to="RATS-NET-DEV-SUB"/>
<displayreference target="I-D.ietf-rats-eat" to="RATS-EAT"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4253.xml"/>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml"/>

<!-- [I-D.ietf-rats-yang-tpm-charra] companion document RFC 9684 -->

<reference anchor='RFC9684' target='https://www.rfc-editor.org/info/rfc9684'>
  <front>
    <title>A YANG Data Model for Challenge-Response-Based Remote Attestation (CHARRA) Procedures Using Trusted Platform Modules (TPMs)</title>
    <author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
      <organization />
    </author>
    <author initials='M' surname='Eckel' fullname='Michael Eckel'>
      <organization />
    </author>
    <author initials='S' surname='Bhandari' fullname='Shwetha Bhandari'>
      <organization />
    </author>
    <author initials='E' surname='Voit' fullname='Eric Voit'>
      <organization />
    </author>
    <author initials='B' surname='Sulzen' fullname='Bill Sulzen'>
      <organization />
    </author>
    <author initials='L' surname='Xia' fullname='Liang Xia'>
      <organization />
    </author>
    <author initials='T' surname='Laffey' fullname='Tom Laffey'>
      <organization />
    </author>
    <author initials='G. C.' surname='Fedorkow' fullname='Guy C. Fedorkow'>
      <organization />
    </author>
    <date year='2024' month='December'/>
  </front>
  <seriesInfo name="RFC" value="9684"/>
  <seriesInfo name="DOI" value="10.17487/RFC9684"/>
</reference>

       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9393.xml"/>
       <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9334.xml"/>

        <reference anchor="IEEE-802-1AR" >
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date year="2018" month="August"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.1AR-2018"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8423794"/>
        </reference>

        <reference anchor="TAP" target="https://trustedcomputinggroup.org/wp-content/uploads/TNC_TAP_Information_Model_v1.00_r0.36-FINAL.pdf">
          <front>
            <title>TCG Trusted Attestation Protocol (TAP) Information Model for TPM Families 1.2 and 2.0 and DICE Family 1.0</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2018" month="October"/>
          </front>
	  <refcontent>Version 1.0, Revision 0.36</refcontent>
        </reference>

        <reference anchor="CEL" target="https://trustedcomputinggroup.org/wp-content/uploads/TCG_IWG_CEL_v1_r0p41_pub.pdf">
          <front>
            <title>Canonical Event Log Format</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2022" month="February"/>
          </front>
	  <refcontent>Version 1.0, Revision 0.41</refcontent>
        </reference>

        <reference anchor="PC-CLIENT-BIOS-TPM-2.0" target="https://trustedcomputinggroup.org/resource/pc-client-specific-platform-firmware-profile-specification/">
          <front>
            <title>TCG PC Client Specific Platform Firmware Profile Specification</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2021" month="May"/>
          </front>
	  <refcontent>Family "2.0", Level 00, Version 1.05, Revision 23</refcontent>
        </reference>

        <reference anchor="PC-CLIENT-EFI-TPM-1.2" target="https://trustedcomputinggroup.org/resource/tcg-efi-platform-specification/">
          <front>
            <title>TCG EFI Platform Specification</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2014" month="January"/>
          </front>
	  <refcontent>For TPM Family 1.1 or 1.2, Version 1.22, Revision 15</refcontent>
        </reference>

        <reference anchor="RIM" target="https://trustedcomputinggroup.org/resource/tcg-reference-integrity-manifest-rim-information-model/">
          <front>
            <title>TCG Reference Integrity Manifest (RIM) Information Model</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
	  <refcontent>Version 1.01, Revision 0.16</refcontent>
        </reference>

        <reference anchor="PC-CLIENT-RIM" target="https://trustedcomputinggroup.org/resource/tcg-pc-client-reference-integrity-manifest-specification/">
          <front>
            <title>TCG PC Client Reference Integrity Manifest Specification</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
          <refcontent>Version 1.04</refcontent>
        </reference>

        <reference anchor="PLATFORM-DEVID-TPM-2.0" target="https://trustedcomputinggroup.org/resource/tpm-2-0-keys-for-device-identity-and-attestation/">
          <front>
            <title>TPM 2.0 Keys for Device Identity and Attestation</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2021" month="October"/>
          </front>
          <refcontent>Version 1.00, Revision 12</refcontent>
        </reference>

        <reference anchor="PLATFORM-ID-TPM-1.2" target="https://trustedcomputinggroup.org/resource/tpm-keys-for-platform-identity-for-tpm-1-2-2/">
          <front>
            <title>TCG Infrastructure WG TPM Keys for Platform Identity for TPM 1.2</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2015" month="August"/>
          </front>
          <refcontent>Specification Version 1.0, Revision 3</refcontent>
        </reference>

        <reference anchor="SWID" target="https://www.iso.org/standard/65666.html">
          <front>
            <title>Information technology - IT asset management - Part 2: Software identification tag</title>
            <author>
              <organization>ISO/IEC</organization>
            </author>
            <date year="2015" month="October"/>
          </front>
          <seriesInfo name="ISO/IEC" value="19770-2:2015"/>
        </reference>

        <reference anchor="IMA" target="https://www.kernel.org/doc/html/v6.11/admin-guide/device-mapper/dm-ima.html">
          <front>
            <title>dm-ima</title>
            <author>
              <organization>The kernel development community</organization>
            </author>
            <date year="2024" month="September" day="15"/>
          </front>
          <refcontent>Linux Kernel 6.11</refcontent>
          <annotation>The latest version can be found at <eref target="https://docs.kernel.org/admin-guide/device-mapper/dm-ima.html"/>.</annotation>
        </reference>
      </references>
      <references>
        <name>Informative References</name>

      <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6813.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3748.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9525.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8995.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
      <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8572.xml"/>

<!-- [I-D.ietf-rats-reference-interaction-models] IESG state I-D Exists   -->
       <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-rats-reference-interaction-models.xml"/>

<!-- [I-D.richardson-rats-usecases] IESG state Expired -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.richardson-rats-usecases.xml"/>

<!-- [I-D.birkholz-rats-tuda] IESG state Expired  -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.birkholz-rats-tuda.xml"/>

<!-- [I-D.ietf-rats-network-device-subscription] IESG state I-D Exists -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-rats-network-device-subscription.xml"/>

<!-- [I-D.ietf-rats-eat] IESG state RFC Ed Queue (EDIT) -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-rats-eat.xml"/>

        <reference anchor="TPM-1.2" target="https://trustedcomputinggroup.org/resource/tpm-main-specification/">
          <front>
            <title>TPM 1.2 Main Specification</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2011" month="March"/>
          </front>
          <refcontent>Level 2, Version 1.2, Revision 116</refcontent>
        </reference>

        <reference anchor="TPM-2.0" target="https://trustedcomputinggroup.org/resource/tpm-library-specification/">
          <front>
            <title>Trusted Platform Module Library</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2024" month="March"/>
          </front>
          <refcontent>Family "2.0", Level 00, Revision 01.83</refcontent>
        </reference>

        <reference anchor="PLATFORM-CERTS" target="https://trustedcomputinggroup.org/resource/tcg-platform-attribute-credential-profile/">
          <front>
            <title>TCG Platform Attribute Credential Profile</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
          <refcontent>Specification Version 1.0, Revision 16</refcontent>
        </reference>

        <reference anchor="PROV-TPM-2.0" target="https://trustedcomputinggroup.org/wp-content/uploads/TCG-TPM-v2.0-Provisioning-Guidance-Published-v1r1.pdf">
          <front>
            <title>TCG TPM v2.0 Provisioning Guidance</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2017" month="March"/>
          </front>
          <refcontent>Version 1.0, Revision 1.0</refcontent>
        </reference>

        <reference anchor="IEEE-802.1X">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Port-Based Network Access Control</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date year="2020" month="February"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.1X-2020"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2020.9018454"/>
        </reference>

        <reference anchor="IEEE-802.1AE">
          <front>
            <title>IEEE Standard for Local and metropolitan area networks - Media Access Control (MAC) Security</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date year="2018"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.1AE-2018"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8585421" />
        </reference>

        <reference anchor="LLDP">
          <front>
            <title>IEEE Standard for Local and metropolitan area networks - Station and Media Access Control Connectivity Discovery</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date year="2016" month="March"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.1AB-2016"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2016.7433915"/>
        </reference>

        <reference anchor="TCG-RT" target="https://trustedcomputinggroup.org/wp-content/uploads/TCG_Roots_of_Trust_Specification_v0p20_PUBLIC_REVIEW.pdf">
          <front>
            <title>TCG Roots of Trust Specification</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2018" month="July"/>
          </front>
          <refcontent>(Draft), Family "1.0", Level 00, Revision 0.20</refcontent>
        </reference>

        <reference anchor="SP800-193" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-193.pdf">
          <front>
            <title>Platform Firmware Resiliency Guidelines</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date year="2018" month="May"/>
          </front>
          <seriesInfo name="NIST SP" value="800-193"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-193"/>
        </reference>

        <reference anchor="SP800-155" target="https://csrc.nist.gov/files/pubs/sp/800/155/ipd/docs/draft-sp800-155_dec2011.pdf">
          <front>
            <title>BIOS Integrity Measurement Guidelines (Draft)</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date year="2011" month="December"/>
          </front>
          <seriesInfo name="NIST SP" value="800-155 (Draft)"/>
        </reference>

        <reference anchor="NET-EQ" target="https://trustedcomputinggroup.org/resource/tcg-guidance-securing-network-equipment/">
          <front>
            <title>TCG Guidance for Securing Network Equipment Using TCG Technology</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
          <refcontent>Version 1.0, Revision 29</refcontent>
        </reference>

        <reference anchor="NIST-IR-8060" target="https://nvlpubs.nist.gov/nistpubs/ir/2016/NIST.IR.8060.pdf">
          <front>
            <title>Guidelines for the Creation of Interoperable Software Identification (SWID) Tags</title>
            <author initials="D" surname="Waltermire" fullname="David Waltermire"></author>
            <author initials="B. A." surname="Cheikes" fullname="Brant A. Cheikes"></author> 
            <author initials="L" surname="Feldman" fullname="Larry Feldman"></author> 
            <author initials="G" surname="Witte" fullname="Greg Witte"></author>
            <date year="2016" month="April"/>
          </front>
          <seriesInfo name="NIST NISTIR" value="8060"/>
          <seriesInfo name="DOI" value="10.6028/NIST.IR.8060"/>
        </reference>

        <reference anchor="AIK-ENROLL" target="https://trustedcomputinggroup.org/resource/tcg-infrastructure-working-group-a-cmc-profile-for-aik-certificate-enrollment/">
          <front>
            <title>TCG Infrastructure Working Group A CMC Profile for AIK Certificate Enrollment</title>
            <author>
              <organization>Trusted Computing Group</organization>
            </author>
            <date year="2011" month="March"/>
          </front>
          <refcontent>Version 1.0, Revision 7</refcontent>
        </reference>

        <reference anchor="SWID-GEN" target="https://github.com/Labs64/swid-maven-plugin">
          <front>
            <title>SoftWare IDentification (SWID) Tags Generator (Maven Plugin)</title>
            <author>
              <organization>Labs64</organization>
            </author>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="appendix" numbered="true" toc="default">
      <name>Supporting Materials</name>
      <section anchor="using-tpm" numbered="true" toc="default">
        <name>Using a TPM for Attestation</name>
        <t>The TPM and surrounding ecosystem provide three interlocking capabilities to enable secure collection 
of evidence from a remote device: PCRs, a Quote mechanism, and a standardized Event Log.</t>
        <t>Each TPM has at least eight and at most twenty-four PCRs (depending on the profile and vendor choices), each one large 
enough to hold one hash value (SHA-1, SHA-256, and other hash algorithms can 
be used, depending on TPM version).  PCRs can't be accessed directly from outside the chip, but the TPM 
interface provides a way to "extend" a new security measurement hash into any PCR, a process by which the existing value 
in the PCR is hashed with the new security measurement hash, and the result placed back into the same PCR.  The result 
is a composite fingerprint comprising the hash of all the security measurements extended into each PCR since the system was reset.</t>
        <t>Every time a PCR is extended, an entry should be added to the corresponding Event Log.  Logs contain the security 
measurement hash plus informative fields offering hints as to which event generated the security measurement. 
The Event Log itself is protected against accidental manipulation, but it is implicitly tamper-evident:  Any 
verification process can read the security measurement hash from the log events, compute the composite value, 
and compare that to what is in the PCR.   If there's no discrepancy, the logs do provide an accurate 
view of what was placed into the PCR.</t>
        <t>Note that the composite hash-of-hashes recorded in PCRs is order-dependent, resulting in different PCR values for different 
ordering of the same set of events (e.g., Event A followed by Event B yields a different PCR value than B followed by A).
For single-threaded code, where both the events and their order are fixed, a Verifier may validate a single PCR value, and use the log only to diagnose a mismatch from Reference Values.  However, operating system code is usually 
nondeterministic, meaning that there may never be a single "known good" PCR value.  In this case, the Verifier may have
to verify that the log is correct, and then analyze each item in the log to determine if it represents an authorized event.</t>
        <t>In a conventional TPM Attestation environment, the first measurement must be made and extended into the TPM by trusted 
device code (called the RTM).  That first measurement should cover the segment of 
code that is run immediately after the RTM, which then measures the next code segment before running it, and so on, 
forming an unbroken chain of trust.  See <xref target="TCG-RT" format="default"/> for more on Mutable vs. Immutable Roots of Trust.</t>
        <t>The TPM provides another mechanism called a Quote that can read the current value of the PCRs and package them, 
along with the Verifier's nonce, into a TPM-specific data structure signed by an Attestation private key, known 
only to the TPM.</t>
        <t>It's important to note that the Quote data structure is signed inside the TPM (see <xref target="security-cons" format="default"/>, Security Considerations).  The trust model is preserved by retrieving the Quote in a way that does not invalidate the signature, 
as specified in <xref target="RFC9684" format="default"/>.  The structure of the command and response for a quote, including its signature, as generated by the TPM, can be seen in Part 3, Section 16.5, of <xref target="TPM-1.2" format="default"/> and Section 18.4.2 of <xref target="TPM-2.0" format="default"/>.</t>
        <t>The Verifier uses the Quote and Log together.  The Quote contains the composite hash of the complete sequence 
of security measurement hashes, signed by the TPM's private AK.  The Log contains a record of each
measurement extended into the TPM's PCRs.  By computing the composite hash of all the measurements, the Verifier
can verify the integrity of the Event Log, even though the Event Log itself is not signed.  Each hash in the validated 
Event Log can then be compared to corresponding expected values in the set of Reference Values to 
validate overall system integrity.</t>
        <t>A summary of information exchanged in obtaining quotes from TPM 1.2 and TPM 2.0 can be found in <xref target="TAP" format="default"/>, Section 4.
Detailed information about PCRs and Quote data structures can be found in <xref target="TPM-1.2" format="default"/>, <xref target="TPM-2.0" format="default"/>.  Recommended log 
formats include <xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/>, and <xref target="CEL" format="default"/>.</t>
      </section>
      <section anchor="root-of-trust" numbered="true" toc="default">
        <name>Root of Trust for Measurement (RTM)</name>
        <t>The measurements needed for attestation require that the device being attested
is equipped with an RTM, that is, some trustworthy
mechanism that can compute the first measurement in the chain of trust required
to attest that each stage of system startup is verified, a Root of Trust for Storage (i.e., 
the TPM PCRs) to record the results, and a Root of Trust
for Reporting to report the results.</t>
        <t>While there are many complex aspects of Roots of Trust (<xref target="TCG-RT" format="default"/> <xref target="SP800-155" format="default"/> <xref target="SP800-193" format="default"/>), two aspects that

are important in the case of attestation are:</t>
        <ul spacing="normal">
          <li>The first measurement computed by the RTM and stored
in the TPM's Root of Trust for Storage must be assumed to be correct.</li>
          <li>There must not be a way to reset the Root of Trust for Storage without re-entering
the RTM code.</li>
        </ul>
        <t>The first measurement must be computed by code that is implicitly trusted; if that
first measurement can be subverted, none of the remaining measurements can
be trusted. (See <xref target="SP800-155" format="default"/>.)</t>
        <t>It's important to note that the trustworthiness of the RTM code cannot be assured by 
the TPM or TPM supplier -- code or procedures external to the TPM must guarantee the 
security of the RTM.</t>
      </section>
      <section anchor="layering-model-for-network-equipment-attester-and-verifier" numbered="true" toc="default">
        <name>Layering Model for Network Equipment Attester and Verifier</name>
        <t>Retrieval of identity and attestation state uses one protocol stack, while
retrieval of Reference Values uses a different set of protocols.  
<xref target="RIV-Protocol-Stacks" format="default"/> shows the components involved.</t>
        <figure anchor="RIV-Protocol-Stacks">
          <name>RIV Protocol Stacks</name>
          <artwork align="left" name="" type="" alt=""><![CDATA[
+-----------------------+              +-------------------------+
|                       |              |                         |
|       Attester        |<-------------|        Verifier         |
|       (Device)        |------------->|   (Management Station)  |
|                       |      |       |                         |
+-----------------------+      |       +-------------------------+
                               |
           -------------------- --------------------
           |                                        |
-------------------------------    ---------------------------------
|      Reference Values       |    |          Attestation          |
-------------------------------    ---------------------------------

********************************************************************
*           IETF Remote Attestation Conceptual Data Flow           *
*                        RFC9334, Figure 1                         *   
********************************************************************

    .........................          .........................
    .  Reference Integrity  .          .       TAP Info        .
    .       Manifest        .          .  Model and Canonical  .
    .                       .          .      Log Format       .
    .........................          .........................

    *************************          *************************
    *    YANG SWID Module   *          *    YANG Attestation   *
    *       RFC9393         *          *        Module         *
    *                       *          *        RFC9684        *
    *                       *          *                       *
    *************************          *************************
 
    *************************          *************************
    * XML, JSON, CBOR, etc. *          * XML, JSON, CBOR, etc. *
    *************************          *************************
  
    *************************          *************************
    *   RESTCONF/NETCONF    *          *   RESTCONF/NETCONF    *
    *************************          *************************
 
    *************************          *************************
    *       TLS, SSH        *          *       TLS, SSH        *
    *************************          *************************
]]></artwork>
        </figure>
        <t>IETF documents are captured in boxes surrounded by asterisks. TCG documents
are shown in boxes surrounded by dots.</t>
      </section>
      <section anchor="implementation-notes" numbered="true" toc="default">
        <name>Implementation Notes</name>
        <t><xref target="Component-Status" format="default"/> summarizes many of the actions needed to complete an Attestation
system, with links to relevant documents.  While documents are controlled
by several standards organizations, the implied actions required for
implementation are all the responsibility of the manufacturer of the device,
unless otherwise noted.</t>
        <t>As noted, SWID tags can be generated many ways, but one possible tool is <xref target="SWID-GEN" format="default"/>.</t>

<!-- [rfced] Appendix A.4, Table 2. 

c) FYI, there is an issue with xml2rfc that is cutting off text in Table 2 in the txt output. We have asked the Tools Team to fix this issue <https://github.com/ietf-tools/xml2rfc/issues/1155>
-->
<table anchor="Component-Status">
  <name>Component Status</name>
  <thead>
    <tr>
      <th>Component</th>
      <th>Controlling Specification</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <t>Make a Secure execution environment:</t>
        <ul>
          <li>Attestation depends on a secure RTM outside the TPM, as well as Roots for Storage and Reporting inside the TPM.</li>
          <li>Refer to "TCG Roots of Trust Specification" <xref target="TCG-RT" format="default"/>.</li>
          <li><xref target="SP800-193" format="default"/> also provides guidelines on Roots of Trust.</li>
        </ul>
      </td> 
      <td>
        <t><xref target="TCG-RT" format="default"/></t> 
        <t><eref target="www.uefi.org" brackets="angle"/></t>
      </td>
    </tr>
    <tr>
      <td>Provision the TPM as described in the TCG documents.</td>
      <td>
        <t><xref target="PLATFORM-DEVID-TPM-2.0" format="default"/></t>
        <t><xref target="PLATFORM-CERTS" format="default"/></t>
      </td>
    </tr>
    <tr>
      <td rowspan="2" colspan="">
        <t>Put a DevID or Platform Certificate in the TPM:</t>
        <ul>
          <li>Install an IAK at the same time so that Attestation can work out of the box.</li>
          <li>Equipment suppliers and owners may want to implement LDevID as well as IDevID.</li>
        </ul>
      </td>
      <td>
        <t><xref target="PLATFORM-DEVID-TPM-2.0" format="default"/></t>
        <t><xref target="PLATFORM-CERTS" format="default"/></t>
      </td>
    </tr>
    <tr>
      <td><xref target="IEEE-802-1AR" format="default"/></td>
    </tr>
    <tr>
      <td>
        <t>Connect the TPM to the TLS stack:</t>
        <ul>
          <li>Use the DevID in the TPM to authenticate TAP connections, identifying the device.</li>
        </ul>
      </td>
      <td>Vendor TLS stack (This action configures TLS to use the DevID as its client certificate.)</td>
    </tr>
    <tr>
      <td>
        <t>Make CoSWID tags for BIOS/Loader/Kernel objects:</t>
        <ul>
          <li>Add reference measurements into SWID tags.</li>
          <li>Manufacturer should sign the SWID tags.</li>
          <li>The TCG RIM-IM <xref target="RIM" format="default"/> identifies further procedures to create signed RIM documents that provide the necessary reference information.</li>
        </ul>
      </td>
      <td>
        <t><xref target="RFC9393" format="default"/></t>
        <t><xref target="SWID" format="default"/></t> 
        <t><xref target="NIST-IR-8060" format="default"/></t>
      </td>
    </tr>
    <tr>
      <td rowspan="2">
        <t>Package the SWID tags with a vendor software release:</t>
        <ul>
          <li>A tag-generator plugin such as <xref target="SWID-GEN" format="default"/>  can be used.</li>
        </ul>
      </td>
      <td>Retrieve tags with <xref target="RFC9393" format="default"/>.</td>
    </tr>
    <tr>
      <td><xref target="PC-CLIENT-RIM" format="default"/></td>
    </tr>
    <tr>
      <td>Use PC Client measurement definitions to define the use of PCRs (although Windows OS is rare on Networking Equipment, UEFI BIOS is not).</td>
      <td><xref target="PC-CLIENT-BIOS-TPM-2.0" format="default"/></td>
    </tr>
    <tr>
      <td>
        <t>Use TAP to retrieve measurements:</t>
        <ul>
          <li><t>Map to YANG.</t></li>
          <li><t>Use Canonical Log Format.</t></li>
        </ul>
      </td>
      <td>
        <t><xref target="RFC9684" format="default"/></t> 
        <t><xref target="CEL" format="default"/></t>
      </td>
    </tr>
    <tr>
      <td>
        <t>A Verifier (as described in <xref target="RFC9334" section="3" sectionFormat="comma"/>) should request the attestation and analyze the result. The Verifier application might be broken down to several more components:</t>
        <ul>
          <li>A Posture Manager Server that collects reports and stores them in a database.</li>
          <li>One or more Analyzers that can look at the results and figure out what it means.</li>
        </ul>
      </td>
      <td>
      </td>
    </tr>
  </tbody>
</table>
      </section>
    </section>
 
    <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>The authors wish to thank numerous reviewers for generous assistance, including <contact fullname="William Bellingrath"/>, <contact fullname="Mark Baushke"/>, <contact fullname="Ned Smith"/>,
<contact fullname="Henk Birkholz"/>, <contact fullname="Tom Laffey"/>, <contact fullname="Dave Thaler"/>, <contact fullname="Wei Pan"/>, <contact fullname="Michael Eckel"/>, <contact fullname="Thomas Hardjono"/>, <contact fullname="Bill Sulzen"/>, <contact fullname="Willard (Monty) Wiseman"/>,
<contact fullname="Kathleen Moriarty"/>, <contact fullname="Nancy Cam-Winget"/>, and <contact fullname="Shwetha Bhandari"/>.</t>
    </section>
  </back>
  </rfc>
