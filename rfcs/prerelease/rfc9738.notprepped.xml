<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="exp" ipr="pre5378Trust200902" docName="draft-ietf-extra-imap-messagelimit-10" number="9738" consensus="true" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" symRefs="true" sortRefs="true" version="3">

<front>
  <title abbrev="IMAP MESSAGELIMIT">IMAP MESSAGELIMIT Extension</title>
    <seriesInfo name="RFC" value="9738"/>
    <author initials="A." surname="Melnikov" fullname="Alexey Melnikov">
      <organization abbrev="Isode">Isode Limited</organization>
      <address>
        <email>alexey.melnikov@isode.com</email>
        <uri>https://www.isode.com</uri>
      </address>
    </author>
    <author initials="A. P." surname="Achuthan" fullname="Arun Prakash Achuthan">
      <organization abbrev="Yahoo!">Yahoo!</organization>
      <address>
        <email>arunprakash@myyahoo.com</email>
      </address>
    </author>
    <author initials="V." surname="Nagulakonda" fullname="Vikram Nagulakonda">
      <organization abbrev="Yahoo!">Yahoo!</organization>
      <address>
        <email>nvikram_imap@yahoo.com</email>
      </address>
    </author>
    <author initials="L." surname="Alves" fullname="Luis Alves">
      <address>
        <email>luis.alves@lafaspot.com</email>
      </address>
    </author>
    <date year="2025" month="March"/>
    <area>ART</area>
    <workgroup>extra</workgroup>

    <abstract>
      <t>

        The MESSAGELIMIT extension of the Internet Message Access Protocol
        (RFCs 3501 and 9051) allows servers to announce a limit on the number
        of messages that can be processed in a single FETCH, SEARCH, STORE,
        COPY, or MOVE command (or their UID variants), or in a single APPEND
        or UID EXPUNGE command.  This helps servers to control resource usage
        when performing various IMAP operations.  This helps clients to know
        the message limit enforced by the corresponding IMAP server and avoid
        issuing commands that would exceed such limit.
      </t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction and Overview</name>
      <t>This document defines an extension to the Internet Message Access Protocol <xref target="RFC9051" format="default"/>
      for announcing a server limit on the number of
      messages that can be processed in a single FETCH, SEARCH, STORE, COPY, or MOVE command (or their UID variants), or a single APPEND or UID EXPUNGE command.
      This extension is compatible with both IMAP4rev1 <xref target="RFC3501" format="default"/> and IMAP4rev2 <xref target="RFC9051" format="default"/>.</t>
    </section>
    <section numbered="true" toc="default">
      <name>Document Conventions</name>
      <t>In protocol examples, this document uses a prefix of "C: " to denote
      lines sent by the client to the server, and "S: " for lines sent by the
      server to the client. Lines prefixed with "// " are comments explaining
      the previous protocol line.  These prefixes and comments are not part of
      the protocol. Lines without any of these prefixes are continuations of
      the previous line, and no line break is present in the protocol unless
      specifically mentioned.</t>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
      <t>Other capitalized words are IMAP key words <xref target="RFC3501" format="default"/><xref target="RFC9051" format="default"/>
            or key words from this document.</t>
    </section>
    <section anchor="imap-messagelimit" numbered="true" toc="default">
      <name>The MESSAGELIMIT Extension</name>
      <t>An IMAP server advertises support for the MESSAGELIMIT extension
        by including "MESSAGELIMIT=&lt;limit&gt;" capability in the CAPABILITY response or response code,
        where "&lt;limit&gt;" is a positive integer that conveys the maximum number of messages
        that can be processed in a single SEARCH, FETCH, STORE, COPY, MOVE command (or their UID variants), or in a single APPEND or UID EXPUNGE command.</t>

      <t>An IMAP server that only enforces the message limit on COPY and APPEND commands (and their UID variants) would include
        the "SAVELIMIT=&lt;limit&gt;" capability (instead of the "MESSAGELIMIT=&lt;limit&gt;") in
        the CAPABILITY response or response code.</t>
      <t>The limit advertised in the MESSAGELIMIT or SAVELIMIT capability <bcp14>SHOULD NOT</bcp14> be lower than 1000 messages.</t>

   <section anchor="messagelimit-commands" numbered="true" toc="default">
     <name>Returning Limits on the Number of Messages Processed in a Single Command</name>
        <t>
      If a server implementation doesn't allow more than &lt;N&gt; messages to be operated on
      by a single COPY or UID COPY command, it <bcp14>MUST</bcp14> fail the command by returning a tagged NO response
      with the MESSAGELIMIT response code defined below. No messages are copied in this case.

      If a server implementation doesn't allow more than &lt;N&gt; messages to be operated on
      by a single SEARCH, FETCH, STORE, or MOVE command (or their UID variants), or an APPEND or UID EXPUNGE command, it <bcp14>MUST</bcp14> return the MESSAGELIMIT response code defined below:

        </t>
        <dl newline="true" spacing="normal">
          <dt>MESSAGELIMIT</dt>
          <dd>
            <t>The server doesn't allow more than &lt;N&gt; messages to be
            operated on by a single SEARCH, FETCH, STORE, COPY, or MOVE command (or
            their UID variants).  The lowest processed UID is &lt;LastUID&gt;.
            The client needs to repeat the operation for remaining messages,
            if required.</t>
            <t>The server doesn't allow more than &lt;N&gt; \Deleted messages
            to be operated on by a single UID EXPUNGE command.  The lowest
            processed UID is &lt;LastUID&gt;.  The client needs to repeat the
            operation for remaining messages, if required.</t>
            <t>Note that when the MESSAGELIMIT response code is returned, the
            server is <bcp14>REQUIRED</bcp14> to process messages from highest
            to lowest UID.</t>
            <t>Note that the MESSAGELIMIT response code is similar to the
            LIMIT response code <xref target="RFC9051" format="default"/>,
            but it provides more details on the exact type of the limit and
            how to resume the command once the limit is exceeded.</t> <t>In
            the following example, the &lt;N&gt; value is 1000, and the lowest
            processed UID &lt;LastUID&gt; is 23221.</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 03 FETCH 10000:14589 (UID FLAGS)
  S: * 14589 FETCH (FLAGS (\Seen) UID 25000)
  S: * 14588 FETCH (FLAGS (\Answered) UID 24998)
  S: ... further 997 fetch responses
  S: * 13590 FETCH (FLAGS () UID 23221)
  S: 03 OK [MESSAGELIMIT 1000 23221] FETCH completed with 1000 
      partial results]]></artwork>
            <t>In the following example the client searches for UNDELETED UIDs
            between 22000:25000.  The total number of searched messages (note,
            NOT the number of matched messages) exceeds the server's published
            1000-message limit.</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 04 UID SEARCH UID 22000:25000 UNDELETED
  S: * SEARCH 25000 24998 (... UIDs ...) 23221
  S: 04 OK [MESSAGELIMIT 1000 23221] SEARCH completed with 1000 
      partial results]]></artwork>

            <t>The following example demonstrates the copy of messages with UIDs
            between 18000:21000.  The total message count exceeds the server's
            published 1000-message limit.  As COPY or UID COPY needs to be atomic
            (as per <xref target="RFC3501" format="default"/>/<xref
            target="RFC9051" format="default"/>), no messages are copied.</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 05 UID COPY 18000:21000 "Trash"
  S: 05 NO [MESSAGELIMIT 1000 20001] Too many messages to copy, 
      try a smaller subset]]></artwork>

            <t>The following example shows the move of messages with UIDs between
            18000:21000.  The total message count exceeds the server's
            published 1000-message limit.  (Unlike COPY or UID COPY, MOVE or UID
            MOVE don't need to be atomic.)  The client that wants to move all
            messages in the range and observes a MESSAGELIMIT response code
            can repeat the UID MOVE command with the same parameter. (For the
            MOVE command, the message set parameter needs to be updated before
            repeating the command.)  The client needs to keep doing this until
            the MESSAGELIMIT response is not returned (or until a tagged
            NO or BAD is returned).</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 06 UID MOVE 18000:21000 "Archive/2021/2021-12"
  S: * OK [COPYUID 1397597919 20001:21000 22363:23362] Some 
      messages were not moved
  S: * 12336 EXPUNGE
  S: * 12335 EXPUNGE
  ...
  S: * 11337 EXPUNGE
  S: 06 OK [MESSAGELIMIT 1000 20001] MOVE completed for the last
      1000 messages]]></artwork>

            <t>The following example shows the update of flags for messages with
            UIDs between 18000:20000. The total number of existing messages in
            the UID range exceeds the server's published 1000-message limit.
            The client that wants to change flags for all messages in the
            range and observes a MESSAGELIMIT response code can repeat the
            UID STORE command with the updated UID range that doesn't include
            the UID returned in the MESSAGELIMIT response code. (For the STORE
            command, the message set parameter also needs to be updated before
            repeating the command.)  The client needs to keep doing this until
            the MESSAGELIMIT response is not returned (or until a tagged
            NO or BAD is returned).</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 07 UID STORE 18000:20000 +FLAGS (\Seen)
  S: * 11215 FETCH (FLAGS (\Seen \Deleted) UID 20000)
  S: * 11214 FETCH (FLAGS (\Seen \Answered \Deleted) UID 19998)
  ...
  S: * 10216 FETCH (FLAGS (\Seen) UID 19578)
  S: 07 OK [MESSAGELIMIT 1000 19578] STORE completed for the last 
      1000 messages]]></artwork>

            <t>The following example shows the removal of messages (using UID
            EXPUNGE) that have the \Deleted flag set with UIDs between
            11000:13000.  The total message count of messages with the \Deleted
            flag set exceeds the server's published 1000-message limit.  The
            client that wants to remove all messages marked as \Deleted in the
            range and observes a MESSAGELIMIT response code can repeat the
            UID EXPUNGE command with the same parameter.  The client needs to
            keep doing this until the MESSAGELIMIT response is not returned
            (or until a tagged NO or BAD is returned).</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 08 UID EXPUNGE 11000:13000
  S: * 4306 EXPUNGE
  S: * 4305 EXPUNGE
  ...
  S: * 3307 EXPUNGE
  S: 08 OK [MESSAGELIMIT 1000 11627] UID EXPUNGE completed for 
      the last 1000 messages]]></artwork>

            <t>The following example shows removal of messages (using EXPUNGE)
            that have the \Deleted flag set.  Unlike UID EXPUNGE, the server
            <bcp14>MUST NOT</bcp14> impose any message limit when processing
            EXPUNGE.</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 09 EXPUNGE
  S: * 4306 EXPUNGE
  S: * 4305 EXPUNGE
  ...
  S: * 3307 EXPUNGE
  S: * 112 EXPUNGE
  S: 09 OK EXPUNGE completed]]></artwork>

            <t>Similarly, the server <bcp14>MUST NOT</bcp14> impose any
            message limit when processing a "CLOSE" or a "STATUS UNSEEN"
            command.</t>
            <t>The following example shows use of the MESSAGELIMIT response code
            together with the PARTIAL <xref target="RFC9394"
            format="default"/> extension.  The total message count (as
            specified by the PARTIAL range) exceeds the server's published
            1000-message limit, so the server refuses to do any work in this
            case.</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 10 UID FETCH 22000:25000 (UID FLAGS MODSEQ) 
      (PARTIAL -1:-1500)
  S: 10 NO [MESSAGELIMIT 1000] FETCH exceeds the maximum 1000-
      message limit]]></artwork>

            <t>Without the PARTIAL parameter, the above UID FETCH can look like
            this:</t>

                <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 10 UID FETCH 22000:25000 (UID FLAGS MODSEQ)
  S: * 12367 FETCH (FLAGS (\Seen \Deleted) UID 23007)
  S: * 12366 FETCH (FLAGS (\Seen \Answered \Deleted) UID 23114)
  ...
  S: * 13366 FETCH (FLAGS (\Seen) UID 24598)
  S: 10 OK [MESSAGELIMIT 1000 23007] FETCH exceeds the maximum 
      1000-message limit]]></artwork>
              </dd>
            </dl>

            <t>Note that when the server needs to return both EXPUNGEISSUED
            <xref target="RFC9051" format="default"/> and MESSAGELIMIT
            response codes, the former <bcp14>MUST</bcp14> be returned in the
            tagged OK response, while the latter <bcp14>MUST</bcp14> be
            returned in an untagged NO response. The following example
            demonstrates that:
        </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 11 FETCH 10000:14589 (UID FLAGS)
  S: * 14589 FETCH (FLAGS (\Seen) UID 25000)
  S: * 14588 FETCH (FLAGS (\Answered) UID 24998)
  S: ... further 997 fetch responses
  S: * 13590 FETCH (FLAGS () UID 23221)
  S: * NO [MESSAGELIMIT 1000 23221] FETCH completed with 1000 partial
      results
  S: 11 OK [EXPUNGEISSUED] Some messages were also expunged]]></artwork>
        <t>When the IMAP MULTIAPPEND extension <xref target="RFC3502" format="default"/> is also supported by the server,
      the message limit also applies to the APPEND command. As MULTIAPPEND APPEND needs to atomic (as per <xref target="RFC3502" format="default"/>),
      no messages are appended when the server MESSAGELIMIT is exceeded.</t>
      </section>
      <section anchor="search-criteria" numbered="true" toc="default">
        <name>UIDAFTER and UIDBEFORE SEARCH Criteria</name>
        <t>The MESSAGELIMIT extension also defines two extra SEARCH keys,
        UIDAFTER and UIDBEFORE, which make it easier to convert a single UID
        to a range of UIDs.</t>
        <dl spacing="normal" newline="false">
          <dt>"UIDAFTER &lt;uid&gt;"</dt> <dd>Messages that have a UID greater
          than the specified UID.  This is semantically the same as "UID
          &lt;uid&gt;+1:*".</dd>
          <dt>"UIDBEFORE &lt;uid&gt;"</dt> <dd>Messages that have a UID less
          than the specified UID.  This is semantically the same as "UID
          1:&lt;uid&gt;-1" (or if &lt;uid&gt; has the value 1, then the empty
          set).</dd>
	</dl>
        <t>
        These two SEARCH keys are particularly useful when the SEARCHRES extension <xref target="RFC5182" format="default"/> 
        is also supported, but they can be used without it. For example, this allows a SEARCH that
        sets the "$" marker to be converted to a range of messages in a subsequent SEARCH, and both SEARCH requests
        can be pipelined.
        </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  C: 12 UID SEARCH UIDAFTER 25000 UNDELETED
  S: * SEARCH 27800 27798 (... 250 UIDs ...) 25001
  S: 12 OK SEARCH completed]]></artwork>
      </section>
      <section numbered="true" toc="default">
        <name>Interaction with SORT and THREAD Extensions</name>
        <t>
      Servers that advertise MESSAGELIMIT N will be unable to execute a THREAD command <xref target="RFC5256" format="default"/> in a mailbox with more than N messages.
        </t>
        <t>
      Servers that advertise MESSAGELIMIT N might be unable to execute a SORT command <xref target="RFC5256" format="default"/> in a mailbox with more than N messages,
      unless they maintain indices for different SORT orders they support. In absence of such indices, server implementors will need to decide whether
      their server advertises SORT or MESSAGELIMIT capability.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Interaction with SEARCHRES Extension and IMAP4rev2</name>
        <t>
      Servers that support both MESSAGELIMIT and SEARCHRES extensions <xref target="RFC5182" format="default"/> <bcp14>MUST</bcp14> truncate SEARCH SAVE result stored
      in the $ variable when the SEARCH command succeeds, but the MESSAGELIMIT response code is returned. For example, if the following
      SEARCH would have returned 1200 results in absence of MESSAGELIMIT, and the MESSAGELIMIT is 1000, only 1000 matching results
      will be saved in the $ variable:
        </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  C: D0004 UID SEARCH RETURN (SAVE) SINCE 1-Jan-2004 NOT FROM "Smith" 
      UID 22000:25000 UNDELETED
  S: D0004 OK [MESSAGELIMIT 1000 1179] SEARCH completed with 1000 
      partial results saved]]></artwork>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Interoperability Considerations</name>
      <section numbered="true" toc="default">
        <name>Effects of MESSAGELIMIT and SAVELIMIT Extensions on Noncompliant Clients</name>
        <t>A server that advertises the MESSAGELIMIT=N capability would have
        the following effect on clients that don't support this capability:</t>
        <ul spacing="normal">
          <li>
            <t>Operations are not affected on a mailbox that has N messages or fewer.</t>
          </li>
          <li>
            <t>In a mailbox with more than N messages:</t>
            <ul spacing="normal">
              <li>
                <t>An attempt to COPY or UID COPY more than N messages will always fail.</t>
              </li>
              <li>
                <t>EXPUNGE and CLOSE will always operate on the full mailbox, so they are not affected.</t>
              </li>
              <li>
                <t>Other commands like FETCH, SEARCH, and MOVE will be effectively restricted to the last N messages
              of the mailbox. In particular, unextended SEARCHes (intended for counting of messages with or without
              a particular set of flags) would return incorrect counts.</t>
              </li>
            </ul>
          </li>
        </ul>
      </section>
      <section numbered="true" toc="default">
        <name>Maintaining Compatibility</name>
        <t>
          It is important to understand that the above effects essentially
          abandon existing clients with respect to operation on large mailboxes.
          Suppose, for example, that a user is accessing a large and active
          mailing list via IMAP, and the mailing list gets on the order of 1500
          posts per week.  When the user returns from a week-long vacation and
          catches up on the mailing list, the user's client will be fetching
          information about 1500 messages.  If the server has a MESSAGELIMIT of
          1000, the client will only be able to download 1000 of the most recent messages;
          the client will not understand why, will not be
          prepared to recover from the situation, and will act as if it is
          interacting with a broken server.
        </t>
        <t>
          In order to give clients time to implement this extension, servers
          should not be strict about applying the MESSAGELIMIT at first.  One
          possible approach is to advertise a MESSAGELIMIT but not enforce it at
          all for a while.  Clients that understand this extension will comply,
          reducing load on the server, but clients that do not understand the
          limit will continue to work in all situations.
        </t>
        <t>
          Another approach, which perhaps could be phased in later, is to advertise one limit
          but to treat it as a soft limit and to begin enforcement at a higher,
          unadvertised hard limit.  In the above example, perhaps the server
          might advertise 1000 but actually enforce a limit of 10,000.  Again,
          clients that understand MESSAGELIMIT will comply with the limit of
          1000, but other clients will still interoperate up to the higher
          threshold.
        </t>
        <t>
          Attempts to go beyond the advertised limit can be logged so that
          client understanding of MESSAGELIMIT can be tracked.  If
          implementation and deployment of this extension becomes common, it may
          at some point be acceptable to strictly enforce the advertised limit
          and to accept that the remaining clients will, indeed, no longer work
          properly with mailboxes above that limit.
        </t>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Formal Syntax</name>
      <t>The following syntax specification uses the Augmented Backus-Naur Form (ABNF) notation as specified in <xref target="RFC5234" format="default"/>.</t>

      <t>Non-terminals referenced but not defined below are as defined by <xref target="RFC3501" format="default">IMAP4</xref>.</t>
      <t>Except as noted otherwise, all alphabetic characters are case-insensitive.
      The use of uppercase or lowercase characters to define token strings is for editorial clarity only.
      Implementations <bcp14>MUST</bcp14> accept these strings in a case-insensitive fashion.</t>
      <sourcecode type="abnf"><![CDATA[
capability          =/ "MESSAGELIMIT=" message-limit /
                       "SAVELIMIT=" message-limit
                       ;; <capability> from [RFC3501]

message-limit       = nz-number

resp-text-code      =/ "MESSAGELIMIT" SP message-limit [SP uniqueid]
    ;; No more than nz-number messages can be processed
    ;; by any command at a time. The last (lowest) processed
    ;; UID is uniqueid.
    ;; The last parameter is omitted when not known.]]></sourcecode>
    </section>
    <section numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
      This document defines an additional IMAP4 capability.  As such, it
      does not change the underlying security considerations of IMAP4rev1 <xref target="RFC3501" format="default"/>
      or IMAP4rev2 <xref target="RFC9051" format="default"/>.
      </t>
      <t>
      This document defines an optimization that can both reduce the amount of work
      performed by the server, as well at the amount of data returned to the client.
      Use of this extension is likely to cause the server and the client to use less memory
      than when the extension is not used, which can in turn help to protect from
      denial-of-service attacks. However, as this is going
      to be new code in both the client and the server, rigorous testing of such code
      is required in order to avoid introducing new implementation bugs.
      </t>
		</section>
    <section numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>Additions to the IMAP Capabilities Registry</name>

        <t>IMAP4 capabilities are registered by publishing a Standards Track
        or IESG-approved Informational or Experimental RFC.  The "IMAP Capabilities" registry is
        currently located at:
        <eref target="https://www.iana.org/assignments/imap-capabilities/" brackets="angle"/>.</t>
        <t>IANA has added "MESSAGELIMIT=" and
        "SAVELIMIT=" capabilities to this registry, with this
        document as the reference.</t>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="RFC5234" to="ABNF"/>
    <references>
      <name>References</name>
      <references>

        <name>Normative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3501.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3502.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5182.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5256.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9051.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9394.xml"/>
      </references>
    </references>

    <section numbered="false" toc="default">
      <name>Acknowledgments</name>
      <t>This document was motivated by the Yahoo! team and their questions
      about best client practices for dealing with large mailboxes.</t>
      <t>The authors of this document would like to thank the following people who
      provided useful comments, contributed text, or participated in
      discussions of this document: <contact fullname="Timo Sirainen"/>,
      <contact fullname="Barry Leiba"/>, <contact fullname="Ken Murchison"/>,
      and <contact fullname="Arnt Gulbrandsen"/>.
      </t>
    </section>

  </back>
</rfc>
