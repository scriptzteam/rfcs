<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" consensus="true" submissionType="IETF" docName="draft-ietf-netconf-ssh-client-server-40" number="9644" updates="" obsoletes="" ipr="trust200902" tocInclude="true" symRefs="true" sortRefs="true" version="3" >

  <front>
    
    <title abbrev="Groupings for SSH Clients and Servers">YANG Groupings for SSH Clients and SSH Servers</title>
    <seriesInfo name="RFC" value="9644"/>
    <author fullname="Kent Watsen" initials="K." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <date month="October" year="2024"/>
    <area>OPS</area>
    <workgroup>netconf</workgroup>
    <abstract>
      <t>This document presents three IETF-defined YANG modules and a script used to create four supporting IANA modules.</t>
      <t>The three IETF modules are ietf-ssh-common, ietf-ssh-client, and
        ietf-ssh-server.  The "ietf-ssh-client" and "ietf-ssh-server" modules
        are the primary productions of this work, supporting the configuration
        and monitoring of Secure Shell (SSH) clients and servers.</t>
      <t>The four IANA modules are iana-ssh-encryption-algs, iana-ssh-key-exchange-algs,
        iana-ssh-mac-algs, and iana-ssh-public-key-algs.  These modules each
        define YANG enumerations providing support for an IANA-maintained algorithm registry.</t>
    </abstract>
  </front>
  <middle>
    <section>
      <name>Introduction</name>
      <t>This document presents three IETF-defined YANG modules <xref target="RFC7950"/> and a script used to create four supporting IANA modules.</t>
      <t>The three IETF modules are ietf-ssh-common (<xref target="ssh-common-model"/>),
        ietf-ssh-client (<xref target="ssh-client-model"/>), and ietf-ssh-server
        (<xref target="ssh-server-model"/>).  The "ietf-ssh-client" and "ietf-ssh-server"
        modules are the primary productions of this work, supporting the configuration
          and monitoring of SSH clients and servers.</t>
      <t>The groupings defined in this document are expected to be used in
        conjunction with the groupings defined in an underlying transport-level
        module, such as the groupings defined in <xref target="RFC9643"/>.
        The transport-level data model enables the configuration of transport-level
        values, such as a remote address, a remote port, a local address, and a
        local port.</t>
      <t>The four IANA modules are: iana-ssh-encryption-algs,
        iana-ssh-key-exchange-algs,
        iana-ssh-mac-algs, and iana-ssh-public-key-algs.  These modules each define YANG
        enumerations providing support for an IANA-maintained algorithm registry.</t>
      <t>This document assumes that the four IANA modules exist
        and presents a script in <xref target="iana-script"/> that IANA
        may use to generate those YANG modules.  This document does not
        publish the initial versions of these four modules.  IANA publishes
        these modules.</t>
      <section>
        <name>Regarding the Three IETF Modules</name>
        <t>The three IETF modules define features and groupings to model "generic" SSH
         clients and SSH servers, where "generic" should be interpreted as "least
         common denominator" rather than "complete."  Support for the basic SSH protocol
         <xref target="RFC4252"/> <xref target="RFC4253"/> <xref target="RFC4254"/>
         is afforded by these modules, leaving configuration of advanced features
         (e.g., multiple channels) to augmentations made by consuming modules.</t>
        <t>It is intended that the YANG groupings will be used by applications
        needing to configure SSH client and server protocol stacks.
	For
         instance, these groupings are used to help define the data models
         in <xref target="I-D.ietf-netconf-netconf-client-server"/>, for
	 clients and servers using the Network Configuration Protocol (NETCONF) over SSH <xref target="RFC6242"/>.</t>
        <t>The "ietf-ssh-client" and "ietf-ssh-server" YANG modules each define one
        grouping, which is focused on just SSH-specific configuration, and
        specifically avoid any transport-level configuration, such as what
        ports to listen on or connect to. This affords applications the
        opportunity to define their own strategy for how the underlying TCP
        connection is established. For instance, applications supporting NETCONF
        Call Home <xref target="RFC8071"/> could use the "ssh-server-grouping"
        grouping for the SSH parts it provides while adding data nodes for the
        TCP-level call-home configuration.</t>
        <t>The modules defined in this document optionally support <xref target="RFC6187"/>, which describes enabling host keys and
          public keys based on X.509v3 certificates.</t>
      </section>
      <section anchor="collective-effort">
        <name>Relation to Other RFCs</name>
        <t>This document presents three YANG modules <xref target="RFC7950"/>
            that are part of a collection of RFCs that work together
            to ultimately support the configuration of both the clients
            and servers of both the NETCONF <xref target="RFC6241"/> and
            RESTCONF <xref target="RFC8040"/> protocols.</t>
        <t> The dependency relationship between the primary YANG groupings
            defined in the various RFCs is presented in the below diagram.
            In some cases, a document may define secondary groupings that
            introduce dependencies not illustrated in the diagram.
            The labels in the diagram are shorthand names for the defining
            RFCs.  The citation references for shorthand names are provided below
            the diagram.</t>
        <t>Please note that the arrows in the diagram point from referencer
            to referenced.  For example, the "crypto-types" RFC does not
            have any dependencies, whilst the "keystore" RFC depends on the
            "crypto-types" RFC.</t>
        <artwork><![CDATA[
                               crypto-types
                                 ^      ^
                                /        \
                               /          \
                      truststore         keystore
                       ^     ^             ^  ^
                       |     +---------+   |  |
                       |               |   |  |
                       |      +------------+  |
tcp-client-server      |     /         |      |
   ^    ^        ssh-client-server     |      |
   |    |           ^            tls-client-server
   |    |           |              ^     ^        http-client-server
   |    |           |              |     |                 ^
   |    |           |        +-----+     +---------+       |
   |    |           |        |                     |       |
   |    +-----------|--------|--------------+      |       |
   |                |        |              |      |       |
   +-----------+    |        |              |      |       |
               |    |        |              |      |       |
               |    |        |              |      |       |
            netconf-client-server       restconf-client-server

]]></artwork>
          <table>
          <name>Label in Diagram to RFC Mapping</name>
          <tbody>
            <tr>
              <th>Label in Diagram</th>
              <th>Reference</th>
            </tr>
            <tr>
              <td>crypto-types</td>
              <td>
                <xref target="RFC9640"/></td>
            </tr>
            <tr>
              <td>truststore</td>
              <td>
                <xref target="RFC9641"/></td>
            </tr>
            <tr>
              <td>keystore</td>
              <td>
                <xref target="RFC9642"/></td>
            </tr>
            <tr>
              <td>tcp-client-server</td>
              <td>
                <xref target="RFC9643"/></td>
            </tr>
            <tr>
              <td>ssh-client-server</td>
              <td>
                RFC9644</td>
            </tr>
            <tr>
              <td>tls-client-server</td>
              <td>
                <xref target="RFC9645"/></td>
            </tr>
            <tr>
              <td>http-client-server</td>
              <td>
                <xref target="I-D.ietf-netconf-http-client-server"/></td>
            </tr>
            <tr>
              <td>netconf-client-server</td>
              <td>
                <xref target="I-D.ietf-netconf-netconf-client-server"/></td>
            </tr>
            <tr>
              <td>restconf-client-server</td>
              <td>
                <xref target="I-D.ietf-netconf-restconf-client-server"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section>
        <name>Specification Language</name>
	        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      </section>
      <section>
        <name>Adherence to the NMDA</name>
        <t>This document is compliant with the Network Management Datastore
          Architecture (NMDA) <xref target="RFC8342"/>.  For instance, as
          described in <xref target="RFC9641"/> and
          <xref target="RFC9642"/>, trust anchors and keys
          installed during manufacturing are expected to appear
          in &lt;operational&gt; (<xref section="5.3" target="RFC8342"/>) and &lt;system&gt;
          <xref target="I-D.ietf-netmod-system-config"/> if implemented.</t>
      </section>
      <section>
        <name>Conventions</name>
        <t>Various examples in this document use "BASE64VALUE=" as a
            placeholder value for binary data that has been base64
            encoded (per <xref section="9.8" target="RFC7950"/>).  This
            placeholder value is used because real base64-encoded structures
            are often many lines long and hence distracting to the example
        being presented.</t>
	<t>  Various examples in this document use the XML
  <xref target="W3C.REC-xml-20081126"/> encoding. Other encodings, such as JSON <xref target="RFC8259"/>,
  could alternatively be used.</t>
  <t>Various examples in this document contain long lines that may be folded,
  as described in <xref target="RFC8792"/>.</t>
      </section>
    </section>
    <section anchor="ssh-common-model">
      <name>The "ietf-ssh-common" Module</name>
      <t>The SSH common model presented in this section is common to both SSH clients and SSH servers. The
      "transport-params-grouping" grouping can be used to configure
      the list of SSH transport algorithms permitted by the SSH client
      or SSH server. The lists of permitted algorithms are in decreasing
      order of usage preference.  The algorithm that appears first in
      the client list that also appears in the server list is the one
      that is used for the SSH transport layer connection.  The ability
      to restrict the algorithms allowed is provided in this grouping
      for SSH clients and SSH servers that are capable of doing so
      and may serve to make SSH clients and SSH servers compliant
      with security policies.</t>
      <section>
        <name>Data Model Overview</name>
        <t>This section provides an overview of the "ietf-ssh-common" module in terms of its features, identities, groupings, and protocol-accessible nodes.</t>
        <section anchor="common-features" toc="exclude">
          <name>Features</name>
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-ssh-common" module:</t>
          <sourcecode type="yangtree"><![CDATA[
Features:
  +-- ssh-x509-certs
  +-- transport-params
  +-- asymmetric-key-pair-generation
  +-- algorithm-discovery
                ]]></sourcecode>
          <t>The diagram above uses syntax that is similar to but not
            defined in <xref target="RFC8340"/>.</t>
          <t>Please refer to the YANG module for a description of each feature.</t>
        </section>
        <section toc="exclude">
          <name>Groupings</name>
          <t>The "ietf-ssh-common" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>transport-params-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>
          <section anchor="transport-params-grouping">
            <name>The "transport-params-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "transport-params-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping transport-params-grouping:
    +-- host-key
    |  +-- host-key-alg*   ssh-public-key-algorithm
    +-- key-exchange
    |  +-- key-exchange-alg*   ssh-key-exchange-algorithm
    +-- encryption
    |  +-- encryption-alg*   ssh-encryption-algorithm
    +-- mac
       +-- mac-alg*   ssh-mac-algorithm
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>This grouping is used by both the "ssh-client-grouping" and the
                "ssh-server-grouping" groupings defined in Sections <xref target="ssh-client-grouping" format="counter"/>
                and <xref target="ssh-server-grouping" format="counter"/>, respectively.</li>
              <li>This grouping enables client and server configurations to
                specify the algorithms that are to be used when establishing
                SSH sessions.</li>
              <li>Each list is "ordered-by user".</li>
            </ul>
          </section>
        </section>
        <section toc="exclude">
          <name>Protocol-Accessible Nodes</name>
          <t>The following tree diagram <xref target="RFC8340"/> lists all the
             protocol-accessible nodes defined in the "ietf-ssh-common" module
             without expanding the "grouping" statements:</t>
          <sourcecode type="yangtree"><![CDATA[
module: ietf-ssh-common
  +--ro supported-algorithms {algorithm-discovery}?
     +--ro public-key-algorithms
     |  +--ro supported-algorithm*   ssh-public-key-algorithm
     +--ro encryption-algorithms
     |  +--ro supported-algorithm*   ssh-encryption-algorithm
     +--ro key-exchange-algorithms
     |  +--ro supported-algorithm*   ssh-key-exchange-algorithm
     +--ro mac-algorithms
        +--ro supported-algorithm*   ssh-mac-algorithm

  rpcs:
    +---x generate-asymmetric-key-pair
            {asymmetric-key-pair-generation}?
       +---w input
       |  +---w algorithm               ssh-public-key-algorithm
       |  +---w num-bits?               uint16
       |  +---w private-key-encoding
       |     +---w (private-key-encoding)
       |        +--:(cleartext) {ct:cleartext-private-keys}?
       |        |  +---w cleartext?   empty
       |        +--:(encrypted) {ct:encrypted-private-keys}?
       |        |  +---w encrypted
       |        |     +---w ks:encrypted-by-grouping
       |        +--:(hidden) {ct:hidden-private-keys}?
       |           +---w hidden?      empty
       +--ro output
          +--ro (key-or-hidden)?
             +--:(key)
             |  +---u ct:asymmetric-key-pair-grouping
             +--:(hidden)
                +--ro location?
                        instance-identifier
]]></sourcecode>
          <t>Comments:</t>
          <ul>
            <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <xref section="5.6.5" target="RFC7950"/>.</li>
            <li>The protocol-accessible nodes for the "ietf-ssh-common" module
                are limited to the "supported-algorithms" container, which is constrained
                by the "algorithm-discovery" feature, and the "generate-asymmetric-key-pair" RPC,
                which is constrained by the "asymmetric-key-pair-generation" feature.</li>
            <li>The "encrypted-by-grouping" grouping is discussed in
                <xref section="2.1.3.1" target="RFC9642"/>.</li>
            <li>The "asymmetric-key-pair-grouping" grouping is discussed in
              <xref section="2.1.4.6" target="RFC9640"/>.</li>
          </ul>
        </section>
      </section>
      <section>
        <name>Example Usage</name>
        <t>The following example illustrates the "transport-params-grouping'
        grouping when populated with some data.</t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<!-- The outermost element below doesn't exist in the data model. -->
<!--  It simulates if the "grouping" were a "container" instead.  -->

<transport-params
  xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-common">
  <host-key>
    <host-key-alg>x509v3-rsa2048-sha256</host-key-alg>
    <host-key-alg>ssh-rsa</host-key-alg>
    <host-key-alg>ssh-rsa@openssh.com</host-key-alg>
  </host-key>
  <key-exchange>
    <key-exchange-alg>diffie-hellman-group-exchange-sha256</key-exch\
ange-alg>
  </key-exchange>
  <encryption>
    <encryption-alg>aes256-ctr</encryption-alg>
    <encryption-alg>aes192-ctr</encryption-alg>
    <encryption-alg>aes128-ctr</encryption-alg>
    <encryption-alg>aes256-gcm@openssh.com</encryption-alg>
  </encryption>
  <mac>
    <mac-alg>hmac-sha2-256</mac-alg>
    <mac-alg>hmac-sha2-512</mac-alg>
  </mac>
</transport-params>
]]></sourcecode>
        <t>The following example illustrates operational state data indicating
        the SSH algorithms supported by the server.</t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<supported-algorithms
  xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-common">
  <encryption-algorithms>
    <supported-algorithm>aes256-ctr</supported-algorithm>
    <supported-algorithm>arcfour256</supported-algorithm>
    <supported-algorithm>serpent256-ctr</supported-algorithm>
    <supported-algorithm>AEAD_AES_128_GCM</supported-algorithm>
    <supported-algorithm>AEAD_AES_256_GCM</supported-algorithm>
    <supported-algorithm>aes256-gcm@openssh.com</supported-algorithm>
  </encryption-algorithms>
  <key-exchange-algorithms>
    <supported-algorithm>ecdh-sha2-nistp256</supported-algorithm>
    <supported-algorithm>rsa2048-sha256</supported-algorithm>
    <supported-algorithm>gss-group14-sha1-nistp256</supported-algori\
thm>
    <supported-algorithm>gss-gex-sha1-nistp256</supported-algorithm>
    <supported-algorithm>gss-group14-sha256-1.2.840.10045.3.1.1</sup\
ported-algorithm>
    <supported-algorithm>curve25519-sha256</supported-algorithm>
  </key-exchange-algorithms>
  <mac-algorithms>
    <supported-algorithm>hmac-sha2-256</supported-algorithm>
    <supported-algorithm>hmac-sha2-512</supported-algorithm>
    <supported-algorithm>AEAD_AES_256_GCM</supported-algorithm>
  </mac-algorithms>
  <public-key-algorithms>
    <supported-algorithm>rsa-sha2-256</supported-algorithm>
    <supported-algorithm>rsa-sha2-512</supported-algorithm>
    <supported-algorithm>spki-sign-rsa</supported-algorithm>
    <supported-algorithm>pgp-sign-dss</supported-algorithm>
    <supported-algorithm>x509v3-rsa2048-sha256</supported-algorithm>
    <supported-algorithm>ecdsa-sha2-nistp256</supported-algorithm>
    <supported-algorithm>ecdsa-sha2-1.3.132.0.37</supported-algorith\
m>
    <supported-algorithm>ssh-ed25519</supported-algorithm>
    <supported-algorithm>ssh-rsa@openssh.com</supported-algorithm>
  </public-key-algorithms>
</supported-algorithms>
]]></sourcecode>
        <t>The following example illustrates the "generate-asymmetric-key-pair" RPC.</t>
        <t keepWithNext="true">REQUEST</t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<rpc message-id="101"
  xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <generate-asymmetric-key-pair
    xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-common">
    <algorithm>ecdsa-sha2-nistp256</algorithm>
    <num-bits>521</num-bits>
    <private-key-encoding>
      <encrypted>
        <asymmetric-key-ref>hidden-asymmetric-key</asymmetric-key-re\
f>
      </encrypted>
    </private-key-encoding>
  </generate-asymmetric-key-pair>
</rpc>
]]></sourcecode>
        <t keepWithNext="true">RESPONSE</t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<rpc-reply message-id="101"
  xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types"
  xmlns:sshcmn="urn:ietf:params:xml:ns:yang:ietf-ssh-common">
  <sshcmn:public-key-format>ct:subject-public-key-info-format</sshcm\
n:public-key-format>
  <sshcmn:public-key>BASE64VALUE=</sshcmn:public-key>
  <sshcmn:private-key-format>ct:ec-private-key-format</sshcmn:privat\
e-key-format>
  <sshcmn:cleartext-private-key>BASE64VALUE=</sshcmn:cleartext-priva\
te-key>
</rpc-reply>
]]></sourcecode>
      </section>
      <section anchor="ssh-common-yang-module">
        <name>YANG Module</name>
        <t>This YANG module has normative references to <xref target="RFC4250"/>, <xref target="RFC4253"/>,
        <xref target="RFC6187"/>, and <xref target="FIPS_186-5"/>.</t>
        <sourcecode type="yang" name="ietf-ssh-common@2024-10-10.yang" markers="true"><![CDATA[
module ietf-ssh-common {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ssh-common";
  prefix sshcmn;

  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }

  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }
  
  import iana-ssh-encryption-algs {
    prefix sshea;
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  import iana-ssh-key-exchange-algs {
    prefix sshkea;
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  import iana-ssh-mac-algs {
    prefix sshma;
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  import iana-ssh-public-key-algs {
    prefix sshpka;
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG Web:   https://datatracker.ietf.org/wg/netconf
     WG List:  NETCONF WG list <mailto:netconf@ietf.org>
     Author:   Kent Watsen <mailto:kent+ietf@watsen.net>
     Author:   Gary Wu <mailto:garywu@cisco.com>";

  description
    "This module defines common features and groupings for
     Secure Shell (SSH).

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.
     
     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9644
     (https://www.rfc-editor.org/info/rfc9644); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version.";
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  // Features

  feature ssh-x509-certs {
    description
      "X.509v3 certificates are supported for SSH.";
    reference
      "RFC 6187: X.509v3 Certificates for Secure Shell
                 Authentication";
  }

  feature transport-params {
    description
      "SSH transport layer parameters are configurable.";
  }

  feature asymmetric-key-pair-generation {
    description
      "Indicates that the server implements the
       'generate-asymmetric-key-pair' RPC.";
  }

  feature algorithm-discovery {
    description
      "Indicates that the server implements the
       'supported-algorithms' container.";
  }

  // Typedefs

  typedef ssh-public-key-algorithm {
    type union {
      type sshpka:ssh-public-key-algorithm;
      type string {
        length "1..64" {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC
             4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
        pattern '.*@.*' {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC
             4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
      }
    }
    description
      "A type that enables the public key algorithm to be
       either an IANA-maintained public key algorithm in
       the 'iana-ssh-public-key-algs' YANG module (RFC 9644)
       or a locally defined algorithm, per Section 4.6.1
       of RFC 4250.";
    reference
      "RFC 4250: The Secure Shell (SSH) Protocol Assigned Numbers
       RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  typedef ssh-key-exchange-algorithm {
    type union {
      type sshkea:ssh-key-exchange-algorithm;
      type string {
        length "1..64" {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC 4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
        pattern '.*@.*' {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC 4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                     Numbers";
        }
      }
    }
    description
      "A type that enables the key exchange algorithm to be
       either an IANA-maintained key exchange algorithm in
       the 'iana-ssh-key-exchange-algs' YANG module (RFC 9644)
       or a locally defined algorithm, per Section 4.6.1
       of RFC 4250.";
    reference
      "RFC 4250: The Secure Shell (SSH) Protocol Assigned Numbers
       RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  typedef ssh-encryption-algorithm {
    type union {
      type sshea:ssh-encryption-algorithm;
      type string {
        length "1..64" {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC
             4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
        pattern '.*@.*' {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC
             4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
      }
    }
    description
      "A type that enables the encryption algorithm to be
       either an IANA-maintained encryption algorithm in
       the 'iana-ssh-encryption-algs' YANG module (RFC 9644)
       or a locally defined algorithm, per Section 4.6.1
       of RFC 4250.";
    reference
      "RFC 4250: The Secure Shell (SSH) Protocol Assigned Numbers
       RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  typedef ssh-mac-algorithm {
    type union {
      type sshma:ssh-mac-algorithm;
      type string {
        length "1..64" {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC
             4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
        pattern '.*@.*' {
          description
            "Non-IANA-maintained algorithms must include the
             at sign (@) in them, per Section 4.6.1 of RFC
             4250.";
          reference
            "RFC 4250: The Secure Shell (SSH) Protocol Assigned
                       Numbers";
        }
      }
    }
    description
      "A type that enables the message authentication code (MAC)
       algorithm to be either an IANA-maintained MAC algorithm 
       in the 'iana-ssh-mac-algs' YANG module (RFC 9644)
       or a locally defined algorithm, per Section 4.6.1
       of RFC 4250.";
    reference
      "RFC 4250: The Secure Shell (SSH) Protocol Assigned Numbers
       RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  // Groupings

  grouping transport-params-grouping {
    description
      "A reusable grouping for SSH transport parameters.";
    reference
      "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    container host-key {
      description
        "Parameters regarding host key.";
      leaf-list host-key-alg {
        type ssh-public-key-algorithm;
        ordered-by user;
        description
          "Acceptable host key algorithms in order of decreasing
           preference.

           If this leaf-list is not configured (has zero 
           elements), the acceptable host key algorithms are
           implementation-defined.";
        reference
          "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
      }
    }
    container key-exchange {
      description
        "Parameters regarding key exchange.";
      leaf-list key-exchange-alg {
        type ssh-key-exchange-algorithm;
        ordered-by user;
        description
          "Acceptable key exchange algorithms in order of decreasing
           preference.

           If this leaf-list is not configured (has zero
           elements), the acceptable key exchange algorithms are
           implementation-defined.";
      }
    }
    container encryption {
      description
        "Parameters regarding encryption.";
      leaf-list encryption-alg {
        type ssh-encryption-algorithm;
        ordered-by user;
        description
          "Acceptable encryption algorithms in order of decreasing
           preference.

           If this leaf-list is not configured (has zero
           elements), the acceptable encryption algorithms are
           implementation-defined.";
      }
    }
    container mac {
      description
        "Parameters regarding message authentication code (MAC).";
      leaf-list mac-alg {
        type ssh-mac-algorithm;
        ordered-by user;
        description
          "Acceptable MAC algorithms in order of decreasing
           preference.

           If this leaf-list is not configured (has zero
           elements), the acceptable MAC algorithms are
           implementation-defined.";
      }
    }
  }

  // Protocol-accessible Nodes

  container supported-algorithms {
    if-feature "algorithm-discovery";
    config false;
    description
      "Identifies all of the supported algorithms.";
    container public-key-algorithms {
      description
        "A container for a list of public key algorithms
         supported by the server.";
      leaf-list supported-algorithm {
        type ssh-public-key-algorithm;
        description
          "A public key algorithm supported by the server.";
      }
    }
    container encryption-algorithms {
      description
        "A container for a list of encryption algorithms
         supported by the server.";
      leaf-list supported-algorithm {
        type ssh-encryption-algorithm;
        description
          "An encryption algorithm supported by the server.";
      }
    }
    container key-exchange-algorithms {
      config false;
      description
        "A container for a list of key exchange algorithms
         supported by the server.";
      leaf-list supported-algorithm {
        type ssh-key-exchange-algorithm;
        description
          "A key exchange algorithm supported by the server.";
      }
    }
    container mac-algorithms {
      config false;
      description
        "A container for a list of MAC algorithms
         supported by the server.";
      leaf-list supported-algorithm {
        type ssh-mac-algorithm;
        description
          "A MAC algorithm supported by the server.";
      }
    }
  }

  rpc generate-asymmetric-key-pair {
    if-feature "asymmetric-key-pair-generation";
    description
      "Requests the device to generate a public key using
       the specified key algorithm.";
    input {
      leaf algorithm {
        type ssh-public-key-algorithm;
        mandatory true;
        description
          "The algorithm to be used when generating the key.";
      }
      leaf num-bits {
        type uint16;
        description
          "Specifies the number of bits in the key to create.
           For RSA keys, the minimum size is 1024 bits and
           the default is 3072 bits.  Generally, 3072 bits is
           considered sufficient.  DSA keys must be exactly 1024
           bits, as specified by FIPS 186-5.  For Elliptic Curve
           Digital Signature Algorithm (ECDSA) keys, the
           'num-bits' value determines the key length by selecting
           from one of three elliptic curve sizes: 256, 384, or
           521 bits.  Attempting to use bit lengths other than
           these three values for ECDSA keys will fail.  ECDSA-SK,
           Ed25519, and Ed25519-SK keys have a fixed length, and
           thus, the 'num-bits' value is not specified.";
        reference
          "FIPS 186-5: Digital Signature Standard (DSS)";
      }
      container private-key-encoding {
        description
          "Indicates how the private key is to be encoded.";
        choice private-key-encoding {
          mandatory true;
          description
            "A choice amongst optional private key handling.";
          case cleartext {
            if-feature "ct:cleartext-private-keys";
            leaf cleartext {
              type empty;
              description
                "Indicates that the private key is to be returned
                 as a cleartext value.";
            }
          }
          case encrypted {
            if-feature "ct:encrypted-private-keys";
            container encrypted {
              description
                "Indicates that the private key is to be encrypted
                 using the specified symmetric or asymmetric key.";
              uses ks:encrypted-by-grouping;
            }
          }
          case hidden {
            if-feature "ct:hidden-private-keys";
            leaf hidden {
              type empty;
              description
                "Indicates that the private key is to be hidden.
  
                 Unlike the 'cleartext' and 'encrypt' options, the
                 key returned is a placeholder for an internally
                 stored key.  See the 'Support for Built-in Keys'
                 section in RFC 9642 for information about hidden
                 keys.

                 It is expected that the server will instantiate
                 the hidden key in the same location where built-in
                 keys are located.  Rather than returning the key,
                 just the key's location is returned in the output.";
            }
          }
        }
      }
    }
    output {
      choice key-or-hidden {
        case key {
          uses ct:asymmetric-key-pair-grouping;
        }
        case hidden {
          leaf location {
            type instance-identifier;
            description
              "The location to where a hidden key was created.";
          }
        }
        description
          "The output can be either a key (for cleartext and
           encrypted keys) or the location to where the key
           was created (for hidden keys).";
      }
    }
  } // end generate-asymmetric-key-pair

}
]]></sourcecode>
      </section>
    </section>
    <section anchor="ssh-client-model">
      <name>The "ietf-ssh-client" Module</name>
      <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module called
        "ietf-ssh-client".  A high-level overview of the module is provided in
        <xref target="client-overview"/>. Examples illustrating the module's use
        are provided in <xref target="client-examples"/> ("Example Usage"). The YANG
        module itself is defined in <xref target="client-yang-module"/>.</t>
      <section anchor="client-overview">
        <name>Data Model Overview</name>
        <t>This section provides an overview of the "ietf-ssh-client" module
          in terms of its features and groupings.</t>
        <section anchor="client-features" toc="exclude">
          <name>Features</name>
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-ssh-client" module:</t>
          <sourcecode type="yangtree"><![CDATA[
Features:
  +-- ssh-client-keepalives
  +-- client-ident-password
  +-- client-ident-publickey
  +-- client-ident-hostbased
  +-- client-ident-none
]]></sourcecode>
          <t>The diagram above uses syntax that is similar to but not
            defined in <xref target="RFC8340"/>.</t>
          <t>Please refer to the YANG module for a description of each feature.</t>
        </section>
        <section toc="exclude">
          <name>Groupings</name>
          <t>The "ietf-ssh-client" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>ssh-client-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>
          <section anchor="ssh-client-grouping">
            <name>The "ssh-client-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "ssh-client-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

  grouping ssh-client-grouping:
    +-- client-identity
    |  +-- username?      string
    |  +-- public-key! {client-ident-publickey}?
    |  |  +---u ks:inline-or-keystore-asymmetric-key-grouping
    |  +-- password! {client-ident-password}?
    |  |  +---u ct:password-grouping
    |  +-- hostbased! {client-ident-hostbased}?
    |  |  +---u ks:inline-or-keystore-asymmetric-key-grouping
    |  +-- none?          empty {client-ident-none}?
    |  +-- certificate! {sshcmn:ssh-x509-certs}?
    |     +---u ks:inline-or-keystore-end-entity-cert-with-key-group\
ing
    +-- server-authentication
    |  +-- ssh-host-keys!
    |  |  +---u ts:inline-or-truststore-public-keys-grouping
    |  +-- ca-certs! {sshcmn:ssh-x509-certs}?
    |  |  +---u ts:inline-or-truststore-certs-grouping
    |  +-- ee-certs! {sshcmn:ssh-x509-certs}?
    |     +---u ts:inline-or-truststore-certs-grouping
    +-- transport-params {sshcmn:transport-params}?
    |  +---u sshcmn:transport-params-grouping
    +-- keepalives! {ssh-client-keepalives}?
       +-- max-wait?       uint16
       +-- max-attempts?   uint8
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>The "client-identity" node configures a "username" and authentication methods,
                each enabled by a "feature" statement defined in <xref target="client-features"/>.</li>
              <li>The "server-authentication" node configures trust anchors for
                authenticating the SSH server, with each option enabled by a "feature" statement.</li>
              <li>The "transport-params" node, which must be enabled by a feature, configures
                parameters for the SSH sessions established by this configuration.</li>
              <li>The "keepalives" node, which must be enabled by a feature, configures
                a "presence" container for testing the aliveness of the SSH server.  The
                aliveness-test occurs at the SSH protocol layer.</li>
              <li>
                <t>For the referenced grouping statements:
                </t>
                <ul spacing="normal">
                  <li>The "inline-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9642"/>.</li>
                  <li>The "inline-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <xref section="2.1.3.6" target="RFC9642"/>.</li>
                  <li>The "inline-or-truststore-public-keys-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9641"/>.</li>
                  <li>The "inline-or-truststore-certs-grouping" grouping is
                    discussed in <xref section="2.1.3.3" target="RFC9641"/>.</li>
                  <li>The "transport-params-grouping" grouping is discussed in
                  <xref target="transport-params-grouping"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>
        <section toc="exclude">
          <name>Protocol-Accessible Nodes</name>
          <t>The "ietf-ssh-client" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.   Thus, this
            module, when implemented, does not itself define any protocol-accessible nodes.</t>
        </section>
      </section>
      <section anchor="client-examples">
        <name>Example Usage</name>
        <t>This section presents two examples showing the "ssh-client-grouping"
        grouping populated with some data. These examples are effectively the same,
        except the first configures the client identity using an inlined key,
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in
        <xref section="2.2.1" target="RFC9641"/> and
        <xref section="2.2.1" target="RFC9642"/>.</t>
        <t>The following configuration example uses inline-definitions for the
          client identity and server authentication:
        </t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<!-- The outermost element below doesn't exist in the data model. -->
<!--  It simulates if the "grouping" were a "container" instead.  -->

<ssh-client
  xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-client"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">

  <!-- how this client will authenticate itself to the server -->
  <client-identity>
    <username>foobar</username>
    <public-key>
      <inline-definition>
        <private-key-format>ct:rsa-private-key-format</private-key-f\
ormat>
        <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
      </inline-definition>
    </public-key>
  </client-identity>

  <!-- which host keys will this client trust -->
  <server-authentication>
    <ssh-host-keys>
      <inline-definition>
        <public-key>
          <name>corp-fw1</name>
          <public-key-format>ct:ssh-public-key-format</public-key-fo\
rmat>
          <public-key>BASE64VALUE=</public-key>
        </public-key>
        <public-key>
          <name>corp-fw2</name>
          <public-key-format>ct:ssh-public-key-format</public-key-fo\
rmat>
          <public-key>BASE64VALUE=</public-key>
        </public-key>
      </inline-definition>
    </ssh-host-keys>
    <ca-certs>
      <inline-definition>
        <certificate>
          <name>Server Cert Issuer #1</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
        <certificate>
          <name>Server Cert Issuer #2</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </inline-definition>
    </ca-certs>
    <ee-certs>
      <inline-definition>
        <certificate>
          <name>My Application #1</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
        <certificate>
          <name>My Application #2</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </inline-definition>
    </ee-certs>
  </server-authentication>

  <keepalives>
    <max-wait>30</max-wait>
    <max-attempts>3</max-attempts>
  </keepalives>

</ssh-client>
]]></sourcecode>
        <t>The following configuration example uses central-keystore-references for the
          client identity and central-truststore-references for server authentication
          from the keystore:
        </t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<!-- The outermost element below doesn't exist in the data model. -->
<!--  It simulates if the "grouping" were a "container" instead.  -->

<ssh-client
  xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-client"
  xmlns:algs="urn:ietf:params:xml:ns:yang:ietf-ssh-common">

  <!-- how this client will authenticate itself to the server -->
  <client-identity>
    <username>foobar</username>
    <public-key>
      <central-keystore-reference>ssh-rsa-key</central-keystore-refe\
rence>
    </public-key>
    <certificate>
      <central-keystore-reference>
        <asymmetric-key>ssh-rsa-key-with-cert</asymmetric-key>
        <certificate>ex-rsa-cert2</certificate>
      </central-keystore-reference>
    </certificate>
  </client-identity>

  <!-- which host-keys will this client trust -->
  <server-authentication>
    <ssh-host-keys>
      <central-truststore-reference>trusted-ssh-public-keys</central\
-truststore-reference>
    </ssh-host-keys>
    <ca-certs>
      <central-truststore-reference>trusted-server-ca-certs</central\
-truststore-reference>
    </ca-certs>
    <ee-certs>
      <central-truststore-reference>trusted-server-ee-certs</central\
-truststore-reference>
    </ee-certs>
  </server-authentication>

  <keepalives>
    <max-wait>30</max-wait>
    <max-attempts>3</max-attempts>
  </keepalives>

</ssh-client>
]]></sourcecode>
</section>
      <section anchor="client-yang-module">
        <name>YANG Module</name>
        <t>This YANG module has normative references to <xref target="RFC4252"/>,
        <xref target="RFC4254"/>, <xref target="RFC8341"/>, <xref target="RFC9640"/>,
        <xref target="RFC9641"/>, and <xref target="RFC9642"/>.</t>
        <sourcecode type="yang" markers="true" name="ietf-ssh-client@2024-10-10.yang"><![CDATA[
module ietf-ssh-client {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ssh-client";
  prefix sshc;

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }

  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }

  import ietf-truststore {
    prefix ts;
    reference
      "RFC 9641: A YANG Data Model for a Truststore";
  }

  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }

  import ietf-ssh-common {
    prefix sshcmn;
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG Web:   https://datatracker.ietf.org/wg/netconf
     WG List:  NETCONF WG list <mailto:netconf@ietf.org>
     Author:   Kent Watsen <mailto:kent+ietf@watsen.net>";

  description
    "This module defines a reusable grouping for SSH clients that
     can be used as a basis for specific SSH client instances.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.
     
     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9644
     (https://www.rfc-editor.org/info/rfc9644); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version.";
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  // Features

  feature ssh-client-keepalives {
    description
      "SSH keepalive parameters are configurable for
       SSH clients on the server implementing this feature.";
  }

  feature client-ident-publickey {
    description
      "Indicates that the 'publickey' authentication type, per
       RFC 4252, is supported for client identification.
       The 'publickey' authentication type is required by
       RFC 4252, but common implementations allow it to
       be disabled.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  feature client-ident-password {
    description
      "Indicates that the 'password' authentication type, per
       RFC 4252, is supported for client identification.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  feature client-ident-hostbased {
    description
      "Indicates that the 'hostbased' authentication type, per
       RFC 4252, is supported for client identification.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  feature client-ident-none {
    description
      "Indicates that the 'none' authentication type, per
       RFC 4252, is supported for client identification.
       It is NOT RECOMMENDED to enable this feature.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  // Groupings

  grouping ssh-client-grouping {
    description
      "A reusable grouping for configuring an SSH client without
       any consideration for how an underlying TCP session is
       established.

       Note that this grouping uses fairly typical descendant
       node names such that a nesting of 'uses' statements will
       have name conflicts.  It is intended that the consuming
       data model will resolve the issue (e.g., by wrapping
       the 'uses' statement in a container called
       'ssh-client-parameters').  This model purposely does
       not do this itself so as to provide maximum flexibility
       to consuming models.";

    container client-identity {
      nacm:default-deny-write;
      description
        "The username and authentication methods for the client.
         The authentication methods are unordered.  Clients may
         initially send any configured method or, per Section 5.2 of 
         RFC 4252, send the 'none' method to prompt the server
         to provide a list of productive methods.  Whenever a
         choice amongst methods arises, implementations SHOULD
         use a default ordering that prioritizes automation
         over human interaction.";
      leaf username {
        type string;
        description
          "The username of this user.  This will be the username
           used, for instance, to log into an SSH server.";
      }
      container public-key {
        if-feature "client-ident-publickey";
        presence
          "Indicates that public-key-based authentication has been
           configured.  This statement is present so the mandatory
           descendant nodes do not imply that this node must be
           configured.";
        description
          "A locally defined or referenced asymmetric key
           pair to be used for client identification.";
        reference
          "RFC 9642: A YANG Data Model for a Keystore";
        uses ks:inline-or-keystore-asymmetric-key-grouping {
          refine "inline-or-keystore/inline/inline-definition" {
            must 'not(public-key-format) or derived-from-or-self'
               + '(public-key-format, "ct:ssh-public-key-format")';
          }
          refine "inline-or-keystore/central-keystore/"
               + "central-keystore-reference" {
            must 'not(deref(.)/../ks:public-key-format) or derived-'
               + 'from-or-self(deref(.)/../ks:public-key-format, '
               + '"ct:ssh-public-key-format")';
          }
        }
      }
      container password {
        if-feature "client-ident-password";
        presence
          "Indicates that password-based authentication has been
           configured.  This statement is present so the mandatory
           descendant nodes do not imply that this node must be
           configured.";
        description
          "A password to be used to authenticate the client's
           identity.";
        uses ct:password-grouping;
      }
      container hostbased {
        if-feature "client-ident-hostbased";
        presence
          "Indicates that host-based authentication is configured.
           This statement is present so the mandatory descendant
           nodes do not imply that this node must be configured.";
        description
          "A locally defined or referenced asymmetric key
           pair to be used for host identification.";
        reference
          "RFC 9642: A YANG Data Model for a Keystore";
        uses ks:inline-or-keystore-asymmetric-key-grouping {
          refine "inline-or-keystore/inline/inline-definition" {
            must 'not(public-key-format) or derived-from-or-self('
               + 'public-key-format, "ct:ssh-public-key-format")';
          }
          refine "inline-or-keystore/central-keystore/"
               + "central-keystore-reference" {
            must 'not(deref(.)/../ks:public-key-format) or derived-'
               + 'from-or-self(deref(.)/../ks:public-key-format, '
               + '"ct:ssh-public-key-format")';
          }
        }
      }
      leaf none {
        if-feature "client-ident-none";
        type empty;
        description
          "Indicates that the 'none' algorithm is used for client
           identification.";
      }
      container certificate {
        if-feature "sshcmn:ssh-x509-certs";
        presence
          "Indicates that certificate-based authentication has been
           configured.  This statement is present so the mandatory
           descendant nodes do not imply that this node must be
           configured.";
        description
          "A locally defined or referenced certificate
           to be used for client identification.";
        reference
          "RFC 9642: A YANG Data Model for a Keystore";
        uses
          ks:inline-or-keystore-end-entity-cert-with-key-grouping {
          refine "inline-or-keystore/inline/inline-definition" {
            must 'not(public-key-format) or derived-from-or-self('
               + 'public-key-format, "ct:subject-public-key-info-'
               + 'format")';
          }
          refine "inline-or-keystore/central-keystore/"
               + "central-keystore-reference/asymmetric-key" {
            must 'not(deref(.)/../ks:public-key-format) or derived-'
               + 'from-or-self(deref(.)/../ks:public-key-format, '
               + '"ct:subject-public-key-info-format")';
          }
        }
      }
    } // container client-identity

    container server-authentication {
      nacm:default-deny-write;
      must 'ssh-host-keys or ca-certs or ee-certs';
      description
        "Specifies how the SSH client can authenticate SSH servers.
         Any combination of authentication methods is additive and
         unordered.";
      container ssh-host-keys {
        presence
          "Indicates that the SSH host key have been configured.
           This statement is present so the mandatory descendant
           nodes do not imply that this node must be configured.";
        description
          "A bag of SSH host keys used by the SSH client to
           authenticate SSH server host keys.  A server host key
           is authenticated if it is an exact match to a
           configured SSH host key.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-public-keys-grouping {
          refine
            "inline-or-truststore/inline/inline-definition/public"
            + "-key" {
            must 'derived-from-or-self(public-key-format,'
               + ' "ct:ssh-public-key-format")';
          }
          refine "inline-or-truststore/central-truststore/"
               + "central-truststore-reference" {
            must 'not(deref(.)/../ts:public-key/ts:public-key-'
               + 'format[not(derived-from-or-self(., "ct:ssh-'
               + 'public-key-format"))])';
          }
        }
      }
      container ca-certs {
        if-feature "sshcmn:ssh-x509-certs";
        presence
          "Indicates that the CA certificates have been configured.
           This statement is present so the mandatory descendant
           nodes do not imply that this node must be configured.";
        description
          "A set of Certification Authority (CA) certificates used by
           the SSH client to authenticate SSH servers.  A server
           is authenticated if its certificate has a valid chain
           of trust to a configured CA certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
      container ee-certs {
        if-feature "sshcmn:ssh-x509-certs";
        presence
          "Indicates that the EE certificates have been configured.
           This statement is present so the mandatory descendant
           nodes do not imply that this node must be configured.";
        description
          "A set of end-entity (EE) certificates used by the SSH 
           client to authenticate SSH servers.  A server is 
           authenticated if its certificate is an exact match to a
           configured end-entity certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
    } // container server-authentication

    container transport-params {
      nacm:default-deny-write;
      if-feature "sshcmn:transport-params";
      description
        "Configurable parameters of the SSH transport layer.";
      uses sshcmn:transport-params-grouping;
    } // container transport-parameters

    container keepalives {
      nacm:default-deny-write;
      if-feature "ssh-client-keepalives";
      presence
        "Indicates that the SSH client proactively tests the
         aliveness of the remote SSH server.";
      description
        "Configures the keepalive policy to proactively test
         the aliveness of the SSH server.  An unresponsive SSH
         server is dropped after approximately max-wait * 
         max-attempts seconds.  Per Section 4 of RFC 4254,
         the SSH client SHOULD send an SSH_MSG_GLOBAL_REQUEST
         message with a purposely nonexistent 'request name'
         value (e.g., keepalive@example.com) and the 'want reply'
         value set to '1'.";
      reference
        "RFC 4254: The Secure Shell (SSH) Connection Protocol";
      leaf max-wait {
        type uint16 {
          range "1..max";
        }
        units "seconds";
        default "30";
        description
          "Sets the amount of time in seconds after which an
           SSH-level message will be sent to test the aliveness
           of the SSH server if no data has been received from the
           SSH server.";
      }
      leaf max-attempts {
        type uint8;
        default "3";
        description
          "Sets the maximum number of sequential keepalive
           messages that can fail to obtain a response from
           the SSH server before assuming the SSH server is
           no longer alive.";
      }
    } // container keepalives
  } // grouping ssh-client-grouping

}
]]></sourcecode>
      </section>
    </section>
    <section anchor="ssh-server-model">
      <name>The "ietf-ssh-server" Module</name>
      <t>This section defines a YANG 1.1 module called
        "ietf-ssh-server".  A high-level overview of the module is provided in
        <xref target="server-overview"/>. Examples illustrating the module's use
        are provided in <xref target="server-examples"/> ("Example Usage"). The YANG
        module itself is defined in <xref target="server-yang-module"/>.</t>
      <section anchor="server-overview">
        <name>Data Model Overview</name>
        <t>This section provides an overview of the "ietf-ssh-server" module
          in terms of its features and groupings.</t>
        <section anchor="server-features" toc="exclude">
          <name>Features</name>
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-ssh-server" module:</t>
          <sourcecode type="yangree"><![CDATA[
Features:
  +-- ssh-server-keepalives
  +-- local-users-supported
  +-- local-user-auth-publickey {local-users-supported}?
  +-- local-user-auth-password {local-users-supported}?
  +-- local-user-auth-hostbased {local-users-supported}?
  +-- local-user-auth-none {local-users-supported}?
]]></sourcecode>
          <t>The diagram above uses syntax that is similar to but not
            defined in <xref target="RFC8340"/>.</t>
          <t>Please refer to the YANG module for a description of each feature.</t>
        </section>
        <section toc="exclude">
          <name>Groupings</name>
          <t>The "ietf-ssh-server" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>ssh-server-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>
          <section anchor="ssh-server-grouping">
            <name>The "ssh-server-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "ssh-server-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

  grouping ssh-server-grouping:
    +-- server-identity
    |  +-- host-key* [name]
    |     +-- name                string
    |     +-- (host-key-type)
    |        +--:(public-key)
    |        |  +-- public-key
    |        |     +---u ks:inline-or-keystore-asymmetric-key-groupi\
ng
    |        +--:(certificate)
    |           +-- certificate {sshcmn:ssh-x509-certs}?
    |              +---u ks:inline-or-keystore-end-entity-cert-with-\
key-grouping
    +-- client-authentication
    |  +-- users {local-users-supported}?
    |  |  +-- user* [name]
    |  |     +-- name          string
    |  |     +-- public-keys! {local-user-auth-publickey}?
    |  |     |  +---u ts:inline-or-truststore-public-keys-grouping
    |  |     +-- password
    |  |     |  +-- hashed-password?   ianach:crypt-hash
    |  |     |  |       {local-user-auth-password}?
    |  |     |  +--ro last-modified?     yang:date-and-time
    |  |     +-- hostbased! {local-user-auth-hostbased}?
    |  |     |  +---u ts:inline-or-truststore-public-keys-grouping
    |  |     +-- none?          empty {local-user-auth-none}?
    |  +-- ca-certs! {sshcmn:ssh-x509-certs}?
    |  |  +---u ts:inline-or-truststore-certs-grouping
    |  +-- ee-certs! {sshcmn:ssh-x509-certs}?
    |     +---u ts:inline-or-truststore-certs-grouping
    +-- transport-params {sshcmn:transport-params}?
    |  +---u sshcmn:transport-params-grouping
    +-- keepalives! {ssh-server-keepalives}?
       +-- max-wait?       uint16
       +-- max-attempts?   uint8
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>The "server-identity" node configures the authentication methods the
                server can use to identify itself to clients.  The ability to use a
                certificate is enabled by a "feature".</li>
              <li>The "client-authentication" node configures trust anchors for
                authenticating the SSH client, with each option enabled by a "feature" statement.</li>
              <li>The "transport-params" node, which must be enabled by a feature, configures
                parameters for the SSH sessions established by this configuration.</li>
              <li>The "keepalives" node, which must be enabled by a feature, configures
                a "presence" container for testing the aliveness of the SSH client.  The
                aliveness-test occurs at the SSH protocol layer.</li>
              <li>
                <t>For the referenced grouping statements:
                </t>
                <ul spacing="normal">
                  <li>The "inline-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9642"/>.</li>
                  <li>The "inline-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <xref section="2.1.3.6" target="RFC9642"/>.</li>
                  <li>The "inline-or-truststore-public-keys-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9641"/>.</li>
                  <li>The "inline-or-truststore-certs-grouping" grouping is
                    discussed in <xref section="2.1.3.3" target="RFC9641"/>.</li>
                  <li>The "transport-params-grouping" grouping is discussed in
                  <xref target="transport-params-grouping"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>
        <section toc="exclude">
          <name>Protocol-Accessible Nodes</name>
          <t>The "ietf-ssh-server" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.   Thus, this
            module, when implemented, does not itself define any protocol-accessible nodes.</t>
        </section>
      </section>
      <section anchor="server-examples">
        <name>Example Usage</name>
        <t>This section presents two examples showing the "ssh-server-grouping"
        grouping populated with some data. These examples are effectively the same,
        except the first configures the server identity using an inlined key,
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in
        <xref section="2.2.1" target="RFC9641"/> and
        <xref section="2.2.1" target="RFC9642"/>.</t>
        <t>The following configuration example uses inline-definitions for the
          server identity and client authentication:
        </t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<!-- The outermost element below doesn't exist in the data model. -->
<!--  It simulates if the "grouping" were a "container" instead.  -->

<ssh-server
  xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-server"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">

  <!-- the host-key this SSH server will present -->
  <server-identity>
    <host-key>
      <name>my-pubkey-based-host-key</name>
      <public-key>
        <inline-definition>
          <private-key-format>ct:rsa-private-key-format</private-key\
-format>
          <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
        </inline-definition>
      </public-key>
    </host-key>
    <host-key>
      <name>my-cert-based-host-key</name>
      <certificate>
        <inline-definition>
          <private-key-format>ct:rsa-private-key-format</private-key\
-format>
          <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
          <cert-data>BASE64VALUE=</cert-data>
        </inline-definition>
      </certificate>
    </host-key>
  </server-identity>

  <!-- the client credentials this SSH server will trust -->
  <client-authentication>
    <users>
      <user>
        <name>mary</name>
        <password>
          <hashed-password>$0$example-secret</hashed-password>
        </password>
        <public-keys>
          <inline-definition>
            <public-key>
              <name>Mary-Key-1</name>
              <public-key-format>ct:ssh-public-key-format</public-ke\
y-format>
              <public-key>BASE64VALUE=</public-key>
            </public-key>
            <public-key>
              <name>Mary-Key-2</name>
              <public-key-format>ct:ssh-public-key-format</public-ke\
y-format>
              <public-key>BASE64VALUE=</public-key>
            </public-key>
          </inline-definition>
        </public-keys>
      </user>
    </users>
    <ca-certs>
      <inline-definition>
        <certificate>
          <name>Identity Cert Issuer #1</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
        <certificate>
          <name>Identity Cert Issuer #2</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </inline-definition>
    </ca-certs>
    <ee-certs>
      <inline-definition>
        <certificate>
          <name>Application #1</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
        <certificate>
          <name>Application #2</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </inline-definition>
    </ee-certs>
  </client-authentication>

  <keepalives>
    <max-wait>30</max-wait>
    <max-attempts>3</max-attempts>
  </keepalives>

</ssh-server>
]]></sourcecode>
        <t>The following configuration example uses central-keystore-references for the
          server identity and central-truststore-references for client authentication
          from the keystore:
        </t>
        <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<!-- The outermost element below doesn't exist in the data model. -->
<!--  It simulates if the "grouping" were a "container" instead.  -->

<ssh-server
  xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-server">

  <!-- the host-key this SSH server will present -->
  <server-identity>
    <host-key>
      <name>my-pubkey-based-host-key</name>
      <public-key>
        <central-keystore-reference>ssh-rsa-key</central-keystore-re\
ference>
      </public-key>
    </host-key>
    <host-key>
      <name>my-cert-based-host-key</name>
      <certificate>
        <central-keystore-reference>
          <asymmetric-key>ssh-rsa-key-with-cert</asymmetric-key>
          <certificate>ex-rsa-cert2</certificate>
        </central-keystore-reference>
      </certificate>
    </host-key>
  </server-identity>

  <!-- the client credentials this SSH server will trust -->
  <client-authentication>
    <users>
      <user>
        <name>mary</name>
        <password>
          <hashed-password>$0$example-secret</hashed-password>
        </password>
        <public-keys>
          <central-truststore-reference>SSH Public Keys for Applicat\
ion A</central-truststore-reference>
        </public-keys>
      </user>
    </users>
    <ca-certs>
      <central-truststore-reference>trusted-client-ca-certs</central\
-truststore-reference>
    </ca-certs>
    <ee-certs>
      <central-truststore-reference>trusted-client-ee-certs</central\
-truststore-reference>
    </ee-certs>
  </client-authentication>

  <keepalives>
    <max-wait>30</max-wait>
    <max-attempts>3</max-attempts>
  </keepalives>

</ssh-server>
]]></sourcecode>
      </section>
      <section anchor="server-yang-module">
        <name>YANG Module</name>
        <t>This YANG module has normative references to <xref target="RFC4251"/>, <xref target="RFC4252"/>,
        <xref target="RFC4253"/>, <xref target="RFC4254"/>, <xref target="RFC6991"/>, <xref target="RFC7317"/>,
        <xref target="RFC8341"/>, <xref target="RFC9640"/>,
        <xref target="RFC9641"/>, and
        <xref target="RFC9642"/>.</t>
        <sourcecode type="yang" markers="true" name="ietf-ssh-server@2024-10-10.yang"><![CDATA[
module ietf-ssh-server {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ssh-server";
  prefix sshs;

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import iana-crypt-hash {
    prefix ianach;
    reference
      "RFC 7317: A YANG Data Model for System Management";
  }

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }

  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }

  import ietf-truststore {
    prefix ts;
    reference
      "RFC 9641: A YANG Data Model for a Truststore";
  }

  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }

  import ietf-ssh-common {
    prefix sshcmn;
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG Web:   https://datatracker.ietf.org/wg/netconf
     WG List:  NETCONF WG list <mailto:netconf@ietf.org>
     Author:   Kent Watsen <mailto:kent+ietf@watsen.net>";

  description
    "This module defines a reusable grouping for SSH servers that
     can be used as a basis for specific SSH server instances.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.
     
     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9644
     (https://www.rfc-editor.org/info/rfc9644); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version.";
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  // Features

  feature ssh-server-keepalives {
    description
      "SSH keepalive parameters are configurable for
       SSH servers on the server implementing this feature.";
  }

  feature local-users-supported {
    description
      "Indicates that the configuration for users can be
       configured herein, as opposed to in an application-
       specific location.";
  }

  feature local-user-auth-publickey {
    if-feature "local-users-supported";
    description
      "Indicates that the 'publickey' authentication type,
       per RFC 4252, is supported for locally defined users.
       The 'publickey' authentication type is required by
       RFC 4252, but common implementations allow it to
       be disabled.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  feature local-user-auth-password {
    if-feature "local-users-supported";
    description
      "Indicates that the 'password' authentication type,
       per RFC 4252, is supported for locally defined users.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  feature local-user-auth-hostbased {
    if-feature "local-users-supported";
    description
      "Indicates that the 'hostbased' authentication type,
       per RFC 4252, is supported for locally defined users.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  feature local-user-auth-none {
    if-feature "local-users-supported";
    description
      "Indicates that the 'none' authentication type, per
       RFC 4252, is supported.  It is NOT RECOMMENDED to
       enable this feature.";
    reference
      "RFC 4252:
        The Secure Shell (SSH) Authentication Protocol";
  }

  // Groupings

  grouping ssh-server-grouping {
    description
      "A reusable grouping for configuring an SSH server without
       any consideration for how underlying TCP sessions are
       established.

       Note that this grouping uses fairly typical descendant
       node names such that a nesting of 'uses' statements will
       have name conflicts.  It is intended that the consuming
       data model will resolve the issue (e.g., by wrapping
       the 'uses' statement in a container called
       'ssh-server-parameters').  This model purposely does
       not do this itself so as to provide maximum flexibility
       to consuming models.";

    container server-identity {
      nacm:default-deny-write;
      description
        "The list of host keys the SSH server will present when
         establishing an SSH connection.";
      list host-key {
        key "name";
        min-elements 1;
        ordered-by user;
        description
          "An ordered list of host keys (see RFC 4251) the SSH
           server will use to construct its ordered list of
           algorithms when sending its SSH_MSG_KEXINIT message,
           as defined in Section 7.1 of RFC 4253.";
        reference
          "RFC 4251: The Secure Shell (SSH) Protocol Architecture
           RFC 4253: The Secure Shell (SSH) Transport Layer
                     Protocol";
        leaf name {
          type string;
          description
            "An arbitrary name for this host key.";
        }
        choice host-key-type {
          mandatory true;
          description
            "The type of host key being specified.";
          container public-key {
            description
              "A locally defined or referenced asymmetric key pair
               to be used for the SSH server's host key.";
            reference
              "RFC 9642: A YANG Data Model for a Keystore";
            uses ks:inline-or-keystore-asymmetric-key-grouping {
              refine "inline-or-keystore/inline/inline-definition" {
                must 'not(public-key-format) or derived-from-or-self'
                 + '(public-key-format, "ct:ssh-public-key-format")';

              }
              refine "inline-or-keystore/central-keystore/"
                   + "central-keystore-reference" {
                must 'not(deref(.)/../ks:public-key-format) or '
                   + 'derived-from-or-self(deref(.)/../ks:public-'
                   + 'key-format, "ct:ssh-public-key-format")';
              }
            }
          }
          container certificate {
            if-feature "sshcmn:ssh-x509-certs";
            description
              "A locally defined or referenced end-entity
               certificate to be used for the SSH server's
               host key.";
            reference
              "RFC 9642: A YANG Data Model for a Keystore";
            uses
            ks:inline-or-keystore-end-entity-cert-with-key-grouping{ 
              refine "inline-or-keystore/inline/inline-definition" {
                must 'not(public-key-format) or derived-from-or-self'
                   + '(public-key-format, "ct:subject-public-key-'
                   + 'info-format")';
              }
              refine "inline-or-keystore/central-keystore/"
                   + "central-keystore-reference/asymmetric-key" {
                must 'not(deref(.)/../ks:public-key-format) or '
                   + 'derived-from-or-self(deref(.)/../ks:public-key'
                   + '-format, "ct:subject-public-key-info-format")';
              }
            }
          }
        }
      }
    } // container server-identity

    container client-authentication {
      nacm:default-deny-write;
      description
        "Specifies how the SSH server can be configured to
         authenticate SSH clients.  See RFC 4252 for a general
         discussion about SSH authentication.";
      reference
        "RFC 4252: The Secure Shell (SSH) Authentication Protocol";
      container users {
        if-feature "local-users-supported";
        description
          "A list of locally configured users.";
        list user {
          key "name";
          description
            "A locally configured user.

             The server SHOULD derive the list of authentication
             'method names' returned to the SSH client from the
             descendant nodes configured herein, per Sections
             5.1 and 5.2 of RFC 4252.

             The authentication methods are unordered.  Clients
             must authenticate to all configured methods. 
             Whenever a choice amongst methods arises,
             implementations SHOULD use a default ordering
             that prioritizes automation over human interaction.";
          leaf name {
            type string;
            description
              "The 'username' for the SSH client, as defined in
               the SSH_MSG_USERAUTH_REQUEST message in RFC 4253.";
            reference
              "RFC 4253: The Secure Shell (SSH) Transport Layer
                         Protocol";
          }
          container public-keys {
            if-feature "local-user-auth-publickey";
            presence
              "Indicates that public keys have been configured.
               This statement is present so the mandatory descendant
               nodes do not imply that this node must be
               configured.";
            description
              "A set of SSH public keys may be used by the SSH
               server to authenticate this user.  A user is
               authenticated if its public key is an exact
               match to a configured public key.";
            reference
              "RFC 9641: A YANG Data Model for a Truststore";
            uses ts:inline-or-truststore-public-keys-grouping {
              refine "inline-or-truststore/inline/inline-definition/"
                   + "public-key" {
                must 'derived-from-or-self(public-key-format,'
                   + ' "ct:ssh-public-key-format")';
              }
              refine "inline-or-truststore/central-truststore/"
                   + "central-truststore-reference" {
                must 'not(deref(.)/../ts:public-key/ts:public-key-'
                   + 'format[not(derived-from-or-self(., "ct:ssh-'
                   + 'public-key-format"))])';
              }
            }
          }
          container password {
            description
              "A password the SSH server may use to authenticate
               this user.  A user is authenticated if the hash
               of the supplied password matches this value.";
            leaf hashed-password {
              if-feature "local-user-auth-password";
              type ianach:crypt-hash;
              description
                "The password for this user.";
            }
            leaf last-modified {
              type yang:date-and-time;
              config false;
              description
                "Identifies when the password was last set.";
            }
          }
          container hostbased {
            if-feature "local-user-auth-hostbased";
            presence
              "Indicates that host-based (RFC 4252) keys have been
               configured.  This statement is present so the
               mandatory descendant nodes do not imply that this
               node must be configured.";
            description
              "A set of SSH host keys used by the SSH server to
               authenticate this user's host.  A user's host is
               authenticated if its host key is an exact match
               to a configured host key.";
            reference
              "RFC 4252: The Secure Shell (SSH) Authentication
                         Protocol
               RFC 9641: A YANG Data Model for a Truststore";
            uses ts:inline-or-truststore-public-keys-grouping {
              refine "inline-or-truststore/inline/inline-definition/"
                   + "public-key" {
                must 'derived-from-or-self(public-key-format,'
                   + ' "ct:ssh-public-key-format")';
              }
              refine "inline-or-truststore/central-truststore/"
                   + "central-truststore-reference" {
                must 'not(deref(.)/../ts:public-key/ts:public-key-'
                   + 'format[not(derived-from-or-self(., "ct:ssh-'
                   + 'public-key-format"))])';
              }
            }
          }
          leaf none {
            if-feature "local-user-auth-none";
            type empty;
            description
              "Indicates that the 'none' method is configured
               for this user.";
            reference
              "RFC 4252: The Secure Shell (SSH) Authentication
                         Protocol";
          }
        }
      } // users
      container ca-certs {
        if-feature "sshcmn:ssh-x509-certs";
        presence
          "Indicates that CA certificates have been configured.
           This statement is present so the mandatory descendant
           nodes do not imply this node must be configured.";
        description
          "A set of Certification Authority (CA) certificates used by
           the SSH server to authenticate SSH client certificates.
           A client certificate is authenticated if it has a valid
           chain of trust to a configured CA certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
      container ee-certs {
        if-feature "sshcmn:ssh-x509-certs";
        presence
          "Indicates that EE certificates have been configured.
           This statement is present so the mandatory descendant
           nodes do not imply this node must be configured.";
        description
          "A set of client certificates (i.e., end-entity
           certificates) used by the SSH server to authenticate
           the certificates presented by SSH clients.  A client
           certificate is authenticated if it is an exact match
           to a configured end-entity certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
    } // container client-authentication

    container transport-params {
      nacm:default-deny-write;
      if-feature "sshcmn:transport-params";
      description
        "Configurable parameters of the SSH transport layer.";
      uses sshcmn:transport-params-grouping;
    } // container transport-params

    container keepalives {
      nacm:default-deny-write;
      if-feature "ssh-server-keepalives";
      presence
        "Indicates that the SSH server proactively tests the
         aliveness of the remote SSH client.";
      description
        "Configures the keepalive policy to proactively test
         the aliveness of the SSH client.  An unresponsive SSH
         client is dropped after approximately max-wait *
         max-attempts seconds.  Per Section 4 of RFC 4254,
         the SSH server SHOULD send an SSH_MSG_GLOBAL_REQUEST
         message with a purposely nonexistent 'request name'
         value (e.g., keepalive@example.com) and the 'want reply'
         value set to '1'.";
      reference
        "RFC 4254: The Secure Shell (SSH) Connection Protocol";
      leaf max-wait {
        type uint16 {
          range "1..max";
        }
        units "seconds";
        default "30";
        description
          "Sets the amount of time in seconds after which
           an SSH-level message will be sent to test the
           aliveness of the SSH client if no data has been
           received from the SSH client.";
      }
      leaf max-attempts {
        type uint8;
        default "3";
        description
          "Sets the maximum number of sequential keepalive
           messages that can fail to obtain a response from
           the SSH client before assuming the SSH client is
           no longer alive.";
      }
    }
  } // grouping ssh-server-grouping

}
]]></sourcecode>
      </section>
    </section>
    <section>
      <name>Security Considerations</name>
      <t>The three IETF YANG modules in this document define groupings and will
        not be deployed as standalone modules. Their security implications
        may be context-dependent based on their use in other modules.  The
        designers of modules that import these groupings must conduct their
      own analysis of the security considerations.</t>
      <section>
        <name>Considerations for the "iana-ssh-key-exchange-algs" Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "iana-ssh-key-exchange-algs" YANG module defines a data model
          that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
            content.</t>
        <t>This YANG module defines YANG enumerations for a public IANA-maintained
          registry.</t>
        <t>YANG enumerations are not security-sensitive, as they are statically
          defined in the publicly accessible YANG module.  IANA <bcp14>MAY</bcp14> deprecate
          and/or obsolete enumerations over time as needed to address security
          issues found in the algorithms.</t>
        <t>This module does not define any writable nodes, RPCs, actions,
          or notifications, and thus, the security considerations for such
          are not provided here.</t>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-encryption-algs" Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "iana-ssh-encryption-algs" YANG module defines a data model
          that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication.</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG enumerations for a public IANA-maintained
          registry.</t>
        <t>YANG enumerations are not security-sensitive, as they are statically
          defined in the publicly accessible YANG module.</t>
        <t>This module does not define any writable nodes, RPCs, actions,
          or notifications, and thus, the security considerations for such
          are not provided here.</t>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-mac-algs" Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "iana-ssh-mac-algs" YANG module defines a data model
          that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication.</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG enumerations for a public IANA-maintained
          registry.</t>
        <t>YANG enumerations are not security-sensitive, as they are statically
          defined in the publicly accessible YANG module.</t>
        <t>This module does not define any writable nodes, RPCs, actions,
          or notifications, and thus, the security considerations for such
          are not provided here.</t>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-public-key-algs" Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "iana-ssh-public-key-algs" YANG module defines a data model
          that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>. These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication.</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG enumerations for a public IANA-maintained
          registry.</t>
        <t>YANG enumerations are not security-sensitive, as they are statically
          defined in the publicly accessible YANG module.</t>
        <t>This module does not define any writable nodes, RPCs, actions,
          or notifications, and thus, the security considerations for such
          are not provided here.</t>
      </section>
      <section>
        <name>Considerations for the "ietf-ssh-common" YANG Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "ietf-ssh-common" YANG module defines a data model that is designed 
          to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>. These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication.</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
          content.</t>
        <t>Please be aware that this YANG module uses groupings from
          other YANG modules that define nodes that may be considered
          sensitive or vulnerable in network environments.  Please
          review the security considerations for dependent YANG modules
          for information as to which nodes may be considered sensitive
          or vulnerable in network environments.</t>
        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>
        <t>None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>
        <t>This module defines the "generate-asymmetric-key-pair" RPC, which may, if
          the "ct:cleartext-private-keys" feature is enabled and the client
          requests it, return the private clear in cleartext form.  It is
          <bcp14>NOT RECOMMENDED</bcp14> for private keys to pass the server's security
          perimeter.</t>
        <t>This module does not define any actions or notifications,
          and thus, the security considerations for such are not provided here.</t>
      </section>
      <section>
        <name>Considerations for the "ietf-ssh-client" YANG Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "ietf-ssh-client" YANG module defines "grouping" statements that are designed
          to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>. These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication.</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
          content.</t>
        <t>Please be aware that this YANG module uses groupings from
          other YANG modules that define nodes that may be considered
          sensitive or vulnerable in network environments.  Please
          review the security considerations for dependent YANG modules
          for information as to which nodes may be considered sensitive
          or vulnerable in network environments.</t>
        <t>One readable data node defined in this YANG module may be considered
          sensitive or vulnerable in some network environments. This
          node is as follows:
        </t>
        <ul spacing="normal">
          <li>
            <t>The "client-identity/password" node:
            </t>
            <ul empty="true">
              <li>The cleartext "password" node defined in the "ssh-client-grouping"
                  grouping is additionally sensitive to read operations such that,
                  in normal use cases, it should never be returned to a client.
                  For this reason, the NACM extension "default-deny-all" has been
                  applied to it.</li>
            </ul>
          </li>
        </ul>
        <t>All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, any modification to a key or reference to a key
          may dramatically alter the implemented security policy.  For
          this reason, the NACM extension "default-deny-write" has been
          set for all data nodes defined in this module.</t>
        <t>This module does not define any RPCs, actions, or notifications,
          and thus, the security considerations for such are not provided here.</t>
      </section>
      <section>
        <name>Considerations for the "ietf-ssh-server" YANG Module</name>
        <t>This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
        <t>The "ietf-ssh-server" YANG module defines "grouping" statements that are designed
          to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>. These
  protocols have mandatory-to-implement secure transport layers (e.g.,
  Secure Shell (SSH) <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and
  mandatory-to-implement mutual authentication.</t>
        <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
          content.</t>
        <t>Please be aware that this YANG module uses groupings from
          other YANG modules that define nodes that may be considered
          sensitive or vulnerable in network environments.  Please
          review the security considerations for dependent YANG modules
          for information as to which nodes may be considered sensitive
          or vulnerable in network environments.</t>
        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>
        <t>All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, the addition or removal of references to keys,
          certificates, trusted anchors, etc., or even the modification
          of transport or keepalive parameters can dramatically alter
          the implemented security policy.  For this reason, the NACM
          extension "default-deny-write" has been set for all data nodes
          defined in this module.</t>
        <t>This module does not define any RPCs, actions, or notifications,
          and thus, the security considerations for such are not provided here.</t>
      </section>
    </section>
    <section>
      <name>IANA Considerations</name>
      <section>
        <name>The IETF XML Registry</name>
        <t>IANA has registered seven URIs in the "ns" registry of the
        "IETF XML Registry" <xref target="RFC3688"/> as follows.</t>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:iana-ssh-key-exchange-algs</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:iana-ssh-encryption-algs</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:iana-ssh-mac-algs</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:iana-ssh-public-key-algs</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:ietf-ssh-common</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:ietf-ssh-client</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>URI:</dt> <dd>urn:ietf:params:xml:ns:yang:ietf-ssh-server</dd>
<dt>Registrant Contact:</dt> <dd>The IESG</dd>
<dt>XML:</dt> <dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
      </section>
      <section>
        <name>The YANG Module Names Registry</name>
        <t>IANA has registered seven YANG modules in the "YANG Module Names"
        registry <xref target="RFC6020"/> as follows.</t>
	<dl newline="false" spacing="compact">
<dt>Name:</dt>         <dd>iana-ssh-key-exchange-algs</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:iana-ssh-key-exchange-algs</dd>
<dt>Prefix:</dt>       <dd>sshkea</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
	<dl newline="false" spacing="compact">
<dt>Name:</dt>         <dd>iana-ssh-encryption-algs</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:iana-ssh-encryption-algs</dd>
<dt>Prefix:</dt>       <dd>sshea</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
	<dl newline="false" spacing="compact">	
<dt>Name:</dt>         <dd>iana-ssh-mac-algs</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:iana-ssh-mac-algs</dd>
<dt>Prefix:</dt>       <dd>sshma</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
	<dl newline="false" spacing="compact">	
<dt>Name:</dt>         <dd>iana-ssh-public-key-algs</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:iana-ssh-public-key-algs</dd>
<dt>Prefix:</dt>       <dd>sshpka</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
	<dl newline="false" spacing="compact">	
<dt>Name:</dt>         <dd>ietf-ssh-common</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:ietf-ssh-common</dd>
<dt>Prefix:</dt>       <dd>sshcmn</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
	<dl newline="false" spacing="compact">	
<dt>Name:</dt>         <dd>ietf-ssh-client</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:ietf-ssh-client</dd>
<dt>Prefix:</dt>       <dd>sshc</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
	<dl newline="false" spacing="compact">	
<dt>Name:</dt>         <dd>ietf-ssh-server</dd>
<dt>Namespace:</dt>    <dd>urn:ietf:params:xml:ns:yang:ietf-ssh-server</dd>
<dt>Prefix:</dt>       <dd>sshs</dd>
<dt>Reference:</dt>    <dd>RFC 9644</dd>
	</dl>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-encryption-algs" Module</name>
        <t>This section follows the template defined in <xref section="4.30.3.1" target="I-D.ietf-netmod-rfc8407bis"/>.</t>
        <t>This document presents a script (see <xref target="iana-script"/>) for
          IANA to use to generate the IANA-maintained "iana-ssh-encryption-algs" YANG module.
          The most recent version of the YANG module is available in the "YANG Parameters"
          registry group <xref target="IANA-YANG-PARAMETERS"/>.</t>
        <t>IANA has added the following note to the registry:</t>
        <blockquote>New values must not be directly added to the "iana-ssh-encryption-algs"
          YANG module.  They must instead be added to the "Encryption Algorithm Names" registry of the
          "Secure Shell (SSH) Protocol Parameters" registry group <xref target="IANA-ENC-ALGS"/>.</blockquote>
        <t>When a value is added to the "Encryption Algorithm Names" registry, a new "enum"
          statement must be added to the "iana-ssh-encryption-algs" YANG module.  The
          "enum" statement, and substatements thereof, should be defined as follows:</t>
        <dl newline="true">
          <dt>enum</dt>
          <dd>Replicates a name from the registry.</dd>
          <dt>value</dt>
          <dd>Contains the decimal value of the IANA-assigned value.</dd>
          <dt>status</dt>
          <dd>Include only if a registration has been deprecated or obsoleted.
            An IANA "Note" containing the word "HISTORIC" maps to YANG status "obsolete".
            Since the registry is unable to express a "<bcp14>SHOULD NOT</bcp14>" recommendation,
            there is no mapping to YANG status "deprecated".</dd>
          <dt>description</dt>
          <dd>Contains "Enumeration for the 'foo-bar' algorithm.", where "foo-bar" is
            a placeholder for the algorithm's name (e.g., "3des-cbc").</dd>
          <dt>reference</dt>
          <dd>Replicates the reference(s) from the registry with the title of the
            document(s) added.</dd>
        </dl>
        <t>Unassigned or reserved values are not present in the module.</t>
        <t>When the "iana-ssh-encryption-algs" YANG module is updated, a new "revision" statement
          with a unique revision date must be added in front of the existing revision statements.
          The "revision" must have a "description" statement explaining why the 
          update occurred and must have a "reference" substatement that points to the 
          document defining the registry update that resulted in this change. For instance:</t>
        <sourcecode type="yang"><![CDATA[
revision 2024-02-02 {
    description
      "This update reflects the update made to the underlying
       Foo Bar registry per RFC XXXX.";
  reference
      "RFC XXXX: Extend the Foo Bars Registry
                 to Support Something Important";
}]]></sourcecode>
        <t>IANA has added the following note to the "Encryption Algorithm Names"
          registry.</t>
        <blockquote>When this registry is modified, the YANG module "iana-ssh-encryption-algs"
          <xref target="IANA-YANG-PARAMETERS"/> must be updated as defined in RFC 9644.</blockquote>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-mac-algs" Module</name>
        <t>This section follows the template defined in <xref section="4.30.3.1" target="I-D.ietf-netmod-rfc8407bis"/>.</t>
        <t>This document presents a script (see <xref target="iana-script"/>) for
          IANA to use to generate the IANA-maintained "iana-ssh-mac-algs" YANG module.
          The most recent version of the YANG module is available in the "YANG Parameters"
          registry group <xref target="IANA-YANG-PARAMETERS"/>.</t>
        <t>IANA has added the following note to the registry:</t>
        <blockquote>New values must not be directly added to the "iana-ssh-mac-algs"
          YANG module.  They must instead be added to the "MAC Algorithm Names" registry of the
          "Secure Shell (SSH) Protocol Parameters" registry group <xref target="IANA-MAC-ALGS"/>.</blockquote>
        <t>When a value is added to the "MAC Algorithm Names" registry, a new "enum"
          statement must be added to the "iana-ssh-mac-algs" YANG module.  The
          "enum" statement, and substatements thereof, should be defined as follows:</t>
        <dl newline="true">
          <dt>enum</dt>
          <dd>Replicates a name from the registry.</dd>
          <dt>value</dt>
          <dd>Contains the decimal value of the IANA-assigned value.</dd>
          <dt>status</dt>
          <dd>Include only if a registration has been deprecated or obsoleted.</dd>
          <dt>description</dt>
          <dd>Contains "Enumeration for the 'foo-bar' algorithm.", where "foo-bar" is
            a placeholder for the algorithm's name (e.g., "3des-cbc").</dd>
          <dt>reference</dt>
          <dd>Replicates the reference(s) from the registry with the title of the
            document(s) added.</dd>
        </dl>
        <t>Unassigned or reserved values are not present in the module.</t>
        <t>When the "iana-ssh-mac-algs" YANG module is updated, a new "revision" statement
          with a unique revision date must be added in front of the existing revision statements.
          The "revision" must have a "description" statement explaining why the 
          update occurred and must have a "reference" substatement that points to the 
          document defining the registry update that resulted in this change. For instance:</t>
        <sourcecode type="yang"><![CDATA[
revision 2024-10-10 {
    description
      "This update reflects the update made to the underlying
       Foo Bar registry per RFC XXXX.";
  reference
      "RFC XXXX: Extend the Foo Bars Registry
                 to Support Something Important";
}]]></sourcecode>
        <t>IANA has added the following note to the "MAC Algorithm Names" registry.</t>
        <blockquote>When this registry is modified, the YANG module "iana-ssh-mac-algs"
          <xref target="IANA-YANG-PARAMETERS"/> must be updated as defined in RFC 9644.</blockquote>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-public-key-algs" Module</name>
        <t>This section follows the template defined in <xref section="4.30.3.1" target="I-D.ietf-netmod-rfc8407bis"/>.</t>
        <t>This document presents a script (see <xref target="iana-script"/>) for
          IANA to use to generate the IANA-maintained "iana-ssh-public-key-algs" YANG module.
          The most recent version of the YANG module is available in the "YANG Parameters"
          registry group <xref target="IANA-YANG-PARAMETERS"/>.</t>
        <t>IANA has added the following note to the registry:</t>
        <blockquote>New values must not be directly added to the "iana-ssh-public-key-algs"
          YANG module.  They must instead be added to the "Public Key Algorithm Names" registry of the
          "Secure Shell (SSH) Protocol Parameters" registry group <xref target="IANA-PUBKEY-ALGS"/>.</blockquote>
        <t>When a value is added to the "Public Key Algorithm Names" registry, a new "enum"
          statement must be added to the "iana-ssh-public-key-algs" YANG module.  The
          "enum" statement, and substatements thereof, should be defined as follows:</t>
        <dl newline="true">
          <dt>enum</dt>
          <dd>Replicates a name from the registry.</dd>
          <dt>value</dt>
          <dd>Contains the decimal value of the IANA-assigned value.</dd>
          <dt>status</dt>
          <dd>Include only if a registration has been deprecated or obsoleted.</dd>
          <dt>description</dt>
          <dd>Contains "Enumeration for the 'foo-bar' algorithm.", where "foo-bar" is
            a placeholder for the algorithm's name (e.g., "3des-cbc").</dd>
          <dt>reference</dt>
          <dd>Replicates the reference(s) from the registry with the title of the
            document(s) added.</dd>
        </dl>
        <t>In the case that the algorithm name ends with "-*", the family of enumerations 
          must be added.  The family of enum algorithm names are generated by replacing
          the "*" character with these strings: "nistp256", "nistp384", "nistp521",
          "1.3.132.0.1", "1.2.840.10045.3.1.1", "1.3.132.0.33", "1.3.132.0.26",
          "1.3.132.0.27", "1.3.132.0.16", "1.3.132.0.36", "1.3.132.0.37", and "1.3.132.0.38".</t>
        <t>Unassigned or reserved values are not present in the module.</t>
        <t>When the "iana-ssh-public-key-algs" YANG module is updated, a new "revision" statement
          with a unique revision date must be added in front of the existing revision statements.
          The "revision" must have a "description" statement explaining why the 
          update occurred and must have a "reference" substatement that points to the 
          document defining the registry update that resulted in this change. For instance:</t>
        <sourcecode type="yang"><![CDATA[
revision 2024-10-10 {
    description
      "This update reflects the update made to the underlying
       Foo Bar registry per RFC XXXX.";
  reference
      "RFC XXXX: Extend the Foo Bars Registry
                 to Support Something Important";
}]]></sourcecode>
        <t>IANA has added the following note to the "Public Key Algorithm Names" registry.</t>
        <blockquote>When this registry is modified, the YANG module "iana-ssh-public-key-algs"
          <xref target="IANA-YANG-PARAMETERS"/> must be updated as defined in RFC 9644.</blockquote>
      </section>
      <section>
        <name>Considerations for the "iana-ssh-key-exchange-algs" Module</name>
        <t>This section follows the template defined in <xref section="4.30.3.1" target="I-D.ietf-netmod-rfc8407bis"/>.</t>
        <t>This document presents a script (see <xref target="iana-script"/>) for
          IANA to use to generate the IANA-maintained "iana-ssh-key-exchange-algs" YANG module.
          The most recent version of the YANG module is available in the "YANG Parameters"
          registry group <xref target="IANA-YANG-PARAMETERS"/>.</t>
        <t>IANA has added the following note to the registry:</t>
        <blockquote>New values must not be directly added to the "iana-ssh-key-exchange-algs"
          YANG module.  They must instead be added to the "Key Exchange Method Names" registry of the
          "Secure Shell (SSH) Protocol Parameters" registry group <xref target="IANA-KEYEX-ALGS"/>.</blockquote>
        <t>When a value is added to the "Key Exchange Method Names" registry, a new
          "enum" statement must be added to the "iana-ssh-key-exchange-algs" YANG module.
          The "enum" statement, and substatements thereof, should be defined as follows:</t>
        <dl newline="true">
          <dt>enum</dt>
          <dd>Replicates a name from the registry.</dd>
          <dt>value</dt>
          <dd>Contains the decimal value of the IANA-assigned value.</dd>
          <dt>status</dt>
          <dd>Include only if a registration has been deprecated or obsoleted. 
             An IANA "OK to Implement" containing "<bcp14>SHOULD NOT</bcp14>" maps to YANG status "deprecated".
             An IANA "OK to Implement" containing "<bcp14>MUST NOT</bcp14>" maps to YANG status "obsolete".</dd>
          <dt>description</dt>
          <dd>Contains "Enumeration for the 'foo-bar' algorithm.", where "foo-bar" is
            a placeholder for the algorithm's name (e.g., "3des-cbc").</dd>
          <dt>reference</dt>
          <dd>Replicates the reference(s) from the registry with the title of the
            document(s) added.</dd>
        </dl>
        <t>In the case that the algorithm name ends with "-*", the family of enumerations 
          must be added.  The family of enum algorithm names are generated by replacing
          the "*" character with these strings: "nistp256", "nistp384", "nistp521",
          "1.3.132.0.1", "1.2.840.10045.3.1.1", "1.3.132.0.33", "1.3.132.0.26",
          "1.3.132.0.27", "1.3.132.0.16", "1.3.132.0.36", "1.3.132.0.37", and "1.3.132.0.38".</t>
        <t>Unassigned or reserved values are not present in the module.</t>
        <t>When the "iana-ssh-key-exchange-algs" YANG module is updated, a new "revision" statement
          with a unique revision date must be added in front of the existing revision statements.
          The "revision" must have a "description" statement explaining why the 
          update occurred, and must have a "reference" substatement that points to the 
          document defining the registry update that resulted in this change. For instance:</t>
        <sourcecode type="yang"><![CDATA[
revision 2024-10-10 {
    description
      "This update reflects the update made to the underlying
       Foo Bar registry per RFC XXXX.";
  reference
      "RFC XXXX: Extend the Foo Bars Registry
                 to Support Something Important";
}]]></sourcecode>
        <t>IANA has added the following note to the "Key Exchange Method Names" registry.</t>
        <blockquote>When this registry is modified, the YANG module "iana-ssh-key-exchange-algs"
          <xref target="IANA-YANG-PARAMETERS"/> must be updated as defined in RFC 9644.</blockquote>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-netmod-system-config" to="SYSTEM-CONFIG"/>
    <displayreference target="I-D.ietf-netmod-rfc8407bis" to="YANG-GUIDE"/>
    
<displayreference target="I-D.ietf-netconf-http-client-server" to="HTTP-CLIENT-SERVER"/>
<displayreference target="I-D.ietf-netconf-netconf-client-server" to="NETCONF-CLIENT-SERVER"/>
<displayreference target="I-D.ietf-netconf-restconf-client-server" to="RESTCONF-CLIENT-SERVER"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4250.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4251.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4252.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4253.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4254.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6187.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml"/>	
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7317.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>	
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml"/>	

	<reference anchor="RFC9640" target="https://www.rfc-editor.org/info/rfc9640">
	  <front>
	    <title>YANG Data Types and Groupings for Cryptography</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9640"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9640"/>
	</reference>

	<reference anchor="RFC9641" target="https://www.rfc-editor.org/info/rfc9641">
	  <front>
	    <title>A YANG Data Model for a Truststore</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9641"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9641"/>
	</reference>

        <reference anchor="RFC9642" target="https://www.rfc-editor.org/info/rfc9642">
	  <front>
	    <title>A YANG Data Model for a Keystore</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9642"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9642"/>
	</reference>

      </references>
      <references>
        <name>Informative References</name>

	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8071.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>	
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8407.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8792.xml"/>	

        <reference anchor="RFC9643" target="https://www.rfc-editor.org/info/rfc9643">
	  <front>
	    <title>YANG Groupings for TCP Clients and TCP Servers</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <author initials="M." surname="Scharf" fullname="Michael Scharf">
	      <organization>Hochschule Esslingen - University of Applied Sciences</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9643"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9643"/>
	</reference>

        <reference anchor="RFC9645" target="https://www.rfc-editor.org/info/rfc9645">
	  <front>
	    <title>YANG Groupings for TLS Clients and TLS Servers</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9645"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9645"/>
	</reference>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-http-client-server"/>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server"/>

<xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server"/>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-system-config.xml"/>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-rfc8407bis.xml"/>

        <reference anchor="FIPS_186-5" target="https://csrc.nist.gov/pubs/fips/186-5/final">
          <front>
            <title>Digital Signature Standard (DSS)</title>
            <author>
              <organization>NIST</organization>
            </author>
            <date month="February" year="2023"/>
          </front>
          <seriesInfo name="FIPS PUB" value="186-5"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.186-5"/>
        </reference>

      <reference anchor="IANA-KEYEX-ALGS" target="https://www.iana.org/assignments/ssh-parameters">
          <front>
            <title>Key Exchange Method Names</title>
            <author>
              <organization>IANA</organization> 
            </author>
          </front>
        </reference>

        <reference anchor="IANA-ENC-ALGS" target="https://www.iana.org/assignments/ssh-parameters/">
          <front>
            <title>Encryption Algorithm Names</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>

        <reference anchor="IANA-MAC-ALGS" target="https://www.iana.org/assignments/ssh-parameters">
          <front>
            <title>MAC Algorithm Names</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>

        <reference anchor="IANA-PUBKEY-ALGS" target="https://www.iana.org/assignments/ssh-parameters/">
          <front>
            <title>Public Key Algorithm Names</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>

        <reference anchor="IANA-YANG-PARAMETERS" target="https://www.iana.org/assignments/yang-parameters">
          <front>
            <title>YANG Parameters</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>

	<reference anchor="W3C.REC-xml-20081126" target="https://www.w3.org/TR/2008/REC-xml-20081126/">
	  <front>
	    <title>Extensible Markup Language (XML) 1.0
            (Fifth Edition)</title>
    <author initials="T." surname="Bray" fullname="Tim Bray"/>
    <author initials="J." surname="Paoli" fullname="Jean Paoli"/>
    <author initials="C.M." surname="Sperberg-McQueen" fullname="C. M.
Sperberg-McQueen"/>
    <author initials="E." surname="Maler" fullname="Eve Maler"/>
    <author initials="F." surname="Yergeau" fullname="François Yergeau"/>
    <date month="November" year="2008"/>
  </front>
  <seriesInfo name="World Wide Web Consortium
                    Recommendation" value="REC-xml-20081126"/>
</reference>

      </references>
    </references>
    <section anchor="iana-script">
      <name>Script to Generate IANA-Maintained YANG Modules</name>
      <t>This section is not normative.</t>

      <t>The Python <eref target="https://www.python.org" brackets="angle"/> script contained in this
        section will create the four IANA-maintained modules that are described (but not contained) in this document.</t>
      <t>Run the script using the command "python gen-yang-modules.py" to produce four
        YANG module files in the current directory.</t>
      <t>Be aware that the script does not attempt to copy the "revision" statements
        from the previous/current YANG module.  Copying the revision statements must
      be done manually.</t>
<sourcecode type="python" markers="true"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

import re
import csv
import textwrap
import requests
import requests_cache
from io import StringIO
from datetime import datetime

# Metadata for the four YANG modules produced by this script
MODULES = [
    {
        "csv_url": "https://www.iana.org/assignments/ssh-parameters/\
ssh-parameters-17.csv",
        "spaced_name": "encryption",
        "hyphenated_name": "encryption",
        "prefix": "sshea",
        "description": """    "This module defines enumerations for \
the encryption algorithms
     defined in the 'Encryption Algorithm Names' registry of the
     'Secure Shell (SSH) Protocol Parameters' registry group
     maintained by IANA.""",
    },
    {
        "csv_url": "https://www.iana.org/assignments/ssh-parameters/\
ssh-parameters-19.csv",
        "spaced_name": "public key",
        "hyphenated_name": "public-key",
        "prefix": "sshpka",
        "description": """    "This module defines enumerations for \
the public key algorithms
     defined in the 'Public Key Algorithm Names' registry of the
     'Secure Shell (SSH) Protocol Parameters' registry group
     maintained by IANA."""
    },
    {
        "csv_url": "https://www.iana.org/assignments/ssh-parameters/\
ssh-parameters-18.csv",
        "spaced_name": "mac",
        "hyphenated_name": "mac",
        "prefix": "sshma",
        "description": """    "This module defines enumerations for \
the MAC algorithms
     defined in the 'MAC Algorithm Names' registry of the
     'Secure Shell (SSH) Protocol Parameters' registry group
     maintained by IANA."""
    },
    {
        "csv_url": "https://www.iana.org/assignments/ssh-parameters/\
ssh-parameters-16.csv",
        "spaced_name": "key exchange",
        "hyphenated_name": "key-exchange",
        "prefix": "sshkea",
        "description": """    "This module defines enumerations for \
the key exchange algorithms
     defined in the 'Key Exchange Method Names' registry of the
     'Secure Shell (SSH) Protocol Parameters' registry group
     maintained by IANA."""
    },
]




def create_module_begin(module, f):

    # Define template for all four modules
    PREAMBLE_TEMPLATE="""
module iana-ssh-HNAME-algs {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:iana-ssh-HNAME-algs";
  prefix PREFIX;

  organization
    "Internet Assigned Numbers Authority (IANA)";

  contact
    "Postal: ICANN
             12025 Waterfront Drive, Suite 300
             Los Angeles, CA  90094-2536
             United States of America
     Tel:    +1 310 301 5800
     Email:  iana@iana.org";

  description
DESCRIPTION

     Copyright (c) YEAR IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     The initial version of this YANG module is part of RFC 9644
     (https://www.rfc-editor.org/info/rfc9644); see the RFC
     itself for full legal notices.

     All versions of this module are published by IANA at
     https://www.iana.org/assignments/yang-parameters.";

  revision DATE {
    description
      "This initial version of the module was created using
       the script defined in RFC 9644 to reflect the contents
       of the SNAME algorithms registry maintained by IANA.";
    reference
      "RFC 9644: YANG Groupings for SSH Clients and SSH Servers";
  }

  typedef ssh-HNAME-algorithm {
    type enumeration {
"""
    # Replacements
    rep = {
      "DATE": datetime.today().strftime('%Y-%m-%d'),
      "YEAR": datetime.today().strftime('%Y'),
      "SNAME": module["spaced_name"],
      "HNAME": module["hyphenated_name"],
      "PREFIX": module["prefix"],
      "DESCRIPTION": module["description"]
    }
    
    # Do the replacement
    rep = dict((re.escape(k), v) for k, v in rep.items()) 
    pattern = re.compile("|".join(rep.keys()))
    text = pattern.sub(lambda m: rep[re.escape(m.group(0))], PREAMBL\
E_TEMPLATE)

    # Write preamble into the file
    f.write(text)


def create_module_body(module, f):

    # Fetch the current CSV file from IANA
    r = requests.get(module["csv_url"])
    assert(r.status_code == 200)

    # Ascertain the first CSV column's name
    with StringIO(r.text) as csv_file:
        csv_reader = csv.reader(csv_file)
        for row in csv_reader:
            first_colname = row[0]
            break

    # Parse each CSV line
    with StringIO(r.text) as csv_file:
        csv_reader = csv.DictReader(csv_file)
        for row in csv_reader:

            # Extract just the ref
            refs = row["Reference"][1:-1]  # remove the '[' and ']' \
chars
            refs = refs.split("][")

            # There may be more than one ref
            titles = []
            for ref in refs:

                # Ascertain the ref's title
                if ref.startswith("RFC"):

                    # Fetch the current BIBTEX entry
                    bibtex_url="https://datatracker.ietf.org/doc/"+ \
ref.lower() + "/bibtex/"
                    r = requests.get(bibtex_url)
                    assert r.status_code == 200, "Could not GET " + \
bibtex_url

                    # Append to 'titles' value from the "title" line
                    for item in r.text.split("\n"):
                        if "title =" in item:
                            titles.append(re.sub('.*{{(.*)}}.*', r'\\
g<1>', item))
                            break
                    else:
                        raise Exception("RFC title not found")


                    # Insert a space: "RFCXXXX" --> "RFC XXXX"
                    index = refs.index(ref)
                    refs[index] = "RFC " + ref[3:]

                elif ref.startswith("FIPS"):
                    # Special case for FIPS, since no bibtex to fetch
                    if ref == "FIPS 46-3" or ref == "FIPS-46-3":
                        titles.append("Data Encryption Standard (DES\
)")
                    else:
                        raise Exception("FIPS ref not found")

                else:
                    raise Exception("ref not found")

            # Function used below
            def write_enumeration(alg):
                f.write('\n')
                f.write(f'      enum {alg} {{\n')
                if "HISTORIC" in row["Note"]:
                    f.write(f'        status obsolete;\n')
                elif "OK to Implement" in row:
                    if "MUST NOT" in row["OK to Implement"]:
                        f.write(f'        status obsolete;\n')
                    elif "SHOULD NOT" in row["OK to Implement"]:
                        f.write(f'        status deprecated;\n')
                f.write(f'        description\n')
                description = f'          "Enumeration for the \'{al\
g}\' algorithm.'
                if "Section" in row["Note"]:
                    description += " " + row["Note"]
                description += '";'
                description = textwrap.fill(description, width=69, s\
ubsequent_indent="           ")
                f.write(f'{description}\n')
                f.write('        reference\n')
                f.write('          "')
                if row["Reference"] == "":
                    f.write('    Missing in IANA registry.')
                else:
                    ref_len = len(refs)
                    for i in range(ref_len):
                        ref = refs[i]
                        f.write(f'{ref}:\n')
                        title = "             " + titles[i]
                        if i == ref_len - 1:
                            title += '";'
                        title = textwrap.fill(title, width=67, subse\
quent_indent="             ")
                        f.write(f'{title}')
                        if i != ref_len - 1:
                            f.write('\n       ')
                f.write('\n')
                f.write('      }\n')


            # Write one or more "enumeration" statements
            if not row[first_colname].endswith("-*"): # just one enu\
meration
                # Avoid duplicate entries caused by the "ecdh-sha2-*\
" family expansion
                if not row[first_colname].startswith("ecdh-sha2-nist\
p"):
                    write_enumeration(row[first_colname])
            else: # a family of enumerations
                curve_ids = [
                    "nistp256",
                    "nistp384",
                    "nistp521",
                    "1.3.132.0.1",
                    "1.2.840.10045.3.1.1",
                    "1.3.132.0.33",
                    "1.3.132.0.26",
                    "1.3.132.0.27",
                    "1.3.132.0.16",
                    "1.3.132.0.36",
                    "1.3.132.0.37",
                    "1.3.132.0.38",
                ]
                for curve_id in curve_ids:
                    write_enumeration(row[first_colname][:-1] + curv\
e_id)


def create_module_end(module, f):

    # Close out the enumeration, typedef, and module
    f.write("    }\n")
    f.write("    description\n")
    f.write(f'      "An enumeration for SSH {module["spaced_name"]} \
algorithms.";\n')
    f.write("  }\n")
    f.write('\n')
    f.write('}\n')


def create_module(module):

    # Install cache for 8x speedup
    requests_cache.install_cache()

    # Ascertain YANG module's name
    yang_module_name = "iana-ssh-" + module["hyphenated_name"] + "-a\
lgs.yang"

    # Create YANG module file
    with open(yang_module_name, "w") as f:
        create_module_begin(module, f)
        create_module_body(module, f)
        create_module_end(module, f)


def main():
    for module in MODULES:
        create_module(module)


if __name__ == "__main__":
    main()
]]></sourcecode>
    </section>
    <section numbered="false">
      <name>Acknowledgements</name>
      <t>The authors would like to thank the following for lively discussions
        on list and in the halls (ordered by first name):
        <contact fullname="Alan Luchuk"/>,
        <contact fullname="Andy Bierman"/>,
        <contact fullname="Balázs Kovács"/>,
        <contact fullname="Barry Leiba"/>,
        <contact fullname="Benoit Claise"/>,
        <contact fullname="Bert Wijnen"/>,
        <contact fullname="David Lamparter"/>,
        <contact fullname="Elwyn Davies"/>,
        <contact fullname="Gary Wu"/>,
        <contact fullname="Jürgen Schönwälder"/>,
        <contact fullname="Ladislav Lhotka"/>,
        <contact fullname="Liang Xia"/>,
        <contact fullname="Martin Björklund"/>,
        <contact fullname="Martin Thomson"/>,
        <contact fullname="Mehmet Ersue"/>,
        <contact fullname="Michal Vaško"/>,
        <contact fullname="Murray Kucherawy"/>,
        <contact fullname="Paul Wouters"/>,
        <contact fullname="Per Andersson"/>,
        <contact fullname="Phil Shafer"/>,
        <contact fullname="Qin Wun"/>,
        <contact fullname="Radek Krejci"/>,
        <contact fullname="Rob Wilton"/>,
        <contact fullname="Roman Danyliw"/>,
        <contact fullname="Russ Housley"/>,
        <contact fullname="Sean Turner"/>,
        <contact fullname="Thomas Martin"/>,	
        <contact fullname="Tom Petch"/>,
        and <contact fullname="Warren Kumari"/>.</t>
    </section>
    <section numbered="false">
      <name>Contributors</name>
      <t>Special acknowledgement goes to <contact fullname="Gary Wu"/> for his work on the
        "ietf-ssh-common" module.</t>
    </section>
  </back>
</rfc>
