<?xml version='1.0' encoding='UTF-8'?>

<!-- draft submitted in xml v3 --> 

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
 
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" consensus="true" submissionType="IETF" ipr="trust200902" docName="draft-ietf-netconf-keystore-35" number="9642" obsoletes="" updates="" xml:lang="en" tocInclude="true" symRefs="true" sortRefs="true" version="3">

  <front>
    <title abbrev="A YANG Data Model for a Keystore">A YANG Data Model for a Keystore</title>
    <seriesInfo name="RFC" value="9642"/>
    <author initials="K." surname="Watsen" fullname="Kent Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <date month="October" year="2024"/>
    <area>OPS</area>
    <workgroup>netconf</workgroup>

    <abstract>
      <t>This document presents a YANG module called "ietf-keystore"
          that enables centralized configuration of both symmetric and
          asymmetric keys.  The secret value for both key types may be
          encrypted or hidden.  Asymmetric keys may be associated with
          certificates.  Notifications are sent when certificates are
          about to expire.</t>
    </abstract>
 
  </front>
  <middle>
    <section>
      <name>Introduction</name>
      <t>This document presents a YANG 1.1 <xref target="RFC7950"/>  module called
          "ietf-keystore" that enables centralized configuration of both symmetric
          and asymmetric keys.  The secret value for both key types may be
          encrypted or hidden (see <xref target="RFC9640"/>).
          Asymmetric keys may be associated with certificates.  Notifications are
          sent when certificates are about to expire.</t>
      <t>The "ietf-keystore" module defines many "grouping" statements
          intended for use by other modules that may import it.  For instance,
          there are groupings that define enabling a key to be configured
          either inline (within the defining data model) or as a reference to a key
          in the central keystore.
      </t>
      <t>Special consideration has been given for servers that have cryptographic
          hardware, such as a trusted platform module (TPM).  These servers are
          unique in that the cryptographic hardware hides the secret key values.
          Additionally, such hardware is commonly initialized when manufactured
          to protect a "built-in" asymmetric key for which its public half is
          conveyed in an identity certificate (e.g., an Initial Device Identifier (IDevID)
          <xref target="Std-802.1AR-2018"/> certificate). See how built-in keys are
          supported in <xref target="built-ins"/>.</t>
      <t>This document is intended to reflect existing practices that many
          server implementations support at the time of writing.  To simplify
          implementation, advanced key formats may be selectively implemented.</t>
      <t>Implementations may utilize operating-system level
          keystore utilities (e.g., "Keychain Access" on MacOS) and/or cryptographic
          hardware (e.g., TPMs).</t>
      <section anchor="collective-effort">
        <name>Relation to Other RFCs</name>
        <t>This document presents a YANG module <xref target="RFC7950"/>
            that is part of a collection of RFCs that work together
            to ultimately support the configuration of both the clients
            and servers of the Network Configuration Protocol (NETCONF) <xref target="RFC6241"/> and
            RESTCONF <xref target="RFC8040"/>.</t>
        <t> The dependency relationship between the primary YANG groupings
            defined in the various RFCs is presented in the diagram below.
            In some cases, a document may define secondary groupings that
            introduce dependencies not illustrated in the diagram.
            The labels in the diagram are shorthand names for the defining
            RFCs.  The citation references for the shorthand names are provided below
            the diagram.</t>
        <t>Please note that the arrows in the diagram point from referencer
            to referenced.  For example, the "crypto-types" RFC does not
            have any dependencies, whilst the "keystore" RFC depends on the
            "crypto-types" RFC.</t>
        <artwork><![CDATA[
                               crypto-types
                                 ^      ^
                                /        \
                               /          \
                      truststore         keystore
                       ^     ^             ^  ^
                       |     +---------+   |  |
                       |               |   |  |
                       |      +------------+  |
tcp-client-server      |     /         |      |
   ^    ^        ssh-client-server     |      |
   |    |           ^            tls-client-server
   |    |           |              ^     ^        http-client-server
   |    |           |              |     |                 ^
   |    |           |        +-----+     +---------+       |
   |    |           |        |                     |       |
   |    +-----------|--------|--------------+      |       |
   |                |        |              |      |       |
   +-----------+    |        |              |      |       |
               |    |        |              |      |       |
               |    |        |              |      |       |
            netconf-client-server       restconf-client-server

]]></artwork>
<!-- RFC Editor: is there anyway to flush-left the table in PDF/HTML views? -->
          <table align="left">
          <name>Labels in Diagram to RFC Mapping</name>
          <tbody>
            <tr>
              <th>Label in Diagram</th>
              <th>Originating RFC</th>
            </tr>
            <tr>
              <td>crypto-types</td>
              <td>
                <xref target="RFC9640"/></td>
            </tr>
            <tr>
              <td>truststore</td>
              <td>
                <xref target="RFC9641"/></td>
            </tr>
            <tr>
              <td>keystore</td>
              <td>
                RFC 9642</td>
            </tr>
            <tr>
              <td>tcp-client-server</td>
              <td>
                <xref target="RFC9643"/></td>
            </tr>
            <tr>
              <td>ssh-client-server</td>
              <td>
                <xref target="RFC9644"/></td>
            </tr>
            <tr>
              <td>tls-client-server</td>
              <td>
                <xref target="RFC9645"/></td>
            </tr>
            <tr>
              <td>http-client-server</td>
              <td>
                <xref target="I-D.ietf-netconf-http-client-server"/></td>
            </tr>
            <tr>
              <td>netconf-client-server</td>
              <td>
                <xref target="I-D.ietf-netconf-netconf-client-server"/></td>
            </tr>
            <tr>
              <td>restconf-client-server</td>
              <td>
                <xref target="I-D.ietf-netconf-restconf-client-server"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section>
        <name>Specification Language</name>
             <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
      </section>
      <section>
        <name>Terminology</name>
        <t>The terms "client" and "server" are defined in <xref target="RFC6241"/> and are not redefined here.</t>
        <t>The term "keystore" is defined in this document as a mechanism that intends to safeguard secrets.</t>
        <t>The nomenclatures "&lt;running&gt;" and "&lt;operational&gt;" are defined in <xref target="RFC8342"/>.</t>
        <t>The sentence fragments "augmented" and "augmented in" are used herein as the past tense verbified
            form of the "augment" statement defined in <xref target="RFC7950" sectionFormat="of" section="7.17"/>.</t>
        <t>The term "key" may be used to mean one of three things in this document: 1) the YANG-defined
            "asymmetric-key" or "symmetric-key" node defined in this document, 2) the raw key data possessed by the aforementioned key nodes, or 3) the "key" of a YANG "list" statement.
	    This document qualifies types '2' and '3' using "raw key value" and
            "YANG list key" where needed.  In all other cases, an unqualified "key" refers to a YANG-defined
            "asymmetric-key" or "symmetric-key" node.</t>
      </section>
      <section>
        <name>Adherence to the NMDA</name>
        <t>This document is compliant with Network Management Datastore Architecture
            (NMDA) <xref target="RFC8342"/>.  For instance, keys and associated
            certificates installed during manufacturing (e.g., for an IDevID
            certificate) are expected to appear in &lt;operational&gt;
            (see <xref target="built-ins"/>).</t>
      </section>
      <section>
        <name>Conventions</name>
        <t>Various examples in this document use "BASE64VALUE=" as a
            placeholder value for binary data that has been base64 encoded
            (per <xref target="RFC7950" sectionFormat="of" section="9.8"/>).  This
            placeholder value is used because real base64-encoded structures
            are often many lines long and hence distracting to the example
        being presented.</t>

	<t>
  Various examples in this document use the XML <xref target="W3C.REC-xml-20081126"/> encoding.
Other encodings, such as JSON <xref target="RFC8259"/>, could alternatively be used.
	</t>

	<t>
  Various examples in this document contain long lines that may be folded,
  as described in <xref target="RFC8792"/>.
	</t>
	
        <t>This document uses the adjective "central" to the word "keystore"
            to refer to the top-level instance of the "keystore-grouping", when
            the "central-keystore-supported" feature is enabled.  Please be
            aware that consuming YANG modules <bcp14>MAY</bcp14> instantiate the "keystore-grouping"
            in other locations.  All such other instances are not the "central"
            instance.</t>
      </section>
    </section>
      <section>
      <name>The "ietf-keystore" Module</name>
      <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module called
          "ietf-keystore".  A high-level overview of the module is provided in
          <xref target="overview"/>. Examples illustrating the module's use
          are provided in <xref target="examples"/>. The YANG module itself is
          defined in <xref target="keystore-yang-module"/>.</t>
      <section anchor="overview">
        <name>Data Model Overview</name>
        <t>This section provides an overview of the "ietf-keystore" module
            in terms of its features, typedefs, groupings, and protocol-accessible
            nodes.</t>
        <section anchor="features" toc="exclude">
          <name>Features</name>
          <t>The following diagram lists all the "feature" statements
              defined in the "ietf-keystore" module:</t>
          <sourcecode type="yangtree"><![CDATA[
Features:
  +-- central-keystore-supported
  +-- inline-definitions-supported
  +-- asymmetric-keys
  +-- symmetric-keys
]]></sourcecode>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
          </section>
        <section anchor="typedefs" toc="exclude">
          <name>Typedefs</name>
          <t>The following diagram lists the "typedef" statements defined in
              the "ietf-keystore" module:</t>
          <sourcecode type="yangtree"><![CDATA[
Typedefs:
  leafref
    +-- central-symmetric-key-ref
    +-- central-asymmetric-key-ref
]]></sourcecode>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            <t>Comments:</t>
          <ul>
            <li>All the typedefs defined in the "ietf-keystore" module
                extend the base "leafref" type defined in <xref target="RFC7950"/>.</li>
            <li>The leafrefs refer to symmetric and asymmetric keys in the
                central keystore when this module is implemented.</li>
            <li>These typedefs are provided as an aid to consuming
                modules that import the "ietf-keystore" module.</li>
          </ul>
        </section>
        <section toc="exclude">
          <name>Groupings</name>
          <t>The "ietf-keystore" module defines the following "grouping" statements:</t>
          <ul spacing="compact">
            <li>encrypted-by-grouping</li>
            <li>central-asymmetric-key-certificate-ref-grouping</li>
            <li>inline-or-keystore-symmetric-key-grouping</li>
            <li>inline-or-keystore-asymmetric-key-grouping</li>
            <li>inline-or-keystore-asymmetric-key-with-certs-grouping</li>
            <li>inline-or-keystore-end-entity-cert-with-key-grouping</li>
            <li>keystore-grouping</li>
          </ul>
          <t>Each of these groupings are presented in the following subsections.</t>
          <section anchor="encrypted-by-grouping">
            <name>The "encrypted-by-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "encrypted-by-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping encrypted-by-grouping:
    +-- (encrypted-by)
       +--:(central-symmetric-key-ref)
       |        {central-keystore-supported,symmetric-keys}?
       |  +-- symmetric-key-ref?    ks:central-symmetric-key-ref
       +--:(central-asymmetric-key-ref)
                {central-keystore-supported,asymmetric-keys}?
          +-- asymmetric-key-ref?   ks:central-asymmetric-key-ref
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>This grouping defines a "choice" statement with options to reference
                  either a symmetric or an asymmetric key configured in the keystore.</li>
              <li>This grouping is usable only when the keystore module is implemented.
                  Servers defining custom keystore locations <bcp14>MUST</bcp14> augment in alternate
                  "encrypted-by" references to the alternate locations.</li>
            </ul>
          </section>
          <section anchor="central-asymmetric-key-certificate-ref-grouping">
            <name>The "central-asymmetric-key-certificate-ref-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "central-asymmetric-key-certificate-ref-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping central-asymmetric-key-certificate-ref-grouping:
    +-- asymmetric-key?   ks:central-asymmetric-key-ref
    |       {central-keystore-supported,asymmetric-keys}?
    +-- certificate?      leafref
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>This grouping defines a reference to a certificate in two parts: the
                  first being the name of the asymmetric key the certificate is associated
                  with, and the second being the name of the certificate itself.</li>
              <li>This grouping is usable only when the keystore module is implemented.
                  Servers defining custom keystore locations can define an alternate grouping
                  for references to the alternate locations.</li>
            </ul>
          </section>
          <section anchor="inline-or-keystore-symmetric-key-grouping">
            <name>The "inline-or-keystore-symmetric-key-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "inline-or-keystore-symmetric-key-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping inline-or-keystore-symmetric-key-grouping:
    +-- (inline-or-keystore)
       +--:(inline) {inline-definitions-supported}?
       |  +-- inline-definition
       |     +---u ct:symmetric-key-grouping
       +--:(central-keystore)
                {central-keystore-supported,symmetric-keys}?
          +-- central-keystore-reference?
                  ks:central-symmetric-key-ref
]]></sourcecode>
            <t>Comments:</t>	    
            <ul>
              <li>The "inline-or-keystore-symmetric-key-grouping" grouping is provided
                  solely as convenience to consuming modules that wish to offer
                  an option for a symmetric key that is defined either inline
                  or as a reference to a symmetric key in the keystore.</li>
              <li>A "choice" statement is used to expose the various options.
                  Each option is enabled by a "feature" statement.  Additional
                  "case" statements <bcp14>MAY</bcp14> be augmented in if, e.g., there is a
                  need to reference a symmetric key in an alternate location.</li>
              <li>For the "inline-definition" option, the definition uses the
                  "symmetric-key-grouping" grouping discussed in <xref target="RFC9640" sectionFormat="of" section="2.1.4.3"/>.</li>
              <li>For the "central-keystore" option, the "central-keystore-reference" is an
                  instance of the "symmetric-key-ref" discussed in <xref target="typedefs"/>.</li>
            </ul>
          </section>
          <section anchor="inline-or-keystore-asymmetric-key-grouping">
            <name>The "inline-or-keystore-asymmetric-key-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "inline-or-keystore-asymmetric-key-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping inline-or-keystore-asymmetric-key-grouping:
    +-- (inline-or-keystore)
       +--:(inline) {inline-definitions-supported}?
       |  +-- inline-definition
       |     +---u ct:asymmetric-key-pair-grouping
       +--:(central-keystore)
                {central-keystore-supported,asymmetric-keys}?
          +-- central-keystore-reference?
                  ks:central-asymmetric-key-ref
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>The "inline-or-keystore-asymmetric-key-grouping" grouping is provided
                  solely as convenience to consuming modules that wish to offer
                  an option for an asymmetric key that is defined either inline
                  or as a reference to an asymmetric key in the keystore.</li>
              <li>A "choice" statement is used to expose the various options.
                  Each option is enabled by a "feature" statement.  Additional
                  "case" statements <bcp14>MAY</bcp14> be augmented in if, e.g., there is a
                  need to reference an asymmetric key in an alternate location.</li>
              <li>For the "inline-definition" option, the definition uses the
                  "asymmetric-key-pair-grouping" grouping discussed in <xref target="RFC9640" sectionFormat="of" section="2.1.4.6"/>.</li>
              <li>For the "central-keystore" option, the "central-keystore-reference" is an
                  instance of the "asymmetric-key-ref" typedef discussed in
                  <xref target="typedefs"/>.</li>
            </ul>
          </section>
          <section anchor="inline-or-keystore-asymmetric-key-with-certs-grouping">
            <name>The "inline-or-keystore-asymmetric-key-with-certs-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "inline-or-keystore-asymmetric-key-with-certs-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping inline-or-keystore-asymmetric-key-with-certs-grouping:
    +-- (inline-or-keystore)
       +--:(inline) {inline-definitions-supported}?
       |  +-- inline-definition
       |     +---u ct:asymmetric-key-pair-with-certs-grouping
       +--:(central-keystore)
                {central-keystore-supported,asymmetric-keys}?
          +-- central-keystore-reference?
                  ks:central-asymmetric-key-ref
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>The "inline-or-keystore-asymmetric-key-with-certs-grouping" grouping is provided
                  solely as convenience to consuming modules that wish to offer
                  an option for an asymmetric key that is defined either inline
                  or as a reference to an asymmetric key in the keystore.</li>
              <li>A "choice" statement is used to expose the various options.
                  Each option is enabled by a "feature" statement.  Additional
                  "case" statements <bcp14>MAY</bcp14> be augmented in if, e.g., there is a
                  need to reference an asymmetric key in an alternate location.</li>
              <li>For the "inline-definition" option, the definition uses the
                  "asymmetric-key-pair-with-certs-grouping" grouping discussed in <xref target="RFC9640" sectionFormat="of" section="2.1.4.12"/>.</li>
              <li>For the "central-keystore" option, the "central-keystore-reference" is an
                  instance of the "asymmetric-key-ref" typedef discussed in
                  <xref target="typedefs"/>.</li>
            </ul>
          </section>
          <section anchor="inline-or-keystore-end-entity-cert-with-key-grouping">
            <name>The "inline-or-keystore-end-entity-cert-with-key-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "inline-or-keystore-end-entity-cert-with-key-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping inline-or-keystore-end-entity-cert-with-key-grouping:
    +-- (inline-or-keystore)
       +--:(inline) {inline-definitions-supported}?
       |  +-- inline-definition
       |     +---u ct:asymmetric-key-pair-with-cert-grouping
       +--:(central-keystore)
                {central-keystore-supported,asymmetric-keys}?
          +-- central-keystore-reference
             +---u central-asymmetric-key-certificate-ref-grouping
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>The "inline-or-keystore-end-entity-cert-with-key-grouping" grouping is provided
                  solely as convenience to consuming modules that wish to offer
                  an option for a symmetric key that is defined either inline
                  or as a reference to a symmetric key in the keystore.</li>
              <li>A "choice" statement is used to expose the various options.
                  Each option is enabled by a "feature" statement.  Additional
                  "case" statements <bcp14>MAY</bcp14> be augmented in if, e.g., there is a
                  need to reference a symmetric key in an alternate location.</li>
              <li>For the "inline-definition" option, the definition uses the
                  "asymmetric-key-pair-with-certs-grouping" grouping discussed in <xref target="RFC9640" sectionFormat="of" section="2.1.4.12"/>.</li>
              <li>For the "central-keystore" option, the "central-keystore-reference" uses the
                  "central-asymmetric-key-certificate-ref-grouping" grouping discussed in
                  <xref target="central-asymmetric-key-certificate-ref-grouping"/>.</li>
            </ul>
          </section>
          <section anchor="keystore-grouping">
            <name>The "keystore-grouping" Grouping</name>
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "keystore-grouping" grouping:</t>
            <sourcecode type="yangtree"><![CDATA[
  grouping keystore-grouping:
    +-- asymmetric-keys {asymmetric-keys}?
    |  +-- asymmetric-key* [name]
    |     +-- name                                          string
    |     +---u ct:asymmetric-key-pair-with-certs-grouping
    +-- symmetric-keys {symmetric-keys}?
       +-- symmetric-key* [name]
          +-- name                         string
          +---u ct:symmetric-key-grouping
]]></sourcecode>
            <t>Comments:</t>
            <ul>
              <li>The "keystore-grouping" grouping defines a keystore instance
                  as being composed of symmetric and asymmetric keys.  The structure
                  for the symmetric and asymmetric keys is essentially the same:
                  a "list" inside a "container".</li>
              <li>For asymmetric keys, each "asymmetric-key" uses the
                  "asymmetric-key-pair-with-certs-grouping" grouping discussed in
              <xref target="RFC9640" sectionFormat="of" section="2.1.4.12"/>.</li>
              <li>For symmetric keys, each "symmetric-key" uses the
                  "symmetric-key-grouping" grouping discussed in
                  <xref target="RFC9640" sectionFormat="of" section="2.1.4.3"/>.</li>
            </ul>
          </section>
        </section>
        <section anchor="proto-access-nodes" toc="exclude">
          <name>Protocol-Accessible Nodes</name>
          <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "ietf-keystore" module without
              expanding the "grouping" statements:</t>
          <sourcecode type="yangtree"><![CDATA[
module: ietf-keystore
  +--rw keystore {central-keystore-supported}?
     +---u keystore-grouping
     ]]></sourcecode>
	  
          <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "ietf-keystore" module, with
              all "grouping" statements expanded, enabling the keystore's full
          structure to be seen.</t>
	  
          <sourcecode type="yangtree"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

module: ietf-keystore
  +--rw keystore {central-keystore-supported}?
     +--rw asymmetric-keys {asymmetric-keys}?
     |  +--rw asymmetric-key* [name]
     |     +--rw name                           string
     |     +--rw public-key-format?             identityref
     |     +--rw public-key?                    binary
     |     +--rw private-key-format?            identityref
     |     +--rw (private-key-type)
     |     |  +--:(cleartext-private-key) {cleartext-private-keys}?
     |     |  |  +--rw cleartext-private-key?   binary
     |     |  +--:(hidden-private-key) {hidden-private-keys}?
     |     |  |  +--rw hidden-private-key?      empty
     |     |  +--:(encrypted-private-key) {encrypted-private-keys}?
     |     |     +--rw encrypted-private-key
     |     |        +--rw encrypted-by
     |     |        |  +--rw (encrypted-by)
     |     |        |     +--:(central-symmetric-key-ref)
     |     |        |     |        {central-keystore-supported,symme\
tric-keys}?
     |     |        |     |  +--rw symmetric-key-ref?
     |     |        |     |          ks:central-symmetric-key-ref
     |     |        |     +--:(central-asymmetric-key-ref)
     |     |        |              {central-keystore-supported,asymm\
etric-keys}?
     |     |        |        +--rw asymmetric-key-ref?
     |     |        |                ks:central-asymmetric-key-ref
     |     |        +--rw encrypted-value-format    identityref
     |     |        +--rw encrypted-value           binary
     |     +--rw certificates
     |     |  +--rw certificate* [name]
     |     |     +--rw name                      string
     |     |     +--rw cert-data                 end-entity-cert-cms
     |     |     +---n certificate-expiration
     |     |             {certificate-expiration-notification}?
     |     |        +-- expiration-date    yang:date-and-time
     |     +---x generate-csr {csr-generation}?
     |        +---w input
     |        |  +---w csr-format    identityref
     |        |  +---w csr-info      csr-info
     |        +--ro output
     |           +--ro (csr-type)
     |              +--:(p10-csr)
     |                 +--ro p10-csr?   p10-csr
     +--rw symmetric-keys {symmetric-keys}?
        +--rw symmetric-key* [name]
           +--rw name                             string
           +--rw key-format?                      identityref
           +--rw (key-type)
              +--:(cleartext-symmetric-key)
              |  +--rw cleartext-symmetric-key?   binary
              |          {cleartext-symmetric-keys}?
              +--:(hidden-symmetric-key) {hidden-symmetric-keys}?
              |  +--rw hidden-symmetric-key?      empty
              +--:(encrypted-symmetric-key)
                       {encrypted-symmetric-keys}?
                 +--rw encrypted-symmetric-key
                    +--rw encrypted-by
                    |  +--rw (encrypted-by)
                    |     +--:(central-symmetric-key-ref)
                    |     |        {central-keystore-supported,symme\
tric-keys}?
                    |     |  +--rw symmetric-key-ref?
                    |     |          ks:central-symmetric-key-ref
                    |     +--:(central-asymmetric-key-ref)
                    |              {central-keystore-supported,asymm\
etric-keys}?
                    |        +--rw asymmetric-key-ref?
                    |                ks:central-asymmetric-key-ref
                    +--rw encrypted-value-format    identityref
                    +--rw encrypted-value           binary
]]></sourcecode>
          <t>Comments:</t>
          <ul>
            <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <xref target="RFC7950" sectionFormat="of" section="5.6.5"/>.</li>
            <li>The protocol-accessible nodes for the "ietf-keystore" module
                are instances of the "keystore-grouping" grouping discussed in
                <xref target="keystore-grouping"/>.
              </li>
            <li>The top-level node "keystore" is additionally constrained
                by the feature "central-keystore-supported".</li>
            <li>The "keystore-grouping" grouping is discussed in
                <xref target="keystore-grouping"/>.</li>
            <li>The reason for why "keystore-grouping" exists separate from
                the protocol-accessible nodes definition is to enable
                instances of the keystore to be instantiated in other
                locations, as may be needed or desired by some modules.</li>
          </ul>
        </section>
      </section>
      <section anchor="examples">
        <name>Example Usage</name>

        <t>The examples in this section are encoded using XML, such as might
        be the case when using the NETCONF protocol.
	Other encodings <bcp14>MAY</bcp14>
            be used, such as JSON when using the RESTCONF protocol.</t>
        <section anchor="ks-inst" toc="exclude">
          <name>A Keystore Instance</name>
          <t>The following example illustrates keys in &lt;running&gt;.
              Please see <xref target="built-ins"/> for an example illustrating
              built-in values in &lt;operational&gt;.</t>
          <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<keystore
   xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore"
   xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">

   <symmetric-keys>
      <symmetric-key>
         <name>cleartext-symmetric-key</name>
         <key-format>ct:octet-string-key-format</key-format>
         <cleartext-symmetric-key>BASE64VALUE=</cleartext-symmetric-\
key>
      </symmetric-key>
      <symmetric-key>
         <name>hidden-symmetric-key</name>
         <hidden-symmetric-key/>
      </symmetric-key>
      <symmetric-key>
         <name>encrypted-symmetric-key</name>
         <key-format>ct:one-symmetric-key-format</key-format>
         <encrypted-symmetric-key>
           <encrypted-by>
             <asymmetric-key-ref>hidden-asymmetric-key</asymmetric-k\
ey-ref>
           </encrypted-by>
           <encrypted-value-format>ct:cms-enveloped-data-format</enc\
rypted-value-format>
           <encrypted-value>BASE64VALUE=</encrypted-value>
         </encrypted-symmetric-key>
      </symmetric-key>
   </symmetric-keys>

   <asymmetric-keys>
      <asymmetric-key>
         <name>ssh-rsa-key</name>
         <private-key-format>ct:rsa-private-key-format</private-key-\
format>
         <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
      </asymmetric-key>
      <asymmetric-key>
         <name>ssh-rsa-key-with-cert</name>
         <private-key-format>ct:rsa-private-key-format</private-key-\
format>
         <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
         <certificates>
            <certificate>
               <name>ex-rsa-cert2</name>
               <cert-data>BASE64VALUE=</cert-data>
            </certificate>
         </certificates>
      </asymmetric-key>
      <asymmetric-key>
         <name>raw-private-key</name>
         <private-key-format>ct:rsa-private-key-format</private-key-\
format>
         <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
      </asymmetric-key>
      <asymmetric-key>
         <name>rsa-asymmetric-key</name>
         <private-key-format>ct:rsa-private-key-format</private-key-\
format>
         <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
         <certificates>
            <certificate>
               <name>ex-rsa-cert</name>
               <cert-data>BASE64VALUE=</cert-data>
            </certificate>
         </certificates>
      </asymmetric-key>
      <asymmetric-key>
         <name>ec-asymmetric-key</name>
         <private-key-format>ct:ec-private-key-format</private-key-f\
ormat>
         <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
         <certificates>
            <certificate>
               <name>ex-ec-cert</name>
               <cert-data>BASE64VALUE=</cert-data>
            </certificate>
         </certificates>
      </asymmetric-key>
      <asymmetric-key>
         <name>hidden-asymmetric-key</name>
         <public-key-format>ct:subject-public-key-info-format</publi\
c-key-format>
         <public-key>BASE64VALUE=</public-key>
         <hidden-private-key/>
         <certificates>
            <certificate>
               <name>builtin-idevid-cert</name>
               <cert-data>BASE64VALUE=</cert-data>
            </certificate>
            <certificate>
               <name>my-ldevid-cert</name>
               <cert-data>BASE64VALUE=</cert-data>
            </certificate>
         </certificates>
      </asymmetric-key>
      <asymmetric-key>
         <name>encrypted-asymmetric-key</name>
         <private-key-format>ct:one-asymmetric-key-format</private-k\
ey-format>
         <encrypted-private-key>
           <encrypted-by>
             <symmetric-key-ref>encrypted-symmetric-key</symmetric-k\
ey-ref>
           </encrypted-by>
           <encrypted-value-format>ct:cms-encrypted-data-format</enc\
rypted-value-format>
           <encrypted-value>BASE64VALUE=</encrypted-value>
         </encrypted-private-key>
      </asymmetric-key>
   </asymmetric-keys>
</keystore>
]]></sourcecode>
        </section>
        <section toc="exclude">
          <name>A Certificate Expiration Notification</name>
          <t>The following example illustrates a "certificate-expiration"
              notification for a certificate associated with an asymmetric
              key configured in the keystore.</t>
          <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<notification
  xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
  <eventTime>2018-05-25T00:01:00Z</eventTime>
  <keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
    <asymmetric-keys>
      <asymmetric-key>
        <name>hidden-asymmetric-key</name>
        <certificates>
          <certificate>
            <name>my-ldevid-cert</name>
            <certificate-expiration>
              <expiration-date>2018-08-05T14:18:53-05:00</expiration\
-date>
            </certificate-expiration>
          </certificate>
        </certificates>
      </asymmetric-key>
    </asymmetric-keys>
  </keystore>
</notification>
]]></sourcecode>
        </section>
        <section toc="exclude">
          <name>The "Inline or Keystore" Groupings</name>
          <t>This section illustrates the various "inline-or-keystore" groupings
              defined in the "ietf-keystore" module, specifically the
              "inline-or-keystore-symmetric-key-grouping"
              (<xref target="inline-or-keystore-symmetric-key-grouping"/>),
              "inline-or-keystore-asymmetric-key-grouping"
              (<xref target="inline-or-keystore-asymmetric-key-grouping"/>),
              "inline-or-keystore-asymmetric-key-with-certs-grouping"
              (<xref target="inline-or-keystore-asymmetric-key-with-certs-grouping"/>), and
              "inline-or-keystore-end-entity-cert-with-key-grouping"
              (<xref target="inline-or-keystore-end-entity-cert-with-key-grouping"/>) groupings.</t>
          <t>These examples assume the existence of an example module called "ex-keystore-usage"
              that has the namespace "https://example.com/ns/example-keystore-usage".</t>
          <t>The ex-keystore-usage module is first presented using tree diagrams
              <xref target="RFC8340"/>, followed by an instance example illustrating
              all the "inline-or-keystore" groupings in use, followed by the YANG
              module itself.</t>
          <section toc="exclude">
            <name>Tree Diagrams for the "ex-keystore-usage" Module</name>
            <t>The following tree diagram illustrates "ex-keystore-usage" without
                expanding the "grouping" statements:</t>
            <sourcecode type="yangtree"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

module: ex-keystore-usage
  +--rw keystore-usage
     +--rw symmetric-key* [name]
     |  +--rw name                                            string
     |  +---u ks:inline-or-keystore-symmetric-key-grouping
     +--rw asymmetric-key* [name]
     |  +--rw name                                             string
     |  +---u ks:inline-or-keystore-asymmetric-key-grouping
     +--rw asymmetric-key-with-certs* [name]
     |  +--rw name
     |  |       string
     |  +---u ks:inline-or-keystore-asymmetric-key-with-certs-groupi\
ng
     +--rw end-entity-cert-with-key* [name]
        +--rw name
        |       string
        +---u ks:inline-or-keystore-end-entity-cert-with-key-grouping
]]></sourcecode>
            <t>The following tree diagram illustrates the "ex-keystore-usage"
                module with all "grouping" statements expanded, enabling the
                usage's full structure to be seen:</t>
            <sourcecode type="yangtree"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

module: ex-keystore-usage
  +--rw keystore-usage
     +--rw symmetric-key* [name]
     |  +--rw name                                string
     |  +--rw (inline-or-keystore)
     |     +--:(inline) {inline-definitions-supported}?
     |     |  +--rw inline-definition
     |     |     +--rw key-format?                      identityref
     |     |     +--rw (key-type)
     |     |        +--:(cleartext-symmetric-key)
     |     |        |  +--rw cleartext-symmetric-key?   binary
     |     |        |          {cleartext-symmetric-keys}?
     |     |        +--:(hidden-symmetric-key)
     |     |        |        {hidden-symmetric-keys}?
     |     |        |  +--rw hidden-symmetric-key?      empty
     |     |        +--:(encrypted-symmetric-key)
     |     |                 {encrypted-symmetric-keys}?
     |     |           +--rw encrypted-symmetric-key
     |     |              +--rw encrypted-by
     |     |              +--rw encrypted-value-format    identityref
     |     |              +--rw encrypted-value           binary
     |     +--:(central-keystore)
     |              {central-keystore-supported,symmetric-keys}?
     |        +--rw central-keystore-reference?
     |                ks:central-symmetric-key-ref
     +--rw asymmetric-key* [name]
     |  +--rw name                                string
     |  +--rw (inline-or-keystore)
     |     +--:(inline) {inline-definitions-supported}?
     |     |  +--rw inline-definition
     |     |     +--rw public-key-format?             identityref
     |     |     +--rw public-key?                    binary
     |     |     +--rw private-key-format?            identityref
     |     |     +--rw (private-key-type)
     |     |        +--:(cleartext-private-key)
     |     |        |        {cleartext-private-keys}?
     |     |        |  +--rw cleartext-private-key?   binary
     |     |        +--:(hidden-private-key) {hidden-private-keys}?
     |     |        |  +--rw hidden-private-key?      empty
     |     |        +--:(encrypted-private-key)
     |     |                 {encrypted-private-keys}?
     |     |           +--rw encrypted-private-key
     |     |              +--rw encrypted-by
     |     |              +--rw encrypted-value-format    identityref
     |     |              +--rw encrypted-value           binary
     |     +--:(central-keystore)
     |              {central-keystore-supported,asymmetric-keys}?
     |        +--rw central-keystore-reference?
     |                ks:central-asymmetric-key-ref
     +--rw asymmetric-key-with-certs* [name]
     |  +--rw name                                string
     |  +--rw (inline-or-keystore)
     |     +--:(inline) {inline-definitions-supported}?
     |     |  +--rw inline-definition
     |     |     +--rw public-key-format?             identityref
     |     |     +--rw public-key?                    binary
     |     |     +--rw private-key-format?            identityref
     |     |     +--rw (private-key-type)
     |     |     |  +--:(cleartext-private-key)
     |     |     |  |        {cleartext-private-keys}?
     |     |     |  |  +--rw cleartext-private-key?   binary
     |     |     |  +--:(hidden-private-key) {hidden-private-keys}?
     |     |     |  |  +--rw hidden-private-key?      empty
     |     |     |  +--:(encrypted-private-key)
     |     |     |           {encrypted-private-keys}?
     |     |     |     +--rw encrypted-private-key
     |     |     |        +--rw encrypted-by
     |     |     |        +--rw encrypted-value-format    identityref
     |     |     |        +--rw encrypted-value           binary
     |     |     +--rw certificates
     |     |     |  +--rw certificate* [name]
     |     |     |     +--rw name                      string
     |     |     |     +--rw cert-data
     |     |     |     |       end-entity-cert-cms
     |     |     |     +---n certificate-expiration
     |     |     |             {certificate-expiration-notification}?
     |     |     |        +-- expiration-date    yang:date-and-time
     |     |     +---x generate-csr {csr-generation}?
     |     |        +---w input
     |     |        |  +---w csr-format    identityref
     |     |        |  +---w csr-info      csr-info
     |     |        +--ro output
     |     |           +--ro (csr-type)
     |     |              +--:(p10-csr)
     |     |                 +--ro p10-csr?   p10-csr
     |     +--:(central-keystore)
     |              {central-keystore-supported,asymmetric-keys}?
     |        +--rw central-keystore-reference?
     |                ks:central-asymmetric-key-ref
     +--rw end-entity-cert-with-key* [name]
        +--rw name                                string
        +--rw (inline-or-keystore)
           +--:(inline) {inline-definitions-supported}?
           |  +--rw inline-definition
           |     +--rw public-key-format?             identityref
           |     +--rw public-key?                    binary
           |     +--rw private-key-format?            identityref
           |     +--rw (private-key-type)
           |     |  +--:(cleartext-private-key)
           |     |  |        {cleartext-private-keys}?
           |     |  |  +--rw cleartext-private-key?   binary
           |     |  +--:(hidden-private-key) {hidden-private-keys}?
           |     |  |  +--rw hidden-private-key?      empty
           |     |  +--:(encrypted-private-key)
           |     |           {encrypted-private-keys}?
           |     |     +--rw encrypted-private-key
           |     |        +--rw encrypted-by
           |     |        +--rw encrypted-value-format    identityref
           |     |        +--rw encrypted-value           binary
           |     +--rw cert-data?
           |     |       end-entity-cert-cms
           |     +---n certificate-expiration
           |     |       {certificate-expiration-notification}?
           |     |  +-- expiration-date    yang:date-and-time
           |     +---x generate-csr {csr-generation}?
           |        +---w input
           |        |  +---w csr-format    identityref
           |        |  +---w csr-info      csr-info
           |        +--ro output
           |           +--ro (csr-type)
           |              +--:(p10-csr)
           |                 +--ro p10-csr?   p10-csr
           +--:(central-keystore)
                    {central-keystore-supported,asymmetric-keys}?
              +--rw central-keystore-reference
                 +--rw asymmetric-key?
                 |       ks:central-asymmetric-key-ref
                 |       {central-keystore-supported,asymmetric-keys\
}?
                 +--rw certificate?      leafref
]]></sourcecode>
          </section>
          <section toc="exclude">
            <name>Example Usage for the "ex-keystore-usage" Module</name>
	   
            <t>The following example provides two equivalent instances of
                each grouping, the first being a reference to a keystore
                and the second being inlined.  The instance having
                a reference to a keystore is consistent with the keystore
                defined in <xref target="ks-inst"/>.  The two instances are
                equivalent, as the inlined instance example contains
                the same values defined by the keystore instance referenced
            by its sibling example.</t>

            <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<keystore-usage
  xmlns="https://example.com/ns/example-keystore-usage"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">

  <!-- The following two equivalent examples illustrate the  -->
  <!-- "inline-or-keystore-symmetric-key-grouping" grouping: -->

  <symmetric-key>
    <name>example 1a</name>
    <central-keystore-reference>cleartext-symmetric-key</central-key\
store-reference>
  </symmetric-key>

  <symmetric-key>
    <name>example 1b</name>
    <inline-definition>
      <key-format>ct:octet-string-key-format</key-format>
      <cleartext-symmetric-key>BASE64VALUE=</cleartext-symmetric-key>
    </inline-definition>
  </symmetric-key>


  <!-- The following two equivalent examples illustrate the   -->
  <!-- "inline-or-keystore-asymmetric-key-grouping" grouping: -->

  <asymmetric-key>
    <name>example 2a</name>
    <central-keystore-reference>rsa-asymmetric-key</central-keystore\
-reference>
  </asymmetric-key>

  <asymmetric-key>
    <name>example 2b</name>
    <inline-definition>
      <public-key-format>ct:subject-public-key-info-format</public-k\
ey-format>
      <public-key>BASE64VALUE=</public-key>
      <private-key-format>ct:rsa-private-key-format</private-key-for\
mat>
      <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
    </inline-definition>
  </asymmetric-key>


  <!-- The following two equivalent examples illustrate the     -->
  <!-- "inline-or-keystore-asymmetric-key-with-certs-grouping"  -->
  <!-- grouping:                                                -->

  <asymmetric-key-with-certs>
    <name>example 3a</name>
    <central-keystore-reference>rsa-asymmetric-key</central-keystore\
-reference>
  </asymmetric-key-with-certs>

  <asymmetric-key-with-certs>
    <name>example 3b</name>
    <inline-definition>
      <public-key-format>ct:subject-public-key-info-format</public-k\
ey-format>
      <public-key>BASE64VALUE=</public-key>
      <private-key-format>ct:rsa-private-key-format</private-key-for\
mat>
      <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
      <certificates>
        <certificate>
          <name>a locally defined cert</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </certificates>
    </inline-definition>
  </asymmetric-key-with-certs>


  <!-- The following two equivalent examples illustrate the    -->
  <!-- "inline-or-keystore-end-entity-cert-with-key-grouping"  -->
  <!-- grouping:                                               -->
  <end-entity-cert-with-key>
    <name>example 4a</name>
    <central-keystore-reference>
      <asymmetric-key>rsa-asymmetric-key</asymmetric-key>
      <certificate>ex-rsa-cert</certificate>
    </central-keystore-reference>
  </end-entity-cert-with-key>

  <end-entity-cert-with-key>
    <name>example 4b</name>
    <inline-definition>
      <public-key-format>ct:subject-public-key-info-format</public-k\
ey-format>
      <public-key>BASE64VALUE=</public-key>
      <private-key-format>ct:rsa-private-key-format</private-key-for\
mat>
      <cleartext-private-key>BASE64VALUE=</cleartext-private-key>
      <cert-data>BASE64VALUE=</cert-data>
    </inline-definition>
  </end-entity-cert-with-key>

</keystore-usage>
]]></sourcecode>
          </section>
          <section toc="exclude">
            <name>The "ex-keystore-usage" YANG Module</name>

            <t>Following is the "ex-keystore-usage" module's YANG definition:</t>
            <sourcecode type="yang"><![CDATA[
module ex-keystore-usage {
  yang-version 1.1;
  namespace "https://example.com/ns/example-keystore-usage";
  prefix ex-keystore-usage;

  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }

  organization
    "Example Corporation";

  contact
    "Author: YANG Designer <mailto:yang.designer@example.com>";

  description
    "This example module illustrates notable groupings defined
     in the 'ietf-keystore' module.";

  revision 2024-10-10 {
    description
      "Initial version";
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }

  container keystore-usage {
    description
      "An illustration of the various keystore groupings.";
    list symmetric-key {
      key "name";
      leaf name {
        type string;
        description
          "An arbitrary name for this key.";
      }
      uses ks:inline-or-keystore-symmetric-key-grouping;
      description
        "An symmetric key that may be configured locally or be a
         reference to a symmetric key in the keystore.";
    }
    list asymmetric-key {
      key "name";
      leaf name {
        type string;
        description
          "An arbitrary name for this key.";
      }
      uses ks:inline-or-keystore-asymmetric-key-grouping;
      description
        "An asymmetric key, with no certs, that may be configured
         locally or be a reference to an asymmetric key in the
         keystore.  The intent is to reference just the asymmetric
         key, not any certificates that may also be associated
         with the asymmetric key.";
    }
    list asymmetric-key-with-certs {
      key "name";
      leaf name {
        type string;
        description
          "An arbitrary name for this key.";
      }
      uses ks:inline-or-keystore-asymmetric-key-with-certs-grouping;
      description
        "An asymmetric key and its associated certs that may be
         configured locally or be a reference to an asymmetric
         key (and its associated certs) in the keystore.";
    }
    list end-entity-cert-with-key {
      key "name";
      leaf name {
        type string;
        description
          "An arbitrary name for this key.";
      }
      uses ks:inline-or-keystore-end-entity-cert-with-key-grouping;
      description
        "An end-entity certificate and its associated asymmetric
         key that may be configured locally or be a reference
         to another certificate (and its associated asymmetric
         key) in the keystore.";
    }
  }
}
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="keystore-yang-module">
        <name>YANG Module</name>
        <t>This YANG module has normative references to <xref target="RFC8341"/>
          and <xref target="RFC9640"/>.</t>

        <sourcecode type="yang" name="ietf-keystore@2024-10-10.yang" markers="true"><![CDATA[
module ietf-keystore {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-keystore";
  prefix ks;

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }

  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG Web:   https://datatracker.ietf.org/wg/netconf
     WG List:  NETCONF WG list <mailto:netconf@ietf.org>
     Author:   Kent Watsen <mailto:kent+ietf@watsen.net>";

  description
    "This module defines a 'keystore' to centralize management
     of security credentials.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.

     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9642
     (https://www.rfc-editor.org/info/rfc9642); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version";
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }

  /****************/
  /*   Features   */
  /****************/

  feature central-keystore-supported {
    description
      "The 'central-keystore-supported' feature indicates that
       the server supports the central keystore (i.e., fully
       implements the 'ietf-keystore' module).";
  }

  feature inline-definitions-supported {
    description
      "The 'inline-definitions-supported' feature indicates that
       the server supports locally defined keys.";
  }

  feature asymmetric-keys {
    description
      "The 'asymmetric-keys' feature indicates that the server
       implements the /keystore/asymmetric-keys subtree.";

  }

  feature symmetric-keys {
    description
      "The 'symmetric-keys' feature indicates that the server
       implements the /keystore/symmetric-keys subtree.";
  }

  /****************/
  /*   Typedefs   */
  /****************/

  typedef central-symmetric-key-ref {
    type leafref {
      path "/ks:keystore/ks:symmetric-keys/ks:symmetric-key"
         + "/ks:name";
    }
    description
      "This typedef enables modules to easily define a reference
       to a symmetric key stored in the central keystore.";
  }

  typedef central-asymmetric-key-ref {
    type leafref {
      path "/ks:keystore/ks:asymmetric-keys/ks:asymmetric-key"
         + "/ks:name";
    }
    description
      "This typedef enables modules to easily define a reference
       to an asymmetric key stored in the central keystore.";
  }

  /*****************/
  /*   Groupings   */
  /*****************/

  grouping encrypted-by-grouping {
    description
      "A grouping that defines a 'choice' statement that can be
       augmented into the 'encrypted-by' node, present in the
       'symmetric-key-grouping' and 'asymmetric-key-pair-grouping'
       groupings defined in RFC 9640, enabling references to keys
       in the central keystore.";
    choice encrypted-by {
      nacm:default-deny-write;
      mandatory true;
      description
        "A choice amongst other symmetric or asymmetric keys.";
      case central-symmetric-key-ref {
        if-feature "central-keystore-supported";
        if-feature "symmetric-keys";
        leaf symmetric-key-ref {
          type ks:central-symmetric-key-ref;
          description
            "Identifies the symmetric key used to encrypt the
             associated key.";
        }
      }
      case central-asymmetric-key-ref {
        if-feature "central-keystore-supported";
        if-feature "asymmetric-keys";
        leaf asymmetric-key-ref {
          type ks:central-asymmetric-key-ref;
          description
            "Identifies the asymmetric key whose public key
             encrypted the associated key.";
        }
      }
    }
  }

  // *-ref groupings

  grouping central-asymmetric-key-certificate-ref-grouping {
    description
      "A grouping for the reference to a certificate associated
       with an asymmetric key stored in the central keystore.";
    leaf asymmetric-key {
      nacm:default-deny-write;
      if-feature "central-keystore-supported";
      if-feature "asymmetric-keys";
      type ks:central-asymmetric-key-ref;
      must '../certificate';
      description
        "A reference to an asymmetric key in the keystore.";
    }
    leaf certificate {
      nacm:default-deny-write;
      type leafref {
        path "/ks:keystore/ks:asymmetric-keys/ks:asymmetric-key"
           + "[ks:name = current()/../asymmetric-key]/"
           + "ks:certificates/ks:certificate/ks:name";
      }
      must '../asymmetric-key';
      description
        "A reference to a specific certificate of the
         asymmetric key in the keystore.";
    }
  }

  // inline-or-keystore-* groupings

  grouping inline-or-keystore-symmetric-key-grouping {
    description
      "A grouping for the configuration of a symmetric key.  The
       symmetric key may be defined inline or as a reference to
       a symmetric key stored in the central keystore.

       Servers that wish to define alternate keystore locations
       SHOULD augment in custom 'case' statements enabling
       references to those alternate keystore locations.";
    choice inline-or-keystore {
      nacm:default-deny-write;
      mandatory true;
      description
        "A choice between an inlined definition and a definition
         that exists in the keystore.";
      case inline {
        if-feature "inline-definitions-supported";
        container inline-definition {
          description
            "A container to hold the local key definition.";
          uses ct:symmetric-key-grouping;
        }
      }
      case central-keystore {
        if-feature "central-keystore-supported";
        if-feature "symmetric-keys";
        leaf central-keystore-reference {
          type ks:central-symmetric-key-ref;
          description
            "A reference to a symmetric key that exists in
             the central keystore.";
        }
      }
    }
  }

  grouping inline-or-keystore-asymmetric-key-grouping {
    description
      "A grouping for the configuration of an asymmetric key.  The
       asymmetric key may be defined inline or as a reference to
       an asymmetric key stored in the central keystore.

       Servers that wish to define alternate keystore locations
       SHOULD augment in custom 'case' statements enabling
       references to those alternate keystore locations.";
    choice inline-or-keystore {
      nacm:default-deny-write;
      mandatory true;
      description
        "A choice between an inlined definition and a definition
         that exists in the keystore.";
      case inline {
        if-feature "inline-definitions-supported";
        container inline-definition {
          description
            "A container to hold the local key definition.";
          uses ct:asymmetric-key-pair-grouping;
        }
      }
      case central-keystore {
        if-feature "central-keystore-supported";
        if-feature "asymmetric-keys";
        leaf central-keystore-reference {
          type ks:central-asymmetric-key-ref;
          description
            "A reference to an asymmetric key that exists in
             the central keystore.  The intent is to reference
             just the asymmetric key without any regard for
             any certificates that may be associated with it.";
        }
      }
    }
  }

  grouping inline-or-keystore-asymmetric-key-with-certs-grouping {
    description
      "A grouping for the configuration of an asymmetric key and
       its associated certificates.  The asymmetric key and its
       associated certificates may be defined inline or as a
       reference to an asymmetric key (and its associated
       certificates) in the central keystore.

       Servers that wish to define alternate keystore locations
       SHOULD augment in custom 'case' statements enabling
       references to those alternate keystore locations.";
    choice inline-or-keystore {
      nacm:default-deny-write;
      mandatory true;
      description
        "A choice between an inlined definition and a definition
         that exists in the keystore.";
      case inline {
        if-feature "inline-definitions-supported";
        container inline-definition {
          description
            "A container to hold the local key definition.";
          uses ct:asymmetric-key-pair-with-certs-grouping;
        }
      }
      case central-keystore {
        if-feature "central-keystore-supported";
        if-feature "asymmetric-keys";
        leaf central-keystore-reference {
          type ks:central-asymmetric-key-ref;
          description
            "A reference to an asymmetric key (and all of its
             associated certificates) in the keystore, when
             this module is implemented.";
        }
      }
    }
  }

  grouping inline-or-keystore-end-entity-cert-with-key-grouping {
    description
      "A grouping for the configuration of an asymmetric key and
       its associated end-entity certificate.  The asymmetric key
       and its associated end-entity certificate may be defined
       inline or as a reference to an asymmetric key (and its
       associated end-entity certificate) in the central keystore.

       Servers that wish to define alternate keystore locations
       SHOULD augment in custom 'case' statements enabling
       references to those alternate keystore locations.";
    choice inline-or-keystore {
      nacm:default-deny-write;
      mandatory true;
      description
        "A choice between an inlined definition and a definition
         that exists in the keystore.";
      case inline {
        if-feature "inline-definitions-supported";
        container inline-definition {
          description
            "A container to hold the local key definition.";
          uses ct:asymmetric-key-pair-with-cert-grouping;
        }
      }
      case central-keystore {
        if-feature "central-keystore-supported";
        if-feature "asymmetric-keys";
        container central-keystore-reference {
          uses central-asymmetric-key-certificate-ref-grouping;
          description
            "A reference to a specific certificate associated with
             an asymmetric key stored in the central keystore.";
        }
      }
    }
  }

  // the keystore grouping

  grouping keystore-grouping {
    description
      "A grouping definition enables use in other contexts.  If ever
       done, implementations MUST augment new 'case' statements
       into the various inline-or-keystore 'choice' statements to
       supply leafrefs to the model-specific location(s).";
    container asymmetric-keys {
      nacm:default-deny-write;
      if-feature "asymmetric-keys";
      description
        "A list of asymmetric keys.";
      list asymmetric-key {
        key "name";
        description
          "An asymmetric key.";
        leaf name {
          type string;
          description
            "An arbitrary name for the asymmetric key.";
        }
        uses ct:asymmetric-key-pair-with-certs-grouping;
      }
    }
    container symmetric-keys {
      nacm:default-deny-write;
      if-feature "symmetric-keys";
      description
        "A list of symmetric keys.";
      list symmetric-key {
        key "name";
        description
          "A symmetric key.";
        leaf name {
          type string;
          description
            "An arbitrary name for the symmetric key.";
        }
        uses ct:symmetric-key-grouping;
      }
    }
  }

  /*********************************/
  /*   Protocol accessible nodes   */
  /*********************************/

  container keystore {
    if-feature "central-keystore-supported";
    description
      "A central keystore containing a list of symmetric keys and
       a list of asymmetric keys.";
    nacm:default-deny-write;
    uses keystore-grouping {
      augment "symmetric-keys/symmetric-key/key-type/encrypted-"
            + "symmetric-key/encrypted-symmetric-key/encrypted-by" {
        description
          "Augments in a choice statement enabling the encrypting
           key to be any other symmetric or asymmetric key in the
           central keystore.";
        uses encrypted-by-grouping;
      }
      augment "asymmetric-keys/asymmetric-key/private-key-type/"
            + "encrypted-private-key/encrypted-private-key/"
            + "encrypted-by" {
        description
          "Augments in a choice statement enabling the encrypting
           key to be any other symmetric or asymmetric key in the
           central keystore.";
        uses encrypted-by-grouping;
      }
    }
  }
}
]]></sourcecode>
      </section>
    </section>
    <section anchor="built-ins">
      <name>Support for Built-In Keys</name>
      <t>In some implementations, a server may support keys built into the server.
          Built-in keys <bcp14>MAY</bcp14> be set during the manufacturing process or be dynamically
          generated the first time the server is booted or a particular service
          (e.g., Secure Shell (SSH)) is enabled.</t>
      <t>Built-in keys are "hidden" keys expected to be set by a vendor-specific process.
          Any ability for operators to set and/or modify built-in keys is outside the
      scope of this document.</t>
      
      <t>The primary characteristic of the built-in keys is that they are provided
          by the server, as opposed to being configured.  As such, they are present in
          &lt;operational&gt; (<xref target="RFC8342" sectionFormat="of" section="5.3"/>) and &lt;system&gt;
          <xref target="I-D.ietf-netmod-system-config"/>, if implemented.</t>
      <t>The example below illustrates what the keystore in &lt;operational&gt;
          might look like for a server in its factory default state.  Note that the
      built-in keys have the "or:origin" annotation value "or:system".</t>

      
      <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types"
  xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
  or:origin="or:intended">
  <asymmetric-keys>
    <asymmetric-key or:origin="or:system">
      <name>Manufacturer-Generated Hidden Key</name>
      <public-key-format>ct:subject-public-key-info-format</public-k\
ey-format>
      <public-key>BASE64VALUE=</public-key>
      <hidden-private-key/>
      <certificates>
        <certificate>
          <name>Manufacturer-Generated IDevID Cert</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </certificates>
    </asymmetric-key>
  </asymmetric-keys>
</keystore>
]]></sourcecode>
      <t>The following example illustrates how a single built-in key definition
          from the previous example has been propagated to &lt;running&gt;:</t>
      <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">
  <asymmetric-keys>
    <asymmetric-key>
      <name>Manufacturer-Generated Hidden Key</name>
      <public-key-format>ct:subject-public-key-info-format</public-k\
ey-format>
      <public-key>BASE64VALUE=</public-key>
      <hidden-private-key/>
      <certificates>
        <certificate>
          <name>Manufacturer-Generated IDevID Cert</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
        <certificate>
          <name>Deployment-Specific LDevID Cert</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </certificates>
    </asymmetric-key>
  </asymmetric-keys>
</keystore>
]]></sourcecode>
      <t>After the above configuration is applied, &lt;operational&gt; should appear
          as follows:</t>
      <sourcecode type="xml"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types"
  xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
  or:origin="or:intended">
  <asymmetric-keys>
    <asymmetric-key or:origin="or:system">
      <name>Manufacturer-Generated Hidden Key</name>
      <public-key-format>ct:subject-public-key-info-format</public-k\
ey-format>
      <public-key>BASE64VALUE=</public-key>
      <hidden-private-key/>
      <certificates>
        <certificate>
          <name>Manufacturer-Generated IDevID Cert</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
        <certificate or:origin="or:intended">
          <name>Deployment-Specific LDevID Cert</name>
          <cert-data>BASE64VALUE=</cert-data>
        </certificate>
      </certificates>
    </asymmetric-key>
  </asymmetric-keys>
</keystore>
]]></sourcecode>
    </section>
    <section>
      <name>Encrypting Keys in Configuration</name>
      <t>This section describes an approach that enables both the symmetric
          and asymmetric keys on a server to be encrypted, such that
          backup/restore procedures can be used without concern for raw key
          data being compromised when in transit.</t>
      <t>The approach presented in this section is not normative.  This section
          answers how a configuration containing secrets that are encrypted by a
          built-in key (<xref target="built-ins"/>) can be backed up from one server
          and restored on a different server when each server has unique primary keys.
          The API defined by the "ietf-keystore" YANG module presented in this
          document is sufficient to support the workflow described in this section.</t>
      <section toc="exclude">
        <name>Key Encryption Key</name>
        <t>The ability to encrypt configured keys is predicated on the
            existence of a key encryption key (KEK).  There may be any
            number of KEKs in a server.  A KEK, by its namesake, is a key
            that is used to encrypt other keys. A KEK <bcp14>MAY</bcp14> be either a
            symmetric key or an asymmetric key.</t>
        <t>If a KEK is a symmetric key, then the server <bcp14>MUST</bcp14> provide an API for
            administrators to encrypt other keys without needing to know
            the symmetric key's value.  If the KEK is an asymmetric key, then
            the server <bcp14>SHOULD</bcp14> provide an API enabling the encryption of other
            keys or, alternatively, assume the administrators can do so themselves
            using the asymmetric key's public half.</t>
        <t>A server <bcp14>MUST</bcp14> possess access to the KEK, or an API using the KEK,
            so that it can decrypt the other keys in the configuration at runtime.</t>
      </section>
      <section toc="exclude">
        <name>Configuring Encrypted Keys</name>
        <t>Each time a new key is configured, it <bcp14>SHOULD</bcp14> be encrypted by
        a KEK.</t>
	
        <t>In the "ietf-crypto-types" module <xref target="RFC9640"/>,
            the format for encrypted values is described by identity statements
            derived from the "symmetrically-encrypted-value-format" and
            "asymmetrically-encrypted-value-format" identity statements.</t>
        <t>Implementations of servers implementing the "ietf-keystore" module 
            <bcp14>SHOULD</bcp14> provide an API that simultaneously generates a key and encrypts
            the generated key using a KEK.  Thus, the cleartext value of the newly
            generated key may never be known to the administrators generating the keys.
            Such an API is defined in the "ietf-ssh-common" and "ietf-tls-common"
            YANG modules defined in <xref target="RFC9644"/>
            and <xref target="RFC9645"/>, respectively.</t>
        <t>In case the server implementation does not provide such an API, then
            the generating and encrypting steps <bcp14>MAY</bcp14> be performed outside the
            server, e.g., by an administrator with special access control rights (such as an organization's crypto officer).</t>
        <t>In either case, the encrypted key can be configured into the keystore
            using either the "encrypted-symmetric-key" (for symmetric keys) or the
            "encrypted-private-key" (for asymmetric keys) nodes.  These two nodes
            contain both the encrypted raw key value as well as a reference to
            the KEK that encrypted the key.</t>
      </section>
      <section toc="exclude">
        <name>Migrating Configuration to Another Server</name>
        <t>When a KEK is used to encrypt other keys, migrating the configuration
            to another server is only possible if the second server has the same KEK.
            How the second server comes to have the same KEK is discussed in this
            section.</t>
        <t>In some deployments, mechanisms outside the scope of this document
            may be used to migrate a KEK from one server to another.  That said,
            beware that the ability to do so typically entails having access to
            the first server; however, in some scenarios, the first server may no
            longer be operational.</t>
        <t>In other deployments, an organization's crypto officer, possessing a
            KEK's cleartext value, configures the same KEK on the second server,
            presumably as a hidden key or a key protected by access control, so
            that the cleartext value is not
            disclosed to regular administrators.  However, this approach creates
            high coupling to and dependency on the crypto officers that does not
            scale in production environments.</t>
        <t>In order to decouple the crypto officers from the regular administrators,
            a special KEK, called the "primary key" (PK), may be used.</t>
        <t>A PK is commonly a globally unique built-in (see <xref target="built-ins"/>)
            asymmetric key. The private raw key value, due to its long lifetime, is hidden
            (i.e., "hidden-private-key"; see <xref target="RFC9640" sectionFormat="of" section="2.1.4.5."/>). The raw public key value is often
            contained in an identity certificate (e.g., IDevID).  How to
            configure a PK during the manufacturing process is outside the
            scope of this document.</t>
        <t>Assuming the server has a PK, the PK can be used to encrypt a
            "shared KEK", which is then used to encrypt the keys configured
            by regular administrators.</t>
        <t>With this extra level of indirection, it is possible for a
            crypto officer to encrypt the same KEK for a multiplicity of
            servers offline using the public key contained in their identity
            certificates.  The crypto officer can then safely hand off
            the encrypted KEKs to regular administrators responsible for
            server installations, including migrations.</t>
        <t>In order to migrate the configuration from a first server, an
            administrator would need to make just a single modification to
            the configuration before loading it onto a second server, which
            is to replace the encrypted KEK keystore entry from the first
            server with the encrypted KEK for the second server.  Upon doing
            this, the configuration (containing many encrypted keys) can be
            loaded into the second server while enabling the second server
            to decrypt all the encrypted keys in the configuration.</t>
        <t>The following diagram illustrates this idea:</t>
        <artwork><![CDATA[
 +-------------+                                 +-------------+
 | shared KEK  |                                 | shared KEK  |
 |(unencrypted)|-------------------------------> | (encrypted) |
 +-------------+     encrypts offline using      +-------------+
        ^            each server's PK                |            
        |                                            |            
        |                                            |            
        |  possesses    \o                           |            
        +--------------  |\                          |            
                        / \         shares with      |            
                      crypto    +--------------------+            
                      officer   |                                 
                                |                                 
                                |                                 
+----------------------+        |         +----------------------+
|       server-1       |        |         |       server-2       |
|    configuration     |        |         |    configuration     |
|                      |        |         |                      |
|                      |        |         |                      |
|  +----------------+  |        |         |  +----------------+  |
|  |      PK-1      |  |        |         |  |      PK-2      |  |
|  |    (hidden)    |  |        |         |  |    (hidden)    |  |
|  +----------------+  |        |         |  +----------------+  |
|      ^               |        |         |      ^               |
|      |               |        |         |      |               |
|      |               |        |         |      |               |
|      |  encrypted    |        |         |      |  encrypted    |
|      |  by           |        |         |      |  by           |
|      |               |        |         |      |               |
|      |               |        |         |      |               |
|  +----------------+  |        |         |  +----------------+  |
|  |  shared KEK    |  |        |         |  |  shared KEK    |  |
|  |  (encrypted)   |  |        v         |  |  (encrypted)   |  |
|  +----------------+  |                  |  +----------------+  |
|      ^               |     regular      |      ^               |
|      |               |      admin       |      |               |
|      |               |                  |      |               |
|      |  encrypted    |       \o         |      |  encrypted    |
|      |  by           |        |\        |      |  by           |
|      |               |       / \        |      |               |
|      |               |                  |      |               |
|  +----------------+  |----------------->|  +----------------+  |
|  | all other keys |  |     migrate      |  | all other keys |  |
|  |  (encrypted)   |  |  configuration   |  |  (encrypted)   |  |
|  +----------------+  |                  |  +----------------+  |
|                      |                  |                      |
+----------------------+                  +----------------------+
]]></artwork>
      </section>
    </section>
    <section>
      <name>Security Considerations</name>
      <section>	
        <name>Security of Data at Rest and in Motion</name>
        <t>The YANG module defined in this document defines a mechanism called a
            "keystore" that intends to protect its contents from unauthorized
            disclosure and modification.</t>
        <t>In order to satisfy the expectations of a keystore, it
            is <bcp14>RECOMMENDED</bcp14> that server implementations ensure that the keystore
            contents are encrypted when persisted to non-volatile memory 
            and that the keystore contents that have been decrypted
        in volatile memory are zeroized when not in use.</t>
	
        <t>The keystore contents may be encrypted by either encrypting
            the contents individually (e.g., using the "encrypted" value
            formats) or using persistence-layer-level encryption. If storing cleartext values (which is <bcp14>NOT RECOMMENDED</bcp14> per <xref target="RFC9640" sectionFormat="of" section="3.5"/>), then persistence-layer-level encryption <bcp14>SHOULD</bcp14> be used to protect the data at rest.</t>
        <t>If the keystore contents are not encrypted when persisted,
            then server implementations <bcp14>MUST</bcp14> ensure the persisted storage
            is inaccessible.</t>
      </section>
      <section>
        <name>Unconstrained Private Key Usage</name>
        <t>This module enables the configuration of private keys without
            constraints on their usage, e.g., what operations the key is
            allowed to be used for (such as signature, decryption, or both).</t>
        <t>This module also does not constrain the usage of the associated
            public keys other than in the context of a configured certificate
            (e.g., an identity certificate), in which case the key usage is
            constrained by the certificate.</t>
      </section>
      <section anchor="sec-mod">

        <name>Security Considerations for the "ietf-keystore" YANG Module</name>
        <t>This section is modeled after the template defined in <xref target="RFC8407" sectionFormat="of" section="3.7.1"/>.</t>
	
	
        <t>The ietf-keystore YANG module defines a data model that is designed to be accessed via YANG-based management protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>. These protocols have mandatory-to-implement secure transport layers (e.g., SSH <xref target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and mandatory-to-implement mutual authentication.
</t>

        <t>The Network Configuration Access Control Model (NACM) <xref
        target="RFC8341"/> provides the means to restrict access for
        particular users to a preconfigured subset
        of all available protocol operations and
        content.</t>
            <t>Please be aware that this YANG module uses groupings from
            other YANG modules that define nodes that may be considered
            sensitive or vulnerable in network environments.  Please
            review the Security Considerations for dependent YANG modules
            for information as to which nodes may be considered sensitive
            or vulnerable in network environments.</t>
	
           <t>Some of the readable data nodes in this YANG module
            may be considered sensitive or vulnerable in some network
            environments. It is thus important to control read access
            (e.g., via get, get-config, or notification) to these
            data nodes. These are the subtrees and data nodes and their
            sensitivity/vulnerability:
        </t>
        <dl spacing="normal" newline="true">
            <dt>The "cleartext-symmetric-key" node:</dt>
              <dd>This node, imported from the "symmetric-key-grouping"
                    grouping defined in <xref target="RFC9640"/>, is
                    additionally sensitive to read operations such that,
                    in normal use cases, it should never be returned to a client.
                    For this reason, the NACM extension "default-deny-all" was 
                    applied to it in <xref target="RFC9640"/>.</dd>
           
            <dt>The "cleartext-private-key" node:</dt>
              <dd>This node, defined in the "asymmetric-key-pair-grouping"
                    grouping in <xref target="RFC9640"/>, is
                    additionally sensitive to read operations such that, in
                    normal use cases, it should never be returned to a client.  For this
                    reason, the NACM extension "default-deny-all" is applied
                    to it in <xref target="RFC9640"/>.</dd>
          </dl>
         <t>All the writable data nodes defined by this YANG module, both in the
            "grouping" statements as well as the protocol-accessible "keystore"
            instance, may be considered sensitive or vulnerable in some network
            environments. For instance, any modification to a key or reference
            to a key may dramatically alter the implemented security policy.
            For this reason, the NACM extension "default-deny-write" has been
            set for all data nodes defined in this module.</t>
        <t>This YANG module does not define any "rpc" or "action" statements, and
            thus the security considerations for such is not provided here.</t>
        <t>Built-in key types <bcp14>SHOULD</bcp14> be hidden and/or encrypted (not
            cleartext).  If this is not possible, access control mechanisms
            like NACM <bcp14>SHOULD</bcp14> be used to limit access to the key's secret data
            to only the most trusted authorized clients (e.g., belonging to
            an organization's crypto officer).</t>
      </section>
    </section>
    <section>
      <name>IANA Considerations</name>
      <section>
        <name>The IETF XML Registry</name>
        <t>IANA has registered the following URI in the "ns" registry of
  the "IETF XML Registry" <xref target="RFC3688"/>.</t>
 <dl spacing="compact">
  <dt>URI:</dt><dd> urn:ietf:params:xml:ns:yang:ietf-keystore</dd>
  <dt>Registrant Contact:</dt><dd> The IESG</dd>
  <dt>XML:</dt><dd>N/A; the requested URI is an XML namespace.</dd>
 </dl>
      </section>
      <section>
        <name>The YANG Module Names Registry</name>
        <t>IANA has registered the following YANG module in the
          "YANG Module Names" registry defined in <xref target="RFC6020"/>.
         </t>
  <dl spacing="compact">
  <dt>Name:</dt><dd>ietf-keystore</dd>
  <dt>Maintained by IANA:</dt><dd>N</dd>
  <dt>Namespace:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-keystore</dd>
  <dt>Prefix:</dt><dd>ks</dd>
  <dt>Reference:</dt><dd>RFC 9642</dd>
 </dl>
      </section>
    </section>
  </middle>
  <back>
<displayreference target="I-D.ietf-netmod-system-config" to="NETMOD-SYSTEM-CONFIG"/>
<displayreference target="I-D.ietf-netconf-http-client-server" to="HTTP-CLIENT-SERVER"/>
<displayreference target="I-D.ietf-netconf-netconf-client-server" to="NETCONF-CLIENT-SERVER"/>
<displayreference target="I-D.ietf-netconf-restconf-client-server" to="RESTCONF-CLIENT-SERVER"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4252.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml"/>

<!-- [I-D.ietf-netconf-crypto-types] companion document RFC 9640 -->
        <reference anchor="RFC9640" target="https://www.rfc-editor.org/info/rfc9640">
	  <front>
	    <title>YANG Data Types and Groupings for Cryptography</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9640"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9640"/>
	</reference>

      </references>
      <references>
        <name>Informative References</name>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8407.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8792.xml"/>

<!-- [I-D.ietf-netconf-trust-anchors] companion document RFC 9641-->
        <reference anchor="RFC9641" target="https://www.rfc-editor.org/info/rfc9641">
	  <front>
	    <title>A YANG Data Model for a Truststore</title>
	    <author initials="K." surname="Watsen" fullname="Kent Watsen">
	      <organization>Watsen Networks</organization>
	    </author>
	    <date month="October" year="2024"/>
	  </front>
	  <seriesInfo name="RFC" value="9641"/>
	  <seriesInfo name="DOI" value="10.17487/RFC9641"/>
	</reference>

<!-- [I-D.ietf-netconf-tcp-client-server] companion document RFC 9643 -->
        <reference anchor="RFC9643" target="https://www.rfc-editor.org/info/rfc9643">
          <front>
            <title>YANG Groupings for TCP Clients and TCP Servers</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization>Watsen Networks</organization>
            </author>
            <author initials="M." surname="Scharf" fullname="Michael Scharf">
              <organization>Hochschule Esslingen - University of Applied                  
Sciences</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9643"/>
          <seriesInfo name="DOI" value="10.17487/RFC9643"/>
        </reference>

<!-- [I-D.ietf-netconf-ssh-client-server] companion document RFC 9644-->
       <reference anchor="RFC9644" target="https://www.rfc-editor.org/info/rfc9644">
         <front>
           <title>YANG Groupings for SSH Clients and SSH Servers</title>
           <author initials="K." surname="Watsen" fullname="Kent Watsen">
             <organization>Watsen Networks</organization>
           </author>
           <date month="October" year="2024"/>
         </front>
         <seriesInfo name="RFC" value="9644"/>
         <seriesInfo name="DOI" value="10.17487/RFC9644"/>
       </reference>

<!-- [I-D.ietf-netconf-tls-client-server] companion document RFC 9645 -->
        <reference anchor="RFC9645" target="https://www.rfc-editor.org/info/rfc9645">
          <front>
            <title>YANG Groupings for TLS Clients and TLS Servers</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization>Watsen Networks</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9645"/>
          <seriesInfo name="DOI" value="10.17487/RFC9645"/>
        </reference>

<!-- [I-D.ietf-netconf-http-client-server] IESG state: IESG Evaluation::Revised I-D Needed as of 10/08/2024-->
<xi:include
href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-http-client-server"/>

<!-- [I-D.ietf-netconf-netconf-client-server] IESG state: Waiting for AD Go-Ahead::Revised I-D Needed as of 10/08/24 -->
<xi:include
href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server"/>

<!-- [I-D.ietf-netconf-restconf-client-server] IESG state: Waiting for AD Go-Ahead::Revised I-D Needed  -->
<xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server"/>

<!-- [I-D.ietf-netmod-system-config] IESG state: I-D Exists as of 10/08/24. Entered the long way to display the Ed role -->
<reference anchor="I-D.ietf-netmod-system-config" target="https://datatracker.ietf.org/doc/html/draft-ietf-netmod-system-config-09">
  <front>
    <title>System-defined Configuration</title>
    <author fullname="Qiufang Ma" initials="Q." surname="Ma" role="editor">
      <organization>Huawei</organization>
    </author>
    <author fullname="Qin Wu" initials="Q." surname="Wu">
      <organization>Huawei</organization>
    </author>
    <author fullname="Chong Feng" initials="C." surname="Feng"/>
    <date day="29" month="September" year="2024"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-netmod-system-config-09"/>
</reference>

        <reference anchor="Std-802.1AR-2018" target="https://standards.ieee.org/standard/802_1AR-2018.html">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date month="August" year="2018"/>
          </front>
	  <seriesInfo name="IEEE Std" value="802.1AR-2018"/>
	  <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8423794"/>
        </reference>

	   <reference anchor="W3C.REC-xml-20081126" target="https://www.w3.org/TR/xml/" quoteTitle="true" derivedAnchor="W3C.REC-xml-20081126">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <author initials="T." surname="Bray"/>
            <author initials="J." surname="Paoli"/>
            <author initials="C. M." surname="Sperberg-McQueen"/>
            <author initials="E." surname="Maler"/>
            <author initials="F." surname="Yergeau"/>
            <date month="November" year="2008"/>
          </front>
          <refcontent>W3C Recommendation REC-xml-20081126</refcontent>
        </reference>

      </references>
    </references>
 
    <section numbered="false">
      <name>Acknowledgements</name>    
      <t>The authors would like to thank the following for
        lively discussions on list and in the halls (ordered
        by first name):
	      <contact fullname="Alan Luchuk"/>,
              <contact fullname="Andy Bierman"/>,
	       <contact fullname="Balázs Kovács"/>,
        <contact fullname="Benoit Claise"/>,
	    <contact fullname="Bert Wijnen"/>,
	    <contact fullname="David Lamparter"/>,
        <contact fullname="Eric Voit"/>,
       <contact fullname="Éric Vyncke"/>,
       <contact fullname="Francesca Palombini"/>,
        <contact fullname="Jürgen Schönwälder"/>,
	    <contact fullname="Ladislav Lhotka"/>,
	    <contact fullname="Liang Xia"/>,
	    <contact fullname="Magnus Nyström"/>,
     <contact fullname="Mahesh Jethanandani"/>,
     <contact fullname="Martin Björklund"/>,
     <contact fullname="Mehmet Ersue"/>,
     <contact fullname="Murray Kucherawy"/>,
     <contact fullname="Paul Wouters"/>,
     <contact fullname="Phil Shafer"/>,
     <contact fullname="Qin Wu"/>,
	    <contact fullname=" Radek Krejci"/>,
      <contact fullname="Ramkumar Dhanapal"/>,
      <contact fullname="Reese Enghardt"/>,
     <contact fullname=" Reshad Rahman"/>,
      <contact fullname="Rob Wilton"/>,
      <contact fullname="Roman Danyliw"/>,
     <contact fullname="Sandra Murphy"/>,
     <contact fullname=" Sean Turner"/>,
      <contact fullname="Tom Petch"/>,
      <contact fullname="Warren Kumari"/>,
        and <contact fullname="Zaheduzzaman Sarker"/>.</t>
    </section>

  </back>
</rfc>
