<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-httpbis-cache-header-10" number="9211" obsoletes="" updates="" submissionType="IETF" category="std" consensus="true" tocInclude="true" sortRefs="true"  symRefs="true" xml:lang="en" version="3">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="Cache-Status Header">The Cache-Status HTTP Response Header Field</title>
    <seriesInfo name="RFC" value="9211"/>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <postal>
          <postalLine>Prahran</postalLine>
          <postalLine>Australia</postalLine>
        </postal>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>
    <date year="2022" month="June" />
    <area>Applications and Real-Time</area>
    <workgroup>HTTP</workgroup>
    <keyword>http</keyword>
    <keyword>cache</keyword>
    <keyword>debugging</keyword>
    <keyword>x-cache</keyword>
    <abstract>
      <t>To aid debugging, HTTP caches often append header fields to a response, explaining how they handled the request in an ad hoc manner. This specification defines a standard mechanism to do so that is aligned with HTTP's caching model.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>To aid debugging (both by humans and automated tools), HTTP caches often append header fields to a response explaining how they handled the request. Unfortunately, the semantics of these header fields are often unclear, and both the semantics and syntax used vary between implementations.</t>
      <t>This specification defines a new HTTP response header field, "Cache-Status", for this purpose with standardized syntax and semantics.</t>
      <section anchor="notational-conventions" numbered="true" toc="default">
        <name>Notational Conventions</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

  <t>This document uses the following terminology from <xref section="3" sectionFormat="of" target="STRUCTURED-FIELDS"/> to specify syntax and parsing: List, String, Token, Integer, and Boolean.</t>
        <t>This document also uses terminology from <xref target="HTTP"/> and <xref target="HTTP-CACHING"/>.</t>
      </section>
    </section>
    <section anchor="field" numbered="true" toc="default">
      <name>The Cache-Status HTTP Response Header Field</name>
      <t>The Cache-Status HTTP response header field indicates how caches have handled that response and its corresponding request. The syntax of this header field conforms to <xref target="STRUCTURED-FIELDS" format="default"/>.</t>
  <t>Its value is a List. Each member of the List represents a cache that has handled the request. The first member represents the cache closest to the origin server, and the last member represents the cache closest to the user (possibly including the user agent's cache itself if it appends a value).</t>   
      <t>Caches determine when it is appropriate to add the Cache-Status header field to a response. Some might add it to all responses, whereas others might only do so when specifically configured to, or when the request contains a header field that activates a debugging mode. See <xref target="security" format="default"/> for related security considerations.</t>
      <t>An intermediary <bcp14>SHOULD NOT</bcp14> append a Cache-Status member to responses that it generates locally, even if that intermediary contains a cache, unless the generated response is based upon a stored response (e.g., 304 (Not Modified) and 206 (Partial Content) are both based upon a stored response). For example, a proxy generating a 400 response due to a malformed request will not add a Cache-Status value, because that response was generated by the proxy, not the origin server.</t>
      <t>When adding a value to the Cache-Status header field, caches <bcp14>SHOULD</bcp14> preserve the existing field value, to allow debugging of the entire chain of caches handling the request.</t>
<t>Each List member identifies the cache that inserted it, and this identifier <bcp14>MUST</bcp14> be a String or Token. Depending on the deployment, this might be a product or service name (e.g., "ExampleCache" or "Example CDN"), a hostname ("cache-3.example.com"), an IP address, or a generated string.</t>

      <t>Each member of the list can have parameters that describe that cache's handling of the request. While these parameters are <bcp14>OPTIONAL</bcp14>, caches are encouraged to provide as much information as possible.</t>
      <t>This specification defines the following parameters.</t>
      <section anchor="the-hit-parameter" numbered="true" toc="default">
        <name>The hit Parameter</name>
 <t>The value of "hit" is a Boolean that, when true, indicates that the request was satisfied by the cache; that is, it was not forwarded, and the response was obtained from the cache.</t>	
        <t>A response that was originally produced by the origin but was modified by the cache (for example, a 304 or 206 status code) is still considered a hit, as long as it did not go forward (e.g., for validation).</t>
        <t>A response that was in cache but not able to be used without going forward (e.g., because it was stale or partial) is not considered a hit. Note that a stale response that is used without going forward (e.g., because the origin server is not available) can be considered a hit.</t>
        <t>"hit" and "fwd" are exclusive; only one of them should appear on each list member.</t>
      </section>
      <section anchor="the-fwd-parameter" numbered="true" toc="default">
        <name>The fwd Parameter</name>
 <t>"fwd", when present, indicates that the request went forward towards the origin; its value is a Token that indicates why.</t>	
        <t>The following parameter values are defined to explain why the request went forward, from most specific to least:</t>
        <dl spacing="normal">
          <dt>bypass:</dt>
          <dd>The cache was configured to not handle this request.</dd>
          <dt>method:</dt>
          <dd>The request method's semantics require the request to be forwarded.</dd>
          <dt>uri-miss:</dt>
          <dd>The cache did not contain any responses that matched the request URI.</dd>
          <dt>vary-miss:</dt>
          <dd>The cache contained a response that matched the request URI, but it could not select a response based upon this request's header fields and stored Vary header fields.</dd>
          <dt>miss:</dt>
          <dd>The cache did not contain any responses that could be used to satisfy this request (to be used when an implementation cannot distinguish between uri-miss and vary-miss).</dd>
          <dt>request:</dt>
          <dd>The cache was able to select a fresh response for the request, but the request's semantics (e.g., Cache-Control request directives) did not allow its use.</dd>
          <dt>stale:</dt>
          <dd>The cache was able to select a response for the request, but it was stale.</dd>
          <dt>partial:</dt>
          <dd>The cache was able to select a partial response for the request, but it did not contain all of the requested ranges (or the request was for the complete response).</dd>
        </dl>	
        <t>The most specific reason known to the cache <bcp14>SHOULD</bcp14> be used, to the extent that it is possible to implement. See also <xref section="4" sectionFormat="comma" target="HTTP-CACHING" format="default"/>.</t>
      </section>
      <section anchor="the-fwd-status-parameter" numbered="true" toc="default">
        <name>The fwd-status Parameter</name>
  <t>The value of "fwd-status" is an Integer that indicates which status code (see <xref section="15" sectionFormat="comma" target="HTTP"/>) the next-hop server returned in response to the forwarded request. The fwd-status parameter is only meaningful when fwd is present. If fwd-status is not present but the fwd parameter is, it defaults to the status code sent in the response.</t>
        <t>This parameter is useful to distinguish cases when the next-hop server sends a 304 (Not Modified) response to a conditional request or a 206 (Partial Content) response because of a range request.</t>
      </section>
      <section anchor="the-ttl-parameter" numbered="true" toc="default">
        <name>The ttl Parameter</name>
	<t>The value of "ttl" is an Integer that indicates the response's remaining freshness lifetime (see <xref section="4.2.1" sectionFormat="comma" target="HTTP-CACHING"/>) as calculated by the cache, as an integer number of seconds, measured as closely as possible to when the response header section is sent by the cache. This includes freshness assigned by the cache through, for example, heuristics (see <xref section="4.2.2" sectionFormat="comma" target="HTTP-CACHING"/>), local configuration, or other factors. It may be negative, to indicate staleness.</t>
      </section>
      <section anchor="the-stored-parameter" numbered="true" toc="default">
        <name>The stored Parameter</name>
<t>The value of "stored" is a Boolean that indicates whether the cache stored the response (see <xref section="3" sectionFormat="comma" target="HTTP-CACHING"/>); a true value indicates that it did. The stored parameter is only meaningful when fwd is present.</t>
      </section>
      <section anchor="the-collapsed-parameter" numbered="true" toc="default">
        <name>The collapsed Parameter</name>
 <t>The value of "collapsed" is a Boolean that indicates whether this request was collapsed together with one or more other forward requests (see <xref section="4" sectionFormat="comma" target="HTTP-CACHING"/>). If true, the response was successfully reused; if not, a new request had to be made. If not present, the request was not collapsed with others. The collapsed parameter is only meaningful when fwd is present.</t>
      </section>
      <section anchor="the-key-parameter" numbered="true" toc="default">
        <name>The key Parameter</name>
 <t>The value of "key" is a String that conveys a representation of the cache key (see <xref section="2" sectionFormat="comma" target="HTTP-CACHING"/>) used for the response. Note that this may be implementation specific.</t>	
      </section>
      <section anchor="the-detail-parameter" numbered="true" toc="default">
        <name>The detail Parameter</name>
	 <t>The value of "detail" is either a String or a Token that allows implementations to convey additional information not captured in other parameters, such as implementation-specific states or other caching-related metrics.</t>
        <t>For example:</t>
        <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; hit; detail=MEMORY
]]></sourcecode>
        <t>The semantics of a detail parameter are always specific to the cache that sent it; even if a details parameter from another cache shares the same value, it might not mean the same thing.</t>
        <t>This parameter is intentionally limited. If an implementation's developer or operator needs to convey additional information in an interoperable fashion, they are encouraged to register extension parameters (see <xref target="register" format="default"/>) or define another header field.</t>
      </section>
    </section>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>The following is an example of a minimal cache hit:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; hit
]]></sourcecode>
      <t>However, a polite cache will give some more information, e.g.:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; hit; ttl=376
]]></sourcecode>
      <t>A stale hit just has negative freshness, as in this example:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; hit; ttl=-412
]]></sourcecode>
      <t>Whereas this is an example of a complete miss:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; fwd=uri-miss
]]></sourcecode>
      <t>This is an example of a miss that successfully validated on the backend server:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; fwd=stale; fwd-status=304
]]></sourcecode>
      <t>This is an example of a miss that was collapsed with another request:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; fwd=uri-miss; collapsed
]]></sourcecode>
      <t>This is an example of a miss that the cache attempted to collapse, but couldn't:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ExampleCache; fwd=uri-miss; collapsed=?0
]]></sourcecode>
      <t>The following is an example of going through two separate layers of caching, where the cache closest to the origin responded to an earlier request with a stored response, and a second cache stored that response and later reused it to satisfy the current request:</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: OriginCache; hit; ttl=1100,
              "CDN Company Here"; hit; ttl=545
]]></sourcecode>
      <t>The following is an example of going through a three-layer caching system, where the closest to the origin is a reverse proxy (where the response was served from cache); the next is a forward proxy interposed by the network (where the request was forwarded because there wasn't any response cached with its URI, the request was collapsed with others, and the resulting response was stored); and the closest to the user is a browser cache (where there wasn't any response cached with the request's URI):</t>
      <sourcecode type="http-message"><![CDATA[
Cache-Status: ReverseProxyCache; hit
Cache-Status: ForwardProxyCache; fwd=uri-miss; collapsed; stored
Cache-Status: BrowserCache; fwd=uri-miss
]]></sourcecode>
    </section>
    <section anchor="register" numbered="true" toc="default">
      <name>Defining New Cache-Status Parameters</name>
      <t>New Cache-Status parameters can be defined by registering them in the "HTTP Cache-Status" registry.</t>
      <t>Registration requests are reviewed and approved by a designated expert, per <xref section="4.5" sectionFormat="comma" target="RFC8126" format="default"/>. A specification document is appreciated but not required.</t>
      <t>The expert(s) should consider the following factors when evaluating requests:</t>
      <ul spacing="normal">
        <li>Community feedback</li>
        <li>If the value is sufficiently well defined</li>
        <li>Generic parameters are preferred over vendor-specific, application-specific, or deployment-specific values. If a generic value cannot be agreed upon in the community, the parameter's name should be correspondingly specific (e.g., with a prefix that identifies the vendor, application, or deployment).</li>
      </ul>
      <t>Registration requests should use the following template:</t>
      <dl spacing="normal">
        <dt>Name:</dt>
        <dd>[a name for the Cache-Status parameter's key; see <xref section="3.1.2" sectionFormat="of" target="STRUCTURED-FIELDS"/> for syntactic requirements]</dd>
	<dt>Type:</dt><dd>[the Structured Type of the parameter's value; see <xref section="3.1.2" sectionFormat="of" target="STRUCTURED-FIELDS"/>]</dd>
        <dt>Description:</dt>
        <dd>[a description of the parameter's semantics]</dd>
        <dt>Reference:</dt>
        <dd>[to a specification defining this parameter, if available]</dd>
      </dl>
      <t>See the registry at <eref brackets="angle" target="https://www.iana.org/assignments/http-cache-status"></eref> for details on where to send registration requests.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>IANA has created the "HTTP Cache-Status" registry at <eref brackets="angle" target="https://www.iana.org/assignments/http-cache-status"></eref> and populated it with the types defined in <xref target="field" format="default"/>; see <xref target="register" format="default"/> for its associated procedures.</t>
      <t>IANA has added the following entry in the "Hypertext Transfer Protocol (HTTP) Field Name Registry" defined in <xref section="18.4" sectionFormat="comma" target="HTTP" format="default"/>:</t>
      <dl spacing="compact">
        <dt>Field name:</dt>
        <dd>Cache-Status</dd>
        <dt>Status:</dt>
        <dd>permanent</dd>
        <dt>Reference:</dt>
        <dd>RFC 9211</dd>
      </dl>
    </section>
    <section anchor="security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>Attackers can use the information in Cache-Status to probe the behavior of the cache (and other components) and infer the activity of those using the cache. The Cache-Status header field may not create these risks on its own, but it can assist attackers in exploiting them.</t>
      <t>For example, knowing if a cache has stored a response can help an attacker execute a timing attack on sensitive data.</t>
      <t>Additionally, exposing the cache key can help an attacker understand modifications to the cache key, which may assist cache poisoning attacks. See <xref target="ENTANGLE" format="default"/> for details.</t>
      <t>The underlying risks can be mitigated with a variety of techniques (e.g., using encryption and authentication and avoiding the inclusion of attacker-controlled data in the cache key), depending on their exact nature. Note that merely obfuscating the key does not mitigate this risk.</t>
      <t>To avoid assisting such attacks, the Cache-Status header field can be omitted, only sent when the client is authorized to receive it, or sent with sensitive information (e.g., the key parameter) only when the client is authorized.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
	
        <reference anchor="STRUCTURED-FIELDS" target="https://www.rfc-editor.org/info/rfc8941">
          <front>
            <title>Structured Field Values for HTTP</title>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization/>
            </author>
            <author fullname="P-H. Kamp" initials="P-H." surname="Kamp">
              <organization/>
            </author>
            <date month="February" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8941"/>
          <seriesInfo name="DOI" value="10.17487/RFC8941"/>
        </reference>
	
<!-- [HTTP] [I.D.ietf-httpbis-semantics] in AUTH48; companion document RFC 9110 -->
        <reference anchor='HTTP' target="https://www.rfc-editor.org/info/rfc9110">
          <front>
            <title>HTTP Semantics</title>
            <author initials='R' surname='Fielding' fullname='Roy Fielding' role="editor">
              <organization />
            </author>
            <author initials='M' surname='Nottingham' fullname='Mark Nottingham' role="editor">
              <organization />
            </author>
            <author initials='J' surname='Reschke' fullname='Julian Reschke' role="editor">
              <organization />
            </author>
            <date year='2022' month='June' />
          </front>
	  <seriesInfo name="STD" value="97"/>
          <seriesInfo name="RFC" value="9110"/>
          <seriesInfo name="DOI" value="10.17487/RFC9110"/>
        </reference>
	
<!-- [HTTP-CACHING] [I.D.ietf-httpbis-cache] in AUTH48; companion document RFC 9111 -->
        <reference anchor='HTTP-CACHING' target="https://www.rfc-editor.org/info/rfc9111">
          <front>
            <title>HTTP Caching</title>
            <author initials='R' surname='Fielding' fullname='Roy Fielding' role="editor">
              <organization />
            </author>
            <author initials='M' surname='Nottingham' fullname='Mark Nottingham' role="editor">
              <organization />
            </author>
            <author initials='J' surname='Reschke' fullname='Julian Reschke' role="editor">
              <organization />
            </author>
            <date year='2022' month='June' />
          </front>
	  <seriesInfo name="STD" value="98"/>
          <seriesInfo name="RFC" value="9111"/>
          <seriesInfo name="DOI" value="10.17487/RFC9111"/>
        </reference>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

      </references>
      <references>
        <name>Informative References</name>	
        <reference anchor="ENTANGLE" target="https://portswigger.net/research/web-cache-entanglement">
          <front>
            <title>Web Cache Entanglement: Novel Pathways to Poisoning</title>
            <author initials="J." surname="Kettle" fullname="James Kettle">
              <organization>PortSwigger</organization>
            </author>
            <date month="September" year="2020"/>
          </front>
        </reference>
      </references>
    </references>
  </back>
</rfc>
