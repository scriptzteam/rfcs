<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" docName="draft-ietf-opsawg-mud-tls-18" number="9761" ipr="trust200902" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="3" consensus="true" symRefs="true" sortRefs="true" version="3">

  <front>
<title abbrev="MUD (D)TLS Profile for IoT Devices">Manufacturer Usage
    Description (MUD) for TLS and DTLS Profiles for Internet of Things (IoT) Devices</title>
    <seriesInfo name="RFC" value="9761"/>
    <author fullname="Tirumaleswar Reddy.K" initials="T." surname="Reddy.K">
      <organization>Nokia</organization>
      <address>
        <postal>
          <country>India</country>
        </postal>
        <email>kondtir@gmail.com</email>
      </address>
    </author>
    <author fullname="Dan Wing" initials="D." surname="Wing">
      <organization abbrev="Citrix">Citrix Systems, Inc.</organization>
      <address>
        <postal>
          <street>4988 Great America Pkwy</street>
          <city>Santa Clara</city>
          <region>CA</region>
          <code>95054</code>
          <country>United States of America</country>
        </postal>
        <email>danwing@gmail.com</email>
      </address>
    </author>
    <author fullname="Blake Anderson" initials="B." surname="Anderson">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>170 West Tasman Dr</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>United States of America</country>
        </postal>
        <email>blake.anderson@cisco.com</email>
      </address>
    </author>
    <date month="April" year="2025"/>
    <area>OPS</area>
    <workgroup>opsawg</workgroup>

<keyword>Network Security Access Control Lists (ACLs)</keyword>
<keyword>Firewall Policies</keyword>
<keyword>Certificate Validation</keyword>
<keyword>Unauthorized Software Detection</keyword>
<keyword>Malware Detection</keyword>

    <abstract>
      <t>This memo extends the Manufacturer Usage Description (MUD)
      specification to allow manufacturers to define TLS and DTLS profile
      parameters. This allows a network security service to identify
      unexpected (D)TLS usage, which can indicate the presence of unauthorized
      software, malware, or security policy-violating traffic on an
      endpoint.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Encryption is necessary to enhance the privacy of end users using Internet of Things (IoT)
      devices. TLS <xref target="RFC8446" format="default"/> and DTLS <xref target="RFC9147" format="default"/> are the dominant protocols (counting all (D)TLS
      versions) that provide encryption for IoT device traffic. Unfortunately, in
      conjunction with IoT applications' rise of encryption, malware authors
      are also using encryption that thwarts network-based analysis, such as
      deep packet inspection (DPI). Thus, other mechanisms are needed to help
      detect malware running on an IoT device.</t>
      <t>Malware often reuses certain libraries, and there are notable
      differences in how malware uses encryption compared to software that is not malware.
      Several common patterns in the use of (D)TLS by malware include: </t>
      <ul spacing="normal">
        <li>
          <t>Use of older and weaker cryptographic parameters.</t>
        </li>
        <li>
          <t>TLS server name indication (SNI) extension <xref target="RFC6066" format="default"/> and server certificates are composed of
          subjects with characteristics of a domain generation algorithm (DGA)
          (e.g., "www.33mhwt2j.net").</t>
        </li>
        <li>
          <t>Higher use of self-signed certificates compared with typical
          legitimate software using certificates from a certificate authority (CA) trusted by the
          device.</t>
        </li>
        <li>
          <t>Discrepancies in the SNI TLS extension and the DNS names in the
          SubjectAltName (SAN) X.509 extension in the server Certificate
          message.</t>
        </li>
        <li>
          <t>Discrepancies in the key exchange algorithm and the client public
          key length in comparison with legitimate flows. As a reminder, the
          Client Key Exchange message has been removed from TLS 1.3.</t>
        </li>
        <li>

<t>Lower diversity in extensions advertised by TLS clients compared to
          legitimate clients.</t>
        </li>
        <li>
          <t>Using privacy enhancing technologies like Tor, Psiphon, Ultrasurf
          (see <xref target="MALWARE-TLS" format="default"/>), and evasion techniques
          such as ClientHello randomization.</t>
        </li>
        <li>

          <t>Using an alternative DNS server (via encrypted transport) to
          avoid detection by malware DNS filtering services <xref target="MALWARE-DOH" format="default"/>. Specifically, malware may not use the
          Do53 or encrypted DNS server provided by the local network (DHCP,
          Discovery of Network-designated Resolvers (DNR) <xref target="RFC9463" format="default"/>, or Discovery of Designated Resolvers (DDR) <xref target="RFC9462" format="default"/>).</t>
        </li>
      </ul>
      <t>If (D)TLS profile parameters are defined, the following functions that have a positive impact on the local network security are possible:</t>
      <ul spacing="normal">
        <li>
          <t>Permit intended DTLS or TLS use, and block malicious DTLS or
          TLS use.

This is superior to the Access Control Lists
          (ACLs) of Layers 3 and 4 in "Manufacturer Usage Description Specification" <xref
          target="RFC8520" format="default"/>, which are not suitable for broad
          communication patterns. The goal of this document is to enhance and
          complement the existing MUD specifications rather than undermine
          them.</t>
        </li>
        <li>
          <t>Ensure TLS certificates are valid. Several TLS deployments have
          been vulnerable to active Man-In-The-Middle (MITM) attacks because
          of the lack of certificate validation or vulnerability in the
          certificate validation function (see <xref target="CRYPTO-VULNERABILITY" format="default"/>). By observing (D)TLS profile
          parameters, a network element can detect when the TLS SNI mismatches
          the SubjectAltName and when the server's certificate is invalid. In
          (D)TLS 1.2 <xref target="RFC5246" format="default"/> <xref target="RFC6347" format="default"/>, the ClientHello, ServerHello, and
          Certificate messages are all sent in cleartext. This check is not
          possible with (D)TLS 1.3, which encrypts the Certificate message and
          therefore hides the server identity from any intermediary. In (D)TLS
          1.3, the server certificate validation functions should be executed
          within an on-path (D)TLS proxy if such a proxy exists.</t>
        </li>
        <li>
          <t>Support new communication patterns. An IoT device can learn a new
          capability, and the new capability can change the way the IoT device
          communicates with other devices located in the local network and the
          Internet. There would be an inaccurate policy if an IoT device
          rapidly changes the IP addresses and domain names it communicates
          with while the MUD ACLs were slower to update (see <xref target="CLEAR-AS-MUD" format="default"/>). In such a case, observable (D)TLS
          profile parameters can be used to permit intended use and block
          malicious behavior from the IoT device.</t>
        </li>
      </ul>
      <t>The YANG module specified in <xref target="YANG2" format="default"/> of this
      document is an extension of "YANG Data Model for Network Access Control
      Lists (ACLs)" <xref target="RFC8519" format="default"/> to enhance MUD <xref target="RFC8520" format="default"/> to model observable (D)TLS profile parameters.
      Using these (D)TLS profile parameters, an active MUD-enforcing network
      security service (e.g., firewall) can identify MUD non-compliant (D)TLS
      behavior indicating outdated cryptography or malware. This detection can
      prevent malware downloads, block access to malicious domains, enforce
      use of strong ciphers, stop data exfiltration, etc. In addition,
      organizations may have policies around acceptable ciphers and
      certificates for the websites the IoT devices connect to. Examples
      include no use of old and less secure versions of TLS, no use of
      self-signed certificates, deny-list or accept-list of Certificate
      Authorities, valid certificate expiration time, etc. These policies can
      be enforced by observing the (D)TLS profile parameters. Network security
      services can use the IoT device's (D)TLS profile parameters to identify
      legitimate flows by observing (D)TLS sessions, and can make inferences
      to permit legitimate flows and block malicious or insecure flows.
      Additionally, it supports network communications adherence to security
      policies by ensuring that TLS certificates are valid and deprecated
      cipher suites are avoided. The proposed technique is also suitable in
      deployments where decryption techniques are not ideal due to privacy
      concerns, non-cooperating endpoints, and expense.</t>
    </section>
    <section anchor="notation" numbered="true" toc="default">
      <name>Terminology</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

	<dl newline="false" spacing="normal">
	  <dt>(D)TLS:</dt><dd>Used for statements that apply to both
	  Transport Layer Security <xref target="RFC8446" format="default"/>
	  and Datagram Transport Layer Security <xref target="RFC6347"
	  format="default"/>. Specific terms "TLS" and "DTLS" are used for any
	  statement that applies to either protocol alone.</dd>
	  <dt>DoH/DoT:</dt><dd>Refers to DNS-over-HTTPS <xref target="RFC8484"
	  format="default"/> and/or DNS-over-TLS <xref target="RFC7858"
	  format="default"/>.</dd>
	  <dt>Middlebox:</dt><dd>A middlebox that interacts with TLS traffic
	  can either act as a TLS proxy, intercepting and decrypting the
	  traffic for inspection, or inspect the traffic between TLS peers
	  without terminating the TLS session.</dd>
	  <dt>Endpoint Security Agent:</dt><dd>An Endpoint Security Agent is a
	  software installed on endpoint devices that protects them from
	  security threats.  It provides features such as malware protection,
	  firewall, and intrusion prevention to ensure the device's security
	  and integrity.</dd>
	  <dt>Network Security Service:</dt><dd>A Network Security Service
	  refers to a set of mechanisms designed to protect network
	  communications and resources from attacks.</dd>
	</dl>
    </section>
    <section numbered="true" toc="default">
      <name>Overview of MUD (D)TLS Profiles for IoT devices</name>
      <t>In Enterprise networks, protection and detection are typically done
      both on end hosts and in the network. Endpoint security agents have deep
      visibility on the devices where they are installed, whereas the network
      has broader visibility. Installing endpoint security agents may not be a
      viable option on IoT devices, and network security service is an
      efficient means to protect such IoT devices. If the IoT device supports
      a MUD (D)TLS profile, the (D)TLS profile parameters of the IoT device
      can be used by a middlebox to detect and block malware communication,
      while at the same time preserving the privacy of legitimate uses of
      encryption. In addition, it enforces organizational security policies,
      ensuring that devices comply. By monitoring (D)TLS parameters, network
      administrators can identify and mitigate the use of outdated TLS
      versions, cryptographic algorithms, and non-compliant certificates. The
      middlebox need not proxy (D)TLS, but can passively observe the parameters
      of (D)TLS handshakes from IoT devices and gain visibility into TLS 1.2
      parameters and partial visibility into TLS 1.3 parameters.</t>
      <t>Malicious agents can try to use the (D)TLS profile parameters of
      legitimate agents to evade detection, but it becomes a challenge to
      mimic the behavior of various IoT device types and IoT device models
      from several manufacturers. In other words, malware developers will have
      to develop malicious agents per IoT device type, manufacturer and model,
      infect the device with the tailored malware agent, and will have keep up
      with updates to the device's (D)TLS profile parameters over time.
      Furthermore, the malware's command and control server certificates need
      to be signed by the same certifying authorities trusted by the IoT
      devices. Typically, IoT devices have an infrastructure that supports a
      rapid deployment of updates, and malware agents will have a
      near-impossible task of similarly deploying updates and continuing to
      mimic the TLS behavior of the IoT device it has infected.</t>

<t>However, if the IoT device has reached end-of-life (EOL) and the IoT
manufacturer will not issue a firmware or software update to the IoT device or
will not update the MUD file, the "is-supported" attribute defined in <xref target="RFC8520" sectionFormat="of"
section="3.6"/> can be used by the MUD manager to indicate that the IoT
manufacturer no longer supports the device. The EOL of a device, where the IoT
manufacturer no longer supports it, does not necessarily mean the device is
defective.  Instead, it signifies that the device is no longer receiving
updates, support, or security patches, which necessitates replacement and
upgrading to next-generation devices to ensure continued functionality,
security, and compatibility with modern networks. The network security service
will have to rely on other techniques discussed in <xref target="Security"
format="default"/> to identify malicious connections until the device is
replaced.</t> <t>Compromised IoT devices are typically used for launching DDoS
attacks (<xref target="RFC8576" sectionFormat="of" section="3"/>). For
example, DDoS attacks like Slowloris <xref target="SLOWLORIS"
format="default"/> and Transport Layer Security (TLS) re-negotiation can be
blocked if the victim's server certificate is not be signed by the same
certifying authorities trusted by the IoT device.</t>
    </section>
    <section numbered="true" toc="default">
      <name>(D)TLS 1.3 Handshake</name>
      <t>In (D)TLS 1.3, full (D)TLS handshake inspection is not possible since
      all (D)TLS handshake messages excluding the ClientHello message are
      encrypted. (D)TLS 1.3 has introduced new extensions in the handshake
      record layers called Encrypted Extensions. When using these extensions,
      handshake messages will be encrypted and network security services (such
      as a firewall) are incapable of deciphering the handshake, and thus
      cannot view the server certificate. However, the ClientHello and
      ServerHello still have some fields visible, such as the list of
      supported versions, named groups, cipher suites, signature algorithms,
      extensions in ClientHello, and the chosen cipher in the ServerHello. For
      instance, if the malware uses evasion techniques like ClientHello
      randomization, the observable list of cipher suites and extensions
      offered by the malware agent in the ClientHello message will not match
      the list of cipher suites and extensions offered by the legitimate
      client in the ClientHello message, and the middlebox can block malicious
      flows without acting as a (D)TLS 1.3 proxy.</t>
      <section anchor="full" numbered="true" toc="default">
        <name>Full (D)TLS 1.3 Handshake Inspection</name>
        <t>To obtain more visibility into negotiated TLS 1.3 parameters, a
        middlebox can act as a (D)TLS 1.3 proxy. A middlebox can act as a
        (D)TLS proxy for the IoT devices owned and managed by the IT team in
        the Enterprise network and the (D)TLS proxy must meet the security and
        privacy requirements of the organization. In other words, the scope of
        a middlebox acting as a (D)TLS proxy is restricted to the Enterprise network
        owning and managing the IoT devices. The middlebox would have to
        follow the behavior detailed in <xref target="RFC8446" sectionFormat="of" section="9.3"/> to act as a compliant (D)TLS 1.3 proxy.</t>
        <t>To further increase privacy, the Encrypted Client Hello (ECH) extension
        <xref target="I-D.ietf-tls-esni" format="default"/> prevents passive observation
        of the TLS Server Name Indication extension and other potentially
        sensitive fields, such as the Application-Layer Protocol Negotiation (ALPN) <xref target="RFC7301" format="default"/>. To
        effectively provide that privacy protection, the ECH extension needs to be
        used in conjunction with DNS encryption (e.g., DoH). A middlebox
        (e.g., firewall) passively inspecting the ECH extension cannot observe the
        encrypted SNI nor observe the encrypted DNS traffic. The middlebox
        acting as a (D)TLS 1.3 proxy that does not support the ECH extension will
        act as if it is connecting to the public name and follows the behavior
        discussed in <xref target="I-D.ietf-tls-esni" sectionFormat="of" section="6.1.6"/>
        to securely signal the client to disable ECH.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Encrypted DNS</name>
        <t>A common usage pattern for certain types of IoT devices (e.g.,
        light bulb) is for it to "call home" to a service that resides on the
        public Internet, where that service is referenced through a domain
        name (A or AAAA record). As discussed in "Manufacturer Usage
        Description Specification" <xref target="RFC8520" format="default"/>,
        these devices tend to require access to very few sites. Thus, all
        other access should be considered suspect. This technique complements
        MUD policy enforcement at the TLS level by ensuring that DNS queries
        are monitored and filtered, thereby enhancing overall security. If an
        IoT device is pre-configured to use a DNS resolver not signaled by the
        network, the MUD policy enforcement point is moved to that resolver,
        which cannot enforce the MUD policy based on domain names (<xref
        target="RFC8520" sectionFormat="of" section="8"/>). If the DNS query
        is not accessible for inspection, it becomes quite difficult for the
        infrastructure to detect any issues. Therefore, the use of a DNS
        resolver that is not signaled by the network is generally incompatible
        with MUD. A network-designated DoH/DoT server is necessary to allow
        MUD policy enforcement on the local network, for example, using the
        techniques specified in DNR <xref target="RFC9463" format="default">
        </xref> and DDR <xref target="RFC9462" format="default"/>.</t>
      </section>
    </section>
    <section anchor="YANG" numbered="true" toc="default">
      <name>(D)TLS Profile of an IoT device</name>
      <t>This document specifies a YANG module that represents the (D)TLS
      profile. This YANG module provides a means to characterize the (D)TLS
      traffic profile of a device. Network security services can use these
      profiles to permit conformant traffic or to deny traffic from devices
      that deviates from it. This module uses the cryptographic types defined
      in <xref target="RFC9640" format="default"/>. See <xref target="RFC7925" format="default"/> for (D)TLS 1.2 and <xref target="I-D.ietf-uta-tls13-iot-profile" format="default"/> for DTLS 1.3
      recommendations related to IoT devices, and <xref target="RFC9325" format="default"/> for additional (D)TLS 1.2 recommendations.</t>
      <t>A companion YANG module is defined to include a collection of (D)TLS
      parameters and (D)TLS versions maintained by IANA: "iana-tls-profile"
      (<xref target="yang-iana" format="default"/>).</t>
      <t>The (D)TLS parameters in each (D)TLS profile include the
      following:</t>
      <ul spacing="normal">
        <li>
          <t>Profile name</t>
        </li>
        <li>
          <t>(D)TLS versions supported by the IoT device.</t>
        </li>
        <li>
          <t>List of supported cipher suites (<xref target="RFC8446" sectionFormat="of" section="11"/>). For (D)TLS 1.2, <xref target="RFC7925" format="default"/> recommends Authenticated Encryption with Associated Data (AEAD) ciphers for IoT
          devices.</t>
        </li>
        <li>
          <t>List of supported extension types.</t>
        </li>
        <li>
          <t>List of trust anchor certificates used by the IoT device. If the
          server certificate is signed by one of the trust anchors, the
          middlebox continues with the connection as normal. Otherwise, the
          middlebox will react as if the server certificate validation has
          failed and takes appropriate action (e.g, blocks the (D)TLS session).
          An IoT device can use a private trust anchor to validate a server's
          certificate (e.g., the private trust anchor can be preloaded at
          manufacturing time on the IoT device and the IoT device fetches the
          firmware image from the firmware server whose certificate is signed
          by the private CA). This empowers the middlebox to reject TLS
          sessions to servers that the IoT device does not trust.</t>
        </li>
        <li>
          <t>List of pre-shared key exchange modes.</t>
        </li>
        <li>
          <t>List of named groups (DHE or ECDHE) supported by the client.</t>
        </li>
        <li>
          <t>List of signature algorithms the client can validate in X.509
          server certificates.</t>
        </li>
        <li>
          <t>List of signature algorithms the client is willing to accept for
          the CertificateVerify message (<xref target="RFC8446"
          sectionFormat="of" section="4.2.3"/>). For example, a TLS client
          implementation can support different sets of algorithms for
          certificates, and it can signal the capabilities in the
          "signature_algorithms_cert" and "signature_algorithms"
          extensions.</t>
        </li>
        <li>
          <t>List of supported application protocols (e.g., h3, h2, http/1.1
          etc.).</t>
        </li>
        <li>
          <t>List of certificate compression algorithms (defined in <xref target="RFC8879" format="default"/>).</t>
        </li>
        <li>
          <t>List of the distinguished names <xref target="X501" format="default"/> of
          acceptable certificate authorities, represented in DER-encoded
          format <xref target="X690" format="default"> </xref> (defined in <xref target="RFC8446" sectionFormat="of" section="4.2.4"/>).</t>
        </li>
      </ul>
      <t><xref target="RFC8701" format="default">GREASE</xref> defines a mechanism for TLS
      peers to send random values on TLS parameters to ensure future
      extensibility of TLS extensions. Similar random values might be extended
      to other TLS parameters. Thus, the (D)TLS profile parameters defined in
      the YANG module by this document <bcp14>MUST NOT</bcp14> include the GREASE values for
      extension types, named groups, signature algorithms, (D)TLS versions,
      pre-shared key exchange modes, cipher suites, and any other TLS
      parameters defined in future RFCs.</t>
      <t>The (D)TLS profile does not include parameters like compression
      methods for data compression. <xref target="RFC9325" format="default"/> recommends
      disabling TLS-level compression to prevent compression-related attacks.
      In TLS 1.3, only the "null" compression method is allowed (<xref target="RFC8446" sectionFormat="of" section="4.1.2"/>).</t>
      <section numbered="true" toc="default">
        <name>Tree Structure of the (D)TLS Profile Extension to the ACL YANG Module</name>
        <t>This document augments the "ietf-acl" ACL YANG module defined in
        <xref target="RFC8519" format="default"/> for signaling the IoT device (D)TLS
        profile. This document defines the YANG module "ietf-acl-tls". The
        meaning of the symbols in the YANG tree diagram are defined in <xref target="RFC8340" format="default"/> and it has the following tree structure:</t>
        <sourcecode name="" type="yangtree"><![CDATA[
module: ietf-acl-tls
  augment /acl:acls/acl:acl/acl:aces/acl:ace/acl:matches:
    +--rw client-profiles {match-on-tls-dtls}?
       +--rw tls-dtls-profile* [name]
          +--rw name                           string
          +--rw supported-tls-version*        ianatp:tls-version
          +--rw supported-dtls-version*       ianatp:dtls-version
          +--rw cipher-suite*                 ianatp:cipher-algorithm
          +--rw extension-type*
          |       ianatp:extension-type
          +--rw accept-list-ta-cert*
          |       ct:trust-anchor-cert-cms
          +--rw psk-key-exchange-mode*
          |       ianatp:psk-key-exchange-mode
          |       {tls13 or dtls13}?
          +--rw supported-groups*
          |       ianatp:supported-group
          +--rw signature-algorithm-cert*
          |       ianatp:signature-algorithm
          |       {tls13 or dtls13}?
          +--rw signature-algorithm*
          |       ianatp:signature-algorithm
          +--rw application-protocol*
          |       ianatp:application-protocol
          +--rw cert-compression-algorithm*
          |       ianatp:cert-compression-algorithm
          |       {tls13 or dtls13}?
          +--rw certificate-authorities*
                  certificate-authority
                  {tls13 or dtls13}?
]]></sourcecode>
      </section>
      <section anchor="YANG2" numbered="true" toc="default">
        <name>The (D)TLS Profile Extension to the ACL YANG Module</name>
        <sourcecode name="ietf-acl-tls@2025-04-18.yang" type="yang" markers="true"><![CDATA[
module ietf-acl-tls {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-acl-tls";
  prefix acl-tls;

  import iana-tls-profile {
    prefix ianatp;
    reference
      "RFC 9761: Manufacturer Usage Description (MUD) for TLS and
                 DTLS Profiles for Internet of Things (IoT) Devices";
  }
  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }
  import ietf-access-control-list {
    prefix acl;
    reference
      "RFC 8519: YANG Data Model for Network Access
                 Control Lists (ACLs)";
  }

  organization
    "IETF OPSAWG (Operations and Management Area Working Group)";
  contact
    "WG Web: <https://datatracker.ietf.org/wg/opsawg/>
     WG List: opsawg@ietf.org

     Author: Tirumaleswar Reddy.K
             kondtir@gmail.com

     Author: Dan Wing
             danwing@gmail.com

     Author: Blake Anderson
             blake.anderson@cisco.com
     
    ";
  description
    "This YANG module defines a component that augments the
     IETF description of an access list to allow (D)TLS profiles
     as matching criteria.

     Copyright (c) 2025 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9761; see
     the RFC itself for full legal notices.";

  revision 2025-04-18 {
    description
      "Initial revision.";
    reference
      "RFC 9761: Manufacturer Usage Description (MUD) for TLS and
                 DTLS Profiles for Internet of Things (IoT) Devices";
  }

  feature tls12 {
    description
      "TLS Protocol Version 1.2 is supported.";
    reference
      "RFC 5246: The Transport Layer Security (TLS) Protocol
                 Version 1.2";
  }

  feature tls13 {
    description
      "TLS Protocol Version 1.3 is supported.";
    reference
      "RFC 8446: The Transport Layer Security (TLS) Protocol
                 Version 1.3";
  }

  feature dtls12 {
    description
      "DTLS Protocol Version 1.2 is supported.";
    reference
      "RFC 6347: Datagram Transport Layer Security
                 Version 1.2";
  }

  feature dtls13 {
    description
      "DTLS Protocol Version 1.3 is supported.";
    reference
      "RFC 9147: Datagram Transport Layer Security 1.3";
  }

  feature match-on-tls-dtls {
    description
      "The networking device can support matching on
       (D)TLS parameters.";
  }

  typedef spki-pin-set {
    type binary;
    description
      "Subject Public Key Info pin set as discussed in
       Section 2.4 of RFC 7469.";
  }

  typedef certificate-authority {
    type string;
    description
      "Distinguished Name of Certificate authority as discussed
       in Section 4.2.4 of RFC 8446.";
  }

  augment "/acl:acls/acl:acl/acl:aces/acl:ace/acl:matches" {
    if-feature "match-on-tls-dtls";
    description
      "(D)TLS specific matches.";
    container client-profiles {
      description
        "A grouping for (D)TLS profiles.";
      list tls-dtls-profile {
        key "name";
        description
          "A list of (D)TLS version profiles supported by
           the client.";
        leaf name {
          type string {
            length "1..64";
          }
          description
            "The name of (D)TLS profile; space and special
             characters are not allowed.";
        }
        leaf-list supported-tls-version {
          type ianatp:tls-version;
          description
            "TLS versions supported by the client.";
        }
        leaf-list supported-dtls-version {
          type ianatp:dtls-version;
          description
            "DTLS versions supported by the client.";
        }
        leaf-list cipher-suite {
          type ianatp:cipher-algorithm;
          description
            "A list of cipher suites supported by the client.";
        }
        leaf-list extension-type {
          type ianatp:extension-type;
          description
            "A list of Extension Types supported by the client.";
        }
        leaf-list accept-list-ta-cert {
          type ct:trust-anchor-cert-cms;
          description
            "A list of trust anchor certificates used by the
             client.";
        }
        leaf-list psk-key-exchange-mode {
          if-feature "tls13 or dtls13";
          type ianatp:psk-key-exchange-mode;
          description
            "pre-shared key exchange modes.";
        }
        leaf-list supported-group {
          type ianatp:supported-group;
          description
            "A list of named groups supported by the client.";
        }
        leaf-list signature-algorithm-cert {
          if-feature "tls13 or dtls13";
          type ianatp:signature-algorithm;
          description
            "A list signature algorithms the client can validate
             in X.509 certificates.";
        }
        leaf-list signature-algorithm {
          type ianatp:signature-algorithm;
          description
            "A list signature algorithms the client can validate
             in the CertificateVerify message.";
        }
        leaf-list application-protocol {
          type ianatp:application-protocol;
          description
            "A list application protocols supported by the client.";
        }
        leaf-list cert-compression-algorithm {
          if-feature "tls13 or dtls13";
          type ianatp:cert-compression-algorithm;
          description
            "A list certificate compression algorithms
             supported by the client.";
        }
        leaf-list certificate-authorities {
          if-feature "tls13 or dtls13";
          type certificate-authority;
          description
            "A list of the distinguished names of certificate
             authorities acceptable to the client.";
        }
      }
    }
  }
}
]]></sourcecode>
      </section>
      <section anchor="yang-iana" numbered="true" toc="default">
        <name>IANA (D)TLS Profile YANG Module</name>

<t>The TLS and DTLS IANA registries are available from <eref target="https://www.iana.org/assignments/tls-parameters" brackets="angle" />
        and <eref target="https://www.iana.org/assignments/tls-extensiontype-values" brackets="angle" />.
        Changes to TLS- and DTLS-related IANA registries are discussed in <xref target="RFC8447" format="default"/>.</t>
     
	<t>The values for all the parameters in the "iana-tls-profile" YANG
        module are defined in the TLS and DTLS IANA registries excluding the
        tls-version, dtls-version, spki-pin-set, and certificate-authority
        parameters. The values of spki-pin-set and certificate-authority
        parameters will be specific to the IoT device.</t>
        <t>The TLS and DTLS IANA registries do not maintain (D)TLS version
        numbers. In (D)TLS 1.2 and below, the "legacy_version" field in the
        ClientHello message is used for version negotiation. However, in
        (D)TLS 1.3, the "supported_versions" extension is used by the client
        to indicate which versions of (D)TLS it supports. TLS 1.3 ClientHello
        messages are identified as having a "legacy_version" of 0x0303 and a
        "supported_versions" extension present with 0x0304 as the highest
        version. DTLS 1.3 ClientHello messages are identified as having a
        "legacy_version" of 0xfefd and a "supported_versions" extension
        present with 0x0304 as the highest version.</t>
        <t>In order to ease updating the "iana-tls-profile" YANG module with
        future (D)TLS versions, new (D)TLS version registries are defined in
        <xref target="tls-registry" format="default"/> and <xref target="dtls-registry" format="default"/>. Whenever a new (D)TLS protocol version
        is defined, the registry will be updated using expert review; the
        "iana-tls-profile" YANG module will be automatically updated by
        IANA.</t>

        <t>Implementers or users of this specification must refer to the
        IANA-maintained "iana-tls-profile" YANG module available at <eref target="https://www.iana.org/assignments/yang-parameters" brackets="angle"/>.</t>
        <t>The initial version of the "iana-tls-profile" YANG module is
        defined as follows:</t>

        <sourcecode name="iana-tls-profile@2025-04-18.yang" type="yang" markers="true"><![CDATA[
module iana-tls-profile {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:iana-tls-profile";
  prefix ianatp;

  organization
    "IANA";
  contact
    "        Internet Assigned Numbers Authority

     Postal: ICANN
             12025 Waterfront Drive, Suite 300
             Los Angeles, CA  90094-2536
             United States

     Tel:    +1 310 301 5800
     Email:  iana@iana.org>";
  description
    "This module contains the YANG definition for the (D)TLS profile.

     Copyright (c) 2025 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     All revisions of IETF and IANA published modules can be found
     at the YANG Parameters registry
     (https://www.iana.org/assignments/yang-parameters).

     The initial version of this YANG module is part of RFC 9761;
     see the RFC itself for full legal notices.

     The latest version of this YANG module is available at
     https://www.iana.org/assignments/yang-parameters.";

  revision 2025-04-18 {
    description
      "Initial revision.";
    reference
      "RFC 9761: Manufacturer Usage Description (MUD) for TLS and 
                 DTLS Profiles for Internet of Things (IoT) Devices";
  }

  typedef extension-type {
    type uint16;
    description
      "Extension type in the TLS ExtensionType Values registry as 
       defined in Section 7 of RFC 8447.";
  }

  typedef supported-group {
    type uint16;
    description
      "Supported Group in the TLS Supported Groups registry as 
       defined in Section 9 of RFC 8447.";
  }

  typedef signature-algorithm {
    type uint16;
    description
      "Signature algorithm in the TLS SignatureScheme registry as 
       defined in Section 11 of RFC 8446.";
  }

  typedef psk-key-exchange-mode {
    type uint8;
    description
      "Pre-shared key exchange mode in the TLS PskKeyExchangeMode 
       registry as defined in Section 11 of RFC 8446.";
  }

  typedef application-protocol {
    type string;
    description
      "Application-Layer Protocol Negotiation (ALPN) Protocol ID 
       registry as defined in Section 6 of RFC 7301.";
  }

  typedef cert-compression-algorithm {
    type uint16;
    description
      "Certificate compression algorithm in TLS Certificate 
       Compression Algorithm IDs registry as defined in 
       Section 7.3 of RFC 8879.";
  }

  typedef cipher-algorithm {
    type uint16;
    description
      "Cipher suite in TLS Cipher Suites registry 
       as discussed in Section 11 of RFC 8446.";
  }

  typedef tls-version {
    type enumeration {
      enum tls12 {
        value 1;
        description
          "TLS Protocol Version 1.2. 

           TLS 1.2 ClientHello contains
           0x0303 in 'legacy_version'.";
        reference
          "RFC 5246: The Transport Layer Security (TLS) Protocol
                     Version 1.2";
      }
      enum tls13 {
        value 2;
        description
          "TLS Protocol Version 1.3. 

           TLS 1.3 ClientHello contains a 
           supported_versions extension with 0x0304 
           contained in its body and the ClientHello contains
           0x0303 in 'legacy_version'.";
        reference
          "RFC 8446: The Transport Layer Security (TLS) Protocol
                     Version 1.3";
      }
    }
    description
      "Indicates the TLS version.";
  }

  typedef dtls-version {
    type enumeration {
      enum dtls12 {
        value 1;
        description
          "DTLS Protocol Version 1.2.

           DTLS 1.2 ClientHello contains
           0xfefd in 'legacy_version'.";
        reference
          "RFC 6347: Datagram Transport Layer Security 1.2";
      }
      enum dtls13 {
        value 2;
        description
          "DTLS Protocol Version 1.3. 

           DTLS 1.3 ClientHello contains a 
           supported_versions extension with 0x0304 
           contained in its body and the ClientHello contains
           0xfefd in 'legacy_version'.";
        reference
          "RFC 9147: Datagram Transport Layer Security 1.3";
      }
    }
    description
      "Indicates the DTLS version.";
  }
}
]]></sourcecode>
      </section>
      <section anchor="mud-dtls-extension" numbered="true" toc="default">
        <name>MUD (D)TLS Profile Extension</name>
        <t>This document augments the "ietf-mud" MUD YANG module to indicate
        whether the device supports (D)TLS profile. If the "ietf-mud-tls"
        extension is supported by the device, MUD file is assumed to implement
        the "match-on-tls-dtls" ACL model feature defined in this
        specification. Furthermore, only "accept" or "drop" actions <bcp14>SHOULD</bcp14> be
        included with the (D)TLS profile similar to the actions allowed in
        <xref target="RFC8520" sectionFormat="of" section="2"/>.</t>
        <t>This document defines the YANG module "ietf-mud-tls", which has the
        following tree structure:</t>

        <sourcecode name="" type="yangtree"><![CDATA[
module: ietf-mud-tls
  augment /ietf-mud:mud:
    +--rw is-tls-dtls-profile-supported?   boolean
]]></sourcecode>

        <t>The model is defined as follows:</t>
        <sourcecode name="ietf-mud-tls@2025-04-18.yang" type="yang" markers="true"><![CDATA[
module ietf-mud-tls {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-mud-tls";
  prefix ietf-mud-tls;

  import ietf-mud {
    prefix ietf-mud;
    reference
      "RFC 8520: Manufacturer Usage Description Specification";
  }

  organization
    "IETF OPSAWG (Operations and Management Area Working Group)";
  contact
    "WG Web: <https://datatracker.ietf.org/wg/opsawg/>
     WG List: opsawg@ietf.org

     Author: Tirumaleswar Reddy.K
             kondtir@gmail.com

     Author: Dan Wing
             danwing@gmail.com

     Author: Blake Anderson
             blake.anderson@cisco.com
     
    ";
  description
    "Extension to a MUD module to indicate (D)TLS
     profile support.

     Copyright (c) 2025 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9761; see
     the RFC itself for full legal notices.";

  revision 2025-04-18 {
    description
      "Initial revision.";
    reference
      "RFC 9761: Manufacturer Usage Description (MUD) for TLS and
                 DTLS Profiles for Internet of Things (IoT)
                 Devices";
  }

  augment "/ietf-mud:mud" {
    description
      "This adds an extension for a manufacturer
       to indicate whether the (D)TLS profile is
       supported by a device.";
    leaf is-tls-dtls-profile-supported {
      type boolean;
      default "false";
      description
        "This value will equal 'true' if a device supports
         (D)TLS profile.";
    }
  }
}
]]></sourcecode>
      </section>
    </section>
    <section anchor="processing" numbered="true" toc="default">
      <name>Processing of the MUD (D)TLS Profile</name>
<t>The following text outlines the rules for a network security service
      (e.g., firewall) to follow to process the MUD (D)TLS Profile so as to
      avoid ossification:</t>
      <ul spacing="normal">
        <li>
          <t>If the (D)TLS parameter observed in a (D)TLS session is not
          specified in the MUD (D)TLS profile and the parameter is recognized
          by the firewall, it can identify unexpected (D)TLS usage, which can
          indicate the presence of unauthorized software or malware on an
          endpoint. The firewall can take several actions, such as blocking the
          (D)TLS session or raising an alert to quarantine and remediate the
          compromised device. For example, if the cipher suite
          TLS_RSA_WITH_AES_128_CBC_SHA in the ClientHello message is not
          specified in the MUD (D)TLS profile and the cipher suite is
          recognized by the firewall, it can identify unexpected TLS
          usage.</t>
        </li>
        <li>
          <t>If the (D)TLS parameter observed in a (D)TLS session is not
          specified in the MUD (D)TLS profile and the (D)TLS parameter is not
          recognized by the firewall, it can ignore the unrecognized parameter
          and the correct behavior is not to block the (D)TLS session. The
          behavior is functionally equivalent to the compliant TLS middlebox
          description in <xref target="RFC8446" sectionFormat="of" section="9.3"/> to
          ignore all unrecognized cipher suites, extensions, and other
          parameters. For example, if the cipher suite
          TLS_CHACHA20_POLY1305_SHA256 in the ClientHello message is not
          specified in the MUD (D)TLS profile and the cipher suite is not
          recognized by the firewall, it can ignore the unrecognized cipher
          suite. This rule also ensures that the network security service will
          ignore the GREASE values advertised by TLS peers and interoperate
          with the implementations advertising GREASE values.</t>
        </li>
        <li>
          <t>Deployments update at different rates, so an updated MUD (D)TLS
          profile may support newer parameters. If the firewall does not
          recognize the newer parameters, an alert should be triggered to the
          firewall vendor and the IoT device owner or administrator. A
          firewall must be readily updatable so that when new parameters in
          the MUD (D)TLS profile are discovered that are not recognized by the
          firewall, it can be updated quickly. Most importantly, if the
          firewall is not readily updatable, its protection efficacy to
          identify emerging malware will decrease with time. For example, if
          the cipher suite TLS_AES_128_CCM_8_SHA256 specified in the MUD
          (D)TLS profile is not recognized by the firewall, an alert will be
          triggered. Similarly, if the (D)TLS version specified in the MUD
          file is not recognized by the firewall, an alert will be
          triggered.</t>
        </li>
        <li>
          <t>If the MUD (D)TLS profile includes any parameters that are
          susceptible to attacks (e.g., weaker cryptographic parameters), an
          alert <bcp14>MUST</bcp14> be triggered to the firewall vendor and the IoT device
          owner or administrator.</t>
        </li>
      </ul>
    </section>
    <section anchor="Example" numbered="true" toc="default">
      <name>MUD File Example</name>
      <t>The example below contains (D)TLS profile parameters for an IoT device
      used to reach servers listening on port 443 using TCP transport. JSON
      encoding of YANG-modeled data <xref target="RFC7951" format="default"/> is used to
      illustrate the example.</t>

      <sourcecode name="" type=""><![CDATA[{
   "ietf-mud:mud": {
     "mud-version": 1,
      "mud-url": "https://example.com/IoTDevice",
      "last-update": "2024-08-05T03:56:40.105+10:00",
      "cache-validity": 100,
      "extensions": [
           "ietf-mud-tls"
       ],
      "ietf-mud-tls:is-tls-dtls-profile-supported": "true",
      "is-supported": true,
      "systeminfo": "IoT device name",
      "from-device-policy": {
         "access-lists": {
           "access-list": [
             {
               "name": "mud-7500-profile"
             }
           ]
         }
      },
     "ietf-access-control-list:acls": {
       "acl": [
         {
           "name": "mud-7500-profile",
           "type": "ipv6-acl-type",
           "aces": {
             "ace": [
               {
                 "name": "cl0-frdev",
                 "matches": {
                   "ipv6": {
                     "protocol": 6
                   },
                   "tcp": {
                     "ietf-mud:direction-initiated": "from-device",
                     "destination-port": {
                       "operator": "eq",
                       "port": 443
                     }
                   },
                   "ietf-acl-tls:client-profile" : {
                     "tls-dtls-profiles" : [
                        {
                           "name" : "profile1",  
                           "supported-tls-versions" : ["tls13"],
                           "cipher-suite" : [4865, 4866],  
                           "extension-types" : [10,11,13,16,24],  
                           "supported-groups" : [29]
                        } 
                      ]
                   },
                   "actions": {
                      "forwarding": "accept"
                   }
               }
            }
          ]
         }
        }
       ]
     }
   }
}
]]></sourcecode>
      <t>The following illustrates the example scenarios for processing the
      above profile:</t>
      <ul spacing="normal">
        <li>
          <t>If the extension type "encrypt_then_mac" (code point 22) <xref target="RFC7366" format="default"/> in the ClientHello message is recognized by
          the firewall, it can identify unexpected TLS usage.</t>
        </li>
        <li>
          <t>If the extension type "token_binding" (code point 24) <xref target="RFC8472" format="default"/> in the MUD (D)TLS profile is not recognized
          by the firewall, it can ignore the unrecognized extension. Because
          the extension type "token_binding" is specified in the profile, an
          alert will be triggered to the firewall vendor and the IoT device
          owner or administrator to notify the firewall is not up-to-date.</t>
        </li>
        <li>
          <t>The two-byte values assigned by IANA for the cipher suites
          TLS_AES_128_GCM_SHA256 and TLS_AES_256_GCM_SHA384 are represented in
          decimal format.</t>
        </li>
      </ul>
    </section>
    <section anchor="ACL" numbered="true" toc="default">
      <name>Software-Based ACLs and ACLs Within a (D)TLS 1.3 Proxy</name>
      <t>While ACL technology is traditionally associated with fixed-length
      bit matching in hardware implementations, such as those found in Ternary Content-Addressable Memory (TCAM),
      the use of ACLs in software, like with iptables, allows for more
      flexible matching criteria, including string matching. In the context of
      MUD (D)TLS profiles, the ability to match binary data and strings is a
      deliberate choice made to leverage the capabilities of software-based
      ACLs. This enables more dynamic and context-sensitive access control,
      which is essential for the intended application of MUD. The DNS
      extension added to ACL in the MUD specification <xref target="RFC8520" format="default"/> also requires software-based ACLs.</t>
      <t>Regarding the use of MUD (D)TLS ACL in a (D)TLS 1.3 proxy, the goal
      is for the proxy to intercept the (D)TLS handshake before applying any
      ACL rules. This implies that MUD (D)TLS ACL matching would need to occur
      after decrypting the encrypted TLS handshake messages within the proxy.
      The proxy would inspect the handshake fields according to the MUD
      profile. 

ACL matching would be performed in two stages: first, by filtering clear-text
TLS handshake message and second, by filtering after decrypting the TLS
handshake messages.</t>
    </section>
    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>Security considerations in <xref target="RFC8520" format="default"/> need to be
      taken into consideration. The middlebox <bcp14>MUST</bcp14> adhere to the invariants
      discussed in <xref target="RFC8446" sectionFormat="of" section="9.3"/> to act as a
      compliant proxy.</t>
      <t>Although it is challenging for malware to mimic the TLS behavior of
      various IoT device types and models from different manufacturers, there
      is still a potential for malicious agents to use similar (D)TLS profile
      parameters as legitimate devices to evade detection. This difficulty
      arises because IoT devices often have distinct (D)TLS profiles between
      models and especially between manufacturers. While malware may find it
      hard to perfectly replicate the TLS behavior across such diverse
      devices, it is not impossible. Malicious agents might manage to use
      (D)TLS profile parameters that resemble those of legitimate devices. The
      feasibility of this depends on the nature of the profile parameters; for
      instance, parameters like certificate authorities are complex to mimic,
      while others, such as signature algorithms, may be easier to replicate.
      The difficulty in mimicking these profiles correlates with the
      specificity of the profiles and the variability in parameters used by
      different devices.</t>
      <t>Network security services should also rely on contextual network data
      (e.g., domain name, IP address, etc.) to detect false negatives. For
      example, network security services filter malicious domain names and
      destination IP addresses with a bad reputation score. Furthermore, in order to
      detect such malicious flows, anomaly detection (deep learning techniques
      on network data) can be used to detect malicious agents using the same
      (D)TLS profile parameters as the legitimate agent on the IoT device. In
      anomaly detection, the main idea is to maintain rigorous learning of
      "normal" behavior and where an "anomaly" (or an attack) is identified
      and categorized based on the knowledge about the normal behavior and a
      deviation from this normal behavior. Network security vendors leverage
      TLS parameters and contextual network data to identify malware (for
      example, see <xref target="EVE" format="default"/>).</t>
      <t>The efficacy of identifying malware in (D)TLS 1.3 flows will be
      significantly reduced without leveraging contextual network data or
      acting as a proxy, as the encryption in (D)TLS 1.3 obscures many of the
      handshake details that could otherwise be used for detection.</t>
      <section numbered="true" toc="default">
        <name>Challenges in Mimicking (D)TLS 1.2 Handshakes for IoT Devices</name>
        <t>(D)TLS 1.2 generally does not require a proxy, as all fields in the
        (D)TLS profile are transmitted in cleartext during the handshake.
        While it is technically possible for an attacker to observe and mimic
        the handshake, an attacker would need to use a domain name and
        destination IP address with a good reputation, obtain certificates
        from the same CAs used by the IoT devices, and evade traffic analysis
        techniques (e.g., <xref target="EVE" format="default"/>, which detects
        malicious patterns in encrypted traffic without decryption). This task
        is particularly challenging because IoT devices often have distinct
        (D)TLS profiles that vary between models and manufacturers. Unlike the
        developers of legitimate applications, malware authors are under
        additional constraints, such as avoiding any noticeable differences on
        the infected devices and the potential for take-down requests
        impacting their server infrastructure (e.g., certificate revocation by
        a CA upon reporting).</t>
      </section>
      <section numbered="true" toc="default">
        <name>Considerations for the "iana-tls-profile" Module</name>
        <t>This section follows the template defined in <xref target="I-D.ietf-netmod-rfc8407bis" sectionFormat="of" section="3.7.1"/>.</t>

<t>The "iana-tls-profile" YANG module defines a data model that is designed to
be accessed via YANG-based management protocols, such as NETCONF <xref
target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>. These protocols have
to use a secure transport layer (e.g., SSH <xref target="RFC4252"/>, TLS <xref
target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and have to use mutual
authentication.</t>

<t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
provides the means to restrict access for particular NETCONF or
RESTCONF users to a preconfigured subset of all available NETCONF or
RESTCONF protocol operations and content.</t>
<t>There are no particularly sensitive writable data nodes.</t>
<t>There are no particularly sensitive readable data nodes.</t>

        <t>This YANG module defines YANG enumerations for a public IANA-
        maintained registry.</t>
        <t>YANG enumerations are not security-sensitive, as they are
        statically defined in the publicly accessible YANG module. IANA <bcp14>MAY</bcp14>
        deprecate and/or obsolete enumerations over time as needed to address
        security issues.</t>
        <t>There are no particularly sensitive RPC or action operations.</t>
<t>The YANG module defines a set of identities, types, and
groupings. These nodes are intended to be reused by other YANG
modules. The module by itself does not expose any data nodes that
are writable, data nodes that contain read-only state, or RPCs.
As such, there are no additional security issues related to
the YANG module that need to be considered.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Considerations for the "ietf-acl-tls" Module</name>
        <t>This section follows the template defined in <xref target="I-D.ietf-netmod-rfc8407bis" sectionFormat="of" section="3.7.1"/>.</t>
<t>The "ietf-acl-tls" YANG module defines a data model that is designed to be
accessed via YANG-based management protocols, such as NETCONF <xref
target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>. These protocols have
to use a secure transport layer (e.g., SSH <xref target="RFC4252"/>, TLS <xref
target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and have to use mutual
authentication.</t>
<t>The Network Configuration Access Control Model (NACM) <xref
target="RFC8341"/> provides the means to restrict access for particular
NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF
or RESTCONF protocol operations and content.</t>


<!--        <t>Please be aware that this YANG module uses groupings from other
        YANG modules that define nodes that may be considered sensitive or
        vulnerable in network environments. Please review the Security
        Considerations for dependent YANG modules for information as to which
        nodes may be considered sensitive or vulnerable in network
        environments.</t>
-->
        <t>There are a number of data nodes defined in this YANG module that are
writable/creatable/deletable (i.e., "config true", which is the
default). All writable data nodes are likely to be reasonably sensitive or
        vulnerable in some network environments. Write
operations (e.g., edit-config) and delete operations to these data
nodes without proper protection or authentication can have a negative
effect on network operations. For instance, the addition or
        removal of references to trusted anchors, (D)TLS versions, cipher
        suites, etc., can dramatically alter the implemented security
        policy. For this reason, the NACM extension "default-deny-write" has
        been set for all data nodes defined in this module.</t>
        <t>Some of the readable data nodes defined in this YANG module may be
        considered sensitive or vulnerable in some network environments. It is
        thus important to control read access (e.g., via get, get-config, or
        notification) to these data nodes. The YANG module will provide
        insights into (D)TLS profiles of the IoT devices, and the privacy
        considerations discussed in <xref target="Privacy" format="default"/> need to be
        taken into account.</t>
<t>There are no particularly sensitive RPC or action operations.</t>
<t>This YANG module uses groupings from other YANG modules that define nodes
that may be considered sensitive or vulnerable in network environments. Refer
to the Security Considerations for dependent YANG modules for information as
to which nodes may be considered sensitive or vulnerable in network
environments.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Considerations for the "ietf-mud-tls" Module</name>
        <t>This section follows the template defined in <xref target="I-D.ietf-netmod-rfc8407bis" sectionFormat="of" section="3.7.1"/>.</t>
<!-- DNE -->
 <t>The "ietf-mud-tls" YANG module defines a data model that is designed to be
 accessed via YANG-based management protocols, such as NETCONF <xref
 target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>. These protocols
 have to use a secure transport layer (e.g., SSH <xref target="RFC4252"/>, TLS
 <xref target="RFC8446"/>, and QUIC <xref target="RFC9000"/>) and have to use
 mutual authentication.</t>
<t>The Network Configuration Access Control Model (NACM) <xref
target="RFC8341"/> provides the means to restrict access for particular
NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF
or RESTCONF protocol operations and content.</t>
<!-- DNE -->
<!--        <t>Please be aware that this YANG module uses groupings from other
        YANG modules that define nodes that may be considered sensitive or
        vulnerable in network environments. Please review the Security
        Considerations for dependent YANG modules for information as to which
        nodes may be considered sensitive or vulnerable in network
        environments.</t> -->
        <t>There are a number of data nodes defined in this YANG module that are
writable/creatable/deletable (i.e., "config true", which is the
default). All writable data nodes are likely to be reasonably sensitive or
        vulnerable in some network environments. Write
operations (e.g., edit-config) and delete operations to these data
nodes without proper protection or authentication can have a negative
effect on network operations. For instance, update that the
        device does not support (D)TLS profile can dramatically alter the
        implemented security policy. For this reason, the NACM extension
        "default-deny-write" has been set for all data nodes defined in this
        module.</t>

<t>There are no particularly sensitive RPC or action operations.</t>

<t>This YANG module uses groupings from other YANG modules that define nodes
that may be considered sensitive or vulnerable in network environments. Refer
to the Security Considerations for dependent YANG modules for information as
to which nodes may be considered sensitive or vulnerable in network
environments.</t>
      </section>
    </section>
    <section anchor="Privacy" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Privacy considerations discussed in <xref target="RFC8520" sectionFormat="of" section="16"/> to not reveal the MUD URL to an attacker need
      to be taken into consideration. The MUD URL can be stored in a Trusted
      Execution Environment (TEE) for secure operation, enhanced data
      security, and prevention of exposure to unauthorized software. The MUD URL
      <bcp14>MUST</bcp14> be encrypted and shared only with the authorized components in the
      network (see Sections <xref target="RFC8520" sectionFormat="bare" section="1.5"/> and <xref target="RFC8520" sectionFormat="bare" section="1.8"/> of <xref target="RFC8520"/>) so that an
      on-path attacker cannot read the MUD URL and identify the IoT device.
      Otherwise, it provides the attacker with guidance on what
      vulnerabilities may be present on the IoT device. Note that while
      protecting the MUD URL is valuable as described above, a compromised IoT
      device may be susceptible to malware performing vulnerability analysis
      (and version mapping) of the legitimate software located in memory or on
      non-volatile storage (e.g., disk, NVRAM). However, the malware on the
      IoT device is intended to be blocked from establishing a (D)TLS
      connection with the C&amp;C server to reveal this information because
      the connection would be blocked by the network security service
      supporting this specification.</t>
      <t>Full handshake inspection (<xref target="full" format="default"/>) requires a
      (D)TLS proxy device that needs to decrypt traffic between the IoT
      device and its server(s). There is a tradeoff between privacy of the
      data carried inside (D)TLS (for example, personally identifiable
      information and protected health information especially) and efficacy of endpoint
      security. The use of (D)TLS proxies is <bcp14>NOT RECOMMENDED</bcp14> whenever
      possible. For example, an enterprise firewall administrator can
      configure the middlebox to bypass (D)TLS proxy functionality or payload
      inspection for connections destined to specific well-known services.
      Alternatively, an IoT device could be configured to reject all sessions
      that involve proxy servers to specific well-known services. In addition,
      mechanisms based on object security can be used by IoT devices to enable
      end-to-end security and the middlebox will not have any access to the
      packet data. For example, Object Security for Constrained RESTful
      Environments (OSCORE) <xref target="RFC8613" format="default"/> is a proposal that
      protects Constrained Application Protocol (CoAP) messages by wrapping them in the CBOR Object Signing and Encryption (COSE) format <xref target="RFC9052" format="default"/>.</t>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>(D)TLS Profile YANG Modules</name>

        <t>IANA has registered the following URIs in the
        "ns" subregistry within the "IETF XML Registry" <xref target="RFC3688" format="default"/>: </t>

	<dl spacing="compact" newline="false">
	  <dt>URI:</dt><dd>urn:ietf:params:xml:ns:yang:iana-tls-profile</dd>
	  <dt>Registrant Contact:</dt><dd>IANA.</dd>
	  <dt>XML:</dt><dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl spacing="compact" newline="false">
	  <dt>URI:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-acl-tls</dd>
	  <dt>Registrant Contact:</dt><dd>IESG.</dd>
	  <dt>XML:</dt><dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
	<dl spacing="compact" newline="false">
	  <dt>URI:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-mud-tls</dd>
	  <dt>Registrant Contact:</dt><dd>IESG.</dd>
	  <dt>XML:</dt><dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>

        <t>IANA has created an IANA-maintained YANG module called
        "iana-tls-profile" based on the contents of <xref target="yang-iana" format="default"/>, which allows for new (D)TLS parameters
        and (D)TLS versions to be added to "client-profile".</t>
        <t>IANA has registered the following YANG modules
        in the "YANG Module Names" registry <xref target="RFC6020" format="default"/>
        of the "YANG Parameters" registry group.</t>

	<dl spacing="compact" newline="false">
	  <dt>Name:</dt><dd>iana-tls-profile</dd>
	  <dt>Namespace:</dt><dd>urn:ietf:params:xml:ns:yang:iana-tls-profile</dd>
	  <dt>Maintained by IANA:</dt><dd>Y</dd>
	  <dt>Prefix:</dt><dd>ianatp</dd>
	  <dt>Reference:</dt><dd>RFC 9761</dd>
	</dl>
	<dl spacing="compact" newline="false">
	  <dt>Name:</dt><dd>ietf-acl-tls</dd>
	  <dt>Namespace:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-acl-tls</dd>
	  <dt>Maintained by IANA:</dt><dd>N</dd>
	  <dt>Prefix:</dt><dd>ietf-acl-tls</dd>
	  <dt>Reference:</dt><dd>RFC 9761</dd>
	</dl>
	<dl spacing="compact" newline="false">
	  <dt>Name:</dt><dd>ietf-mud-tls</dd>
	  <dt>Namespace:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-mud-tls</dd>
	  <dt>Maintained by IANA:</dt><dd>N</dd>
	  <dt>Prefix:</dt><dd>ietf-mud-tls</dd>
	  <dt>Reference:</dt><dd>RFC 9761</dd>
      </dl>
      </section>
      <section anchor="iana-tls" numbered="true" toc="default">
        <name>Considerations for the iana-tls-profile Module</name>
        <t>IANA has created the initial version of the
        IANA-maintained YANG module called "iana-tls-profile" based on the
        contents of <xref target="yang-iana" format="default"/>, which will allow for new
        (D)TLS parameters and (D)TLS versions to be added. IANA is requested
        to add this note:</t>
        <ul spacing="normal">
          <li>
            <t>tls-version and dtls-version values must not be directly added
            to the iana-tls-profile YANG module. Instead, they must be
            added to the "ACL TLS Version Codes" and "ACL DTLS
            Version Codes" registries (respectively), provided the new (D)TLS version has been
            standardized by the IETF. It allows a new (D)TLS version to be added
            to the "iana-tls-profile" YANG module.</t>
          </li>
          <li>
            <t>(D)TLS parameters must not be directly added to the
            iana-tls-profile YANG module. They must instead be added to the
            "ACL (D)TLS Parameters" registry if the new (D)TLS parameters can
            be used by a middlebox to identify a MUD non-compliant (D)TLS
            behavior. It allows new (D)TLS parameters to be added to the
            "iana-tls-profile" YANG module.</t>
          </li>
        </ul>
        <t>When a "tls-version" or "dtls-version" value is added
        to the "ACL TLS Version Codes" or "ACL DTLS Version Codes" registry (respectively), a
        new "enum" statement must be added to the iana-tls-profile YANG
        module. The following "enum" statement, and substatements thereof,
        should be defined:</t>
        <dl newline="false" spacing="normal" indent="15">
          <dt>"enum":</dt>
          <dd>Replicates the label from the
            registry.</dd>
          <dt>"value":</dt>
          <dd>Contains the IANA-assigned value
            corresponding to the "tls-version" or "dtls-version".</dd>
          <dt>"description":</dt>
          <dd>Replicates the description
            from the registry.</dd>
          <dt>"reference":</dt>
          <dd>RFC YYYY: &lt;Title of the
            RFC&gt;, where YYYY is the RFC that added the
            "tls-version" or "dtls-version".</dd>
        </dl>
        <t>When a (D)TLS parameter is added to the "ACL (D)TLS Parameters"
        registry, a new "type" statement must be added to the iana-tls-profile
        YANG module. The following "type" statement, and substatements
        thereof, should be defined:</t>
        <dl newline="false" spacing="normal" indent="15">
          <dt>"derived type":</dt>
          <dd>Replicates the parameter
            name from the registry.</dd>
          <dt>"built-in type":</dt>
          <dd>Contains the built-in
            YANG type.</dd>
          <dt>"description":</dt>
          <dd>Replicates the description
            from the registry.</dd>
        </dl>
        <t>When the iana-tls-profile YANG module is updated, a new "revision"
        statement must be added in front of the existing revision
        statements.</t>
        <t>IANA has added this note to "ACL TLS Version Codes", "ACL
        DTLS Version Codes", and "ACL (D)TLS Parameters" registries:</t>

        <t indent="3">When this registry is modified, the YANG module
            "iana-tls-profile" must be updated as defined in [RFC9761].</t>

      </section>
      <section anchor="tls-registry" numbered="true" toc="default">
        <name>ACL TLS Version Registry</name>
        <t>IANA has created a new registry titled "ACL TLS Version
        Codes". Codes in this registry are used as valid values of
        "tls-version" parameter. Further assignments are to be made through
        Expert Review <xref target="RFC8126" format="default"/>. Experts must ensure that
        the TLS protocol version in a new registration is one that has been
        standardized by the IETF. It is expected that the registry will be
        updated infrequently, primarily when a new TLS version is standardized
        by the IETF.</t>

	<table>
	  <name></name>
	  <thead>
	    <tr>
	      <th>Value</th>
	      <th>Label</th>
	      <th>Description</th>
	      <th>Reference</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td>1</td>
	      <td>tls12</td>
	      <td>TLS Version 1.2</td>
	      <td><xref target="RFC5246"/></td>
	    </tr>
	    <tr>
	      <td>2</td>
	      <td>tls13</td>
	      <td>TLS Version 1.3</td>
	      <td><xref target="RFC8446"/></td>
	    </tr>
	  </tbody>
	  </table>

      </section>
      <section anchor="dtls-registry" numbered="true" toc="default">
        <name>ACL DTLS Version Registry</name>
        <t>IANA has created a new registry titled "ACL DTLS Version
        Codes". Codes in this registry are used as valid values of
        "dtls-version" parameter. Further assignments are to be made through
        Expert Review <xref target="RFC8126" format="default"/>. Experts must ensure that
        the DTLS protocol version in a new registration is one that has been
        standardized by the IETF. It is expected that the registry will be
        updated infrequently, primarily when a new DTLS version is
        standardized by the IETF.</t>

	<table>
	  <name></name>
	  <thead>
	    <tr>
	      <th>Value</th>
	      <th>Label</th>
	      <th>Description</th>
	      <th>Reference</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td>1</td>
	      <td>dtls12</td>
	      <td>DTLS Version 1.2</td>
	      <td><xref target="RFC6347"/></td>
	    </tr>
	    <tr>
	      <td>2</td>
	      <td>dtls13</td>
	      <td>DTLS Version 1.3</td>
	      <td><xref target="RFC9147"/></td>
	    </tr>
	  </tbody>
	  </table>

      </section>
      <section numbered="true" toc="default">
        <name>ACL (D)TLS Parameters Registry</name>
        <t>IANA has created a new registry titled "ACL (D)TLS
        Parameters".</t>
        <t>The values for all the (D)TLS parameters in the registry are
        defined in the TLS and DTLS IANA registries (<eref target="https://www.iana.org/assignments/tls-parameters/"/>
        and <eref target="https://www.iana.org/assignments/tls-extensiontype-values/"/>)
        excluding the tls-version and dtls-version parameters. Further
        assignments are to be made through Expert Review <xref target="RFC8126" format="default"/>. Experts must ensure that the (D)TLS
        parameter in a new registration is one that has been standardized by
        the IETF. The registry is expected to be updated periodically,
        primarily when a new (D)TLS parameter is standardized by the IETF. The
        registry has been populated with the following initial parameters:</t>

	<table>
	  <name></name>
	  <thead>
	    <tr>
	      <th>Parameter Name</th>
              <th>YANG Type</th>
              <th>JSON Type</th>
	      <th>Description</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td>extension-type</td>
              <td>uint16</td>
	      <td>Number</td>
	      <td>Extension type</td>
	    </tr>
	    <tr>
	      <td>supported-group</td>
              <td>uint16</td>
	      <td>Number</td>
	      <td>Supported group</td>
	    </tr>
	    <tr>
	      <td>signature-algorithm</td>
	      <td>uint16</td>
	      <td>Number</td>
	      <td>Signature algorithm</td>
	    </tr>
	    <tr>
	      <td>psk-key-exchange-mode</td>
	      <td>uint8</td>
	      <td>Number</td>
	      <td>Pre-shared key exchange mode</td>
	    </tr>
	    <tr>
	      <td>application-protocol</td>
	      <td>string</td>
	      <td>String</td>
	      <td>Application protocol</td>
	    </tr>
	    <tr>
	      <td>cert-compression-algorithm</td>
	      <td>uint16</td>
	      <td>Number</td>
	      <td>Certificate compression algorithm</td>
            </tr>
	    <tr>
	      <td>cipher-algorithm</td>
              <td>uint16</td>
	      <td>Number</td>
	      <td>Cipher suite</td>
	    </tr>
	    <tr>
	      <td>tls-version</td>
              <td>enumeration</td>
	      <td>String</td>
	      <td>TLS version</td>
	    </tr>
	    <tr>
	      <td>dtls-version</td>
	      <td>enumeration</td>
	      <td>String</td>
	      <td>DTLS version</td>
            </tr>
	  </tbody>
	</table>

      </section>
      <section numbered="true" toc="default">
        <name>MUD Extensions Registry</name>
<!-- Note to PE/RE: XML for references to the IANA registries mentionend
in this section.

"MUD Extensions" registry in the "Manufacturer Usage Description (MUD)" registry group

  <reference anchor="" target="https://www.iana.org/assignments/mud">
    <front>
      <title>MUD Extensions</title>
      <author>
        <organization>IANA</organization>
      </author>
    </front>
  </reference> 

-->
        <t>IANA has created a new MUD Extension Name "ietf-mud-tls"
        in the "MUD Extensions" IANA registry <eref target="https://www.iana.org/assignments/mud" brackets="angle"/>.</t>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-tls-esni" to="TLS-ESNI"/>
    <displayreference target="I-D.ietf-uta-tls13-iot-profile" to="IoT-PROFILE"/>
    <displayreference target="I-D.ietf-netmod-rfc8407bis" to="YANG-GUIDELINES"/>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8519.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8701.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6347.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9147.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8520.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9640.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8879.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4252.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml"/>

        <reference anchor="X690" target="https://www.itu.int/rec/T-REC-X.690-202102-I/en">
          <front>
            <title>Information technology - ASN.1 encoding Rules: Specification
          of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and
          Distinguished Encoding Rules (DER)</title>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date year="2021"/>
          </front>
          <seriesInfo name="ITU-T Recommendation" value="X.690"/>
        </reference>

      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7951.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8576.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8484.xml"/> 
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7925.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7366.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6066.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8472.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9325.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7301.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9052.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8613.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8447.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>

<!-- [I-D.ietf-tls-esni] IESG state: I-D Exists as of 09/05/24 -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-tls-esni.xml"/>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9462.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9463.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml"/>

<!-- [I-D.ietf-uta-tls13-iot-profile] IESG state: Expired as of 09/05/24 -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-uta-tls13-iot-profile.xml"/>

<!-- [I-D.ietf-netmod-rfc8407bis] IESG state: I-D Exists as of 09/05/24 -->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netmod-rfc8407bis.xml"/>


        <reference anchor="X501" target="https://www.itu.int/rec/T-REC-X.501-201910-I/en">
          <front>
            <title>Information Technology - Open Systems Interconnection - The
          Directory: Models</title>
            <author>
              <organization/>
            </author>
            <date month="October" year="2019"/>
          </front>
          <seriesInfo name="ITU-T Recommendation" value="X.501"/>
        </reference>

        <reference anchor="CLEAR-AS-MUD" target="https://arxiv.org/pdf/1804.04358.pdf">
          <front>
            <title>Clear as MUD: Generating, Validating and Applying IoT
          Behaviorial Profiles (Technical Report)</title>
            <author fullname="Ayyoob Hamza"/>
            <author fullname="Dinesha Ranathunga"/>
            <author fullname="H. Habibi Gharakheili"/>
            <author fullname="Matthew Roughan"/>
            <author fullname="Vijay Sivaraman"/>
            <date month="April" year="2018"/>
          </front>
          <refcontent>arXiv:1804.04358</refcontent>
          <seriesInfo name="DOI" value="10.48550/arXiv.1804.04358"/>
        </reference>

        <reference anchor="MALWARE-TLS" target="https://dl.acm.org/citation.cfm?id=3355601">
          <front>
            <title>TLS Beyond the Browser: Combining End Host and Network Data
          to Understand Application Behavior</title>
            <author fullname="Blake Anderson" initials="B." surname="Anderson">
              <organization>Cisco</organization>
            </author>
            <author fullname="David McGrew" initials="D." surname="McGrew">
              <organization>Cisco</organization>
            </author>
            <date month="October" year="2019"/>
          </front>
          <refcontent>IMC '19: Proceedings of the Internet Measurement Conference, pp. 379-392</refcontent>
          <seriesInfo name="DOI" value="10.1145/3355369.3355601"/>
        </reference>

        <reference anchor="CRYPTO-VULNERABILITY" target="https://securityboulevard.com/2020/01/exploiting-the-windows-cryptoapi-vulnerability/">
          <front>
            <title>Exploiting the Windows CryptoAPI Vulnerability</title>
            <author fullname="Ben Perez" initials="B." surname="Perez">
              <organization>Cisco</organization>
            </author>
            <date month="January" year="2020"/>
          </front>
        </reference>

        <reference anchor="MALWARE-DOH" target="https://www.zdnet.com/article/first-ever-malware-strain-spotted-abusing-new-doh-dns-over-https-protocol/">
          <front>
            <title>First-ever malware strain spotted abusing new DoH (DNS over
          HTTPS) protocol</title>
            <author fullname="Catalin Cimpanu" initials="C." surname="Cimpanu">
            </author>
            <date month="July" year="2019"/>
          </front>
          <refcontent>ZDNET</refcontent>
        </reference>

        <reference anchor="SLOWLORIS" target="https://en.wikipedia.org/w/index.php?title=Slowloris_(cyber_attack)&amp;oldid=1263305193">
          <front>
            <title>Slowloris (cyber attack)</title>
            <author><organization>Wikipedia</organization></author>
	    <date month="December" year="2024"/>
          </front>
        </reference>

        <reference anchor="EVE" target="https://secure.cisco.com/secure-firewall/docs/encrypted-visibility-engine">
          <front>
            <title>Encrypted Visibility Engine</title>
            <author fullname="" initials="" surname="">
              <organization>Cisco</organization>
            </author>
            <date month="" year=""/>
          </front>
          <refcontent>Cisco Secure Firewall documentation</refcontent>
        </reference>

      </references>
    </references>
    <section anchor="acknowledgments" numbered="false" toc="default">
    <name>Acknowledgments</name> <t>Thanks to <contact fullname="Flemming
    Andreasen"/>, <contact fullname="Shashank Jain"/>, <contact
    fullname="Michael Richardson"/>, <contact fullname="Piyush Joshi"/>,
    <contact fullname="Eliot Lear"/>, <contact fullname="Harsha Joshi"/>,
    <contact fullname="Qin Wu"/>, <contact fullname="Mohamed Boucadair"/>,
    <contact fullname="Ben Schwartz"/>, <contact fullname="Eric Rescorla"/>,
    <contact fullname="Panwei William"/>, <contact fullname="Nick Lamb"/>,
    <contact fullname="Tom Petch"/>, <contact fullname="Paul Wouters"/>,
    <contact fullname="Thomas Fossati"/>, and <contact fullname="Nick
    Harper"/> for the discussion and comments.</t> <t>Thanks to <contact
    fullname="Xufeng Liu"/> for YANGDOCTOR review. Thanks to <contact
    fullname="Linda Dunbar"/> for SECDIR review. Thanks to <contact
    fullname="Qin Wu"/> for OPSDIR review. Thanks to <contact fullname="R. Gieben"/> for DNSDIR review.</t> <t>Thanks to <contact fullname="Roman
    Danyliw"/>, <contact fullname="Orie Steele"/>, <contact fullname="Éric
    Vyncke"/>, <contact fullname="Mahesh Jethanandani"/>, <contact
    fullname="Murray Kucherawy"/>, <contact fullname="Zaheduzzaman Sarker"/>,
    and <contact fullname="Deb Cooley"/> for the IESG review.</t> 
</section>

    </back> </rfc>
